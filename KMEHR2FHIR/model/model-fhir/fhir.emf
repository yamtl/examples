@namespace(uri="http://hl7.org/fhir", prefix="")
package fhir;

import "http://www.eclipse.org/emf/2003/XMLType";

@GenModel(documentation="A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Account", kind="elementOnly")
class Account extends DomainResource {

	@GenModel(documentation="Unique identifier used to reference the account.  Might or might not be intended for human use (e.g. credit card number).")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Indicates whether the account is presently used/usable or not.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val AccountStatus[1] status;

	@GenModel(documentation="The BillingStatus tracks the lifecycle of the account through the billing process. It indicates how transactions are treated when they are allocated to the account.")
	@ExtendedMetaData(kind="element", name="billingStatus", namespace="##targetNamespace")
	!resolve val CodeableConcept billingStatus;

	@GenModel(documentation="Categorizes the account for reporting and searching purposes.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="Name used for the account when displaying it to humans in reports, etc.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="Identifies the entity which incurs the expenses. While the immediate recipients of services or goods might be entities related to the subject, the expenses were ultimately incurred by the subject of the Account.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference[*] subject;

	@GenModel(documentation="The date range of services associated with this account.")
	@ExtendedMetaData(kind="element", name="servicePeriod", namespace="##targetNamespace")
	!resolve val Period servicePeriod;

	@GenModel(documentation="The party(s) that are responsible for covering the payment of this account, and what order should they be applied to the account.")
	@ExtendedMetaData(kind="element", name="coverage", namespace="##targetNamespace")
	!resolve val AccountCoverage[*] coverage;

	@GenModel(documentation="Indicates the service area, hospital, department, etc. with responsibility for managing the Account.")
	@ExtendedMetaData(kind="element", name="owner", namespace="##targetNamespace")
	!resolve val Reference owner;

	@GenModel(documentation="Provides additional information about what the account tracks and how it is used.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The parties responsible for balancing the account if other payment options fall short.")
	@ExtendedMetaData(kind="element", name="guarantor", namespace="##targetNamespace")
	!resolve val AccountGuarantor[*] guarantor;

	@GenModel(documentation="When using an account for billing a specific Encounter the set of diagnoses that are relevant for billing are stored here on the account where they are able to be sequenced appropriately prior to processing to produce claim(s).")
	@ExtendedMetaData(kind="element", name="diagnosis", namespace="##targetNamespace")
	!resolve val AccountDiagnosis[*] diagnosis;

	@GenModel(documentation="When using an account for billing a specific Encounter the set of procedures that are relevant for billing are stored here on the account where they are able to be sequenced appropriately prior to processing to produce claim(s).")
	@ExtendedMetaData(kind="element", name="procedure", namespace="##targetNamespace")
	!resolve val AccountProcedure[*] procedure;

	@GenModel(documentation="Other associated accounts related to this account.")
	@ExtendedMetaData(kind="element", name="relatedAccount", namespace="##targetNamespace")
	!resolve val AccountRelatedAccount[*] relatedAccount;

	@GenModel(documentation="The default currency for the account.")
	@ExtendedMetaData(kind="element", name="currency", namespace="##targetNamespace")
	!resolve val CodeableConcept currency;

	@GenModel(documentation="The calculated account balances - these are calculated and processed by the finance system.

The balances with a `term` that is not current are usually generated/updated by an invoicing or similar process.")
	@ExtendedMetaData(kind="element", name="balance", namespace="##targetNamespace")
	!resolve val AccountBalance[*] balance;

	@GenModel(documentation="Time the balance amount was calculated.")
	@ExtendedMetaData(kind="element", name="calculatedAt", namespace="##targetNamespace")
	!resolve val Instant calculatedAt;
}

@GenModel(documentation="A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc.")
@ExtendedMetaData(name="Account.Balance", kind="elementOnly")
class AccountBalance extends BackboneElement {

	@GenModel(documentation="Who is expected to pay this part of the balance.")
	@ExtendedMetaData(kind="element", name="aggregate", namespace="##targetNamespace")
	!resolve val CodeableConcept aggregate;

	@GenModel(documentation="The term of the account balances - The balance value is the amount that was outstanding for this age.")
	@ExtendedMetaData(kind="element", name="term", namespace="##targetNamespace")
	!resolve val CodeableConcept term;

	@GenModel(documentation="The amount is only an estimated value - this is likely common for `current` term balances, but not with known terms (that were generated by a backend process).")
	@ExtendedMetaData(kind="element", name="estimate", namespace="##targetNamespace")
	!resolve val Boolean estimate;

	@GenModel(documentation="The actual balance value calculated for the age defined in the term property.")
	@ExtendedMetaData(kind="element", name="amount", namespace="##targetNamespace")
	!resolve val Money[1] amount;
}

@GenModel(documentation="A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc.")
@ExtendedMetaData(name="Account.Coverage", kind="elementOnly")
class AccountCoverage extends BackboneElement {

	@GenModel(documentation="The party(s) that contribute to payment (or part of) of the charges applied to this account (including self-pay).

A coverage may only be responsible for specific types of charges, and the sequence of the coverages in the account could be important when processing billing.")
	@ExtendedMetaData(kind="element", name="coverage", namespace="##targetNamespace")
	!resolve val Reference[1] coverage;

	@GenModel(documentation="The priority of the coverage in the context of this account.")
	@ExtendedMetaData(kind="element", name="priority", namespace="##targetNamespace")
	!resolve val PositiveInt priority;
}

@GenModel(documentation="A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc.")
@ExtendedMetaData(name="Account.Diagnosis", kind="elementOnly")
class AccountDiagnosis extends BackboneElement {

	@GenModel(documentation="Ranking of the diagnosis (for each type).")
	@ExtendedMetaData(kind="element", name="sequence", namespace="##targetNamespace")
	!resolve val PositiveInt sequence;

	@GenModel(documentation="The diagnosis relevant to the account.")
	@ExtendedMetaData(kind="element", name="condition", namespace="##targetNamespace")
	!resolve val CodeableReference[1] condition;

	@GenModel(documentation="Ranking of the diagnosis (for each type).")
	@ExtendedMetaData(kind="element", name="dateOfDiagnosis", namespace="##targetNamespace")
	!resolve val DateTime dateOfDiagnosis;

	@GenModel(documentation="Type that this diagnosis has relevant to the account (e.g. admission, billing, discharge …).")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] type;

	@GenModel(documentation="Was the Diagnosis present on Admission in the related Encounter.")
	@ExtendedMetaData(kind="element", name="onAdmission", namespace="##targetNamespace")
	!resolve val Boolean onAdmission;

	@GenModel(documentation="The package code can be used to group diagnoses that may be priced or delivered as a single product. Such as DRGs.")
	@ExtendedMetaData(kind="element", name="packageCode", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] packageCode;
}

@GenModel(documentation="A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc.")
@ExtendedMetaData(name="Account.Guarantor", kind="elementOnly")
class AccountGuarantor extends BackboneElement {

	@GenModel(documentation="The entity who is responsible.")
	@ExtendedMetaData(kind="element", name="party", namespace="##targetNamespace")
	!resolve val Reference[1] party;

	@GenModel(documentation="A guarantor may be placed on credit hold or otherwise have their role temporarily suspended.")
	@ExtendedMetaData(kind="element", name="onHold", namespace="##targetNamespace")
	!resolve val Boolean onHold;

	@GenModel(documentation="The timeframe during which the guarantor accepts responsibility for the account.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;
}

@GenModel(documentation="A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc.")
@ExtendedMetaData(name="Account.Procedure", kind="elementOnly")
class AccountProcedure extends BackboneElement {

	@GenModel(documentation="Ranking of the procedure (for each type).")
	@ExtendedMetaData(kind="element", name="sequence", namespace="##targetNamespace")
	!resolve val PositiveInt sequence;

	@GenModel(documentation="The procedure relevant to the account.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableReference[1] code;

	@GenModel(documentation="Date of the procedure when using a coded procedure. If using a reference to a procedure, then the date on the procedure should be used.")
	@ExtendedMetaData(kind="element", name="dateOfService", namespace="##targetNamespace")
	!resolve val DateTime dateOfService;

	@GenModel(documentation="How this procedure value should be used in charging the account.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] type;

	@GenModel(documentation="The package code can be used to group procedures that may be priced or delivered as a single product. Such as DRGs.")
	@ExtendedMetaData(kind="element", name="packageCode", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] packageCode;

	@GenModel(documentation="Any devices that were associated with the procedure relevant to the account.")
	@ExtendedMetaData(kind="element", name="device", namespace="##targetNamespace")
	!resolve val Reference[*] device;
}

@GenModel(documentation="A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc.")
@ExtendedMetaData(name="Account.RelatedAccount", kind="elementOnly")
class AccountRelatedAccount extends BackboneElement {

	@GenModel(documentation="Relationship of the associated Account.")
	@ExtendedMetaData(kind="element", name="relationship", namespace="##targetNamespace")
	!resolve val CodeableConcept relationship;

	@GenModel(documentation="Reference to an associated Account.")
	@ExtendedMetaData(kind="element", name="account", namespace="##targetNamespace")
	!resolve val Reference[1] account;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="AccountStatus", kind="elementOnly")
class AccountStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr AccountStatusEnum value;
}

@ExtendedMetaData(name="AccountStatusEnum")
enum AccountStatusEnum {

	@GenModel(documentation="Active")
	active = 0;

	@GenModel(documentation="Inactive")
	inactive = 1;

	@GenModel(documentation="Entered in error")
	enteredInError = 2;

	@GenModel(documentation="On Hold")
	onHold = 3;

	@GenModel(documentation="Unknown")
	unknown = 4;
}

@ExtendedMetaData(name="AccountStatusEnum:Object", baseType="AccountStatusEnum")
datatype AccountStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ActionCardinalityBehavior", kind="elementOnly")
class ActionCardinalityBehavior extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ActionCardinalityBehaviorEnum value;
}

@ExtendedMetaData(name="ActionCardinalityBehaviorEnum")
enum ActionCardinalityBehaviorEnum {

	@GenModel(documentation="Single")
	single = 0;

	@GenModel(documentation="Multiple")
	multiple = 1;
}

@ExtendedMetaData(name="ActionCardinalityBehaviorEnum:Object", baseType="ActionCardinalityBehaviorEnum")
datatype ActionCardinalityBehaviorEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ActionConditionKind", kind="elementOnly")
class ActionConditionKind extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ActionConditionKindEnum value;
}

@ExtendedMetaData(name="ActionConditionKindEnum")
enum ActionConditionKindEnum {

	@GenModel(documentation="Applicability")
	applicability = 0;

	@GenModel(documentation="Start")
	start = 1;

	@GenModel(documentation="Stop")
	stop = 2;
}

@ExtendedMetaData(name="ActionConditionKindEnum:Object", baseType="ActionConditionKindEnum")
datatype ActionConditionKindEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ActionGroupingBehavior", kind="elementOnly")
class ActionGroupingBehavior extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ActionGroupingBehaviorEnum value;
}

@ExtendedMetaData(name="ActionGroupingBehaviorEnum")
enum ActionGroupingBehaviorEnum {

	@GenModel(documentation="Visual Group")
	visualGroup = 0;

	@GenModel(documentation="Logical Group")
	logicalGroup = 1;

	@GenModel(documentation="Sentence Group")
	sentenceGroup = 2;
}

@ExtendedMetaData(name="ActionGroupingBehaviorEnum:Object", baseType="ActionGroupingBehaviorEnum")
datatype ActionGroupingBehaviorEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ActionParticipantType", kind="elementOnly")
class ActionParticipantType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ActionParticipantTypeEnum value;
}

@ExtendedMetaData(name="ActionParticipantTypeEnum")
enum ActionParticipantTypeEnum {

	@GenModel(documentation="CareTeam")
	careteam = 0;

	@GenModel(documentation="Device")
	device = 1;

	@GenModel(documentation="Group")
	group = 2;

	@GenModel(documentation="HealthcareService")
	healthcareservice = 3;

	@GenModel(documentation="Location")
	location = 4;

	@GenModel(documentation="Organization")
	organization = 5;

	@GenModel(documentation="Patient")
	patient = 6;

	@GenModel(documentation="Practitioner")
	practitioner = 7;

	@GenModel(documentation="PractitionerRole")
	practitionerrole = 8;

	@GenModel(documentation="RelatedPerson")
	relatedperson = 9;
}

@ExtendedMetaData(name="ActionParticipantTypeEnum:Object", baseType="ActionParticipantTypeEnum")
datatype ActionParticipantTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ActionPrecheckBehavior", kind="elementOnly")
class ActionPrecheckBehavior extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ActionPrecheckBehaviorEnum value;
}

@ExtendedMetaData(name="ActionPrecheckBehaviorEnum")
enum ActionPrecheckBehaviorEnum {

	@GenModel(documentation="Yes")
	yes = 0;

	@GenModel(documentation="No")
	no = 1;
}

@ExtendedMetaData(name="ActionPrecheckBehaviorEnum:Object", baseType="ActionPrecheckBehaviorEnum")
datatype ActionPrecheckBehaviorEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ActionRelationshipType", kind="elementOnly")
class ActionRelationshipType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ActionRelationshipTypeEnum value;
}

@ExtendedMetaData(name="ActionRelationshipTypeEnum")
enum ActionRelationshipTypeEnum {

	@GenModel(documentation="Before")
	before = 0;

	@GenModel(documentation="Before Start")
	beforeStart = 1;

	@GenModel(documentation="Before End")
	beforeEnd = 2;

	@GenModel(documentation="Concurrent")
	concurrent = 3;

	@GenModel(documentation="Concurrent With Start")
	concurrentWithStart = 4;

	@GenModel(documentation="Concurrent With End")
	concurrentWithEnd = 5;

	@GenModel(documentation="After")
	after = 6;

	@GenModel(documentation="After Start")
	afterStart = 7;

	@GenModel(documentation="After End")
	afterEnd = 8;
}

@ExtendedMetaData(name="ActionRelationshipTypeEnum:Object", baseType="ActionRelationshipTypeEnum")
datatype ActionRelationshipTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ActionRequiredBehavior", kind="elementOnly")
class ActionRequiredBehavior extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ActionRequiredBehaviorEnum value;
}

@ExtendedMetaData(name="ActionRequiredBehaviorEnum")
enum ActionRequiredBehaviorEnum {

	@GenModel(documentation="Must")
	must = 0;

	@GenModel(documentation="Could")
	could = 1;

	@GenModel(documentation="Must Unless Documented")
	mustUnlessDocumented = 2;
}

@ExtendedMetaData(name="ActionRequiredBehaviorEnum:Object", baseType="ActionRequiredBehaviorEnum")
datatype ActionRequiredBehaviorEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ActionSelectionBehavior", kind="elementOnly")
class ActionSelectionBehavior extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ActionSelectionBehaviorEnum value;
}

@ExtendedMetaData(name="ActionSelectionBehaviorEnum")
enum ActionSelectionBehaviorEnum {

	@GenModel(documentation="Any")
	any = 0;

	@GenModel(documentation="All")
	all = 1;

	@GenModel(documentation="All Or None")
	allOrNone = 2;

	@GenModel(documentation="Exactly One")
	exactlyOne = 3;

	@GenModel(documentation="At Most One")
	atMostOne = 4;

	@GenModel(documentation="One Or More")
	oneOrMore = 5;
}

@ExtendedMetaData(name="ActionSelectionBehaviorEnum:Object", baseType="ActionSelectionBehaviorEnum")
datatype ActionSelectionBehaviorEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="This resource allows for the definition of some activity to be performed, independent of a particular patient, practitioner, or other performance context.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ActivityDefinition", kind="elementOnly")
class ActivityDefinition extends MetadataResource {

	@GenModel(documentation="An absolute URI that is used to identify this activity definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this activity definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the activity definition is stored on different servers.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri url;

	@GenModel(documentation="A formal identifier that is used to identify this activity definition when it is represented in other formats, or referenced in a specification, model, design or an instance.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The identifier that is used to identify this version of the activity definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the activity definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active assets.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@ExtendedMetaData(kind="element", name="versionAlgorithmString", namespace="##targetNamespace")
	!resolve val String versionAlgorithmString;

	@ExtendedMetaData(kind="element", name="versionAlgorithmCoding", namespace="##targetNamespace")
	!resolve val Coding versionAlgorithmCoding;

	@GenModel(documentation="A natural language name identifying the activity definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="A short, descriptive, user-friendly title for the activity definition.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="An explanatory or alternate title for the activity definition giving additional information about its content.")
	@ExtendedMetaData(kind="element", name="subtitle", namespace="##targetNamespace")
	!resolve val String subtitle;

	@GenModel(documentation="The status of this activity definition. Enables tracking the life-cycle of the content.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="A Boolean value to indicate that this activity definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.")
	@ExtendedMetaData(kind="element", name="experimental", namespace="##targetNamespace")
	!resolve val Boolean experimental;

	@ExtendedMetaData(kind="element", name="subjectCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept subjectCodeableConcept;

	@ExtendedMetaData(kind="element", name="subjectReference", namespace="##targetNamespace")
	!resolve val Reference subjectReference;

	@ExtendedMetaData(kind="element", name="subjectCanonical", namespace="##targetNamespace")
	!resolve val Canonical subjectCanonical;

	@GenModel(documentation="The date  (and optionally time) when the activity definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the activity definition changes.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="The name of the organization or individual responsible for the release and ongoing maintenance of the activity definition.")
	@ExtendedMetaData(kind="element", name="publisher", namespace="##targetNamespace")
	!resolve val String publisher;

	@GenModel(documentation="Contact details to assist a user in finding and communicating with the publisher.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactDetail[*] contact;

	@GenModel(documentation="A free text natural language description of the activity definition from a consumer's perspective.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate activity definition instances.")
	@ExtendedMetaData(kind="element", name="useContext", namespace="##targetNamespace")
	!resolve val UsageContext[*] useContext;

	@GenModel(documentation="A legal or geographic region in which the activity definition is intended to be used.")
	@ExtendedMetaData(kind="element", name="jurisdiction", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] jurisdiction;

	@GenModel(documentation="Explanation of why this activity definition is needed and why it has been designed as it has.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val Markdown purpose;

	@GenModel(documentation="A detailed description of how the activity definition is used from a clinical perspective.")
	@ExtendedMetaData(kind="element", name="usage", namespace="##targetNamespace")
	!resolve val Markdown usage;

	@GenModel(documentation="A copyright statement relating to the activity definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the activity definition.")
	@ExtendedMetaData(kind="element", name="copyright", namespace="##targetNamespace")
	!resolve val Markdown copyright;

	@GenModel(documentation="A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').")
	@ExtendedMetaData(kind="element", name="copyrightLabel", namespace="##targetNamespace")
	!resolve val String copyrightLabel;

	@GenModel(documentation="The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.")
	@ExtendedMetaData(kind="element", name="approvalDate", namespace="##targetNamespace")
	!resolve val Date approvalDate;

	@GenModel(documentation="The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.")
	@ExtendedMetaData(kind="element", name="lastReviewDate", namespace="##targetNamespace")
	!resolve val Date lastReviewDate;

	@GenModel(documentation="The period during which the activity definition content was or is planned to be in active use.")
	@ExtendedMetaData(kind="element", name="effectivePeriod", namespace="##targetNamespace")
	!resolve val Period effectivePeriod;

	@GenModel(documentation="Descriptive topics related to the content of the activity. Topics provide a high-level categorization of the activity that can be useful for filtering and searching.")
	@ExtendedMetaData(kind="element", name="topic", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] topic;

	@GenModel(documentation="An individiual or organization primarily involved in the creation and maintenance of the content.")
	@ExtendedMetaData(kind="element", name="author", namespace="##targetNamespace")
	!resolve val ContactDetail[*] author;

	@GenModel(documentation="An individual or organization primarily responsible for internal coherence of the content.")
	@ExtendedMetaData(kind="element", name="editor", namespace="##targetNamespace")
	!resolve val ContactDetail[*] editor;

	@GenModel(documentation="An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the content.")
	@ExtendedMetaData(kind="element", name="reviewer", namespace="##targetNamespace")
	!resolve val ContactDetail[*] reviewer;

	@GenModel(documentation="An individual or organization asserted by the publisher to be responsible for officially endorsing the content for use in some setting.")
	@ExtendedMetaData(kind="element", name="endorser", namespace="##targetNamespace")
	!resolve val ContactDetail[*] endorser;

	@GenModel(documentation="Related artifacts such as additional documentation, justification, or bibliographic references.")
	@ExtendedMetaData(kind="element", name="relatedArtifact", namespace="##targetNamespace")
	!resolve val RelatedArtifact[*] relatedArtifact;

	@GenModel(documentation="A reference to a Library resource containing any formal logic used by the activity definition.")
	@ExtendedMetaData(kind="element", name="library", namespace="##targetNamespace")
	!resolve val Canonical[*] library;

	@GenModel(documentation="A description of the kind of resource the activity definition is representing. For example, a MedicationRequest, a ServiceRequest, or a CommunicationRequest.")
	@ExtendedMetaData(kind="element", name="kind", namespace="##targetNamespace")
	!resolve val RequestResourceTypes kind;

	@GenModel(documentation="A profile to which the target of the activity definition is expected to conform.")
	@ExtendedMetaData(kind="element", name="profile", namespace="##targetNamespace")
	!resolve val Canonical profile;

	@GenModel(documentation="Detailed description of the type of activity; e.g. What lab test, what procedure, what kind of encounter.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@GenModel(documentation="Indicates the level of authority/intentionality associated with the activity and where the request should fit into the workflow chain.")
	@ExtendedMetaData(kind="element", name="intent", namespace="##targetNamespace")
	!resolve val RequestIntent intent;

	@GenModel(documentation="Indicates how quickly the activity  should be addressed with respect to other requests.")
	@ExtendedMetaData(kind="element", name="priority", namespace="##targetNamespace")
	!resolve val RequestPriority priority;

	@GenModel(documentation="Set this to true if the definition is to indicate that a particular activity should NOT be performed. If true, this element should be interpreted to reinforce a negative coding. For example NPO as a code with a doNotPerform of true would still indicate to NOT perform the action.")
	@ExtendedMetaData(kind="element", name="doNotPerform", namespace="##targetNamespace")
	!resolve val Boolean doNotPerform;

	@ExtendedMetaData(kind="element", name="timingTiming", namespace="##targetNamespace")
	!resolve val Timing timingTiming;

	@ExtendedMetaData(kind="element", name="timingAge", namespace="##targetNamespace")
	!resolve val Age timingAge;

	@ExtendedMetaData(kind="element", name="timingRange", namespace="##targetNamespace")
	!resolve val Range timingRange;

	@ExtendedMetaData(kind="element", name="timingDuration", namespace="##targetNamespace")
	!resolve val Duration timingDuration;

	@ExtendedMetaData(kind="element", name="asNeededBoolean", namespace="##targetNamespace")
	!resolve val Boolean asNeededBoolean;

	@ExtendedMetaData(kind="element", name="asNeededCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept asNeededCodeableConcept;

	@GenModel(documentation="Identifies the facility where the activity will occur; e.g. home, hospital, specific clinic, etc.")
	@ExtendedMetaData(kind="element", name="location", namespace="##targetNamespace")
	!resolve val CodeableReference location;

	@GenModel(documentation="Indicates who should participate in performing the action described.")
	@ExtendedMetaData(kind="element", name="participant", namespace="##targetNamespace")
	!resolve val ActivityDefinitionParticipant[*] participant;

	@ExtendedMetaData(kind="element", name="productReference", namespace="##targetNamespace")
	!resolve val Reference productReference;

	@ExtendedMetaData(kind="element", name="productCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept productCodeableConcept;

	@GenModel(documentation="Identifies the quantity expected to be consumed at once (per dose, per meal, etc.).")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Quantity quantity;

	@GenModel(documentation="Provides detailed dosage instructions in the same way that they are described for MedicationRequest resources.")
	@ExtendedMetaData(kind="element", name="dosage", namespace="##targetNamespace")
	!resolve val Dosage[*] dosage;

	@GenModel(documentation="Indicates the sites on the subject's body where the procedure should be performed (I.e. the target sites).")
	@ExtendedMetaData(kind="element", name="bodySite", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] bodySite;

	@GenModel(documentation="Defines specimen requirements for the action to be performed, such as required specimens for a lab test.")
	@ExtendedMetaData(kind="element", name="specimenRequirement", namespace="##targetNamespace")
	!resolve val Canonical[*] specimenRequirement;

	@GenModel(documentation="Defines observation requirements for the action to be performed, such as body weight or surface area.")
	@ExtendedMetaData(kind="element", name="observationRequirement", namespace="##targetNamespace")
	!resolve val Canonical[*] observationRequirement;

	@GenModel(documentation="Defines the observations that are expected to be produced by the action.")
	@ExtendedMetaData(kind="element", name="observationResultRequirement", namespace="##targetNamespace")
	!resolve val Canonical[*] observationResultRequirement;

	@GenModel(documentation="A reference to a StructureMap resource that defines a transform that can be executed to produce the intent resource using the ActivityDefinition instance as the input.")
	@ExtendedMetaData(kind="element", name="transform", namespace="##targetNamespace")
	!resolve val Canonical transform;

	@GenModel(documentation="Dynamic values that will be evaluated to produce values for elements of the resulting resource. For example, if the dosage of a medication must be computed based on the patient's weight, a dynamic value would be used to specify an expression that calculated the weight, and the path on the request resource that would contain the result.")
	@ExtendedMetaData(kind="element", name="dynamicValue", namespace="##targetNamespace")
	!resolve val ActivityDefinitionDynamicValue[*] dynamicValue;
}

@GenModel(documentation="This resource allows for the definition of some activity to be performed, independent of a particular patient, practitioner, or other performance context.")
@ExtendedMetaData(name="ActivityDefinition.DynamicValue", kind="elementOnly")
class ActivityDefinitionDynamicValue extends BackboneElement {

	@GenModel(documentation="The path to the element to be customized. This is the path on the resource that will hold the result of the calculation defined by the expression. The specified path SHALL be a FHIRPath resolvable on the specified target type of the ActivityDefinition, and SHALL consist only of identifiers, constant indexers, and a restricted subset of functions. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).")
	@ExtendedMetaData(kind="element", name="path", namespace="##targetNamespace")
	!resolve val String[1] path;

	@GenModel(documentation="An expression specifying the value of the customized element.")
	@ExtendedMetaData(kind="element", name="expression", namespace="##targetNamespace")
	!resolve val Expression[1] expression;
}

@GenModel(documentation="This resource allows for the definition of some activity to be performed, independent of a particular patient, practitioner, or other performance context.")
@ExtendedMetaData(name="ActivityDefinition.Participant", kind="elementOnly")
class ActivityDefinitionParticipant extends BackboneElement {

	@GenModel(documentation="The type of participant in the action.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val ActionParticipantType type;

	@GenModel(documentation="The type of participant in the action.")
	@ExtendedMetaData(kind="element", name="typeCanonical", namespace="##targetNamespace")
	!resolve val Canonical typeCanonical;

	@GenModel(documentation="The type of participant in the action.")
	@ExtendedMetaData(kind="element", name="typeReference", namespace="##targetNamespace")
	!resolve val Reference typeReference;

	@GenModel(documentation="The role the participant should play in performing the described action.")
	@ExtendedMetaData(kind="element", name="role", namespace="##targetNamespace")
	!resolve val CodeableConcept role;

	@GenModel(documentation="Indicates how the actor will be involved in the action - author, reviewer, witness, etc.")
	@ExtendedMetaData(kind="element", name="function", namespace="##targetNamespace")
	!resolve val CodeableConcept function;
}

@GenModel(documentation="Describes an actor - a human or an application that plays a role in data exchange, and that may have obligations associated with the role the actor plays.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ActorDefinition", kind="elementOnly")
class ActorDefinition extends CanonicalResource {

	@GenModel(documentation="An absolute URI that is used to identify this actor definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this actor definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the actor definition is stored on different servers.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri url;

	@GenModel(documentation="A formal identifier that is used to identify this actor definition when it is represented in other formats, or referenced in a specification, model, design or an instance.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The identifier that is used to identify this version of the actor definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the actor definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@ExtendedMetaData(kind="element", name="versionAlgorithmString", namespace="##targetNamespace")
	!resolve val String versionAlgorithmString;

	@ExtendedMetaData(kind="element", name="versionAlgorithmCoding", namespace="##targetNamespace")
	!resolve val Coding versionAlgorithmCoding;

	@GenModel(documentation="A natural language name identifying the actor definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="A short, descriptive, user-friendly title for the actor definition.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="The status of this actor definition. Enables tracking the life-cycle of the content.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="A Boolean value to indicate that this actor definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.")
	@ExtendedMetaData(kind="element", name="experimental", namespace="##targetNamespace")
	!resolve val Boolean experimental;

	@GenModel(documentation="The date  (and optionally time) when the actor definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the actor definition changes.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="The name of the organization or individual responsible for the release and ongoing maintenance of the actor definition.")
	@ExtendedMetaData(kind="element", name="publisher", namespace="##targetNamespace")
	!resolve val String publisher;

	@GenModel(documentation="Contact details to assist a user in finding and communicating with the publisher.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactDetail[*] contact;

	@GenModel(documentation="A free text natural language description of the actor.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate actor definition instances.")
	@ExtendedMetaData(kind="element", name="useContext", namespace="##targetNamespace")
	!resolve val UsageContext[*] useContext;

	@GenModel(documentation="A legal or geographic region in which the actor definition is intended to be used.")
	@ExtendedMetaData(kind="element", name="jurisdiction", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] jurisdiction;

	@GenModel(documentation="Explanation of why this actor definition is needed and why it has been designed as it has.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val Markdown purpose;

	@GenModel(documentation="A copyright statement relating to the actor definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the actor definition.")
	@ExtendedMetaData(kind="element", name="copyright", namespace="##targetNamespace")
	!resolve val Markdown copyright;

	@GenModel(documentation="A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').")
	@ExtendedMetaData(kind="element", name="copyrightLabel", namespace="##targetNamespace")
	!resolve val String copyrightLabel;

	@GenModel(documentation="Whether the actor represents a human or an appliction.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val ExampleScenarioActorType[1] type;

	@GenModel(documentation="Documentation about the functionality of the actor.")
	@ExtendedMetaData(kind="element", name="documentation", namespace="##targetNamespace")
	!resolve val Markdown documentation;

	@GenModel(documentation="A reference to additional documentation about the actor, but description and documentation.")
	@ExtendedMetaData(kind="element", name="reference", namespace="##targetNamespace")
	!resolve val Url[*] reference;

	@GenModel(documentation="The capability statement for the actor (if the concept is applicable).")
	@ExtendedMetaData(kind="element", name="capabilities", namespace="##targetNamespace")
	!resolve val Canonical capabilities;

	@GenModel(documentation="A url that identifies the definition of this actor in another IG (which IG must be listed in the dependencies). This actor inherits all the obligations etc. as defined in the other IG.")
	@ExtendedMetaData(kind="element", name="derivedFrom", namespace="##targetNamespace")
	!resolve val Canonical[*] derivedFrom;
}

@GenModel(documentation="An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.
The ISO21090-codedString may be used to provide a coded representation of the contents of strings in an Address.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="Address", kind="elementOnly")
class Address extends DataType {

	@GenModel(documentation="The purpose of this address.")
	@ExtendedMetaData(kind="element", name="use", namespace="##targetNamespace")
	!resolve val AddressUse use;

	@GenModel(documentation="Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val AddressType type;

	@GenModel(documentation="Specifies the entire address as it should be displayed e.g. on a postal label. This may be provided instead of or as well as the specific parts.")
	@ExtendedMetaData(kind="element", name="text", namespace="##targetNamespace")
	!resolve val String text;

	@GenModel(documentation="This component contains the house number, apartment number, street name, street direction,  P.O. Box number, delivery hints, and similar address information.")
	@ExtendedMetaData(kind="element", name="line", namespace="##targetNamespace")
	!resolve val String[*] line;

	@GenModel(documentation="The name of the city, town, suburb, village or other community or delivery center.")
	@ExtendedMetaData(kind="element", name="city", namespace="##targetNamespace")
	!resolve val String city;

	@GenModel(documentation="The name of the administrative area (county).")
	@ExtendedMetaData(kind="element", name="district", namespace="##targetNamespace")
	!resolve val String district;

	@GenModel(documentation="Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (e.g. US 2 letter state codes).")
	@ExtendedMetaData(kind="element", name="state", namespace="##targetNamespace")
	!resolve val String state;

	@GenModel(documentation="A postal code designating a region defined by the postal service.")
	@ExtendedMetaData(kind="element", name="postalCode", namespace="##targetNamespace")
	!resolve val String postalCode;

	@GenModel(documentation="Country - a nation as commonly understood or generally accepted.")
	@ExtendedMetaData(kind="element", name="country", namespace="##targetNamespace")
	!resolve val String country;

	@GenModel(documentation="Time period when address was/is in use.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;
}

@GenModel(documentation="The type of an address (physical / postal).
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="AddressType", kind="elementOnly")
class AddressType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr AddressTypeEnum value;
}

@ExtendedMetaData(name="AddressTypeEnum")
enum AddressTypeEnum {

	@GenModel(documentation="Postal")
	postal = 0;

	@GenModel(documentation="Physical")
	physical = 1;

	@GenModel(documentation="Postal & Physical")
	both = 2;
}

@ExtendedMetaData(name="AddressTypeEnum:Object", baseType="AddressTypeEnum")
datatype AddressTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="The use of an address.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="AddressUse", kind="elementOnly")
class AddressUse extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr AddressUseEnum value;
}

@ExtendedMetaData(name="AddressUseEnum")
enum AddressUseEnum {

	@GenModel(documentation="Home")
	home = 0;

	@GenModel(documentation="Work")
	work = 1;

	@GenModel(documentation="Temporary")
	temp = 2;

	@GenModel(documentation="Old / Incorrect")
	old = 3;

	@GenModel(documentation="Billing")
	billing = 4;
}

@ExtendedMetaData(name="AddressUseEnum:Object", baseType="AddressUseEnum")
datatype AddressUseEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A medicinal product in the final form which is suitable for administering to a patient (after any mixing of multiple components, dissolution etc. has been performed).
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="AdministrableProductDefinition", kind="elementOnly")
class AdministrableProductDefinition extends DomainResource {

	@GenModel(documentation="An identifier for the administrable product.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The status of this administrable product. Enables tracking the life-cycle of the content.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="References a product from which one or more of the constituent parts of that product can be prepared and used as described by this administrable product.  If this administrable product describes the administration of a crushed tablet, the 'formOf' would be the product representing a distribution containing tablets and possibly also a cream.  This is distinct from the 'producedFrom' which refers to the specific components of the product that are used in this preparation, rather than the product as a whole.")
	@ExtendedMetaData(kind="element", name="formOf", namespace="##targetNamespace")
	!resolve val Reference[*] formOf;

	@GenModel(documentation="The dose form of the final product after necessary reconstitution or processing. Contrasts to the manufactured dose form (see ManufacturedItemDefinition). If the manufactured form was 'powder for solution for injection', the administrable dose form could be 'solution for injection' (once mixed with another item having manufactured form 'solvent for solution for injection').")
	@ExtendedMetaData(kind="element", name="administrableDoseForm", namespace="##targetNamespace")
	!resolve val CodeableConcept administrableDoseForm;

	@GenModel(documentation="The presentation type in which this item is given to a patient. e.g. for a spray - 'puff' (as in 'contains 100 mcg per puff'), or for a liquid - 'vial' (as in 'contains 5 ml per vial').")
	@ExtendedMetaData(kind="element", name="unitOfPresentation", namespace="##targetNamespace")
	!resolve val CodeableConcept unitOfPresentation;

	@GenModel(documentation="Indicates the specific manufactured items that are part of the 'formOf' product that are used in the preparation of this specific administrable form.  In some cases, an administrable form might use all of the items from the overall product (or there might only be one item), while in other cases, an administrable form might use only a subset of the items available in the overall product.  For example, an administrable form might involve combining a liquid and a powder available as part of an overall product, but not involve applying the also supplied cream.")
	@ExtendedMetaData(kind="element", name="producedFrom", namespace="##targetNamespace")
	!resolve val Reference[*] producedFrom;

	@GenModel(documentation="The ingredients of this administrable medicinal product. This is only needed if the ingredients are not specified either using ManufacturedItemDefiniton (via AdministrableProductDefinition.producedFrom) to state which component items are used to make this, or using by incoming references from the Ingredient resource, to state in detail which substances exist within this. This element allows a basic coded ingredient to be used.")
	@ExtendedMetaData(kind="element", name="ingredient", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] ingredient;

	@GenModel(documentation="A device that is integral to the medicinal product, in effect being considered as an \"ingredient\" of the medicinal product. This is not intended for devices that are just co-packaged.")
	@ExtendedMetaData(kind="element", name="device", namespace="##targetNamespace")
	!resolve val Reference device;

	@GenModel(documentation="A general description of the product, when in its final form, suitable for administration e.g. effervescent blue liquid, to be swallowed. Intended to be used when the other structured properties of this resource are insufficient or cannot be supported. It is not intended to duplicate information already carried elswehere.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="Characteristics e.g. a product's onset of action.")
	@ExtendedMetaData(kind="element", name="property", namespace="##targetNamespace")
	!resolve val AdministrableProductDefinitionProperty[*] property;

	@GenModel(documentation="The path by which the product is taken into or makes contact with the body. In some regions this is referred to as the licenced or approved route. RouteOfAdministration cannot be used when the 'formOf' product already uses MedicinalProductDefinition.route (and vice versa).")
	@ExtendedMetaData(kind="element", name="routeOfAdministration", namespace="##targetNamespace")
	!resolve val AdministrableProductDefinitionRouteOfAdministration[+] routeOfAdministration;
}

@GenModel(documentation="A medicinal product in the final form which is suitable for administering to a patient (after any mixing of multiple components, dissolution etc. has been performed).")
@ExtendedMetaData(name="AdministrableProductDefinition.Property", kind="elementOnly")
class AdministrableProductDefinitionProperty extends BackboneElement {

	@GenModel(documentation="A code expressing the type of characteristic.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@ExtendedMetaData(kind="element", name="valueCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept valueCodeableConcept;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueDate", namespace="##targetNamespace")
	!resolve val Date valueDate;

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;

	@ExtendedMetaData(kind="element", name="valueMarkdown", namespace="##targetNamespace")
	!resolve val Markdown valueMarkdown;

	@ExtendedMetaData(kind="element", name="valueAttachment", namespace="##targetNamespace")
	!resolve val Attachment valueAttachment;

	@ExtendedMetaData(kind="element", name="valueReference", namespace="##targetNamespace")
	!resolve val Reference valueReference;

	@GenModel(documentation="The status of characteristic e.g. assigned or pending.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val CodeableConcept status;
}

@GenModel(documentation="A medicinal product in the final form which is suitable for administering to a patient (after any mixing of multiple components, dissolution etc. has been performed).")
@ExtendedMetaData(name="AdministrableProductDefinition.RouteOfAdministration", kind="elementOnly")
class AdministrableProductDefinitionRouteOfAdministration extends BackboneElement {

	@GenModel(documentation="Coded expression for the route.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] code;

	@GenModel(documentation="The first dose (dose quantity) administered can be specified for the product, using a numerical value and its unit of measurement.")
	@ExtendedMetaData(kind="element", name="firstDose", namespace="##targetNamespace")
	!resolve val Quantity firstDose;

	@GenModel(documentation="The maximum single dose that can be administered, specified using a numerical value and its unit of measurement.")
	@ExtendedMetaData(kind="element", name="maxSingleDose", namespace="##targetNamespace")
	!resolve val Quantity maxSingleDose;

	@GenModel(documentation="The maximum dose per day (maximum dose quantity to be administered in any one 24-h period) that can be administered.")
	@ExtendedMetaData(kind="element", name="maxDosePerDay", namespace="##targetNamespace")
	!resolve val Quantity maxDosePerDay;

	@GenModel(documentation="The maximum dose per treatment period that can be administered.")
	@ExtendedMetaData(kind="element", name="maxDosePerTreatmentPeriod", namespace="##targetNamespace")
	!resolve val Ratio maxDosePerTreatmentPeriod;

	@GenModel(documentation="The maximum treatment period during which the product can be administered.")
	@ExtendedMetaData(kind="element", name="maxTreatmentPeriod", namespace="##targetNamespace")
	!resolve val Duration maxTreatmentPeriod;

	@GenModel(documentation="A species for which this route applies.")
	@ExtendedMetaData(kind="element", name="targetSpecies", namespace="##targetNamespace")
	!resolve val AdministrableProductDefinitionTargetSpecies[*] targetSpecies;
}

@GenModel(documentation="A medicinal product in the final form which is suitable for administering to a patient (after any mixing of multiple components, dissolution etc. has been performed).")
@ExtendedMetaData(name="AdministrableProductDefinition.TargetSpecies", kind="elementOnly")
class AdministrableProductDefinitionTargetSpecies extends BackboneElement {

	@GenModel(documentation="Coded expression for the species.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] code;

	@GenModel(documentation="A species specific time during which consumption of animal product is not appropriate.")
	@ExtendedMetaData(kind="element", name="withdrawalPeriod", namespace="##targetNamespace")
	!resolve val AdministrableProductDefinitionWithdrawalPeriod[*] withdrawalPeriod;
}

@GenModel(documentation="A medicinal product in the final form which is suitable for administering to a patient (after any mixing of multiple components, dissolution etc. has been performed).")
@ExtendedMetaData(name="AdministrableProductDefinition.WithdrawalPeriod", kind="elementOnly")
class AdministrableProductDefinitionWithdrawalPeriod extends BackboneElement {

	@GenModel(documentation="Coded expression for the type of tissue for which the withdrawal period applies, e.g. meat, milk.")
	@ExtendedMetaData(kind="element", name="tissue", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] tissue;

	@GenModel(documentation="A value for the time.")
	@ExtendedMetaData(kind="element", name="value", namespace="##targetNamespace")
	!resolve val Quantity[1] value;

	@GenModel(documentation="Extra information about the withdrawal period.")
	@ExtendedMetaData(kind="element", name="supportingInformation", namespace="##targetNamespace")
	!resolve val String supportingInformation;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="AdministrativeGender", kind="elementOnly")
class AdministrativeGender extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr AdministrativeGenderEnum value;
}

@ExtendedMetaData(name="AdministrativeGenderEnum")
enum AdministrativeGenderEnum {

	@GenModel(documentation="Male")
	male = 0;

	@GenModel(documentation="Female")
	female = 1;

	@GenModel(documentation="Other")
	other = 2;

	@GenModel(documentation="Unknown")
	unknown = 3;
}

@ExtendedMetaData(name="AdministrativeGenderEnum:Object", baseType="AdministrativeGenderEnum")
datatype AdministrativeGenderEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="An event (i.e. any change to current patient status) that may be related to unintended effects on a patient or research participant. The unintended effects may require additional monitoring, treatment, hospitalization, or may result in death. The AdverseEvent resource also extends to potential or avoided events that could have had such effects. There are two major domains where the AdverseEvent resource is expected to be used. One is in clinical care reported adverse events and the other is in reporting adverse events in clinical  research trial management. Adverse events can be reported by healthcare providers, patients, caregivers or by medical products manufacturers. Given the differences between these two concepts, we recommend consulting the domain specific implementation guides when implementing the AdverseEvent Resource. The implementation guides include specific extensions, value sets and constraints.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="AdverseEvent", kind="elementOnly")
class AdverseEvent extends DomainResource {

	@GenModel(documentation="Business identifiers assigned to this adverse event by the performer or other systems which remain constant as the resource is updated and propagates from server to server.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The current state of the adverse event or potential adverse event.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val AdverseEventStatus[1] status;

	@GenModel(documentation="Whether the event actually happened or was a near miss. Note that this is independent of whether anyone was affected or harmed or how severely.")
	@ExtendedMetaData(kind="element", name="actuality", namespace="##targetNamespace")
	!resolve val AdverseEventActuality[1] actuality;

	@GenModel(documentation="The overall type of event, intended for search and filtering purposes.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] category;

	@GenModel(documentation="Specific event that occurred or that was averted, such as patient fall, wrong organ removed, or wrong blood transfused.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@GenModel(documentation="This subject or group impacted by the event.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference[1] subject;

	@GenModel(documentation="The Encounter associated with the start of the AdverseEvent.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@ExtendedMetaData(kind="element", name="occurrenceDateTime", namespace="##targetNamespace")
	!resolve val DateTime occurrenceDateTime;

	@ExtendedMetaData(kind="element", name="occurrencePeriod", namespace="##targetNamespace")
	!resolve val Period occurrencePeriod;

	@ExtendedMetaData(kind="element", name="occurrenceTiming", namespace="##targetNamespace")
	!resolve val Timing occurrenceTiming;

	@GenModel(documentation="Estimated or actual date the AdverseEvent began, in the opinion of the reporter.")
	@ExtendedMetaData(kind="element", name="detected", namespace="##targetNamespace")
	!resolve val DateTime detected;

	@GenModel(documentation="The date on which the existence of the AdverseEvent was first recorded.")
	@ExtendedMetaData(kind="element", name="recordedDate", namespace="##targetNamespace")
	!resolve val DateTime recordedDate;

	@GenModel(documentation="Information about the condition that occurred as a result of the adverse event, such as hives due to the exposure to a substance (for example, a drug or a chemical) or a broken leg as a result of the fall.")
	@ExtendedMetaData(kind="element", name="resultingEffect", namespace="##targetNamespace")
	!resolve val Reference[*] resultingEffect;

	@GenModel(documentation="The information about where the adverse event occurred.")
	@ExtendedMetaData(kind="element", name="location", namespace="##targetNamespace")
	!resolve val Reference location;

	@GenModel(documentation="Assessment whether this event, or averted event, was of clinical importance.")
	@ExtendedMetaData(kind="element", name="seriousness", namespace="##targetNamespace")
	!resolve val CodeableConcept seriousness;

	@GenModel(documentation="Describes the type of outcome from the adverse event, such as resolved, recovering, ongoing, resolved-with-sequelae, or fatal.")
	@ExtendedMetaData(kind="element", name="outcome", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] outcome;

	@GenModel(documentation="Information on who recorded the adverse event.  May be the patient or a practitioner.")
	@ExtendedMetaData(kind="element", name="recorder", namespace="##targetNamespace")
	!resolve val Reference recorder;

	@GenModel(documentation="Indicates who or what participated in the adverse event and how they were involved.")
	@ExtendedMetaData(kind="element", name="participant", namespace="##targetNamespace")
	!resolve val AdverseEventParticipant[*] participant;

	@GenModel(documentation="The research study that the subject is enrolled in.")
	@ExtendedMetaData(kind="element", name="study", namespace="##targetNamespace")
	!resolve val Reference[*] study;

	@GenModel(documentation="Considered likely or probable or anticipated in the research study.  Whether the reported event matches any of the outcomes for the patient that are considered by the study as known or likely.")
	@ExtendedMetaData(kind="element", name="expectedInResearchStudy", namespace="##targetNamespace")
	!resolve val Boolean expectedInResearchStudy;

	@GenModel(documentation="Describes the entity that is suspected to have caused the adverse event.")
	@ExtendedMetaData(kind="element", name="suspectEntity", namespace="##targetNamespace")
	!resolve val AdverseEventSuspectEntity[*] suspectEntity;

	@GenModel(documentation="The contributing factors suspected to have increased the probability or severity of the adverse event.")
	@ExtendedMetaData(kind="element", name="contributingFactor", namespace="##targetNamespace")
	!resolve val AdverseEventContributingFactor[*] contributingFactor;

	@GenModel(documentation="Preventive actions that contributed to avoiding the adverse event.")
	@ExtendedMetaData(kind="element", name="preventiveAction", namespace="##targetNamespace")
	!resolve val AdverseEventPreventiveAction[*] preventiveAction;

	@GenModel(documentation="The ameliorating action taken after the adverse event occured in order to reduce the extent of harm.")
	@ExtendedMetaData(kind="element", name="mitigatingAction", namespace="##targetNamespace")
	!resolve val AdverseEventMitigatingAction[*] mitigatingAction;

	@GenModel(documentation="Supporting information relevant to the event.")
	@ExtendedMetaData(kind="element", name="supportingInfo", namespace="##targetNamespace")
	!resolve val AdverseEventSupportingInfo[*] supportingInfo;

	@GenModel(documentation="Comments made about the adverse event by the performer, subject or other participants.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="AdverseEventActuality", kind="elementOnly")
class AdverseEventActuality extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr AdverseEventActualityEnum value;
}

@ExtendedMetaData(name="AdverseEventActualityEnum")
enum AdverseEventActualityEnum {

	@GenModel(documentation="Adverse Event")
	actual = 0;

	@GenModel(documentation="Potential Adverse Event")
	potential = 1;
}

@ExtendedMetaData(name="AdverseEventActualityEnum:Object", baseType="AdverseEventActualityEnum")
datatype AdverseEventActualityEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="An event (i.e. any change to current patient status) that may be related to unintended effects on a patient or research participant. The unintended effects may require additional monitoring, treatment, hospitalization, or may result in death. The AdverseEvent resource also extends to potential or avoided events that could have had such effects. There are two major domains where the AdverseEvent resource is expected to be used. One is in clinical care reported adverse events and the other is in reporting adverse events in clinical  research trial management. Adverse events can be reported by healthcare providers, patients, caregivers or by medical products manufacturers. Given the differences between these two concepts, we recommend consulting the domain specific implementation guides when implementing the AdverseEvent Resource. The implementation guides include specific extensions, value sets and constraints.")
@ExtendedMetaData(name="AdverseEvent.Causality", kind="elementOnly")
class AdverseEventCausality extends BackboneElement {

	@GenModel(documentation="The method of evaluating the relatedness of the suspected entity to the event.")
	@ExtendedMetaData(kind="element", name="assessmentMethod", namespace="##targetNamespace")
	!resolve val CodeableConcept assessmentMethod;

	@GenModel(documentation="The result of the assessment regarding the relatedness of the suspected entity to the event.")
	@ExtendedMetaData(kind="element", name="entityRelatedness", namespace="##targetNamespace")
	!resolve val CodeableConcept entityRelatedness;

	@GenModel(documentation="The author of the information on the possible cause of the event.")
	@ExtendedMetaData(kind="element", name="author", namespace="##targetNamespace")
	!resolve val Reference author;
}

@GenModel(documentation="An event (i.e. any change to current patient status) that may be related to unintended effects on a patient or research participant. The unintended effects may require additional monitoring, treatment, hospitalization, or may result in death. The AdverseEvent resource also extends to potential or avoided events that could have had such effects. There are two major domains where the AdverseEvent resource is expected to be used. One is in clinical care reported adverse events and the other is in reporting adverse events in clinical  research trial management. Adverse events can be reported by healthcare providers, patients, caregivers or by medical products manufacturers. Given the differences between these two concepts, we recommend consulting the domain specific implementation guides when implementing the AdverseEvent Resource. The implementation guides include specific extensions, value sets and constraints.")
@ExtendedMetaData(name="AdverseEvent.ContributingFactor", kind="elementOnly")
class AdverseEventContributingFactor extends BackboneElement {

	@ExtendedMetaData(kind="element", name="itemReference", namespace="##targetNamespace")
	!resolve val Reference itemReference;

	@ExtendedMetaData(kind="element", name="itemCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept itemCodeableConcept;
}

@GenModel(documentation="An event (i.e. any change to current patient status) that may be related to unintended effects on a patient or research participant. The unintended effects may require additional monitoring, treatment, hospitalization, or may result in death. The AdverseEvent resource also extends to potential or avoided events that could have had such effects. There are two major domains where the AdverseEvent resource is expected to be used. One is in clinical care reported adverse events and the other is in reporting adverse events in clinical  research trial management. Adverse events can be reported by healthcare providers, patients, caregivers or by medical products manufacturers. Given the differences between these two concepts, we recommend consulting the domain specific implementation guides when implementing the AdverseEvent Resource. The implementation guides include specific extensions, value sets and constraints.")
@ExtendedMetaData(name="AdverseEvent.MitigatingAction", kind="elementOnly")
class AdverseEventMitigatingAction extends BackboneElement {

	@ExtendedMetaData(kind="element", name="itemReference", namespace="##targetNamespace")
	!resolve val Reference itemReference;

	@ExtendedMetaData(kind="element", name="itemCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept itemCodeableConcept;
}

@GenModel(documentation="An event (i.e. any change to current patient status) that may be related to unintended effects on a patient or research participant. The unintended effects may require additional monitoring, treatment, hospitalization, or may result in death. The AdverseEvent resource also extends to potential or avoided events that could have had such effects. There are two major domains where the AdverseEvent resource is expected to be used. One is in clinical care reported adverse events and the other is in reporting adverse events in clinical  research trial management. Adverse events can be reported by healthcare providers, patients, caregivers or by medical products manufacturers. Given the differences between these two concepts, we recommend consulting the domain specific implementation guides when implementing the AdverseEvent Resource. The implementation guides include specific extensions, value sets and constraints.")
@ExtendedMetaData(name="AdverseEvent.Participant", kind="elementOnly")
class AdverseEventParticipant extends BackboneElement {

	@GenModel(documentation="Distinguishes the type of involvement of the actor in the adverse event, such as contributor or informant.")
	@ExtendedMetaData(kind="element", name="function", namespace="##targetNamespace")
	!resolve val CodeableConcept function;

	@GenModel(documentation="Indicates who or what participated in the event.")
	@ExtendedMetaData(kind="element", name="actor", namespace="##targetNamespace")
	!resolve val Reference[1] actor;
}

@GenModel(documentation="An event (i.e. any change to current patient status) that may be related to unintended effects on a patient or research participant. The unintended effects may require additional monitoring, treatment, hospitalization, or may result in death. The AdverseEvent resource also extends to potential or avoided events that could have had such effects. There are two major domains where the AdverseEvent resource is expected to be used. One is in clinical care reported adverse events and the other is in reporting adverse events in clinical  research trial management. Adverse events can be reported by healthcare providers, patients, caregivers or by medical products manufacturers. Given the differences between these two concepts, we recommend consulting the domain specific implementation guides when implementing the AdverseEvent Resource. The implementation guides include specific extensions, value sets and constraints.")
@ExtendedMetaData(name="AdverseEvent.PreventiveAction", kind="elementOnly")
class AdverseEventPreventiveAction extends BackboneElement {

	@ExtendedMetaData(kind="element", name="itemReference", namespace="##targetNamespace")
	!resolve val Reference itemReference;

	@ExtendedMetaData(kind="element", name="itemCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept itemCodeableConcept;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="AdverseEventStatus", kind="elementOnly")
class AdverseEventStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr AdverseEventStatusEnum value;
}

@ExtendedMetaData(name="AdverseEventStatusEnum")
enum AdverseEventStatusEnum {

	@GenModel(documentation="In Progress")
	inProgress = 0;

	@GenModel(documentation="Completed")
	completed = 1;

	@GenModel(documentation="Entered in Error")
	enteredInError = 2;

	@GenModel(documentation="Unknown")
	unknown = 3;
}

@ExtendedMetaData(name="AdverseEventStatusEnum:Object", baseType="AdverseEventStatusEnum")
datatype AdverseEventStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="An event (i.e. any change to current patient status) that may be related to unintended effects on a patient or research participant. The unintended effects may require additional monitoring, treatment, hospitalization, or may result in death. The AdverseEvent resource also extends to potential or avoided events that could have had such effects. There are two major domains where the AdverseEvent resource is expected to be used. One is in clinical care reported adverse events and the other is in reporting adverse events in clinical  research trial management. Adverse events can be reported by healthcare providers, patients, caregivers or by medical products manufacturers. Given the differences between these two concepts, we recommend consulting the domain specific implementation guides when implementing the AdverseEvent Resource. The implementation guides include specific extensions, value sets and constraints.")
@ExtendedMetaData(name="AdverseEvent.SupportingInfo", kind="elementOnly")
class AdverseEventSupportingInfo extends BackboneElement {

	@ExtendedMetaData(kind="element", name="itemReference", namespace="##targetNamespace")
	!resolve val Reference itemReference;

	@ExtendedMetaData(kind="element", name="itemCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept itemCodeableConcept;
}

@GenModel(documentation="An event (i.e. any change to current patient status) that may be related to unintended effects on a patient or research participant. The unintended effects may require additional monitoring, treatment, hospitalization, or may result in death. The AdverseEvent resource also extends to potential or avoided events that could have had such effects. There are two major domains where the AdverseEvent resource is expected to be used. One is in clinical care reported adverse events and the other is in reporting adverse events in clinical  research trial management. Adverse events can be reported by healthcare providers, patients, caregivers or by medical products manufacturers. Given the differences between these two concepts, we recommend consulting the domain specific implementation guides when implementing the AdverseEvent Resource. The implementation guides include specific extensions, value sets and constraints.")
@ExtendedMetaData(name="AdverseEvent.SuspectEntity", kind="elementOnly")
class AdverseEventSuspectEntity extends BackboneElement {

	@ExtendedMetaData(kind="element", name="instanceCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept instanceCodeableConcept;

	@ExtendedMetaData(kind="element", name="instanceReference", namespace="##targetNamespace")
	!resolve val Reference instanceReference;

	@GenModel(documentation="Information on the possible cause of the event.")
	@ExtendedMetaData(kind="element", name="causality", namespace="##targetNamespace")
	!resolve val AdverseEventCausality causality;
}

@GenModel(documentation="A duration of time during which an organism (or a process) has existed.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="Age", kind="elementOnly")
class Age extends Quantity {
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="AgeUnits", kind="elementOnly")
class AgeUnits extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr AgeUnitsEnum value;
}

@ExtendedMetaData(name="AgeUnitsEnum")
enum AgeUnitsEnum {

	@GenModel(documentation="Minute")
	min = 0;

	@GenModel(documentation="Hour")
	h = 1;

	@GenModel(documentation="Day")
	d = 2;

	@GenModel(documentation="Week")
	wk = 3;

	@GenModel(documentation="Month")
	mo = 4;

	@GenModel(documentation="Year")
	a = 5;
}

@ExtendedMetaData(name="AgeUnitsEnum:Object", baseType="AgeUnitsEnum")
datatype AgeUnitsEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="How resource references can be aggregated.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="AggregationMode", kind="elementOnly")
class AggregationMode extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr AggregationModeEnum value;
}

@ExtendedMetaData(name="AggregationModeEnum")
enum AggregationModeEnum {

	@GenModel(documentation="Contained")
	contained = 0;

	@GenModel(documentation="Referenced")
	referenced = 1;

	@GenModel(documentation="Bundled")
	bundled = 2;
}

@ExtendedMetaData(name="AggregationModeEnum:Object", baseType="AggregationModeEnum")
datatype AggregationModeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="Risk of harmful or undesirable physiological response which is specific to an individual and associated with exposure to a substance.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="AllergyIntolerance", kind="elementOnly")
class AllergyIntolerance extends DomainResource {

	@GenModel(documentation="Business identifiers assigned to this AllergyIntolerance by the performer or other systems which remain constant as the resource is updated and propagates from server to server.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The clinical status of the allergy or intolerance.")
	@ExtendedMetaData(kind="element", name="clinicalStatus", namespace="##targetNamespace")
	!resolve val CodeableConcept clinicalStatus;

	@GenModel(documentation="Assertion about certainty associated with the propensity, or potential risk, of a reaction to the identified substance (including pharmaceutical product).  The verification status pertains to the allergy or intolerance, itself, not to any specific AllergyIntolerance attribute.")
	@ExtendedMetaData(kind="element", name="verificationStatus", namespace="##targetNamespace")
	!resolve val CodeableConcept verificationStatus;

	@GenModel(documentation="Identification of the underlying physiological mechanism for the reaction risk.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="Category of the identified substance.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val AllergyIntoleranceCategory[*] category;

	@GenModel(documentation="Estimate of the potential clinical harm, or seriousness, of the reaction to the identified substance.")
	@ExtendedMetaData(kind="element", name="criticality", namespace="##targetNamespace")
	!resolve val AllergyIntoleranceCriticality criticality;

	@GenModel(documentation="Code for an allergy or intolerance statement (either a positive or a negated/excluded statement).  This may be a code for a substance or pharmaceutical product that is considered to be responsible for the adverse reaction risk (e.g., \"Latex\"), an allergy or intolerance condition (e.g., \"Latex allergy\"), or a negated/excluded code for a specific substance or class (e.g., \"No latex allergy\") or a general or categorical negated statement (e.g.,  \"No known allergy\", \"No known drug allergies\").  Note: the substance for a specific reaction may be different from the substance identified as the cause of the risk, but it must be consistent with it. For instance, it may be a more specific substance (e.g. a brand medication) or a composite product that includes the identified substance. It must be clinically safe to only process the 'code' and ignore the 'reaction.substance'.  If a receiving system is unable to confirm that AllergyIntolerance.reaction.substance falls within the semantic scope of AllergyIntolerance.code, then the receiving system should ignore AllergyIntolerance.reaction.substance.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@GenModel(documentation="The patient who has the allergy or intolerance.")
	@ExtendedMetaData(kind="element", name="patient", namespace="##targetNamespace")
	!resolve val Reference[1] patient;

	@GenModel(documentation="The encounter when the allergy or intolerance was asserted.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@ExtendedMetaData(kind="element", name="onsetDateTime", namespace="##targetNamespace")
	!resolve val DateTime onsetDateTime;

	@ExtendedMetaData(kind="element", name="onsetAge", namespace="##targetNamespace")
	!resolve val Age onsetAge;

	@ExtendedMetaData(kind="element", name="onsetPeriod", namespace="##targetNamespace")
	!resolve val Period onsetPeriod;

	@ExtendedMetaData(kind="element", name="onsetRange", namespace="##targetNamespace")
	!resolve val Range onsetRange;

	@ExtendedMetaData(kind="element", name="onsetString", namespace="##targetNamespace")
	!resolve val String onsetString;

	@GenModel(documentation="The recordedDate represents when this particular AllergyIntolerance record was created in the system, which is often a system-generated date.")
	@ExtendedMetaData(kind="element", name="recordedDate", namespace="##targetNamespace")
	!resolve val DateTime recordedDate;

	@GenModel(documentation="Indicates who or what participated in the activities related to the allergy or intolerance and how they were involved.")
	@ExtendedMetaData(kind="element", name="participant", namespace="##targetNamespace")
	!resolve val AllergyIntoleranceParticipant[*] participant;

	@GenModel(documentation="Represents the date and/or time of the last known occurrence of a reaction event.")
	@ExtendedMetaData(kind="element", name="lastOccurrence", namespace="##targetNamespace")
	!resolve val DateTime lastOccurrence;

	@GenModel(documentation="Additional narrative about the propensity for the Adverse Reaction, not captured in other fields.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="Details about each adverse reaction event linked to exposure to the identified substance.")
	@ExtendedMetaData(kind="element", name="reaction", namespace="##targetNamespace")
	!resolve val AllergyIntoleranceReaction[*] reaction;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="AllergyIntoleranceCategory", kind="elementOnly")
class AllergyIntoleranceCategory extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr AllergyIntoleranceCategoryEnum value;
}

@ExtendedMetaData(name="AllergyIntoleranceCategoryEnum")
enum AllergyIntoleranceCategoryEnum {

	@GenModel(documentation="Food")
	food = 0;

	@GenModel(documentation="Medication")
	medication = 1;

	@GenModel(documentation="Environment")
	environment = 2;

	@GenModel(documentation="Biologic")
	biologic = 3;
}

@ExtendedMetaData(name="AllergyIntoleranceCategoryEnum:Object", baseType="AllergyIntoleranceCategoryEnum")
datatype AllergyIntoleranceCategoryEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="AllergyIntoleranceCriticality", kind="elementOnly")
class AllergyIntoleranceCriticality extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr AllergyIntoleranceCriticalityEnum value;
}

@ExtendedMetaData(name="AllergyIntoleranceCriticalityEnum")
enum AllergyIntoleranceCriticalityEnum {

	@GenModel(documentation="Low Risk")
	low = 0;

	@GenModel(documentation="High Risk")
	high = 1;

	@GenModel(documentation="Unable to Assess Risk")
	unableToAssess = 2;
}

@ExtendedMetaData(name="AllergyIntoleranceCriticalityEnum:Object", baseType="AllergyIntoleranceCriticalityEnum")
datatype AllergyIntoleranceCriticalityEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="Risk of harmful or undesirable physiological response which is specific to an individual and associated with exposure to a substance.")
@ExtendedMetaData(name="AllergyIntolerance.Participant", kind="elementOnly")
class AllergyIntoleranceParticipant extends BackboneElement {

	@GenModel(documentation="Distinguishes the type of involvement of the actor in the activities related to the allergy or intolerance.")
	@ExtendedMetaData(kind="element", name="function", namespace="##targetNamespace")
	!resolve val CodeableConcept function;

	@GenModel(documentation="Indicates who or what participated in the activities related to the allergy or intolerance.")
	@ExtendedMetaData(kind="element", name="actor", namespace="##targetNamespace")
	!resolve val Reference[1] actor;
}

@GenModel(documentation="Risk of harmful or undesirable physiological response which is specific to an individual and associated with exposure to a substance.")
@ExtendedMetaData(name="AllergyIntolerance.Reaction", kind="elementOnly")
class AllergyIntoleranceReaction extends BackboneElement {

	@GenModel(documentation="Identification of the specific substance (or pharmaceutical product) considered to be responsible for the Adverse Reaction event. Note: the substance for a specific reaction may be different from the substance identified as the cause of the risk, but it must be consistent with it. For instance, it may be a more specific substance (e.g. a brand medication) or a composite product that includes the identified substance. It must be clinically safe to only process the 'code' and ignore the 'reaction.substance'.  If a receiving system is unable to confirm that AllergyIntolerance.reaction.substance falls within the semantic scope of AllergyIntolerance.code, then the receiving system should ignore AllergyIntolerance.reaction.substance.")
	@ExtendedMetaData(kind="element", name="substance", namespace="##targetNamespace")
	!resolve val CodeableConcept substance;

	@GenModel(documentation="Clinical symptoms and/or signs that are observed or associated with the adverse reaction event.")
	@ExtendedMetaData(kind="element", name="manifestation", namespace="##targetNamespace")
	!resolve val CodeableReference[+] manifestation;

	@GenModel(documentation="Text description about the reaction as a whole, including details of the manifestation if required.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val String description;

	@GenModel(documentation="Record of the date and/or time of the onset of the Reaction.")
	@ExtendedMetaData(kind="element", name="onset", namespace="##targetNamespace")
	!resolve val DateTime onset;

	@GenModel(documentation="Clinical assessment of the severity of the reaction event as a whole, potentially considering multiple different manifestations.")
	@ExtendedMetaData(kind="element", name="severity", namespace="##targetNamespace")
	!resolve val AllergyIntoleranceSeverity severity;

	@GenModel(documentation="Identification of the route by which the subject was exposed to the substance.")
	@ExtendedMetaData(kind="element", name="exposureRoute", namespace="##targetNamespace")
	!resolve val CodeableConcept exposureRoute;

	@GenModel(documentation="Additional text about the adverse reaction event not captured in other fields.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="AllergyIntoleranceSeverity", kind="elementOnly")
class AllergyIntoleranceSeverity extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr AllergyIntoleranceSeverityEnum value;
}

@ExtendedMetaData(name="AllergyIntoleranceSeverityEnum")
enum AllergyIntoleranceSeverityEnum {

	@GenModel(documentation="Mild")
	mild = 0;

	@GenModel(documentation="Moderate")
	moderate = 1;

	@GenModel(documentation="Severe")
	severe = 2;
}

@ExtendedMetaData(name="AllergyIntoleranceSeverityEnum:Object", baseType="AllergyIntoleranceSeverityEnum")
datatype AllergyIntoleranceSeverityEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="AllResourceTypes", kind="elementOnly")
class AllResourceTypes extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr AllResourceTypesEnum value;
}

@ExtendedMetaData(name="AllResourceTypesEnum")
enum AllResourceTypesEnum {

	@GenModel(documentation="Account")
	Account = 0;

	@GenModel(documentation="ActivityDefinition")
	ActivityDefinition = 1;

	@GenModel(documentation="ActorDefinition")
	ActorDefinition = 2;

	@GenModel(documentation="AdministrableProductDefinition")
	AdministrableProductDefinition = 3;

	@GenModel(documentation="AdverseEvent")
	AdverseEvent = 4;

	@GenModel(documentation="AllergyIntolerance")
	AllergyIntolerance = 5;

	@GenModel(documentation="Appointment")
	Appointment = 6;

	@GenModel(documentation="AppointmentResponse")
	AppointmentResponse = 7;

	@GenModel(documentation="ArtifactAssessment")
	ArtifactAssessment = 8;

	@GenModel(documentation="AuditEvent")
	AuditEvent = 9;

	@GenModel(documentation="Basic")
	Basic = 10;

	@GenModel(documentation="Binary")
	Binary = 11;

	@GenModel(documentation="BiologicallyDerivedProduct")
	BiologicallyDerivedProduct = 12;

	@GenModel(documentation="BiologicallyDerivedProductDispense")
	BiologicallyDerivedProductDispense = 13;

	@GenModel(documentation="BodyStructure")
	BodyStructure = 14;

	@GenModel(documentation="Bundle")
	Bundle = 15;

	@GenModel(documentation="CanonicalResource")
	CanonicalResource = 16;

	@GenModel(documentation="CapabilityStatement")
	CapabilityStatement = 17;

	@GenModel(documentation="CarePlan")
	CarePlan = 18;

	@GenModel(documentation="CareTeam")
	CareTeam = 19;

	@GenModel(documentation="ChargeItem")
	ChargeItem = 20;

	@GenModel(documentation="ChargeItemDefinition")
	ChargeItemDefinition = 21;

	@GenModel(documentation="Citation")
	Citation = 22;

	@GenModel(documentation="Claim")
	Claim = 23;

	@GenModel(documentation="ClaimResponse")
	ClaimResponse = 24;

	@GenModel(documentation="ClinicalImpression")
	ClinicalImpression = 25;

	@GenModel(documentation="ClinicalUseDefinition")
	ClinicalUseDefinition = 26;

	@GenModel(documentation="CodeSystem")
	CodeSystem = 27;

	@GenModel(documentation="Communication")
	Communication = 28;

	@GenModel(documentation="CommunicationRequest")
	CommunicationRequest = 29;

	@GenModel(documentation="CompartmentDefinition")
	CompartmentDefinition = 30;

	@GenModel(documentation="Composition")
	Composition = 31;

	@GenModel(documentation="ConceptMap")
	ConceptMap = 32;

	@GenModel(documentation="Condition")
	Condition = 33;

	@GenModel(documentation="ConditionDefinition")
	ConditionDefinition = 34;

	@GenModel(documentation="Consent")
	Consent = 35;

	@GenModel(documentation="Contract")
	Contract = 36;

	@GenModel(documentation="Coverage")
	Coverage = 37;

	@GenModel(documentation="CoverageEligibilityRequest")
	CoverageEligibilityRequest = 38;

	@GenModel(documentation="CoverageEligibilityResponse")
	CoverageEligibilityResponse = 39;

	@GenModel(documentation="DetectedIssue")
	DetectedIssue = 40;

	@GenModel(documentation="Device")
	Device = 41;

	@GenModel(documentation="DeviceAssociation")
	DeviceAssociation = 42;

	@GenModel(documentation="DeviceDefinition")
	DeviceDefinition = 43;

	@GenModel(documentation="DeviceDispense")
	DeviceDispense = 44;

	@GenModel(documentation="DeviceMetric")
	DeviceMetric = 45;

	@GenModel(documentation="DeviceRequest")
	DeviceRequest = 46;

	@GenModel(documentation="DeviceUsage")
	DeviceUsage = 47;

	@GenModel(documentation="DiagnosticReport")
	DiagnosticReport = 48;

	@GenModel(documentation="DocumentReference")
	DocumentReference = 49;

	@GenModel(documentation="DomainResource")
	DomainResource = 50;

	@GenModel(documentation="Encounter")
	Encounter = 51;

	@GenModel(documentation="EncounterHistory")
	EncounterHistory = 52;

	@GenModel(documentation="Endpoint")
	Endpoint = 53;

	@GenModel(documentation="EnrollmentRequest")
	EnrollmentRequest = 54;

	@GenModel(documentation="EnrollmentResponse")
	EnrollmentResponse = 55;

	@GenModel(documentation="EpisodeOfCare")
	EpisodeOfCare = 56;

	@GenModel(documentation="EventDefinition")
	EventDefinition = 57;

	@GenModel(documentation="Evidence")
	Evidence = 58;

	@GenModel(documentation="EvidenceReport")
	EvidenceReport = 59;

	@GenModel(documentation="EvidenceVariable")
	EvidenceVariable = 60;

	@GenModel(documentation="ExampleScenario")
	ExampleScenario = 61;

	@GenModel(documentation="ExplanationOfBenefit")
	ExplanationOfBenefit = 62;

	@GenModel(documentation="FamilyMemberHistory")
	FamilyMemberHistory = 63;

	@GenModel(documentation="Flag")
	Flag = 64;

	@GenModel(documentation="FormularyItem")
	FormularyItem = 65;

	@GenModel(documentation="GenomicStudy")
	GenomicStudy = 66;

	@GenModel(documentation="Goal")
	Goal = 67;

	@GenModel(documentation="GraphDefinition")
	GraphDefinition = 68;

	@GenModel(documentation="Group")
	Group = 69;

	@GenModel(documentation="GuidanceResponse")
	GuidanceResponse = 70;

	@GenModel(documentation="HealthcareService")
	HealthcareService = 71;

	@GenModel(documentation="ImagingSelection")
	ImagingSelection = 72;

	@GenModel(documentation="ImagingStudy")
	ImagingStudy = 73;

	@GenModel(documentation="Immunization")
	Immunization = 74;

	@GenModel(documentation="ImmunizationEvaluation")
	ImmunizationEvaluation = 75;

	@GenModel(documentation="ImmunizationRecommendation")
	ImmunizationRecommendation = 76;

	@GenModel(documentation="ImplementationGuide")
	ImplementationGuide = 77;

	@GenModel(documentation="Ingredient")
	Ingredient = 78;

	@GenModel(documentation="InsurancePlan")
	InsurancePlan = 79;

	@GenModel(documentation="InventoryItem")
	InventoryItem = 80;

	@GenModel(documentation="InventoryReport")
	InventoryReport = 81;

	@GenModel(documentation="Invoice")
	Invoice = 82;

	@GenModel(documentation="Library")
	Library = 83;

	@GenModel(documentation="Linkage")
	Linkage = 84;

	@GenModel(documentation="List")
	List = 85;

	@GenModel(documentation="Location")
	Location = 86;

	@GenModel(documentation="ManufacturedItemDefinition")
	ManufacturedItemDefinition = 87;

	@GenModel(documentation="Measure")
	Measure = 88;

	@GenModel(documentation="MeasureReport")
	MeasureReport = 89;

	@GenModel(documentation="Medication")
	Medication = 90;

	@GenModel(documentation="MedicationAdministration")
	MedicationAdministration = 91;

	@GenModel(documentation="MedicationDispense")
	MedicationDispense = 92;

	@GenModel(documentation="MedicationKnowledge")
	MedicationKnowledge = 93;

	@GenModel(documentation="MedicationRequest")
	MedicationRequest = 94;

	@GenModel(documentation="MedicationStatement")
	MedicationStatement = 95;

	@GenModel(documentation="MedicinalProductDefinition")
	MedicinalProductDefinition = 96;

	@GenModel(documentation="MessageDefinition")
	MessageDefinition = 97;

	@GenModel(documentation="MessageHeader")
	MessageHeader = 98;

	@GenModel(documentation="MetadataResource")
	MetadataResource = 99;

	@GenModel(documentation="MolecularSequence")
	MolecularSequence = 100;

	@GenModel(documentation="NamingSystem")
	NamingSystem = 101;

	@GenModel(documentation="NutritionIntake")
	NutritionIntake = 102;

	@GenModel(documentation="NutritionOrder")
	NutritionOrder = 103;

	@GenModel(documentation="NutritionProduct")
	NutritionProduct = 104;

	@GenModel(documentation="Observation")
	Observation = 105;

	@GenModel(documentation="ObservationDefinition")
	ObservationDefinition = 106;

	@GenModel(documentation="OperationDefinition")
	OperationDefinition = 107;

	@GenModel(documentation="OperationOutcome")
	OperationOutcome = 108;

	@GenModel(documentation="Organization")
	Organization = 109;

	@GenModel(documentation="OrganizationAffiliation")
	OrganizationAffiliation = 110;

	@GenModel(documentation="PackagedProductDefinition")
	PackagedProductDefinition = 111;

	@GenModel(documentation="Parameters")
	Parameters = 112;

	@GenModel(documentation="Patient")
	Patient = 113;

	@GenModel(documentation="PaymentNotice")
	PaymentNotice = 114;

	@GenModel(documentation="PaymentReconciliation")
	PaymentReconciliation = 115;

	@GenModel(documentation="Permission")
	Permission = 116;

	@GenModel(documentation="Person")
	Person = 117;

	@GenModel(documentation="PlanDefinition")
	PlanDefinition = 118;

	@GenModel(documentation="Practitioner")
	Practitioner = 119;

	@GenModel(documentation="PractitionerRole")
	PractitionerRole = 120;

	@GenModel(documentation="Procedure")
	Procedure = 121;

	@GenModel(documentation="Provenance")
	Provenance = 122;

	@GenModel(documentation="Questionnaire")
	Questionnaire = 123;

	@GenModel(documentation="QuestionnaireResponse")
	QuestionnaireResponse = 124;

	@GenModel(documentation="RegulatedAuthorization")
	RegulatedAuthorization = 125;

	@GenModel(documentation="RelatedPerson")
	RelatedPerson = 126;

	@GenModel(documentation="RequestOrchestration")
	RequestOrchestration = 127;

	@GenModel(documentation="Requirements")
	Requirements = 128;

	@GenModel(documentation="ResearchStudy")
	ResearchStudy = 129;

	@GenModel(documentation="ResearchSubject")
	ResearchSubject = 130;

	@GenModel(documentation="Resource")
	Resource = 131;

	@GenModel(documentation="RiskAssessment")
	RiskAssessment = 132;

	@GenModel(documentation="Schedule")
	Schedule = 133;

	@GenModel(documentation="SearchParameter")
	SearchParameter = 134;

	@GenModel(documentation="ServiceRequest")
	ServiceRequest = 135;

	@GenModel(documentation="Slot")
	Slot = 136;

	@GenModel(documentation="Specimen")
	Specimen = 137;

	@GenModel(documentation="SpecimenDefinition")
	SpecimenDefinition = 138;

	@GenModel(documentation="StructureDefinition")
	StructureDefinition = 139;

	@GenModel(documentation="StructureMap")
	StructureMap = 140;

	@GenModel(documentation="Subscription")
	Subscription = 141;

	@GenModel(documentation="SubscriptionStatus")
	SubscriptionStatus = 142;

	@GenModel(documentation="SubscriptionTopic")
	SubscriptionTopic = 143;

	@GenModel(documentation="Substance")
	Substance = 144;

	@GenModel(documentation="SubstanceDefinition")
	SubstanceDefinition = 145;

	@GenModel(documentation="SubstanceNucleicAcid")
	SubstanceNucleicAcid = 146;

	@GenModel(documentation="SubstancePolymer")
	SubstancePolymer = 147;

	@GenModel(documentation="SubstanceProtein")
	SubstanceProtein = 148;

	@GenModel(documentation="SubstanceReferenceInformation")
	SubstanceReferenceInformation = 149;

	@GenModel(documentation="SubstanceSourceMaterial")
	SubstanceSourceMaterial = 150;

	@GenModel(documentation="SupplyDelivery")
	SupplyDelivery = 151;

	@GenModel(documentation="SupplyRequest")
	SupplyRequest = 152;

	@GenModel(documentation="Task")
	Task = 153;

	@GenModel(documentation="TerminologyCapabilities")
	TerminologyCapabilities = 154;

	@GenModel(documentation="TestPlan")
	TestPlan = 155;

	@GenModel(documentation="TestReport")
	TestReport = 156;

	@GenModel(documentation="TestScript")
	TestScript = 157;

	@GenModel(documentation="Transport")
	Transport = 158;

	@GenModel(documentation="ValueSet")
	ValueSet = 159;

	@GenModel(documentation="VerificationResult")
	VerificationResult = 160;

	@GenModel(documentation="VisionPrescription")
	VisionPrescription = 161;
}

@ExtendedMetaData(name="AllResourceTypesEnum:Object", baseType="AllResourceTypesEnum")
datatype AllResourceTypesEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A  text note which also  contains information about who made the statement and when.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="Annotation", kind="elementOnly")
class Annotation extends DataType {

	@ExtendedMetaData(kind="element", name="authorReference", namespace="##targetNamespace")
	!resolve val Reference authorReference;

	@ExtendedMetaData(kind="element", name="authorString", namespace="##targetNamespace")
	!resolve val String authorString;

	@GenModel(documentation="Indicates when this particular annotation was made.")
	@ExtendedMetaData(kind="element", name="time", namespace="##targetNamespace")
	!resolve val DateTime time;

	@GenModel(documentation="The text of the annotation in markdown format.")
	@ExtendedMetaData(kind="element", name="text", namespace="##targetNamespace")
	!resolve val Markdown[1] text;
}

@GenModel(documentation="A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s).
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Appointment", kind="elementOnly")
class Appointment extends DomainResource {

	@GenModel(documentation="This records identifiers associated with this appointment concern that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The overall status of the Appointment. Each of the participants has their own participation status which indicates their involvement in the process, however this status indicates the shared status.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val AppointmentStatus[1] status;

	@GenModel(documentation="The coded reason for the appointment being cancelled. This is often used in reporting/billing/futher processing to determine if further actions are required, or specific fees apply.")
	@ExtendedMetaData(kind="element", name="cancellationReason", namespace="##targetNamespace")
	!resolve val CodeableConcept cancellationReason;

	@GenModel(documentation="Concepts representing classification of patient encounter such as ambulatory (outpatient), inpatient, emergency, home health or others due to local variations.")
	@ExtendedMetaData(kind="element", name="class", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] ~class;

	@GenModel(documentation="A broad categorization of the service that is to be performed during this appointment.")
	@ExtendedMetaData(kind="element", name="serviceCategory", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] serviceCategory;

	@GenModel(documentation="The specific service that is to be performed during this appointment.")
	@ExtendedMetaData(kind="element", name="serviceType", namespace="##targetNamespace")
	!resolve val CodeableReference[*] serviceType;

	@GenModel(documentation="The specialty of a practitioner that would be required to perform the service requested in this appointment.")
	@ExtendedMetaData(kind="element", name="specialty", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] specialty;

	@GenModel(documentation="The style of appointment or patient that has been booked in the slot (not service type).")
	@ExtendedMetaData(kind="element", name="appointmentType", namespace="##targetNamespace")
	!resolve val CodeableConcept appointmentType;

	@GenModel(documentation="The reason that this appointment is being scheduled. This is more clinical than administrative. This can be coded, or as specified using information from another resource. When the patient arrives and the encounter begins it may be used as the admission diagnosis. The indication will typically be a Condition (with other resources referenced in the evidence.detail), or a Procedure.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val CodeableReference[*] reason;

	@GenModel(documentation="The priority of the appointment. Can be used to make informed decisions if needing to re-prioritize appointments. (The iCal Standard specifies 0 as undefined, 1 as highest, 9 as lowest priority).")
	@ExtendedMetaData(kind="element", name="priority", namespace="##targetNamespace")
	!resolve val CodeableConcept priority;

	@GenModel(documentation="The brief description of the appointment as would be shown on a subject line in a meeting request, or appointment list. Detailed or expanded information should be put in the note field.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val String description;

	@GenModel(documentation="Appointment replaced by this Appointment in cases where there is a cancellation, the details of the cancellation can be found in the cancellationReason property (on the referenced resource).")
	@ExtendedMetaData(kind="element", name="replaces", namespace="##targetNamespace")
	!resolve val Reference[*] replaces;

	@GenModel(documentation="Connection details of a virtual service (e.g. conference call).")
	@ExtendedMetaData(kind="element", name="virtualService", namespace="##targetNamespace")
	!resolve val VirtualServiceDetail[*] virtualService;

	@GenModel(documentation="Additional information to support the appointment provided when making the appointment.")
	@ExtendedMetaData(kind="element", name="supportingInformation", namespace="##targetNamespace")
	!resolve val Reference[*] supportingInformation;

	@GenModel(documentation="The previous appointment in a series of related appointments.")
	@ExtendedMetaData(kind="element", name="previousAppointment", namespace="##targetNamespace")
	!resolve val Reference previousAppointment;

	@GenModel(documentation="The originating appointment in a recurring set of related appointments.")
	@ExtendedMetaData(kind="element", name="originatingAppointment", namespace="##targetNamespace")
	!resolve val Reference originatingAppointment;

	@GenModel(documentation="Date/Time that the appointment is to take place.")
	@ExtendedMetaData(kind="element", name="start", namespace="##targetNamespace")
	!resolve val Instant start;

	@GenModel(documentation="Date/Time that the appointment is to conclude.")
	@ExtendedMetaData(kind="element", name="end", namespace="##targetNamespace")
	!resolve val Instant end;

	@GenModel(documentation="Number of minutes that the appointment is to take. This can be less than the duration between the start and end times.  For example, where the actual time of appointment is only an estimate or if a 30 minute appointment is being requested, but any time would work.  Also, if there is, for example, a planned 15 minute break in the middle of a long appointment, the duration may be 15 minutes less than the difference between the start and end.")
	@ExtendedMetaData(kind="element", name="minutesDuration", namespace="##targetNamespace")
	!resolve val PositiveInt minutesDuration;

	@GenModel(documentation="A set of date ranges (potentially including times) that the appointment is preferred to be scheduled within.

The duration (usually in minutes) could also be provided to indicate the length of the appointment to fill and populate the start/end times for the actual allocated time. However, in other situations the duration may be calculated by the scheduling system.")
	@ExtendedMetaData(kind="element", name="requestedPeriod", namespace="##targetNamespace")
	!resolve val Period[*] requestedPeriod;

	@GenModel(documentation="The slots from the participants' schedules that will be filled by the appointment.")
	@ExtendedMetaData(kind="element", name="slot", namespace="##targetNamespace")
	!resolve val Reference[*] slot;

	@GenModel(documentation="The set of accounts that is expected to be used for billing the activities that result from this Appointment.")
	@ExtendedMetaData(kind="element", name="account", namespace="##targetNamespace")
	!resolve val Reference[*] account;

	@GenModel(documentation="The date that this appointment was initially created. This could be different to the meta.lastModified value on the initial entry, as this could have been before the resource was created on the FHIR server, and should remain unchanged over the lifespan of the appointment.")
	@ExtendedMetaData(kind="element", name="created", namespace="##targetNamespace")
	!resolve val DateTime created;

	@GenModel(documentation="The date/time describing when the appointment was cancelled.")
	@ExtendedMetaData(kind="element", name="cancellationDate", namespace="##targetNamespace")
	!resolve val DateTime cancellationDate;

	@GenModel(documentation="Additional notes/comments about the appointment.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="While Appointment.note contains information for internal use, Appointment.patientInstructions is used to capture patient facing information about the Appointment (e.g. please bring your referral or fast from 8pm night before).")
	@ExtendedMetaData(kind="element", name="patientInstruction", namespace="##targetNamespace")
	!resolve val CodeableReference[*] patientInstruction;

	@GenModel(documentation="The request this appointment is allocated to assess (e.g. incoming referral or procedure request).")
	@ExtendedMetaData(kind="element", name="basedOn", namespace="##targetNamespace")
	!resolve val Reference[*] basedOn;

	@GenModel(documentation="The patient or group associated with the appointment, if they are to be present (usually) then they should also be included in the participant backbone element.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference subject;

	@GenModel(documentation="List of participants involved in the appointment.")
	@ExtendedMetaData(kind="element", name="participant", namespace="##targetNamespace")
	!resolve val AppointmentParticipant[+] participant;

	@GenModel(documentation="The sequence number that identifies a specific appointment in a recurring pattern.")
	@ExtendedMetaData(kind="element", name="recurrenceId", namespace="##targetNamespace")
	!resolve val PositiveInt recurrenceId;

	@GenModel(documentation="This appointment varies from the recurring pattern.")
	@ExtendedMetaData(kind="element", name="occurrenceChanged", namespace="##targetNamespace")
	!resolve val Boolean occurrenceChanged;

	@GenModel(documentation="The details of the recurrence pattern or template that is used to generate recurring appointments.")
	@ExtendedMetaData(kind="element", name="recurrenceTemplate", namespace="##targetNamespace")
	!resolve val AppointmentRecurrenceTemplate[*] recurrenceTemplate;
}

@GenModel(documentation="A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s).")
@ExtendedMetaData(name="Appointment.MonthlyTemplate", kind="elementOnly")
class AppointmentMonthlyTemplate extends BackboneElement {

	@GenModel(documentation="Indicates that appointments in the series of recurring appointments should occur on a specific day of the month.")
	@ExtendedMetaData(kind="element", name="dayOfMonth", namespace="##targetNamespace")
	!resolve val PositiveInt dayOfMonth;

	@GenModel(documentation="Indicates which week within a month the appointments in the series of recurring appointments should occur on.")
	@ExtendedMetaData(kind="element", name="nthWeekOfMonth", namespace="##targetNamespace")
	!resolve val Coding nthWeekOfMonth;

	@GenModel(documentation="Indicates which day of the week the recurring appointments should occur each nth week.")
	@ExtendedMetaData(kind="element", name="dayOfWeek", namespace="##targetNamespace")
	!resolve val Coding dayOfWeek;

	@GenModel(documentation="Indicates that recurring appointments should occur every nth month.")
	@ExtendedMetaData(kind="element", name="monthInterval", namespace="##targetNamespace")
	!resolve val PositiveInt[1] monthInterval;
}

@GenModel(documentation="A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s).")
@ExtendedMetaData(name="Appointment.Participant", kind="elementOnly")
class AppointmentParticipant extends BackboneElement {

	@GenModel(documentation="Role of participant in the appointment.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] type;

	@GenModel(documentation="Participation period of the actor.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;

	@GenModel(documentation="The individual, device, location, or service participating in the appointment.")
	@ExtendedMetaData(kind="element", name="actor", namespace="##targetNamespace")
	!resolve val Reference actor;

	@GenModel(documentation="Whether this participant is required to be present at the meeting. If false, the participant is optional.")
	@ExtendedMetaData(kind="element", name="required", namespace="##targetNamespace")
	!resolve val Boolean required;

	@GenModel(documentation="Participation status of the actor.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val ParticipationStatus[1] status;
}

@GenModel(documentation="A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s).")
@ExtendedMetaData(name="Appointment.RecurrenceTemplate", kind="elementOnly")
class AppointmentRecurrenceTemplate extends BackboneElement {

	@GenModel(documentation="The timezone of the recurring appointment occurrences.")
	@ExtendedMetaData(kind="element", name="timezone", namespace="##targetNamespace")
	!resolve val CodeableConcept timezone;

	@GenModel(documentation="How often the appointment series should recur.")
	@ExtendedMetaData(kind="element", name="recurrenceType", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] recurrenceType;

	@GenModel(documentation="Recurring appointments will not occur after this date.")
	@ExtendedMetaData(kind="element", name="lastOccurrenceDate", namespace="##targetNamespace")
	!resolve val Date lastOccurrenceDate;

	@GenModel(documentation="How many appointments are planned in the recurrence.")
	@ExtendedMetaData(kind="element", name="occurrenceCount", namespace="##targetNamespace")
	!resolve val PositiveInt occurrenceCount;

	@GenModel(documentation="The list of specific dates that will have appointments generated.")
	@ExtendedMetaData(kind="element", name="occurrenceDate", namespace="##targetNamespace")
	!resolve val Date[*] occurrenceDate;

	@GenModel(documentation="Information about weekly recurring appointments.")
	@ExtendedMetaData(kind="element", name="weeklyTemplate", namespace="##targetNamespace")
	!resolve val AppointmentWeeklyTemplate weeklyTemplate;

	@GenModel(documentation="Information about monthly recurring appointments.")
	@ExtendedMetaData(kind="element", name="monthlyTemplate", namespace="##targetNamespace")
	!resolve val AppointmentMonthlyTemplate monthlyTemplate;

	@GenModel(documentation="Information about yearly recurring appointments.")
	@ExtendedMetaData(kind="element", name="yearlyTemplate", namespace="##targetNamespace")
	!resolve val AppointmentYearlyTemplate yearlyTemplate;

	@GenModel(documentation="Any dates, such as holidays, that should be excluded from the recurrence.")
	@ExtendedMetaData(kind="element", name="excludingDate", namespace="##targetNamespace")
	!resolve val Date[*] excludingDate;

	@GenModel(documentation="Any dates, such as holidays, that should be excluded from the recurrence.")
	@ExtendedMetaData(kind="element", name="excludingRecurrenceId", namespace="##targetNamespace")
	!resolve val PositiveInt[*] excludingRecurrenceId;
}

@GenModel(documentation="A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="AppointmentResponse", kind="elementOnly")
class AppointmentResponse extends DomainResource {

	@GenModel(documentation="This records identifiers associated with this appointment response concern that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Appointment that this response is replying to.")
	@ExtendedMetaData(kind="element", name="appointment", namespace="##targetNamespace")
	!resolve val Reference[1] appointment;

	@GenModel(documentation="Indicates that the response is proposing a different time that was initially requested.  The new proposed time will be indicated in the start and end properties.")
	@ExtendedMetaData(kind="element", name="proposedNewTime", namespace="##targetNamespace")
	!resolve val Boolean proposedNewTime;

	@GenModel(documentation="Date/Time that the appointment is to take place, or requested new start time.")
	@ExtendedMetaData(kind="element", name="start", namespace="##targetNamespace")
	!resolve val Instant start;

	@GenModel(documentation="This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the end time.")
	@ExtendedMetaData(kind="element", name="end", namespace="##targetNamespace")
	!resolve val Instant end;

	@GenModel(documentation="Role of participant in the appointment.")
	@ExtendedMetaData(kind="element", name="participantType", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] participantType;

	@GenModel(documentation="A Person, Location, HealthcareService, or Device that is participating in the appointment.")
	@ExtendedMetaData(kind="element", name="actor", namespace="##targetNamespace")
	!resolve val Reference actor;

	@GenModel(documentation="Participation status of the participant. When the status is declined or tentative if the start/end times are different to the appointment, then these times should be interpreted as a requested time change. When the status is accepted, the times can either be the time of the appointment (as a confirmation of the time) or can be empty.")
	@ExtendedMetaData(kind="element", name="participantStatus", namespace="##targetNamespace")
	!resolve val AppointmentResponseStatus[1] participantStatus;

	@GenModel(documentation="Additional comments about the appointment.")
	@ExtendedMetaData(kind="element", name="comment", namespace="##targetNamespace")
	!resolve val Markdown comment;

	@GenModel(documentation="Indicates that this AppointmentResponse applies to all occurrences in a recurring request.")
	@ExtendedMetaData(kind="element", name="recurring", namespace="##targetNamespace")
	!resolve val Boolean recurring;

	@GenModel(documentation="The original date within a recurring request. This could be used in place of the recurrenceId to be more direct (or where the template is provided through the simple list of dates in `Appointment.occurrenceDate`).")
	@ExtendedMetaData(kind="element", name="occurrenceDate", namespace="##targetNamespace")
	!resolve val Date occurrenceDate;

	@GenModel(documentation="The recurrence ID (sequence number) of the specific appointment when responding to a recurring request.")
	@ExtendedMetaData(kind="element", name="recurrenceId", namespace="##targetNamespace")
	!resolve val PositiveInt recurrenceId;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="AppointmentResponseStatus", kind="elementOnly")
class AppointmentResponseStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr AppointmentResponseStatusEnum value;
}

@ExtendedMetaData(name="AppointmentResponseStatusEnum")
enum AppointmentResponseStatusEnum {

	@GenModel(documentation="Accepted")
	accepted = 0;

	@GenModel(documentation="Declined")
	declined = 1;

	@GenModel(documentation="Tentative")
	tentative = 2;

	@GenModel(documentation="Needs Action")
	needsAction = 3;

	@GenModel(documentation="Entered in error")
	enteredInError = 4;
}

@ExtendedMetaData(name="AppointmentResponseStatusEnum:Object", baseType="AppointmentResponseStatusEnum")
datatype AppointmentResponseStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="AppointmentStatus", kind="elementOnly")
class AppointmentStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr AppointmentStatusEnum value;
}

@ExtendedMetaData(name="AppointmentStatusEnum")
enum AppointmentStatusEnum {

	@GenModel(documentation="Proposed")
	proposed = 0;

	@GenModel(documentation="Pending")
	pending = 1;

	@GenModel(documentation="Booked")
	booked = 2;

	@GenModel(documentation="Arrived")
	arrived = 3;

	@GenModel(documentation="Fulfilled")
	fulfilled = 4;

	@GenModel(documentation="Cancelled")
	cancelled = 5;

	@GenModel(documentation="No Show")
	noshow = 6;

	@GenModel(documentation="Entered in error")
	enteredInError = 7;

	@GenModel(documentation="Checked In")
	checkedIn = 8;

	@GenModel(documentation="Waitlisted")
	waitlist = 9;
}

@ExtendedMetaData(name="AppointmentStatusEnum:Object", baseType="AppointmentStatusEnum")
datatype AppointmentStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s).")
@ExtendedMetaData(name="Appointment.WeeklyTemplate", kind="elementOnly")
class AppointmentWeeklyTemplate extends BackboneElement {

	@GenModel(documentation="Indicates that recurring appointments should occur on Mondays.")
	@ExtendedMetaData(kind="element", name="monday", namespace="##targetNamespace")
	!resolve val Boolean monday;

	@GenModel(documentation="Indicates that recurring appointments should occur on Tuesdays.")
	@ExtendedMetaData(kind="element", name="tuesday", namespace="##targetNamespace")
	!resolve val Boolean tuesday;

	@GenModel(documentation="Indicates that recurring appointments should occur on Wednesdays.")
	@ExtendedMetaData(kind="element", name="wednesday", namespace="##targetNamespace")
	!resolve val Boolean wednesday;

	@GenModel(documentation="Indicates that recurring appointments should occur on Thursdays.")
	@ExtendedMetaData(kind="element", name="thursday", namespace="##targetNamespace")
	!resolve val Boolean thursday;

	@GenModel(documentation="Indicates that recurring appointments should occur on Fridays.")
	@ExtendedMetaData(kind="element", name="friday", namespace="##targetNamespace")
	!resolve val Boolean friday;

	@GenModel(documentation="Indicates that recurring appointments should occur on Saturdays.")
	@ExtendedMetaData(kind="element", name="saturday", namespace="##targetNamespace")
	!resolve val Boolean saturday;

	@GenModel(documentation="Indicates that recurring appointments should occur on Sundays.")
	@ExtendedMetaData(kind="element", name="sunday", namespace="##targetNamespace")
	!resolve val Boolean sunday;

	@GenModel(documentation="The interval defines if the recurrence is every nth week. The default is every week, so it is expected that this value will be 2 or more.

e.g. For recurring every second week this interval would be 2, or every third week the interval would be 3.")
	@ExtendedMetaData(kind="element", name="weekInterval", namespace="##targetNamespace")
	!resolve val PositiveInt weekInterval;
}

@GenModel(documentation="A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s).")
@ExtendedMetaData(name="Appointment.YearlyTemplate", kind="elementOnly")
class AppointmentYearlyTemplate extends BackboneElement {

	@GenModel(documentation="Appointment recurs every nth year.")
	@ExtendedMetaData(kind="element", name="yearInterval", namespace="##targetNamespace")
	!resolve val PositiveInt[1] yearInterval;
}

@GenModel(documentation="This Resource provides one or more comments, classifiers or ratings about a Resource and supports attribution and rights management metadata for the added content.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ArtifactAssessment", kind="elementOnly")
class ArtifactAssessment extends DomainResource {

	@GenModel(documentation="A formal identifier that is used to identify this artifact assessment when it is represented in other formats, or referenced in a specification, model, design or an instance.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="A short title for the assessment for use in displaying and selecting.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@ExtendedMetaData(kind="element", name="citeAsReference", namespace="##targetNamespace")
	!resolve val Reference citeAsReference;

	@ExtendedMetaData(kind="element", name="citeAsMarkdown", namespace="##targetNamespace")
	!resolve val Markdown citeAsMarkdown;

	@GenModel(documentation="The date  (and optionally time) when the artifact assessment was published. The date must change when the disposition changes and it must change if the workflow status code changes. In addition, it should change when the substantive content of the artifact assessment changes.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="A copyright statement relating to the artifact assessment and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the artifact assessment.")
	@ExtendedMetaData(kind="element", name="copyright", namespace="##targetNamespace")
	!resolve val Markdown copyright;

	@GenModel(documentation="The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.")
	@ExtendedMetaData(kind="element", name="approvalDate", namespace="##targetNamespace")
	!resolve val Date approvalDate;

	@GenModel(documentation="The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.")
	@ExtendedMetaData(kind="element", name="lastReviewDate", namespace="##targetNamespace")
	!resolve val Date lastReviewDate;

	@ExtendedMetaData(kind="element", name="artifactReference", namespace="##targetNamespace")
	!resolve val Reference artifactReference;

	@ExtendedMetaData(kind="element", name="artifactCanonical", namespace="##targetNamespace")
	!resolve val Canonical artifactCanonical;

	@ExtendedMetaData(kind="element", name="artifactUri", namespace="##targetNamespace")
	!resolve val Uri artifactUri;

	@GenModel(documentation="A component comment, classifier, or rating of the artifact.")
	@ExtendedMetaData(kind="element", name="content", namespace="##targetNamespace")
	!resolve val ArtifactAssessmentContent[*] content;

	@GenModel(documentation="Indicates the workflow status of the comment or change request.")
	@ExtendedMetaData(kind="element", name="workflowStatus", namespace="##targetNamespace")
	!resolve val ArtifactAssessmentWorkflowStatus workflowStatus;

	@GenModel(documentation="Indicates the disposition of the responsible party to the comment or change request.")
	@ExtendedMetaData(kind="element", name="disposition", namespace="##targetNamespace")
	!resolve val ArtifactAssessmentDisposition disposition;
}

@GenModel(documentation="This Resource provides one or more comments, classifiers or ratings about a Resource and supports attribution and rights management metadata for the added content.")
@ExtendedMetaData(name="ArtifactAssessment.Content", kind="elementOnly")
class ArtifactAssessmentContent extends BackboneElement {

	@GenModel(documentation="The type of information this component of the content represents.")
	@ExtendedMetaData(kind="element", name="informationType", namespace="##targetNamespace")
	!resolve val ArtifactAssessmentInformationType informationType;

	@GenModel(documentation="A brief summary of the content of this component.")
	@ExtendedMetaData(kind="element", name="summary", namespace="##targetNamespace")
	!resolve val Markdown summary;

	@GenModel(documentation="Indicates what type of content this component represents.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="Represents a rating, classifier, or assessment of the artifact.")
	@ExtendedMetaData(kind="element", name="classifier", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] classifier;

	@GenModel(documentation="A quantitative rating of the artifact.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Quantity quantity;

	@GenModel(documentation="Indicates who or what authored the content.")
	@ExtendedMetaData(kind="element", name="author", namespace="##targetNamespace")
	!resolve val Reference author;

	@GenModel(documentation="A URI that points to what the comment is about, such as a line of text in the CQL, or a specific element in a resource.")
	@ExtendedMetaData(kind="element", name="path", namespace="##targetNamespace")
	!resolve val Uri[*] path;

	@GenModel(documentation="Additional related artifacts that provide supporting documentation, additional evidence, or further information related to the content.")
	@ExtendedMetaData(kind="element", name="relatedArtifact", namespace="##targetNamespace")
	!resolve val RelatedArtifact[*] relatedArtifact;

	@GenModel(documentation="Acceptable to publicly share the comment, classifier or rating.")
	@ExtendedMetaData(kind="element", name="freeToShare", namespace="##targetNamespace")
	!resolve val Boolean freeToShare;

	@GenModel(documentation="If the informationType is container, the components of the content.")
	@ExtendedMetaData(kind="element", name="component", namespace="##targetNamespace")
	!resolve val ArtifactAssessmentContent[*] component;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ArtifactAssessmentDisposition", kind="elementOnly")
class ArtifactAssessmentDisposition extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ArtifactAssessmentDispositionEnum value;
}

@ExtendedMetaData(name="ArtifactAssessmentDispositionEnum")
enum ArtifactAssessmentDispositionEnum {

	@GenModel(documentation="Unresolved")
	unresolved = 0;

	@GenModel(documentation="Not Persuasive")
	notPersuasive = 1;

	@GenModel(documentation="Persuasive")
	persuasive = 2;

	@GenModel(documentation="Persuasive with Modification")
	persuasiveWithModification = 3;

	@GenModel(documentation="Not Persuasive with Modification")
	notPersuasiveWithModification = 4;
}

@ExtendedMetaData(name="ArtifactAssessmentDispositionEnum:Object", baseType="ArtifactAssessmentDispositionEnum")
datatype ArtifactAssessmentDispositionEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ArtifactAssessmentInformationType", kind="elementOnly")
class ArtifactAssessmentInformationType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ArtifactAssessmentInformationTypeEnum value;
}

@ExtendedMetaData(name="ArtifactAssessmentInformationTypeEnum")
enum ArtifactAssessmentInformationTypeEnum {

	@GenModel(documentation="Comment")
	comment = 0;

	@GenModel(documentation="Classifier")
	classifier = 1;

	@GenModel(documentation="Rating")
	rating = 2;

	@GenModel(documentation="Container")
	container = 3;

	@GenModel(documentation="Response")
	response = 4;

	@GenModel(documentation="Change Request")
	changeRequest = 5;
}

@ExtendedMetaData(name="ArtifactAssessmentInformationTypeEnum:Object", baseType="ArtifactAssessmentInformationTypeEnum")
datatype ArtifactAssessmentInformationTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ArtifactAssessmentWorkflowStatus", kind="elementOnly")
class ArtifactAssessmentWorkflowStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ArtifactAssessmentWorkflowStatusEnum value;
}

@ExtendedMetaData(name="ArtifactAssessmentWorkflowStatusEnum")
enum ArtifactAssessmentWorkflowStatusEnum {

	@GenModel(documentation="Submitted")
	submitted = 0;

	@GenModel(documentation="Triaged")
	triaged = 1;

	@GenModel(documentation="Waiting for Input")
	waitingForInput = 2;

	@GenModel(documentation="Resolved - No Change")
	resolvedNoChange = 3;

	@GenModel(documentation="Resolved - Change Required")
	resolvedChangeRequired = 4;

	@GenModel(documentation="Deferred")
	deferred = 5;

	@GenModel(documentation="Duplicate")
	duplicate = 6;

	@GenModel(documentation="Applied")
	applied = 7;

	@GenModel(documentation="Published")
	published = 8;

	@GenModel(documentation="Entered in Error")
	enteredInError = 9;
}

@ExtendedMetaData(name="ArtifactAssessmentWorkflowStatusEnum:Object", baseType="ArtifactAssessmentWorkflowStatusEnum")
datatype ArtifactAssessmentWorkflowStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="The type of direction to use for assertion.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="AssertionDirectionType", kind="elementOnly")
class AssertionDirectionType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr AssertionDirectionTypeEnum value;
}

@ExtendedMetaData(name="AssertionDirectionTypeEnum")
enum AssertionDirectionTypeEnum {

	@GenModel(documentation="response")
	response = 0;

	@GenModel(documentation="request")
	request = 1;
}

@ExtendedMetaData(name="AssertionDirectionTypeEnum:Object", baseType="AssertionDirectionTypeEnum")
datatype AssertionDirectionTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="The type of operator to use for assertion.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="AssertionManualCompletionType", kind="elementOnly")
class AssertionManualCompletionType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr AssertionManualCompletionTypeEnum value;
}

@ExtendedMetaData(name="AssertionManualCompletionTypeEnum")
enum AssertionManualCompletionTypeEnum {

	@GenModel(documentation="Fail")
	fail = 0;

	@GenModel(documentation="Pass")
	pass = 1;

	@GenModel(documentation="Skip")
	skip = 2;

	@GenModel(documentation="Stop")
	stop = 3;
}

@ExtendedMetaData(name="AssertionManualCompletionTypeEnum:Object", baseType="AssertionManualCompletionTypeEnum")
datatype AssertionManualCompletionTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="The type of operator to use for assertion.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="AssertionOperatorType", kind="elementOnly")
class AssertionOperatorType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr AssertionOperatorTypeEnum value;
}

@ExtendedMetaData(name="AssertionOperatorTypeEnum")
enum AssertionOperatorTypeEnum {

	@GenModel(documentation="equals")
	equals = 0;

	@GenModel(documentation="notEquals")
	notEquals = 1;

	@GenModel(documentation="in")
	in = 2;

	@GenModel(documentation="notIn")
	notIn = 3;

	@GenModel(documentation="greaterThan")
	greaterThan = 4;

	@GenModel(documentation="lessThan")
	lessThan = 5;

	@GenModel(documentation="empty")
	empty = 6;

	@GenModel(documentation="notEmpty")
	notEmpty = 7;

	@GenModel(documentation="contains")
	contains = 8;

	@GenModel(documentation="notContains")
	notContains = 9;

	@GenModel(documentation="evaluate")
	eval = 10;

	@GenModel(documentation="manualEvaluate")
	manualEval = 11;
}

@ExtendedMetaData(name="AssertionOperatorTypeEnum:Object", baseType="AssertionOperatorTypeEnum")
datatype AssertionOperatorTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="The type of response code to use for assertion.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="AssertionResponseTypes", kind="elementOnly")
class AssertionResponseTypes extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr AssertionResponseTypesEnum value;
}

@ExtendedMetaData(name="AssertionResponseTypesEnum")
enum AssertionResponseTypesEnum {

	@GenModel(documentation="Continue")
	continue = 0;

	@GenModel(documentation="Switching Protocols")
	switchingProtocols = 1;

	@GenModel(documentation="OK")
	okay = 2;

	@GenModel(documentation="Created")
	created = 3;

	@GenModel(documentation="Accepted")
	accepted = 4;

	@GenModel(documentation="Non-Authoritative Information")
	nonAuthoritativeInformation = 5;

	@GenModel(documentation="No Content")
	noContent = 6;

	@GenModel(documentation="Reset Content")
	resetContent = 7;

	@GenModel(documentation="Partial Content")
	partialContent = 8;

	@GenModel(documentation="Multiple Choices")
	multipleChoices = 9;

	@GenModel(documentation="Moved Permanently")
	movedPermanently = 10;

	@GenModel(documentation="Found")
	found = 11;

	@GenModel(documentation="See Other")
	seeOther = 12;

	@GenModel(documentation="Not Modified")
	notModified = 13;

	@GenModel(documentation="Use Proxy")
	useProxy = 14;

	@GenModel(documentation="Temporary Redirect")
	temporaryRedirect = 15;

	@GenModel(documentation="Permanent Redirect")
	permanentRedirect = 16;

	@GenModel(documentation="Bad Request")
	badRequest = 17;

	@GenModel(documentation="Unauthorized")
	unauthorized = 18;

	@GenModel(documentation="Payment Required")
	paymentRequired = 19;

	@GenModel(documentation="Forbidden")
	forbidden = 20;

	@GenModel(documentation="Not Found")
	notFound = 21;

	@GenModel(documentation="Method Not Allowed")
	methodNotAllowed = 22;

	@GenModel(documentation="Not Acceptable")
	notAcceptable = 23;

	@GenModel(documentation="Proxy Authentication Required")
	proxyAuthenticationRequired = 24;

	@GenModel(documentation="Request Timeout")
	requestTimeout = 25;

	@GenModel(documentation="Conflict")
	conflict = 26;

	@GenModel(documentation="Gone")
	gone = 27;

	@GenModel(documentation="Length Required")
	lengthRequired = 28;

	@GenModel(documentation="Precondition Failed")
	preconditionFailed = 29;

	@GenModel(documentation="Content Too Large")
	contentTooLarge = 30;

	@GenModel(documentation="URI Too Long")
	uriTooLong = 31;

	@GenModel(documentation="Unsupported Media Type")
	unsupportedMediaType = 32;

	@GenModel(documentation="Range Not Satisfiable")
	rangeNotSatisfiable = 33;

	@GenModel(documentation="Expectation Failed")
	expectationFailed = 34;

	@GenModel(documentation="Misdirected Request")
	misdirectedRequest = 35;

	@GenModel(documentation="Unprocessable Content")
	unprocessableContent = 36;

	@GenModel(documentation="Upgrade Required")
	upgradeRequired = 37;

	@GenModel(documentation="Internal Server Error")
	internalServerError = 38;

	@GenModel(documentation="Not Implemented")
	notImplemented = 39;

	@GenModel(documentation="Bad Gateway")
	badGateway = 40;

	@GenModel(documentation="Service Unavailable")
	serviceUnavailable = 41;

	@GenModel(documentation="Gateway Timeout")
	gatewayTimeout = 42;

	@GenModel(documentation="HTTP Version Not Supported")
	httpVersionNotSupported = 43;
}

@ExtendedMetaData(name="AssertionResponseTypesEnum:Object", baseType="AssertionResponseTypesEnum")
datatype AssertionResponseTypesEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="For referring to data content defined in other formats.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="Attachment", kind="elementOnly")
class Attachment extends DataType {

	@GenModel(documentation="Identifies the type of the data in the attachment and allows a method to be chosen to interpret or render the data. Includes mime type parameters such as charset where appropriate.")
	@ExtendedMetaData(kind="element", name="contentType", namespace="##targetNamespace")
	!resolve val Code contentType;

	@GenModel(documentation="The human language of the content. The value can be any valid value according to BCP 47.")
	@ExtendedMetaData(kind="element", name="language", namespace="##targetNamespace")
	!resolve val Code language;

	@GenModel(documentation="The actual data of the attachment - a sequence of bytes, base64 encoded.")
	@ExtendedMetaData(kind="element", name="data", namespace="##targetNamespace")
	!resolve val Base64Binary data;

	@GenModel(documentation="A location where the data can be accessed.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Url url;

	@GenModel(documentation="The number of bytes of data that make up this attachment (before base64 encoding, if that is done).")
	@ExtendedMetaData(kind="element", name="size", namespace="##targetNamespace")
	!resolve val Integer64 size;

	@GenModel(documentation="The calculated hash of the data using SHA-1. Represented using base64.")
	@ExtendedMetaData(kind="element", name="hash", namespace="##targetNamespace")
	!resolve val Base64Binary hash;

	@GenModel(documentation="A label or set of text to display in place of the data.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="The date that the attachment was first created.")
	@ExtendedMetaData(kind="element", name="creation", namespace="##targetNamespace")
	!resolve val DateTime creation;

	@GenModel(documentation="Height of the image in pixels (photo/video).")
	@ExtendedMetaData(kind="element", name="height", namespace="##targetNamespace")
	!resolve val PositiveInt height;

	@GenModel(documentation="Width of the image in pixels (photo/video).")
	@ExtendedMetaData(kind="element", name="width", namespace="##targetNamespace")
	!resolve val PositiveInt width;

	@GenModel(documentation="The number of frames in a photo. This is used with a multi-page fax, or an imaging acquisition context that takes multiple slices in a single image, or an animated gif. If there is more than one frame, this SHALL have a value in order to alert interface software that a multi-frame capable rendering widget is required.")
	@ExtendedMetaData(kind="element", name="frames", namespace="##targetNamespace")
	!resolve val PositiveInt frames;

	@GenModel(documentation="The duration of the recording in seconds - for audio and video.")
	@ExtendedMetaData(kind="element", name="duration", namespace="##targetNamespace")
	!resolve val Decimal duration;

	@GenModel(documentation="The number of pages when printed.")
	@ExtendedMetaData(kind="element", name="pages", namespace="##targetNamespace")
	!resolve val PositiveInt pages;
}

@GenModel(documentation="A record of an event relevant for purposes such as operations, privacy, security, maintenance, and performance analysis.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="AuditEvent", kind="elementOnly")
class AuditEvent extends DomainResource {

	@GenModel(documentation="Classification of the type of event.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] category;

	@GenModel(documentation="Describes what happened. The most specific code for the event.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] code;

	@GenModel(documentation="Indicator for type of action performed during the event that generated the audit.")
	@ExtendedMetaData(kind="element", name="action", namespace="##targetNamespace")
	!resolve val AuditEventAction action;

	@GenModel(documentation="Indicates and enables segmentation of various severity including debugging from critical.")
	@ExtendedMetaData(kind="element", name="severity", namespace="##targetNamespace")
	!resolve val AuditEventSeverity severity;

	@ExtendedMetaData(kind="element", name="occurredPeriod", namespace="##targetNamespace")
	!resolve val Period occurredPeriod;

	@ExtendedMetaData(kind="element", name="occurredDateTime", namespace="##targetNamespace")
	!resolve val DateTime occurredDateTime;

	@GenModel(documentation="The time when the event was recorded.")
	@ExtendedMetaData(kind="element", name="recorded", namespace="##targetNamespace")
	!resolve val Instant[1] recorded;

	@GenModel(documentation="Indicates whether the event succeeded or failed. A free text descripiton can be given in outcome.text.")
	@ExtendedMetaData(kind="element", name="outcome", namespace="##targetNamespace")
	!resolve val AuditEventOutcome outcome;

	@GenModel(documentation="The authorization (e.g., PurposeOfUse) that was used during the event being recorded.")
	@ExtendedMetaData(kind="element", name="authorization", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] authorization;

	@GenModel(documentation="Allows tracing of authorizatino for the events and tracking whether proposals/recommendations were acted upon.")
	@ExtendedMetaData(kind="element", name="basedOn", namespace="##targetNamespace")
	!resolve val Reference[*] basedOn;

	@GenModel(documentation="The patient element is available to enable deterministic tracking of activities that involve the patient as the subject of the data used in an activity.")
	@ExtendedMetaData(kind="element", name="patient", namespace="##targetNamespace")
	!resolve val Reference patient;

	@GenModel(documentation="This will typically be the encounter the event occurred, but some events may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter (e.g. pre-admission lab tests).")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@GenModel(documentation="An actor taking an active role in the event or activity that is logged.")
	@ExtendedMetaData(kind="element", name="agent", namespace="##targetNamespace")
	!resolve val AuditEventAgent[+] agent;

	@GenModel(documentation="The actor that is reporting the event.")
	@ExtendedMetaData(kind="element", name="source", namespace="##targetNamespace")
	!resolve val AuditEventSource[1] source;

	@GenModel(documentation="Specific instances of data or objects that have been accessed.")
	@ExtendedMetaData(kind="element", name="entity", namespace="##targetNamespace")
	!resolve val AuditEventEntity[*] entity;
}

@GenModel(documentation="Indicator for type of action performed during the event that generated the event.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="AuditEventAction", kind="elementOnly")
class AuditEventAction extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr AuditEventActionEnum value;
}

@ExtendedMetaData(name="AuditEventActionEnum")
enum AuditEventActionEnum {

	@GenModel(documentation="Create")
	C = 0;

	@GenModel(documentation="Read")
	R = 1;

	@GenModel(documentation="Update")
	U = 2;

	@GenModel(documentation="Delete")
	D = 3;

	@GenModel(documentation="Execute")
	E = 4;
}

@ExtendedMetaData(name="AuditEventActionEnum:Object", baseType="AuditEventActionEnum")
datatype AuditEventActionEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A record of an event relevant for purposes such as operations, privacy, security, maintenance, and performance analysis.")
@ExtendedMetaData(name="AuditEvent.Agent", kind="elementOnly")
class AuditEventAgent extends BackboneElement {

	@GenModel(documentation="The Functional Role of the user when performing the event.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="The structural roles of the agent indicating the agent's competency. The security role enabling the agent with respect to the activity.")
	@ExtendedMetaData(kind="element", name="role", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] role;

	@GenModel(documentation="Reference to who this agent is that was involved in the event.")
	@ExtendedMetaData(kind="element", name="who", namespace="##targetNamespace")
	!resolve val Reference[1] who;

	@GenModel(documentation="Indicator that the user is or is not the requestor, or initiator, for the event being audited.")
	@ExtendedMetaData(kind="element", name="requestor", namespace="##targetNamespace")
	!resolve val Boolean requestor;

	@GenModel(documentation="Where the agent location is known, the agent location when the event occurred.")
	@ExtendedMetaData(kind="element", name="location", namespace="##targetNamespace")
	!resolve val Reference location;

	@GenModel(documentation="Where the policy(ies) are known that authorized the agent participation in the event. Typically, a single activity may have multiple applicable policies, such as patient consent, guarantor funding, etc. The policy would also indicate the security token used.")
	@ExtendedMetaData(kind="element", name="policy", namespace="##targetNamespace")
	!resolve val Uri[*] policy;

	@ExtendedMetaData(kind="element", name="networkReference", namespace="##targetNamespace")
	!resolve val Reference networkReference;

	@ExtendedMetaData(kind="element", name="networkUri", namespace="##targetNamespace")
	!resolve val Uri networkUri;

	@ExtendedMetaData(kind="element", name="networkString", namespace="##targetNamespace")
	!resolve val String networkString;

	@GenModel(documentation="The authorization (e.g., PurposeOfUse) that was used during the event being recorded.")
	@ExtendedMetaData(kind="element", name="authorization", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] authorization;
}

@GenModel(documentation="A record of an event relevant for purposes such as operations, privacy, security, maintenance, and performance analysis.")
@ExtendedMetaData(name="AuditEvent.Detail", kind="elementOnly")
class AuditEventDetail extends BackboneElement {

	@GenModel(documentation="The type of extra detail provided in the value.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept valueCodeableConcept;

	@ExtendedMetaData(kind="element", name="valueString", namespace="##targetNamespace")
	!resolve val String valueString;

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;

	@ExtendedMetaData(kind="element", name="valueInteger", namespace="##targetNamespace")
	!resolve val Integer valueInteger;

	@ExtendedMetaData(kind="element", name="valueRange", namespace="##targetNamespace")
	!resolve val Range valueRange;

	@ExtendedMetaData(kind="element", name="valueRatio", namespace="##targetNamespace")
	!resolve val Ratio valueRatio;

	@ExtendedMetaData(kind="element", name="valueTime", namespace="##targetNamespace")
	!resolve val Time valueTime;

	@ExtendedMetaData(kind="element", name="valueDateTime", namespace="##targetNamespace")
	!resolve val DateTime valueDateTime;

	@ExtendedMetaData(kind="element", name="valuePeriod", namespace="##targetNamespace")
	!resolve val Period valuePeriod;

	@ExtendedMetaData(kind="element", name="valueBase64Binary", namespace="##targetNamespace")
	!resolve val Base64Binary valueBase64Binary;
}

@GenModel(documentation="A record of an event relevant for purposes such as operations, privacy, security, maintenance, and performance analysis.")
@ExtendedMetaData(name="AuditEvent.Entity", kind="elementOnly")
class AuditEventEntity extends BackboneElement {

	@GenModel(documentation="Identifies a specific instance of the entity. The reference should be version specific. This is allowed to be a Parameters resource.")
	@ExtendedMetaData(kind="element", name="what", namespace="##targetNamespace")
	!resolve val Reference what;

	@GenModel(documentation="Code representing the role the entity played in the event being audited.")
	@ExtendedMetaData(kind="element", name="role", namespace="##targetNamespace")
	!resolve val CodeableConcept role;

	@GenModel(documentation="Security labels for the identified entity.")
	@ExtendedMetaData(kind="element", name="securityLabel", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] securityLabel;

	@GenModel(documentation="The query parameters for a query-type entities.")
	@ExtendedMetaData(kind="element", name="query", namespace="##targetNamespace")
	!resolve val Base64Binary query;

	@GenModel(documentation="Tagged value pairs for conveying additional information about the entity.")
	@ExtendedMetaData(kind="element", name="detail", namespace="##targetNamespace")
	!resolve val AuditEventDetail[*] detail;

	@GenModel(documentation="The entity is attributed to an agent to express the agent's responsibility for that entity in the activity. This is most used to indicate when persistence media (the entity) are used by an agent. For example when importing data from a device, the device would be described in an entity, and the user importing data from that media would be indicated as the entity.agent.")
	@ExtendedMetaData(kind="element", name="agent", namespace="##targetNamespace")
	!resolve val AuditEventAgent[*] agent;
}

@GenModel(documentation="A record of an event relevant for purposes such as operations, privacy, security, maintenance, and performance analysis.")
@ExtendedMetaData(name="AuditEvent.Outcome", kind="elementOnly")
class AuditEventOutcome extends BackboneElement {

	@GenModel(documentation="Indicates whether the event succeeded or failed.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val Coding[1] code;

	@GenModel(documentation="Additional details about the error. This may be a text description of the error or a system code that identifies the error.")
	@ExtendedMetaData(kind="element", name="detail", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] detail;
}

@GenModel(documentation="The severity of the audit entry.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="AuditEventSeverity", kind="elementOnly")
class AuditEventSeverity extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr AuditEventSeverityEnum value;
}

@ExtendedMetaData(name="AuditEventSeverityEnum")
enum AuditEventSeverityEnum {

	@GenModel(documentation="Emergency")
	emergency = 0;

	@GenModel(documentation="Alert")
	alert = 1;

	@GenModel(documentation="Critical")
	critical = 2;

	@GenModel(documentation="Error")
	error = 3;

	@GenModel(documentation="Warning")
	warning = 4;

	@GenModel(documentation="Notice")
	notice = 5;

	@GenModel(documentation="Informational")
	informational = 6;

	@GenModel(documentation="Debug")
	debug = 7;
}

@ExtendedMetaData(name="AuditEventSeverityEnum:Object", baseType="AuditEventSeverityEnum")
datatype AuditEventSeverityEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A record of an event relevant for purposes such as operations, privacy, security, maintenance, and performance analysis.")
@ExtendedMetaData(name="AuditEvent.Source", kind="elementOnly")
class AuditEventSource extends BackboneElement {

	@GenModel(documentation="Logical source location within the healthcare enterprise network.  For example, a hospital or other provider location within a multi-entity provider group.")
	@ExtendedMetaData(kind="element", name="site", namespace="##targetNamespace")
	!resolve val Reference site;

	@GenModel(documentation="Identifier of the source where the event was detected.")
	@ExtendedMetaData(kind="element", name="observer", namespace="##targetNamespace")
	!resolve val Reference[1] observer;

	@GenModel(documentation="Code specifying the type of source where event originated.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] type;
}

@GenModel(documentation="Availability data for an {item}.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="Availability", kind="elementOnly")
class Availability extends DataType {

	@GenModel(documentation="Times the {item} is available.")
	@ExtendedMetaData(kind="element", name="availableTime", namespace="##targetNamespace")
	!resolve val AvailabilityAvailableTime[*] availableTime;

	@GenModel(documentation="Not available during this time due to provided reason.")
	@ExtendedMetaData(kind="element", name="notAvailableTime", namespace="##targetNamespace")
	!resolve val AvailabilityNotAvailableTime[*] notAvailableTime;
}

@GenModel(documentation="Availability data for an {item}.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="Availability.AvailableTime", kind="elementOnly")
class AvailabilityAvailableTime extends DataType {

	@GenModel(documentation="mon | tue | wed | thu | fri | sat | sun.")
	@ExtendedMetaData(kind="element", name="daysOfWeek", namespace="##targetNamespace")
	!resolve val Code[*] daysOfWeek;

	@GenModel(documentation="Always available? i.e. 24 hour service.")
	@ExtendedMetaData(kind="element", name="allDay", namespace="##targetNamespace")
	!resolve val Boolean allDay;

	@GenModel(documentation="Opening time of day (ignored if allDay = true).")
	@ExtendedMetaData(kind="element", name="availableStartTime", namespace="##targetNamespace")
	!resolve val Time availableStartTime;

	@GenModel(documentation="Closing time of day (ignored if allDay = true).")
	@ExtendedMetaData(kind="element", name="availableEndTime", namespace="##targetNamespace")
	!resolve val Time availableEndTime;
}

@GenModel(documentation="Availability data for an {item}.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="Availability.NotAvailableTime", kind="elementOnly")
class AvailabilityNotAvailableTime extends DataType {

	@GenModel(documentation="Reason presented to the user explaining why time not available.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val String description;

	@GenModel(documentation="Service not available during this period.")
	@ExtendedMetaData(kind="element", name="during", namespace="##targetNamespace")
	!resolve val Period during;
}

@GenModel(documentation="Base definition for all elements that are defined inside a resource - but not those in a data type.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="BackboneElement", kind="elementOnly")
class BackboneElement extends Element {

	@GenModel(documentation="May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).")
	@ExtendedMetaData(kind="element", name="modifierExtension", namespace="##targetNamespace")
	!resolve val Extension[*] modifierExtension;
}

@GenModel(documentation="Base definition for the few data types that are allowed to carry modifier extensions.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="BackboneType", kind="elementOnly")
class BackboneType extends DataType {

	@GenModel(documentation="May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).")
	@ExtendedMetaData(kind="element", name="modifierExtension", namespace="##targetNamespace")
	!resolve val Extension[*] modifierExtension;
}

@GenModel(documentation="Base definition for all types defined in FHIR type system.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="Base", kind="empty")
class Base {
}

@GenModel(documentation="A stream of bytes
A stream of bytes, base64 encoded
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="base64Binary", kind="elementOnly")
class Base64Binary extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	attr Base64BinaryPrimitive value;
}

@ExtendedMetaData(name="base64Binary-primitive", baseType="http://www.eclipse.org/emf/2003/XMLType#base64Binary", pattern="([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?")
datatype Base64BinaryPrimitive : "byte[]";

@GenModel(documentation="Basic is used for handling concepts not yet defined in FHIR, narrative-only resources that don't map to an existing resource, and custom resources not appropriate for inclusion in the FHIR specification.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Basic", kind="elementOnly")
class Basic extends DomainResource {

	@GenModel(documentation="Identifier assigned to the resource for business purposes, outside the context of FHIR.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Identifies the 'type' of resource - equivalent to the resource name for other resources.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] code;

	@GenModel(documentation="Identifies the patient, practitioner, device or any other resource that is the \"focus\" of this resource.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference subject;

	@GenModel(documentation="Identifies when the resource was first created.")
	@ExtendedMetaData(kind="element", name="created", namespace="##targetNamespace")
	!resolve val DateTime created;

	@GenModel(documentation="Indicates who was responsible for creating the resource instance.")
	@ExtendedMetaData(kind="element", name="author", namespace="##targetNamespace")
	!resolve val Reference author;
}

@GenModel(documentation="A resource that represents the data of a single raw artifact as digital content accessible in its native format.  A Binary resource can contain any content, whether text, image, pdf, zip archive, etc.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Binary", kind="elementOnly")
class Binary extends Resource {

	@GenModel(documentation="MimeType of the binary content represented as a standard MimeType (BCP 13).")
	@ExtendedMetaData(kind="element", name="contentType", namespace="##targetNamespace")
	!resolve val Code[1] contentType;

	@GenModel(documentation="This element identifies another resource that can be used as a proxy of the security sensitivity to use when deciding and enforcing access control rules for the Binary resource. Given that the Binary resource contains very few elements that can be used to determine the sensitivity of the data and relationships to individuals, the referenced resource stands in as a proxy equivalent for this purpose. This referenced resource may be related to the Binary (e.g. DocumentReference), or may be some non-related Resource purely as a security proxy. E.g. to identify that the binary resource relates to a patient, and access should only be granted to applications that have access to the patient.")
	@ExtendedMetaData(kind="element", name="securityContext", namespace="##targetNamespace")
	!resolve val Reference securityContext;

	@GenModel(documentation="The actual content, base64 encoded.")
	@ExtendedMetaData(kind="element", name="data", namespace="##targetNamespace")
	!resolve val Base64Binary data;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="BindingStrength", kind="elementOnly")
class BindingStrength extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr BindingStrengthEnum value;
}

@ExtendedMetaData(name="BindingStrengthEnum")
enum BindingStrengthEnum {

	@GenModel(documentation="Required")
	required = 0;

	@GenModel(documentation="Extensible")
	extensible = 1;

	@GenModel(documentation="Preferred")
	preferred = 2;

	@GenModel(documentation="Example")
	example = 3;
}

@ExtendedMetaData(name="BindingStrengthEnum:Object", baseType="BindingStrengthEnum")
datatype BindingStrengthEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="This resource reflects an instance of a biologically derived product. A material substance originating from a biological entity intended to be transplanted or infused
into another (possibly the same) biological entity.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="BiologicallyDerivedProduct", kind="elementOnly")
class BiologicallyDerivedProduct extends DomainResource {

	@GenModel(documentation="Broad category of this product.")
	@ExtendedMetaData(kind="element", name="productCategory", namespace="##targetNamespace")
	!resolve val Coding productCategory;

	@GenModel(documentation="A codified value that systematically supports characterization and classification of medical products of human origin inclusive of processing conditions such as additives, volumes and handling conditions.")
	@ExtendedMetaData(kind="element", name="productCode", namespace="##targetNamespace")
	!resolve val CodeableConcept productCode;

	@GenModel(documentation="Parent product (if any) for this biologically-derived product.")
	@ExtendedMetaData(kind="element", name="parent", namespace="##targetNamespace")
	!resolve val Reference[*] parent;

	@GenModel(documentation="Request to obtain and/or infuse this biologically derived product.")
	@ExtendedMetaData(kind="element", name="request", namespace="##targetNamespace")
	!resolve val Reference[*] request;

	@GenModel(documentation="Unique instance identifiers assigned to a biologically derived product. Note: This is a business identifier, not a resource identifier.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="An identifier that supports traceability to the event during which material in this product from one or more biological entities was obtained or pooled.")
	@ExtendedMetaData(kind="element", name="biologicalSourceEvent", namespace="##targetNamespace")
	!resolve val Identifier biologicalSourceEvent;

	@GenModel(documentation="Processing facilities responsible for the labeling and distribution of this biologically derived product.")
	@ExtendedMetaData(kind="element", name="processingFacility", namespace="##targetNamespace")
	!resolve val Reference[*] processingFacility;

	@GenModel(documentation="A unique identifier for an aliquot of a product.  Used to distinguish individual aliquots of a product carrying the same biologicalSource and productCode identifiers.")
	@ExtendedMetaData(kind="element", name="division", namespace="##targetNamespace")
	!resolve val String division;

	@GenModel(documentation="Whether the product is currently available.")
	@ExtendedMetaData(kind="element", name="productStatus", namespace="##targetNamespace")
	!resolve val Coding productStatus;

	@GenModel(documentation="Date, and where relevant time, of expiration.")
	@ExtendedMetaData(kind="element", name="expirationDate", namespace="##targetNamespace")
	!resolve val DateTime expirationDate;

	@GenModel(documentation="How this product was collected.")
	@ExtendedMetaData(kind="element", name="collection", namespace="##targetNamespace")
	!resolve val BiologicallyDerivedProductCollection collection;

	@GenModel(documentation="The temperature requirements for storage of the biologically-derived product.")
	@ExtendedMetaData(kind="element", name="storageTempRequirements", namespace="##targetNamespace")
	!resolve val Range storageTempRequirements;

	@GenModel(documentation="A property that is specific to this BiologicallyDerviedProduct instance.")
	@ExtendedMetaData(kind="element", name="property", namespace="##targetNamespace")
	!resolve val BiologicallyDerivedProductProperty[*] property;
}

@GenModel(documentation="This resource reflects an instance of a biologically derived product. A material substance originating from a biological entity intended to be transplanted or infused
into another (possibly the same) biological entity.")
@ExtendedMetaData(name="BiologicallyDerivedProduct.Collection", kind="elementOnly")
class BiologicallyDerivedProductCollection extends BackboneElement {

	@GenModel(documentation="Healthcare professional who is performing the collection.")
	@ExtendedMetaData(kind="element", name="collector", namespace="##targetNamespace")
	!resolve val Reference collector;

	@GenModel(documentation="The patient or entity, such as a hospital or vendor in the case of a processed/manipulated/manufactured product, providing the product.")
	@ExtendedMetaData(kind="element", name="source", namespace="##targetNamespace")
	!resolve val Reference source;

	@ExtendedMetaData(kind="element", name="collectedDateTime", namespace="##targetNamespace")
	!resolve val DateTime collectedDateTime;

	@ExtendedMetaData(kind="element", name="collectedPeriod", namespace="##targetNamespace")
	!resolve val Period collectedPeriod;
}

@GenModel(documentation="This resource reflects an instance of a biologically derived product dispense. The supply or dispense of a biologically derived product from the supply organization or department (e.g. hospital transfusion laboratory) to the clinical team responsible for clinical application.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="BiologicallyDerivedProductDispense", kind="elementOnly")
class BiologicallyDerivedProductDispense extends DomainResource {

	@GenModel(documentation="Unique instance identifiers assigned to a biologically derived product dispense. Note: This is a business identifier, not a resource identifier.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The order or request that the dispense is fulfilling. This is a reference to a ServiceRequest resource.")
	@ExtendedMetaData(kind="element", name="basedOn", namespace="##targetNamespace")
	!resolve val Reference[*] basedOn;

	@GenModel(documentation="A larger event of which this particular event is a component.")
	@ExtendedMetaData(kind="element", name="partOf", namespace="##targetNamespace")
	!resolve val Reference[*] partOf;

	@GenModel(documentation="A code specifying the state of the dispense event.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val BiologicallyDerivedProductDispenseCodes[1] status;

	@GenModel(documentation="Indicates the relationship between the donor of the biologically derived product and the intended recipient.")
	@ExtendedMetaData(kind="element", name="originRelationshipType", namespace="##targetNamespace")
	!resolve val CodeableConcept originRelationshipType;

	@GenModel(documentation="A link to a resource identifying the biologically derived product that is being dispensed.")
	@ExtendedMetaData(kind="element", name="product", namespace="##targetNamespace")
	!resolve val Reference[1] product;

	@GenModel(documentation="A link to a resource representing the patient that the product is dispensed for.")
	@ExtendedMetaData(kind="element", name="patient", namespace="##targetNamespace")
	!resolve val Reference[1] patient;

	@GenModel(documentation="Indicates the type of matching associated with the dispense.")
	@ExtendedMetaData(kind="element", name="matchStatus", namespace="##targetNamespace")
	!resolve val CodeableConcept matchStatus;

	@GenModel(documentation="Indicates who or what performed an action.")
	@ExtendedMetaData(kind="element", name="performer", namespace="##targetNamespace")
	!resolve val BiologicallyDerivedProductDispensePerformer[*] performer;

	@GenModel(documentation="The physical location where the dispense was performed.")
	@ExtendedMetaData(kind="element", name="location", namespace="##targetNamespace")
	!resolve val Reference location;

	@GenModel(documentation="The amount of product in the dispense. Quantity will depend on the product being dispensed. Examples are: volume; cell count; concentration.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Quantity quantity;

	@GenModel(documentation="When the product was selected/ matched.")
	@ExtendedMetaData(kind="element", name="preparedDate", namespace="##targetNamespace")
	!resolve val DateTime preparedDate;

	@GenModel(documentation="When the product was dispatched for clinical use.")
	@ExtendedMetaData(kind="element", name="whenHandedOver", namespace="##targetNamespace")
	!resolve val DateTime whenHandedOver;

	@GenModel(documentation="Link to a resource identifying the physical location that the product was dispatched to.")
	@ExtendedMetaData(kind="element", name="destination", namespace="##targetNamespace")
	!resolve val Reference destination;

	@GenModel(documentation="Additional notes.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="Specific instructions for use.")
	@ExtendedMetaData(kind="element", name="usageInstruction", namespace="##targetNamespace")
	!resolve val String usageInstruction;
}

@GenModel(documentation="A coded concept specifying the state of the dispense event.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="BiologicallyDerivedProductDispenseCodes", kind="elementOnly")
class BiologicallyDerivedProductDispenseCodes extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr BiologicallyDerivedProductDispenseCodesEnum value;
}

@ExtendedMetaData(name="BiologicallyDerivedProductDispenseCodesEnum")
enum BiologicallyDerivedProductDispenseCodesEnum {

	@GenModel(documentation="Preparation")
	preparation = 0;

	@GenModel(documentation="In Progress")
	inProgress = 1;

	@GenModel(documentation="Allocated")
	allocated = 2;

	@GenModel(documentation="Issued")
	issued = 3;

	@GenModel(documentation="Unfulfilled")
	unfulfilled = 4;

	@GenModel(documentation="Returned")
	returned = 5;

	@GenModel(documentation="Entered in Error")
	enteredInError = 6;

	@GenModel(documentation="Unknown")
	unknown = 7;
}

@ExtendedMetaData(name="BiologicallyDerivedProductDispenseCodesEnum:Object", baseType="BiologicallyDerivedProductDispenseCodesEnum")
datatype BiologicallyDerivedProductDispenseCodesEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="This resource reflects an instance of a biologically derived product dispense. The supply or dispense of a biologically derived product from the supply organization or department (e.g. hospital transfusion laboratory) to the clinical team responsible for clinical application.")
@ExtendedMetaData(name="BiologicallyDerivedProductDispense.Performer", kind="elementOnly")
class BiologicallyDerivedProductDispensePerformer extends BackboneElement {

	@GenModel(documentation="Identifies the function of the performer during the dispense.")
	@ExtendedMetaData(kind="element", name="function", namespace="##targetNamespace")
	!resolve val CodeableConcept function;

	@GenModel(documentation="Identifies the person responsible for the action.")
	@ExtendedMetaData(kind="element", name="actor", namespace="##targetNamespace")
	!resolve val Reference[1] actor;
}

@GenModel(documentation="This resource reflects an instance of a biologically derived product. A material substance originating from a biological entity intended to be transplanted or infused
into another (possibly the same) biological entity.")
@ExtendedMetaData(name="BiologicallyDerivedProduct.Property", kind="elementOnly")
class BiologicallyDerivedProductProperty extends BackboneElement {

	@GenModel(documentation="Code that specifies the property. It should reference an established coding system.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;

	@ExtendedMetaData(kind="element", name="valueInteger", namespace="##targetNamespace")
	!resolve val Integer valueInteger;

	@ExtendedMetaData(kind="element", name="valueCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept valueCodeableConcept;

	@ExtendedMetaData(kind="element", name="valuePeriod", namespace="##targetNamespace")
	!resolve val Period valuePeriod;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueRange", namespace="##targetNamespace")
	!resolve val Range valueRange;

	@ExtendedMetaData(kind="element", name="valueRatio", namespace="##targetNamespace")
	!resolve val Ratio valueRatio;

	@ExtendedMetaData(kind="element", name="valueString", namespace="##targetNamespace")
	!resolve val String valueString;

	@ExtendedMetaData(kind="element", name="valueAttachment", namespace="##targetNamespace")
	!resolve val Attachment valueAttachment;
}

@GenModel(documentation="Record details about an anatomical structure.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="BodyStructure", kind="elementOnly")
class BodyStructure extends DomainResource {

	@GenModel(documentation="Identifier for this instance of the anatomical structure.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Whether this body site is in active use.")
	@ExtendedMetaData(kind="element", name="active", namespace="##targetNamespace")
	!resolve val Boolean active;

	@GenModel(documentation="The kind of structure being represented by the body structure at `BodyStructure.location`.  This can define both normal and abnormal morphologies.")
	@ExtendedMetaData(kind="element", name="morphology", namespace="##targetNamespace")
	!resolve val CodeableConcept morphology;

	@GenModel(documentation="The anatomical location(s) or region(s) of the specimen, lesion, or body structure.")
	@ExtendedMetaData(kind="element", name="includedStructure", namespace="##targetNamespace")
	!resolve val BodyStructureIncludedStructure[+] includedStructure;

	@GenModel(documentation="The anatomical location(s) or region(s) not occupied or represented by the specimen, lesion, or body structure.")
	@ExtendedMetaData(kind="element", name="excludedStructure", namespace="##targetNamespace")
	!resolve val BodyStructureIncludedStructure[*] excludedStructure;

	@GenModel(documentation="A summary, characterization or explanation of the body structure.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="Image or images used to identify a location.")
	@ExtendedMetaData(kind="element", name="image", namespace="##targetNamespace")
	!resolve val Attachment[*] image;

	@GenModel(documentation="The person to which the body site belongs.")
	@ExtendedMetaData(kind="element", name="patient", namespace="##targetNamespace")
	!resolve val Reference[1] patient;
}

@GenModel(documentation="Record details about an anatomical structure.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case.")
@ExtendedMetaData(name="BodyStructure.BodyLandmarkOrientation", kind="elementOnly")
class BodyStructureBodyLandmarkOrientation extends BackboneElement {

	@GenModel(documentation="A description of a landmark on the body used as a reference to locate something else.")
	@ExtendedMetaData(kind="element", name="landmarkDescription", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] landmarkDescription;

	@GenModel(documentation="An description of the direction away from a landmark something is located based on a radial clock dial.")
	@ExtendedMetaData(kind="element", name="clockFacePosition", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] clockFacePosition;

	@GenModel(documentation="The distance in centimeters a certain observation is made from a body landmark.")
	@ExtendedMetaData(kind="element", name="distanceFromLandmark", namespace="##targetNamespace")
	!resolve val BodyStructureDistanceFromLandmark[*] distanceFromLandmark;

	@GenModel(documentation="The surface area a body location is in relation to a landmark.")
	@ExtendedMetaData(kind="element", name="surfaceOrientation", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] surfaceOrientation;
}

@GenModel(documentation="Record details about an anatomical structure.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case.")
@ExtendedMetaData(name="BodyStructure.DistanceFromLandmark", kind="elementOnly")
class BodyStructureDistanceFromLandmark extends BackboneElement {

	@GenModel(documentation="An instrument, tool, analyzer, etc. used in the measurement.")
	@ExtendedMetaData(kind="element", name="device", namespace="##targetNamespace")
	!resolve val CodeableReference[*] device;

	@GenModel(documentation="The measured distance (e.g., in cm) from a body landmark.")
	@ExtendedMetaData(kind="element", name="value", namespace="##targetNamespace")
	!resolve val Quantity[*] value;
}

@GenModel(documentation="Record details about an anatomical structure.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case.")
@ExtendedMetaData(name="BodyStructure.IncludedStructure", kind="elementOnly")
class BodyStructureIncludedStructure extends BackboneElement {

	@GenModel(documentation="Code that represents the included structure.")
	@ExtendedMetaData(kind="element", name="structure", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] structure;

	@GenModel(documentation="Code that represents the included structure laterality.")
	@ExtendedMetaData(kind="element", name="laterality", namespace="##targetNamespace")
	!resolve val CodeableConcept laterality;

	@GenModel(documentation="Body locations in relation to a specific body landmark (tatoo, scar, other body structure).")
	@ExtendedMetaData(kind="element", name="bodyLandmarkOrientation", namespace="##targetNamespace")
	!resolve val BodyStructureBodyLandmarkOrientation[*] bodyLandmarkOrientation;

	@GenModel(documentation="XY or XYZ-coordinate orientation for structure.")
	@ExtendedMetaData(kind="element", name="spatialReference", namespace="##targetNamespace")
	!resolve val Reference[*] spatialReference;

	@GenModel(documentation="Code that represents the included structure qualifier.")
	@ExtendedMetaData(kind="element", name="qualifier", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] qualifier;
}

@GenModel(documentation="Value of \"true\" or \"false\"
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="boolean", kind="elementOnly")
class Boolean extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr BooleanPrimitive value;
}

@ExtendedMetaData(name="boolean-primitive", baseType="http://www.eclipse.org/emf/2003/XMLType#boolean", pattern="true|false")
datatype BooleanPrimitive : boolean;

@ExtendedMetaData(name="boolean-primitive:Object", baseType="boolean-primitive")
datatype BooleanPrimitiveObject : java.lang.Boolean;

@GenModel(documentation="A container for a collection of resources.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Bundle", kind="elementOnly")
class Bundle extends Resource {

	@GenModel(documentation="A persistent identifier for the bundle that won't change as a bundle is copied from server to server.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier identifier;

	@GenModel(documentation="Indicates the purpose of this bundle - how it is intended to be used.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val BundleType[1] type;

	@GenModel(documentation="The date/time that the bundle was assembled - i.e. when the resources were placed in the bundle.")
	@ExtendedMetaData(kind="element", name="timestamp", namespace="##targetNamespace")
	!resolve val Instant timestamp;

	@GenModel(documentation="If a set of search matches, this is the (potentially estimated) total number of entries of type 'match' across all pages in the search.  It does not include search.mode = 'include' or 'outcome' entries and it does not provide a count of the number of entries in the Bundle.")
	@ExtendedMetaData(kind="element", name="total", namespace="##targetNamespace")
	!resolve val UnsignedInt total;

	@GenModel(documentation="A series of links that provide context to this bundle.")
	@ExtendedMetaData(kind="element", name="link", namespace="##targetNamespace")
	!resolve val BundleLink[*] link;

	@GenModel(documentation="An entry in a bundle resource - will either contain a resource or information about a resource (transactions and history only).")
	@ExtendedMetaData(kind="element", name="entry", namespace="##targetNamespace")
	!resolve val BundleEntry[*] entry;

	@GenModel(documentation="Digital Signature - base64 encoded. XML-DSig or a JWS.")
	@ExtendedMetaData(kind="element", name="signature", namespace="##targetNamespace")
	!resolve val Signature signature;

	@GenModel(documentation="Captures issues and warnings that relate to the construction of the Bundle and the content within it.")
	@ExtendedMetaData(kind="element", name="issues", namespace="##targetNamespace")
	!resolve val ResourceContainer issues;
}

@GenModel(documentation="A container for a collection of resources.")
@ExtendedMetaData(name="Bundle.Entry", kind="elementOnly")
class BundleEntry extends BackboneElement {

	@GenModel(documentation="A series of links that provide context to this entry.")
	@ExtendedMetaData(kind="element", name="link", namespace="##targetNamespace")
	!resolve val BundleLink[*] link;

	@GenModel(documentation="The Absolute URL for the resource. Except for transactions and batches, each entry in a Bundle must have a fullUrl. The fullUrl SHALL NOT disagree with the id in the resource - i.e. if the fullUrl is not a urn:uuid, the URL shall be version-independent URL consistent with the Resource.id. The fullUrl is a version independent reference to the resource. Even when not required, fullUrl MAY be set to a urn:uuid to allow referencing entries in a transaction. The fullUrl can be an arbitrary URI and is not limited to urn:uuid, urn:oid, http, and https. The fullUrl element SHALL have a value except when: 
* invoking a create
* invoking or responding to an operation where the body is not a single identified resource
* invoking or returning the results of a search or history operation.")
	@ExtendedMetaData(kind="element", name="fullUrl", namespace="##targetNamespace")
	!resolve val Uri fullUrl;

	@GenModel(documentation="The Resource for the entry. The purpose/meaning of the resource is determined by the Bundle.type. This is allowed to be a Parameters resource if and only if it is referenced by something else within the Bundle that provides context/meaning.")
	@ExtendedMetaData(kind="element", name="resource", namespace="##targetNamespace")
	!resolve val ResourceContainer resource;

	@GenModel(documentation="Information about the search process that lead to the creation of this entry.")
	@ExtendedMetaData(kind="element", name="search", namespace="##targetNamespace")
	!resolve val BundleSearch search;

	@GenModel(documentation="Additional information about how this entry should be processed as part of a transaction or batch.  For history, it shows how the entry was processed to create the version contained in the entry.")
	@ExtendedMetaData(kind="element", name="request", namespace="##targetNamespace")
	!resolve val BundleRequest request;

	@GenModel(documentation="Indicates the results of processing the corresponding 'request' entry in the batch or transaction being responded to or what the results of an operation where when returning history.")
	@ExtendedMetaData(kind="element", name="response", namespace="##targetNamespace")
	!resolve val BundleResponse response;
}

@GenModel(documentation="A container for a collection of resources.")
@ExtendedMetaData(name="Bundle.Link", kind="elementOnly")
class BundleLink extends BackboneElement {

	@GenModel(documentation="A name which details the functional use for this link - see [http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1](http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1).")
	@ExtendedMetaData(kind="element", name="relation", namespace="##targetNamespace")
	!resolve val LinkRelationTypes[1] relation;

	@GenModel(documentation="The reference details for the link.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri[1] url;
}

@GenModel(documentation="A container for a collection of resources.")
@ExtendedMetaData(name="Bundle.Request", kind="elementOnly")
class BundleRequest extends BackboneElement {

	@GenModel(documentation="In a transaction or batch, this is the HTTP action to be executed for this entry. In a history bundle, this indicates the HTTP action that occurred.")
	@ExtendedMetaData(kind="element", name="method", namespace="##targetNamespace")
	!resolve val HTTPVerb[1] method;

	@GenModel(documentation="The URL for this entry, relative to the root (the address to which the request is posted).")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri[1] url;

	@GenModel(documentation="If the ETag values match, return a 304 Not Modified status. See the API documentation for [\"Conditional Read\"](http.html#cread).")
	@ExtendedMetaData(kind="element", name="ifNoneMatch", namespace="##targetNamespace")
	!resolve val String ifNoneMatch;

	@GenModel(documentation="Only perform the operation if the last updated date matches. See the API documentation for [\"Conditional Read\"](http.html#cread).")
	@ExtendedMetaData(kind="element", name="ifModifiedSince", namespace="##targetNamespace")
	!resolve val Instant ifModifiedSince;

	@GenModel(documentation="Only perform the operation if the Etag value matches. For more information, see the API section [\"Managing Resource Contention\"](http.html#concurrency).")
	@ExtendedMetaData(kind="element", name="ifMatch", namespace="##targetNamespace")
	!resolve val String ifMatch;

	@GenModel(documentation="Instruct the server not to perform the create if a specified resource already exists. For further information, see the API documentation for [\"Conditional Create\"](http.html#ccreate). This is just the query portion of the URL - what follows the \"?\" (not including the \"?\").")
	@ExtendedMetaData(kind="element", name="ifNoneExist", namespace="##targetNamespace")
	!resolve val String ifNoneExist;
}

@GenModel(documentation="A container for a collection of resources.")
@ExtendedMetaData(name="Bundle.Response", kind="elementOnly")
class BundleResponse extends BackboneElement {

	@GenModel(documentation="The status code returned by processing this entry. The status SHALL start with a 3 digit HTTP code (e.g. 404) and may contain the standard HTTP description associated with the status code.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val String[1] status;

	@GenModel(documentation="The location header created by processing this operation, populated if the operation returns a location.")
	@ExtendedMetaData(kind="element", name="location", namespace="##targetNamespace")
	!resolve val Uri location;

	@GenModel(documentation="The Etag for the resource, if the operation for the entry produced a versioned resource (see [Resource Metadata and Versioning](http.html#versioning) and [Managing Resource Contention](http.html#concurrency)).")
	@ExtendedMetaData(kind="element", name="etag", namespace="##targetNamespace")
	!resolve val String etag;

	@GenModel(documentation="The date/time that the resource was modified on the server.")
	@ExtendedMetaData(kind="element", name="lastModified", namespace="##targetNamespace")
	!resolve val Instant lastModified;

	@GenModel(documentation="An OperationOutcome containing hints and warnings produced as part of processing this entry in a batch or transaction.")
	@ExtendedMetaData(kind="element", name="outcome", namespace="##targetNamespace")
	!resolve val ResourceContainer outcome;
}

@GenModel(documentation="A container for a collection of resources.")
@ExtendedMetaData(name="Bundle.Search", kind="elementOnly")
class BundleSearch extends BackboneElement {

	@GenModel(documentation="Why this entry is in the result set - whether it's included as a match or because of an _include requirement, or to convey information or warning information about the search process.")
	@ExtendedMetaData(kind="element", name="mode", namespace="##targetNamespace")
	!resolve val SearchEntryMode mode;

	@GenModel(documentation="When searching, the server's search ranking score for the entry.")
	@ExtendedMetaData(kind="element", name="score", namespace="##targetNamespace")
	!resolve val Decimal score;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="BundleType", kind="elementOnly")
class BundleType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr BundleTypeEnum value;
}

@ExtendedMetaData(name="BundleTypeEnum")
enum BundleTypeEnum {

	@GenModel(documentation="Document")
	document = 0;

	@GenModel(documentation="Message")
	message = 1;

	@GenModel(documentation="Transaction")
	transaction = 2;

	@GenModel(documentation="Transaction Response")
	transactionResponse = 3;

	@GenModel(documentation="Batch")
	batch = 4;

	@GenModel(documentation="Batch Response")
	batchResponse = 5;

	@GenModel(documentation="History List")
	history = 6;

	@GenModel(documentation="Search Results")
	searchset = 7;

	@GenModel(documentation="Collection")
	collection = 8;

	@GenModel(documentation="Subscription Notification")
	subscriptionNotification = 9;
}

@ExtendedMetaData(name="BundleTypeEnum:Object", baseType="BundleTypeEnum")
datatype BundleTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A URI that is a reference to a canonical URL on a FHIR resource
see [Canonical References](references.html#canonical)
If the element is present, it must have either a @value, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="canonical", kind="elementOnly")
class Canonical extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	attr CanonicalPrimitive value;
}

@ExtendedMetaData(name="canonical-primitive", baseType="http://www.eclipse.org/emf/2003/XMLType#anyURI", minLength="1", pattern="\S*")
datatype CanonicalPrimitive : java.lang.String;

@GenModel(documentation="Common Interface declaration for conformance and knowledge artifact resources.")
@ExtendedMetaData(name="CanonicalResource", kind="elementOnly")
class CanonicalResource extends DomainResource {
}

@GenModel(documentation="A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server or Client for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="CapabilityStatement", kind="elementOnly")
class CapabilityStatement extends CanonicalResource {

	@GenModel(documentation="An absolute URI that is used to identify this capability statement when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this capability statement is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the capability statement is stored on different servers.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri url;

	@GenModel(documentation="A formal identifier that is used to identify this CapabilityStatement when it is represented in other formats, or referenced in a specification, model, design or an instance.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The identifier that is used to identify this version of the capability statement when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the capability statement author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@ExtendedMetaData(kind="element", name="versionAlgorithmString", namespace="##targetNamespace")
	!resolve val String versionAlgorithmString;

	@ExtendedMetaData(kind="element", name="versionAlgorithmCoding", namespace="##targetNamespace")
	!resolve val Coding versionAlgorithmCoding;

	@GenModel(documentation="A natural language name identifying the capability statement. This name should be usable as an identifier for the module by machine processing applications such as code generation.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="A short, descriptive, user-friendly title for the capability statement.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="The status of this capability statement. Enables tracking the life-cycle of the content.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="A Boolean value to indicate that this capability statement is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.")
	@ExtendedMetaData(kind="element", name="experimental", namespace="##targetNamespace")
	!resolve val Boolean experimental;

	@GenModel(documentation="The date  (and optionally time) when the capability statement was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the capability statement changes.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime[1] date;

	@GenModel(documentation="The name of the organization or individual responsible for the release and ongoing maintenance of the capability statement.")
	@ExtendedMetaData(kind="element", name="publisher", namespace="##targetNamespace")
	!resolve val String publisher;

	@GenModel(documentation="Contact details to assist a user in finding and communicating with the publisher.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactDetail[*] contact;

	@GenModel(documentation="A free text natural language description of the capability statement from a consumer's perspective. Typically, this is used when the capability statement describes a desired rather than an actual solution, for example as a formal expression of requirements as part of an RFP.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate capability statement instances.")
	@ExtendedMetaData(kind="element", name="useContext", namespace="##targetNamespace")
	!resolve val UsageContext[*] useContext;

	@GenModel(documentation="A legal or geographic region in which the capability statement is intended to be used.")
	@ExtendedMetaData(kind="element", name="jurisdiction", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] jurisdiction;

	@GenModel(documentation="Explanation of why this capability statement is needed and why it has been designed as it has.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val Markdown purpose;

	@GenModel(documentation="A copyright statement relating to the capability statement and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the capability statement.")
	@ExtendedMetaData(kind="element", name="copyright", namespace="##targetNamespace")
	!resolve val Markdown copyright;

	@GenModel(documentation="A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').")
	@ExtendedMetaData(kind="element", name="copyrightLabel", namespace="##targetNamespace")
	!resolve val String copyrightLabel;

	@GenModel(documentation="The way that this statement is intended to be used, to describe an actual running instance of software, a particular product (kind, not instance of software) or a class of implementation (e.g. a desired purchase).")
	@ExtendedMetaData(kind="element", name="kind", namespace="##targetNamespace")
	!resolve val CapabilityStatementKind[1] kind;

	@GenModel(documentation="Reference to a canonical URL of another CapabilityStatement that this software implements. This capability statement is a published API description that corresponds to a business service. The server may actually implement a subset of the capability statement it claims to implement, so the capability statement must specify the full capability details.")
	@ExtendedMetaData(kind="element", name="instantiates", namespace="##targetNamespace")
	!resolve val Canonical[*] instantiates;

	@GenModel(documentation="Reference to a canonical URL of another CapabilityStatement that this software adds to. The capability statement automatically includes everything in the other statement, and it is not duplicated, though the server may repeat the same resources, interactions and operations to add additional details to them.")
	@ExtendedMetaData(kind="element", name="imports", namespace="##targetNamespace")
	!resolve val Canonical[*] imports;

	@GenModel(documentation="Software that is covered by this capability statement.  It is used when the capability statement describes the capabilities of a particular software version, independent of an installation.")
	@ExtendedMetaData(kind="element", name="software", namespace="##targetNamespace")
	!resolve val CapabilityStatementSoftware software;

	@GenModel(documentation="Identifies a specific implementation instance that is described by the capability statement - i.e. a particular installation, rather than the capabilities of a software program.")
	@ExtendedMetaData(kind="element", name="implementation", namespace="##targetNamespace")
	!resolve val CapabilityStatementImplementation implementation;

	@GenModel(documentation="The version of the FHIR specification that this CapabilityStatement describes (which SHALL be the same as the FHIR version of the CapabilityStatement itself). There is no default value.")
	@ExtendedMetaData(kind="element", name="fhirVersion", namespace="##targetNamespace")
	!resolve val FHIRVersion[1] fhirVersion;

	@GenModel(documentation="A list of the formats supported by this implementation using their content types.")
	@ExtendedMetaData(kind="element", name="format", namespace="##targetNamespace")
	!resolve val Code[+] format;

	@GenModel(documentation="A list of the patch formats supported by this implementation using their content types.")
	@ExtendedMetaData(kind="element", name="patchFormat", namespace="##targetNamespace")
	!resolve val Code[*] patchFormat;

	@GenModel(documentation="A list of the languages supported by this implementation that are usefully supported in the ```Accept-Language``` header.")
	@ExtendedMetaData(kind="element", name="acceptLanguage", namespace="##targetNamespace")
	!resolve val Code[*] acceptLanguage;

	@GenModel(documentation="A list of implementation guides that the server does (or should) support in their entirety.")
	@ExtendedMetaData(kind="element", name="implementationGuide", namespace="##targetNamespace")
	!resolve val Canonical[*] implementationGuide;

	@GenModel(documentation="A definition of the restful capabilities of the solution, if any.")
	@ExtendedMetaData(kind="element", name="rest", namespace="##targetNamespace")
	!resolve val CapabilityStatementRest[*] rest;

	@GenModel(documentation="A description of the messaging capabilities of the solution.")
	@ExtendedMetaData(kind="element", name="messaging", namespace="##targetNamespace")
	!resolve val CapabilityStatementMessaging[*] messaging;

	@GenModel(documentation="A document definition.")
	@ExtendedMetaData(kind="element", name="document", namespace="##targetNamespace")
	!resolve val CapabilityStatementDocument[*] document;
}

@GenModel(documentation="A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server or Client for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.")
@ExtendedMetaData(name="CapabilityStatement.Document", kind="elementOnly")
class CapabilityStatementDocument extends BackboneElement {

	@GenModel(documentation="Mode of this document declaration - whether an application is a producer or consumer.")
	@ExtendedMetaData(kind="element", name="mode", namespace="##targetNamespace")
	!resolve val DocumentMode[1] mode;

	@GenModel(documentation="A description of how the application supports or uses the specified document profile.  For example, when documents are created, what action is taken with consumed documents, etc.")
	@ExtendedMetaData(kind="element", name="documentation", namespace="##targetNamespace")
	!resolve val Markdown documentation;

	@GenModel(documentation="A profile on the document Bundle that constrains which resources are present, and their contents.")
	@ExtendedMetaData(kind="element", name="profile", namespace="##targetNamespace")
	!resolve val Canonical[1] profile;
}

@GenModel(documentation="A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server or Client for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.")
@ExtendedMetaData(name="CapabilityStatement.Endpoint", kind="elementOnly")
class CapabilityStatementEndpoint extends BackboneElement {

	@GenModel(documentation="A list of the messaging transport protocol(s) identifiers, supported by this endpoint.")
	@ExtendedMetaData(kind="element", name="protocol", namespace="##targetNamespace")
	!resolve val Coding[1] protocol;

	@GenModel(documentation="The network address of the endpoint. For solutions that do not use network addresses for routing, it can be just an identifier.")
	@ExtendedMetaData(kind="element", name="address", namespace="##targetNamespace")
	!resolve val Url[1] address;
}

@GenModel(documentation="A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server or Client for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.")
@ExtendedMetaData(name="CapabilityStatement.Implementation", kind="elementOnly")
class CapabilityStatementImplementation extends BackboneElement {

	@GenModel(documentation="Information about the specific installation that this capability statement relates to.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown[1] description;

	@GenModel(documentation="An absolute base URL for the implementation.  This forms the base for REST interfaces as well as the mailbox and document interfaces.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Url url;

	@GenModel(documentation="The organization responsible for the management of the instance and oversight of the data on the server at the specified URL.")
	@ExtendedMetaData(kind="element", name="custodian", namespace="##targetNamespace")
	!resolve val Reference custodian;
}

@GenModel(documentation="A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server or Client for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.")
@ExtendedMetaData(name="CapabilityStatement.Interaction", kind="elementOnly")
class CapabilityStatementInteraction extends BackboneElement {

	@GenModel(documentation="Coded identifier of the operation, supported by the system resource.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val TypeRestfulInteraction[1] code;

	@GenModel(documentation="Guidance specific to the implementation of this operation, such as 'delete is a logical delete' or 'updates are only allowed with version id' or 'creates permitted from pre-authorized certificates only'.")
	@ExtendedMetaData(kind="element", name="documentation", namespace="##targetNamespace")
	!resolve val Markdown documentation;
}

@GenModel(documentation="A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server or Client for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.")
@ExtendedMetaData(name="CapabilityStatement.Interaction1", kind="elementOnly")
class CapabilityStatementInteraction1 extends BackboneElement {

	@GenModel(documentation="A coded identifier of the operation, supported by the system.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val SystemRestfulInteraction[1] code;

	@GenModel(documentation="Guidance specific to the implementation of this operation, such as limitations on the kind of transactions allowed, or information about system wide search is implemented.")
	@ExtendedMetaData(kind="element", name="documentation", namespace="##targetNamespace")
	!resolve val Markdown documentation;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="CapabilityStatementKind", kind="elementOnly")
class CapabilityStatementKind extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr CapabilityStatementKindEnum value;
}

@ExtendedMetaData(name="CapabilityStatementKindEnum")
enum CapabilityStatementKindEnum {

	@GenModel(documentation="Instance")
	instance = 0;

	@GenModel(documentation="Capability")
	capability = 1;

	@GenModel(documentation="Requirements")
	requirements = 2;
}

@ExtendedMetaData(name="CapabilityStatementKindEnum:Object", baseType="CapabilityStatementKindEnum")
datatype CapabilityStatementKindEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server or Client for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.")
@ExtendedMetaData(name="CapabilityStatement.Messaging", kind="elementOnly")
class CapabilityStatementMessaging extends BackboneElement {

	@GenModel(documentation="An endpoint (network accessible address) to which messages and/or replies are to be sent.")
	@ExtendedMetaData(kind="element", name="endpoint", namespace="##targetNamespace")
	!resolve val CapabilityStatementEndpoint[*] endpoint;

	@GenModel(documentation="Length if the receiver's reliable messaging cache in minutes (if a receiver) or how long the cache length on the receiver should be (if a sender).")
	@ExtendedMetaData(kind="element", name="reliableCache", namespace="##targetNamespace")
	!resolve val UnsignedInt reliableCache;

	@GenModel(documentation="Documentation about the system's messaging capabilities for this endpoint not otherwise documented by the capability statement.  For example, the process for becoming an authorized messaging exchange partner.")
	@ExtendedMetaData(kind="element", name="documentation", namespace="##targetNamespace")
	!resolve val Markdown documentation;

	@GenModel(documentation="References to message definitions for messages this system can send or receive.")
	@ExtendedMetaData(kind="element", name="supportedMessage", namespace="##targetNamespace")
	!resolve val CapabilityStatementSupportedMessage[*] supportedMessage;
}

@GenModel(documentation="A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server or Client for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.")
@ExtendedMetaData(name="CapabilityStatement.Operation", kind="elementOnly")
class CapabilityStatementOperation extends BackboneElement {

	@GenModel(documentation="The name of the operation or query. For an operation, this name is prefixed with $ and used in the URL. For a query, this is the name used in the _query parameter when the query is called. This SHOULD be the same as the OperationDefinition.code of the defining OperationDefinition.  However, it can sometimes differ if necessary to disambiguate when a server supports multiple OperationDefinition that happen to share the same code.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String[1] name;

	@GenModel(documentation="Where the formal definition can be found. If a server references the base definition of an Operation (i.e. from the specification itself such as ```http://hl7.org/fhir/OperationDefinition/ValueSet-expand```), that means it supports the full capabilities of the operation - e.g. both GET and POST invocation.  If it only supports a subset, it must define its own custom [OperationDefinition](operationdefinition.html#) with a 'base' of the original OperationDefinition.  The custom definition would describe the specific subset of functionality supported.")
	@ExtendedMetaData(kind="element", name="definition", namespace="##targetNamespace")
	!resolve val Canonical[1] definition;

	@GenModel(documentation="Documentation that describes anything special about the operation behavior, possibly detailing different behavior for system, type and instance-level invocation of the operation.")
	@ExtendedMetaData(kind="element", name="documentation", namespace="##targetNamespace")
	!resolve val Markdown documentation;
}

@GenModel(documentation="A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server or Client for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.")
@ExtendedMetaData(name="CapabilityStatement.Resource", kind="elementOnly")
class CapabilityStatementResource extends BackboneElement {

	@GenModel(documentation="A type of resource exposed via the restful interface.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val ResourceType[1] type;

	@GenModel(documentation="A system-wide profile that is applied across *all* instances of the resource supported by the system. For example, if declared on Observation, this profile is the \"superset\" of capabilities for laboratory *and* vitals *and* other domains. See further discussion in [Using Profiles](profiling.html#profile-uses).")
	@ExtendedMetaData(kind="element", name="profile", namespace="##targetNamespace")
	!resolve val Canonical profile;

	@GenModel(documentation="A list of profiles representing different use cases the system hosts/produces. A supported profile is a statement about the functionality of the data and services provided by the server (or the client) for supported use cases. For example, a system can define and declare multiple Observation profiles for laboratory observations, vital sign observations, etc. By declaring supported profiles, systems provide a way to determine whether individual resources are conformant. See further discussion in [Using Profiles](profiling.html#profile-uses).")
	@ExtendedMetaData(kind="element", name="supportedProfile", namespace="##targetNamespace")
	!resolve val Canonical[*] supportedProfile;

	@GenModel(documentation="Additional information about the resource type used by the system.")
	@ExtendedMetaData(kind="element", name="documentation", namespace="##targetNamespace")
	!resolve val Markdown documentation;

	@GenModel(documentation="Identifies a restful operation supported by the solution.")
	@ExtendedMetaData(kind="element", name="interaction", namespace="##targetNamespace")
	!resolve val CapabilityStatementInteraction[*] interaction;

	@GenModel(documentation="This field is set to no-version to specify that the system does not support (server) or use (client) versioning for this resource type. If this has some other value, the server must at least correctly track and populate the versionId meta-property on resources. If the value is 'versioned-update', then the server supports all the versioning features, including using e-tags for version integrity in the API.")
	@ExtendedMetaData(kind="element", name="versioning", namespace="##targetNamespace")
	!resolve val ResourceVersionPolicy versioning;

	@GenModel(documentation="A flag for whether the server is able to return past versions as part of the vRead operation.")
	@ExtendedMetaData(kind="element", name="readHistory", namespace="##targetNamespace")
	!resolve val Boolean readHistory;

	@GenModel(documentation="A flag to indicate that the server allows or needs to allow the client to create new identities on the server (that is, the client PUTs to a location where there is no existing resource). Allowing this operation means that the server allows the client to create new identities on the server.")
	@ExtendedMetaData(kind="element", name="updateCreate", namespace="##targetNamespace")
	!resolve val Boolean updateCreate;

	@GenModel(documentation="A flag that indicates that the server supports conditional create.")
	@ExtendedMetaData(kind="element", name="conditionalCreate", namespace="##targetNamespace")
	!resolve val Boolean conditionalCreate;

	@GenModel(documentation="A code that indicates how the server supports conditional read.")
	@ExtendedMetaData(kind="element", name="conditionalRead", namespace="##targetNamespace")
	!resolve val ConditionalReadStatus conditionalRead;

	@GenModel(documentation="A flag that indicates that the server supports conditional update.")
	@ExtendedMetaData(kind="element", name="conditionalUpdate", namespace="##targetNamespace")
	!resolve val Boolean conditionalUpdate;

	@GenModel(documentation="A flag that indicates that the server supports conditional patch.")
	@ExtendedMetaData(kind="element", name="conditionalPatch", namespace="##targetNamespace")
	!resolve val Boolean conditionalPatch;

	@GenModel(documentation="A code that indicates how the server supports conditional delete.")
	@ExtendedMetaData(kind="element", name="conditionalDelete", namespace="##targetNamespace")
	!resolve val ConditionalDeleteStatus conditionalDelete;

	@GenModel(documentation="A set of flags that defines how references are supported.")
	@ExtendedMetaData(kind="element", name="referencePolicy", namespace="##targetNamespace")
	!resolve val ReferenceHandlingPolicy[*] referencePolicy;

	@GenModel(documentation="A list of _include values supported by the server.")
	@ExtendedMetaData(kind="element", name="searchInclude", namespace="##targetNamespace")
	!resolve val String[*] searchInclude;

	@GenModel(documentation="A list of _revinclude (reverse include) values supported by the server.")
	@ExtendedMetaData(kind="element", name="searchRevInclude", namespace="##targetNamespace")
	!resolve val String[*] searchRevInclude;

	@GenModel(documentation="Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.")
	@ExtendedMetaData(kind="element", name="searchParam", namespace="##targetNamespace")
	!resolve val CapabilityStatementSearchParam[*] searchParam;

	@GenModel(documentation="Definition of an operation or a named query together with its parameters and their meaning and type. Consult the definition of the operation for details about how to invoke the operation, and the parameters.")
	@ExtendedMetaData(kind="element", name="operation", namespace="##targetNamespace")
	!resolve val CapabilityStatementOperation[*] operation;
}

@GenModel(documentation="A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server or Client for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.")
@ExtendedMetaData(name="CapabilityStatement.Rest", kind="elementOnly")
class CapabilityStatementRest extends BackboneElement {

	@GenModel(documentation="Identifies whether this portion of the statement is describing the ability to initiate or receive restful operations.")
	@ExtendedMetaData(kind="element", name="mode", namespace="##targetNamespace")
	!resolve val RestfulCapabilityMode[1] mode;

	@GenModel(documentation="Information about the system's restful capabilities that apply across all applications, such as security.")
	@ExtendedMetaData(kind="element", name="documentation", namespace="##targetNamespace")
	!resolve val Markdown documentation;

	@GenModel(documentation="Information about security implementation from an interface perspective - what a client needs to know.")
	@ExtendedMetaData(kind="element", name="security", namespace="##targetNamespace")
	!resolve val CapabilityStatementSecurity security;

	@GenModel(documentation="A specification of the restful capabilities of the solution for a specific resource type.")
	@ExtendedMetaData(kind="element", name="resource", namespace="##targetNamespace")
	!resolve val CapabilityStatementResource[*] resource;

	@GenModel(documentation="A specification of restful operations supported by the system.")
	@ExtendedMetaData(kind="element", name="interaction", namespace="##targetNamespace")
	!resolve val CapabilityStatementInteraction1[*] interaction;

	@GenModel(documentation="Search parameters that are supported for searching all resources for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation. This is only for searches executed against the system-level endpoint.")
	@ExtendedMetaData(kind="element", name="searchParam", namespace="##targetNamespace")
	!resolve val CapabilityStatementSearchParam[*] searchParam;

	@GenModel(documentation="Definition of an operation or a named query together with its parameters and their meaning and type.")
	@ExtendedMetaData(kind="element", name="operation", namespace="##targetNamespace")
	!resolve val CapabilityStatementOperation[*] operation;

	@GenModel(documentation="An absolute URI which is a reference to the definition of a compartment that the system supports. The reference is to a CompartmentDefinition resource by its canonical URL .")
	@ExtendedMetaData(kind="element", name="compartment", namespace="##targetNamespace")
	!resolve val Canonical[*] compartment;
}

@GenModel(documentation="A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server or Client for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.")
@ExtendedMetaData(name="CapabilityStatement.SearchParam", kind="elementOnly")
class CapabilityStatementSearchParam extends BackboneElement {

	@GenModel(documentation="The label used for the search parameter in this particular system's API - i.e. the 'name' portion of the name-value pair that will appear as part of the search URL.  This SHOULD be the same as the SearchParameter.code of the defining SearchParameter.  However, it can sometimes differ if necessary to disambiguate when a server supports multiple SearchParameters that happen to share the same code.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String[1] name;

	@GenModel(documentation="An absolute URI that is a formal reference to where this parameter was first defined, so that a client can be confident of the meaning of the search parameter (a reference to [SearchParameter.url](searchparameter-definitions.html#SearchParameter.url)). This element SHALL be populated if the search parameter refers to a SearchParameter defined by the FHIR core specification or externally defined IGs.")
	@ExtendedMetaData(kind="element", name="definition", namespace="##targetNamespace")
	!resolve val Canonical definition;

	@GenModel(documentation="The type of value a search parameter refers to, and how the content is interpreted.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val SearchParamType[1] type;

	@GenModel(documentation="This allows documentation of any distinct behaviors about how the search parameter is used.  For example, text matching algorithms.")
	@ExtendedMetaData(kind="element", name="documentation", namespace="##targetNamespace")
	!resolve val Markdown documentation;
}

@GenModel(documentation="A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server or Client for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.")
@ExtendedMetaData(name="CapabilityStatement.Security", kind="elementOnly")
class CapabilityStatementSecurity extends BackboneElement {

	@GenModel(documentation="Server adds CORS headers when responding to requests - this enables Javascript applications to use the server.")
	@ExtendedMetaData(kind="element", name="cors", namespace="##targetNamespace")
	!resolve val Boolean cors;

	@GenModel(documentation="Types of security services that are supported/required by the system.")
	@ExtendedMetaData(kind="element", name="service", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] service;

	@GenModel(documentation="General description of how security works.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;
}

@GenModel(documentation="A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server or Client for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.")
@ExtendedMetaData(name="CapabilityStatement.Software", kind="elementOnly")
class CapabilityStatementSoftware extends BackboneElement {

	@GenModel(documentation="Name the software is known by.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String[1] name;

	@GenModel(documentation="The version identifier for the software covered by this statement.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@GenModel(documentation="Date this version of the software was released.")
	@ExtendedMetaData(kind="element", name="releaseDate", namespace="##targetNamespace")
	!resolve val DateTime releaseDate;
}

@GenModel(documentation="A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server or Client for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.")
@ExtendedMetaData(name="CapabilityStatement.SupportedMessage", kind="elementOnly")
class CapabilityStatementSupportedMessage extends BackboneElement {

	@GenModel(documentation="The mode of this event declaration - whether application is sender or receiver.")
	@ExtendedMetaData(kind="element", name="mode", namespace="##targetNamespace")
	!resolve val EventCapabilityMode[1] mode;

	@GenModel(documentation="Points to a message definition that identifies the messaging event, message structure, allowed responses, etc.")
	@ExtendedMetaData(kind="element", name="definition", namespace="##targetNamespace")
	!resolve val Canonical[1] definition;
}

@GenModel(documentation="Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="CarePlan", kind="elementOnly")
class CarePlan extends DomainResource {

	@GenModel(documentation="Business identifiers assigned to this care plan by the performer or other systems which remain constant as the resource is updated and propagates from server to server.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The URL pointing to a FHIR-defined protocol, guideline, questionnaire or other definition that is adhered to in whole or in part by this CarePlan.")
	@ExtendedMetaData(kind="element", name="instantiatesCanonical", namespace="##targetNamespace")
	!resolve val Canonical[*] instantiatesCanonical;

	@GenModel(documentation="The URL pointing to an externally maintained protocol, guideline, questionnaire or other definition that is adhered to in whole or in part by this CarePlan.")
	@ExtendedMetaData(kind="element", name="instantiatesUri", namespace="##targetNamespace")
	!resolve val Uri[*] instantiatesUri;

	@GenModel(documentation="A higher-level request resource (i.e. a plan, proposal or order) that is fulfilled in whole or in part by this care plan.")
	@ExtendedMetaData(kind="element", name="basedOn", namespace="##targetNamespace")
	!resolve val Reference[*] basedOn;

	@GenModel(documentation="Completed or terminated care plan whose function is taken by this new care plan.")
	@ExtendedMetaData(kind="element", name="replaces", namespace="##targetNamespace")
	!resolve val Reference[*] replaces;

	@GenModel(documentation="A larger care plan of which this particular care plan is a component or step.")
	@ExtendedMetaData(kind="element", name="partOf", namespace="##targetNamespace")
	!resolve val Reference[*] partOf;

	@GenModel(documentation="Indicates whether the plan is currently being acted upon, represents future intentions or is now a historical record.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val RequestStatus[1] status;

	@GenModel(documentation="Indicates the level of authority/intentionality associated with the care plan and where the care plan fits into the workflow chain.")
	@ExtendedMetaData(kind="element", name="intent", namespace="##targetNamespace")
	!resolve val CarePlanIntent[1] intent;

	@GenModel(documentation="Identifies what \"kind\" of plan this is to support differentiation between multiple co-existing plans; e.g. \"Home health\", \"psychiatric\", \"asthma\", \"disease management\", \"wellness plan\", etc.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] category;

	@GenModel(documentation="Human-friendly name for the care plan.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="A description of the scope and nature of the plan.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val String description;

	@GenModel(documentation="Identifies the patient or group whose intended care is described by the plan.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference[1] subject;

	@GenModel(documentation="The Encounter during which this CarePlan was created or to which the creation of this record is tightly associated.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@GenModel(documentation="Indicates when the plan did (or is intended to) come into effect and end.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;

	@GenModel(documentation="Represents when this particular CarePlan record was created in the system, which is often a system-generated date.")
	@ExtendedMetaData(kind="element", name="created", namespace="##targetNamespace")
	!resolve val DateTime created;

	@GenModel(documentation="When populated, the custodian is responsible for the care plan. The care plan is attributed to the custodian.")
	@ExtendedMetaData(kind="element", name="custodian", namespace="##targetNamespace")
	!resolve val Reference custodian;

	@GenModel(documentation="Identifies the individual(s), organization or device who provided the contents of the care plan.")
	@ExtendedMetaData(kind="element", name="contributor", namespace="##targetNamespace")
	!resolve val Reference[*] contributor;

	@GenModel(documentation="Identifies all people and organizations who are expected to be involved in the care envisioned by this plan.")
	@ExtendedMetaData(kind="element", name="careTeam", namespace="##targetNamespace")
	!resolve val Reference[*] careTeam;

	@GenModel(documentation="Identifies the conditions/problems/concerns/diagnoses/etc. whose management and/or mitigation are handled by this plan.")
	@ExtendedMetaData(kind="element", name="addresses", namespace="##targetNamespace")
	!resolve val CodeableReference[*] addresses;

	@GenModel(documentation="Identifies portions of the patient's record that specifically influenced the formation of the plan.  These might include comorbidities, recent procedures, limitations, recent assessments, etc.")
	@ExtendedMetaData(kind="element", name="supportingInfo", namespace="##targetNamespace")
	!resolve val Reference[*] supportingInfo;

	@GenModel(documentation="Describes the intended objective(s) of carrying out the care plan.")
	@ExtendedMetaData(kind="element", name="goal", namespace="##targetNamespace")
	!resolve val Reference[*] goal;

	@GenModel(documentation="Identifies an action that has occurred or is a planned action to occur as part of the plan. For example, a medication to be used, lab tests to perform, self-monitoring that has occurred, education etc.")
	@ExtendedMetaData(kind="element", name="activity", namespace="##targetNamespace")
	!resolve val CarePlanActivity[*] activity;

	@GenModel(documentation="General notes about the care plan not covered elsewhere.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;
}

@GenModel(documentation="Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.")
@ExtendedMetaData(name="CarePlan.Activity", kind="elementOnly")
class CarePlanActivity extends BackboneElement {

	@GenModel(documentation="Identifies the activity that was performed. For example, an activity could be patient education, exercise, or a medication administration. The reference to an \"event\" resource, such as Procedure or Encounter or Observation, represents the activity that was performed. The requested activity can be conveyed using the CarePlan.activity.plannedActivityReference (a reference to a “request” resource).")
	@ExtendedMetaData(kind="element", name="performedActivity", namespace="##targetNamespace")
	!resolve val CodeableReference[*] performedActivity;

	@GenModel(documentation="Notes about the adherence/status/progress of the activity.")
	@ExtendedMetaData(kind="element", name="progress", namespace="##targetNamespace")
	!resolve val Annotation[*] progress;

	@GenModel(documentation="The details of the proposed activity represented in a specific resource.")
	@ExtendedMetaData(kind="element", name="plannedActivityReference", namespace="##targetNamespace")
	!resolve val Reference plannedActivityReference;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="CarePlanIntent", kind="elementOnly")
class CarePlanIntent extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr CarePlanIntentEnum value;
}

@ExtendedMetaData(name="CarePlanIntentEnum")
enum CarePlanIntentEnum {

	@GenModel(documentation="Proposal")
	proposal = 0;

	@GenModel(documentation="Plan")
	plan = 1;

	@GenModel(documentation="Order")
	order = 2;

	@GenModel(documentation="Option")
	option = 3;

	@GenModel(documentation="Directive")
	directive = 4;
}

@ExtendedMetaData(name="CarePlanIntentEnum:Object", baseType="CarePlanIntentEnum")
datatype CarePlanIntentEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="The Care Team includes all the people and organizations who plan to participate in the coordination and delivery of care.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="CareTeam", kind="elementOnly")
class CareTeam extends DomainResource {

	@GenModel(documentation="Business identifiers assigned to this care team by the performer or other systems which remain constant as the resource is updated and propagates from server to server.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Indicates the current state of the care team.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val CareTeamStatus status;

	@GenModel(documentation="Identifies what kind of team.  This is to support differentiation between multiple co-existing teams, such as care plan team, episode of care team, longitudinal care team.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] category;

	@GenModel(documentation="A label for human use intended to distinguish like teams.  E.g. the \"red\" vs. \"green\" trauma teams.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="Identifies the patient or group whose intended care is handled by the team.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference subject;

	@GenModel(documentation="Indicates when the team did (or is intended to) come into effect and end.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;

	@GenModel(documentation="Identifies all people and organizations who are expected to be involved in the care team.")
	@ExtendedMetaData(kind="element", name="participant", namespace="##targetNamespace")
	!resolve val CareTeamParticipant[*] participant;

	@GenModel(documentation="Describes why the care team exists.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val CodeableReference[*] reason;

	@GenModel(documentation="The organization responsible for the care team.")
	@ExtendedMetaData(kind="element", name="managingOrganization", namespace="##targetNamespace")
	!resolve val Reference[*] managingOrganization;

	@GenModel(documentation="A central contact detail for the care team (that applies to all members).")
	@ExtendedMetaData(kind="element", name="telecom", namespace="##targetNamespace")
	!resolve val ContactPoint[*] telecom;

	@GenModel(documentation="Comments made about the CareTeam.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;
}

@GenModel(documentation="The Care Team includes all the people and organizations who plan to participate in the coordination and delivery of care.")
@ExtendedMetaData(name="CareTeam.Participant", kind="elementOnly")
class CareTeamParticipant extends BackboneElement {

	@GenModel(documentation="Indicates specific responsibility of an individual within the care team, such as \"Primary care physician\", \"Trained social worker counselor\", \"Caregiver\", etc.")
	@ExtendedMetaData(kind="element", name="role", namespace="##targetNamespace")
	!resolve val CodeableConcept role;

	@GenModel(documentation="The specific person or organization who is participating/expected to participate in the care team.")
	@ExtendedMetaData(kind="element", name="member", namespace="##targetNamespace")
	!resolve val Reference member;

	@GenModel(documentation="The organization of the practitioner.")
	@ExtendedMetaData(kind="element", name="onBehalfOf", namespace="##targetNamespace")
	!resolve val Reference onBehalfOf;

	@ExtendedMetaData(kind="element", name="coveragePeriod", namespace="##targetNamespace")
	!resolve val Period coveragePeriod;

	@ExtendedMetaData(kind="element", name="coverageTiming", namespace="##targetNamespace")
	!resolve val Timing coverageTiming;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="CareTeamStatus", kind="elementOnly")
class CareTeamStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr CareTeamStatusEnum value;
}

@ExtendedMetaData(name="CareTeamStatusEnum")
enum CareTeamStatusEnum {

	@GenModel(documentation="Proposed")
	proposed = 0;

	@GenModel(documentation="Active")
	active = 1;

	@GenModel(documentation="Suspended")
	suspended = 2;

	@GenModel(documentation="Inactive")
	inactive = 3;

	@GenModel(documentation="Entered in Error")
	enteredInError = 4;
}

@ExtendedMetaData(name="CareTeamStatusEnum:Object", baseType="CareTeamStatusEnum")
datatype CareTeamStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="CharacteristicCombination", kind="elementOnly")
class CharacteristicCombination extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr CharacteristicCombinationEnum value;
}

@ExtendedMetaData(name="CharacteristicCombinationEnum")
enum CharacteristicCombinationEnum {

	@GenModel(documentation="All of")
	allOf = 0;

	@GenModel(documentation="Any of")
	anyOf = 1;

	@GenModel(documentation="At least")
	atLeast = 2;

	@GenModel(documentation="At most")
	atMost = 3;

	@GenModel(documentation="Statistical")
	statistical = 4;

	@GenModel(documentation="Net effect")
	netEffect = 5;

	@GenModel(documentation="Dataset")
	dataset = 6;
}

@ExtendedMetaData(name="CharacteristicCombinationEnum:Object", baseType="CharacteristicCombinationEnum")
datatype CharacteristicCombinationEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="The resource ChargeItem describes the provision of healthcare provider products for a certain patient, therefore referring not only to the product, but containing in addition details of the provision, like date, time, amounts and participating organizations and persons. Main Usage of the ChargeItem is to enable the billing process and internal cost allocation.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ChargeItem", kind="elementOnly")
class ChargeItem extends DomainResource {

	@GenModel(documentation="Identifiers assigned to this event performer or other systems.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="References the (external) source of pricing information, rules of application for the code this ChargeItem uses.")
	@ExtendedMetaData(kind="element", name="definitionUri", namespace="##targetNamespace")
	!resolve val Uri[*] definitionUri;

	@GenModel(documentation="References the source of pricing information, rules of application for the code this ChargeItem uses.")
	@ExtendedMetaData(kind="element", name="definitionCanonical", namespace="##targetNamespace")
	!resolve val Canonical[*] definitionCanonical;

	@GenModel(documentation="The current state of the ChargeItem.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val ChargeItemStatus[1] status;

	@GenModel(documentation="ChargeItems can be grouped to larger ChargeItems covering the whole set.")
	@ExtendedMetaData(kind="element", name="partOf", namespace="##targetNamespace")
	!resolve val Reference[*] partOf;

	@GenModel(documentation="A code that identifies the charge, like a billing code.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] code;

	@GenModel(documentation="The individual or set of individuals the action is being or was performed on.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference[1] subject;

	@GenModel(documentation="This ChargeItem has the details of how the associated Encounter should be billed or otherwise be handled by finance systems.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@ExtendedMetaData(kind="element", name="occurrenceDateTime", namespace="##targetNamespace")
	!resolve val DateTime occurrenceDateTime;

	@ExtendedMetaData(kind="element", name="occurrencePeriod", namespace="##targetNamespace")
	!resolve val Period occurrencePeriod;

	@ExtendedMetaData(kind="element", name="occurrenceTiming", namespace="##targetNamespace")
	!resolve val Timing occurrenceTiming;

	@GenModel(documentation="Indicates who or what performed or participated in the charged service.")
	@ExtendedMetaData(kind="element", name="performer", namespace="##targetNamespace")
	!resolve val ChargeItemPerformer[*] performer;

	@GenModel(documentation="The organization performing the service.")
	@ExtendedMetaData(kind="element", name="performingOrganization", namespace="##targetNamespace")
	!resolve val Reference performingOrganization;

	@GenModel(documentation="The organization requesting the service.")
	@ExtendedMetaData(kind="element", name="requestingOrganization", namespace="##targetNamespace")
	!resolve val Reference requestingOrganization;

	@GenModel(documentation="The financial cost center permits the tracking of charge attribution.")
	@ExtendedMetaData(kind="element", name="costCenter", namespace="##targetNamespace")
	!resolve val Reference costCenter;

	@GenModel(documentation="Quantity of which the charge item has been serviced.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Quantity quantity;

	@GenModel(documentation="The anatomical location where the related service has been applied.")
	@ExtendedMetaData(kind="element", name="bodysite", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] bodysite;

	@GenModel(documentation="The unit price of the chargable item.")
	@ExtendedMetaData(kind="element", name="unitPriceComponent", namespace="##targetNamespace")
	!resolve val MonetaryComponent unitPriceComponent;

	@GenModel(documentation="The total price for the chargable item, accounting for the quantity.")
	@ExtendedMetaData(kind="element", name="totalPriceComponent", namespace="##targetNamespace")
	!resolve val MonetaryComponent totalPriceComponent;

	@GenModel(documentation="If the list price or the rule-based factor associated with the code is overridden, this attribute can capture a text to indicate the  reason for this action.")
	@ExtendedMetaData(kind="element", name="overrideReason", namespace="##targetNamespace")
	!resolve val CodeableConcept overrideReason;

	@GenModel(documentation="The device, practitioner, etc. who entered the charge item.")
	@ExtendedMetaData(kind="element", name="enterer", namespace="##targetNamespace")
	!resolve val Reference enterer;

	@GenModel(documentation="Date the charge item was entered.")
	@ExtendedMetaData(kind="element", name="enteredDate", namespace="##targetNamespace")
	!resolve val DateTime enteredDate;

	@GenModel(documentation="Describes why the event occurred in coded or textual form.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] reason;

	@GenModel(documentation="Indicated the rendered service that caused this charge.")
	@ExtendedMetaData(kind="element", name="service", namespace="##targetNamespace")
	!resolve val CodeableReference[*] service;

	@GenModel(documentation="Identifies the device, food, drug or other product being charged either by type code or reference to an instance.")
	@ExtendedMetaData(kind="element", name="product", namespace="##targetNamespace")
	!resolve val CodeableReference[*] product;

	@GenModel(documentation="Account into which this ChargeItems belongs.")
	@ExtendedMetaData(kind="element", name="account", namespace="##targetNamespace")
	!resolve val Reference[*] account;

	@GenModel(documentation="Comments made about the event by the performer, subject or other participants.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="Further information supporting this charge.")
	@ExtendedMetaData(kind="element", name="supportingInformation", namespace="##targetNamespace")
	!resolve val Reference[*] supportingInformation;
}

@GenModel(documentation="The ChargeItemDefinition resource provides the properties that apply to the (billing) codes necessary to calculate costs and prices. The properties may differ largely depending on type and realm, therefore this resource gives only a rough structure and requires profiling for each type of billing code system.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ChargeItemDefinition", kind="elementOnly")
class ChargeItemDefinition extends MetadataResource {

	@GenModel(documentation="An absolute URI that is used to identify this charge item definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this charge item definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the charge item definition is stored on different servers.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri url;

	@GenModel(documentation="A formal identifier that is used to identify this charge item definition when it is represented in other formats, or referenced in a specification, model, design or an instance.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The identifier that is used to identify this version of the charge item definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the charge item definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active assets.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@ExtendedMetaData(kind="element", name="versionAlgorithmString", namespace="##targetNamespace")
	!resolve val String versionAlgorithmString;

	@ExtendedMetaData(kind="element", name="versionAlgorithmCoding", namespace="##targetNamespace")
	!resolve val Coding versionAlgorithmCoding;

	@GenModel(documentation="A natural language name identifying the ChargeItemDefinition. This name should be usable as an identifier for the module by machine processing applications such as code generation.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="A short, descriptive, user-friendly title for the charge item definition.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="The URL pointing to an externally-defined charge item definition that is adhered to in whole or in part by this definition.")
	@ExtendedMetaData(kind="element", name="derivedFromUri", namespace="##targetNamespace")
	!resolve val Uri[*] derivedFromUri;

	@GenModel(documentation="A larger definition of which this particular definition is a component or step.")
	@ExtendedMetaData(kind="element", name="partOf", namespace="##targetNamespace")
	!resolve val Canonical[*] partOf;

	@GenModel(documentation="As new versions of a protocol or guideline are defined, allows identification of what versions are replaced by a new instance.")
	@ExtendedMetaData(kind="element", name="replaces", namespace="##targetNamespace")
	!resolve val Canonical[*] replaces;

	@GenModel(documentation="The current state of the ChargeItemDefinition.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="A Boolean value to indicate that this charge item definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.")
	@ExtendedMetaData(kind="element", name="experimental", namespace="##targetNamespace")
	!resolve val Boolean experimental;

	@GenModel(documentation="The date  (and optionally time) when the charge item definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the charge item definition changes.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="The name of the organization or individual responsible for the release and ongoing maintenance of the charge item definition.")
	@ExtendedMetaData(kind="element", name="publisher", namespace="##targetNamespace")
	!resolve val String publisher;

	@GenModel(documentation="Contact details to assist a user in finding and communicating with the publisher.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactDetail[*] contact;

	@GenModel(documentation="A free text natural language description of the charge item definition from a consumer's perspective.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate charge item definition instances.")
	@ExtendedMetaData(kind="element", name="useContext", namespace="##targetNamespace")
	!resolve val UsageContext[*] useContext;

	@GenModel(documentation="A legal or geographic region in which the charge item definition is intended to be used.")
	@ExtendedMetaData(kind="element", name="jurisdiction", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] jurisdiction;

	@GenModel(documentation="Explanation of why this charge item definition is needed and why it has been designed as it has.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val Markdown purpose;

	@GenModel(documentation="A copyright statement relating to the charge item definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the charge item definition.")
	@ExtendedMetaData(kind="element", name="copyright", namespace="##targetNamespace")
	!resolve val Markdown copyright;

	@GenModel(documentation="A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').")
	@ExtendedMetaData(kind="element", name="copyrightLabel", namespace="##targetNamespace")
	!resolve val String copyrightLabel;

	@GenModel(documentation="The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.")
	@ExtendedMetaData(kind="element", name="approvalDate", namespace="##targetNamespace")
	!resolve val Date approvalDate;

	@GenModel(documentation="The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.")
	@ExtendedMetaData(kind="element", name="lastReviewDate", namespace="##targetNamespace")
	!resolve val Date lastReviewDate;

	@GenModel(documentation="The defined billing details in this resource pertain to the given billing code.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@GenModel(documentation="The defined billing details in this resource pertain to the given product instance(s).")
	@ExtendedMetaData(kind="element", name="instance", namespace="##targetNamespace")
	!resolve val Reference[*] instance;

	@GenModel(documentation="Expressions that describe applicability criteria for the billing code.")
	@ExtendedMetaData(kind="element", name="applicability", namespace="##targetNamespace")
	!resolve val ChargeItemDefinitionApplicability[*] applicability;

	@GenModel(documentation="Group of properties which are applicable under the same conditions. If no applicability rules are established for the group, then all properties always apply.")
	@ExtendedMetaData(kind="element", name="propertyGroup", namespace="##targetNamespace")
	!resolve val ChargeItemDefinitionPropertyGroup[*] propertyGroup;
}

@GenModel(documentation="The ChargeItemDefinition resource provides the properties that apply to the (billing) codes necessary to calculate costs and prices. The properties may differ largely depending on type and realm, therefore this resource gives only a rough structure and requires profiling for each type of billing code system.")
@ExtendedMetaData(name="ChargeItemDefinition.Applicability", kind="elementOnly")
class ChargeItemDefinitionApplicability extends BackboneElement {

	@GenModel(documentation="An expression that returns true or false, indicating whether the condition is satisfied. When using FHIRPath expressions, the %context environment variable must be replaced at runtime with the ChargeItem resource to which this definition is applied.")
	@ExtendedMetaData(kind="element", name="condition", namespace="##targetNamespace")
	!resolve val Expression condition;

	@GenModel(documentation="The period during which the charge item definition content was or is planned to be in active use.")
	@ExtendedMetaData(kind="element", name="effectivePeriod", namespace="##targetNamespace")
	!resolve val Period effectivePeriod;

	@GenModel(documentation="Reference to / quotation of the external source of the group of properties.")
	@ExtendedMetaData(kind="element", name="relatedArtifact", namespace="##targetNamespace")
	!resolve val RelatedArtifact relatedArtifact;
}

@GenModel(documentation="The ChargeItemDefinition resource provides the properties that apply to the (billing) codes necessary to calculate costs and prices. The properties may differ largely depending on type and realm, therefore this resource gives only a rough structure and requires profiling for each type of billing code system.")
@ExtendedMetaData(name="ChargeItemDefinition.PropertyGroup", kind="elementOnly")
class ChargeItemDefinitionPropertyGroup extends BackboneElement {

	@GenModel(documentation="Expressions that describe applicability criteria for the priceComponent.")
	@ExtendedMetaData(kind="element", name="applicability", namespace="##targetNamespace")
	!resolve val ChargeItemDefinitionApplicability[*] applicability;

	@GenModel(documentation="The price for a ChargeItem may be calculated as a base price with surcharges/deductions that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, factors and conditions that apply to a billing code is currently under development. The priceComponent element can be used to offer transparency to the recipient of the Invoice of how the prices have been calculated.")
	@ExtendedMetaData(kind="element", name="priceComponent", namespace="##targetNamespace")
	!resolve val MonetaryComponent[*] priceComponent;
}

@GenModel(documentation="The resource ChargeItem describes the provision of healthcare provider products for a certain patient, therefore referring not only to the product, but containing in addition details of the provision, like date, time, amounts and participating organizations and persons. Main Usage of the ChargeItem is to enable the billing process and internal cost allocation.")
@ExtendedMetaData(name="ChargeItem.Performer", kind="elementOnly")
class ChargeItemPerformer extends BackboneElement {

	@GenModel(documentation="Describes the type of performance or participation(e.g. primary surgeon, anesthesiologiest, etc.).")
	@ExtendedMetaData(kind="element", name="function", namespace="##targetNamespace")
	!resolve val CodeableConcept function;

	@GenModel(documentation="The device, practitioner, etc. who performed or participated in the service.")
	@ExtendedMetaData(kind="element", name="actor", namespace="##targetNamespace")
	!resolve val Reference[1] actor;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ChargeItemStatus", kind="elementOnly")
class ChargeItemStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ChargeItemStatusEnum value;
}

@ExtendedMetaData(name="ChargeItemStatusEnum")
enum ChargeItemStatusEnum {

	@GenModel(documentation="Planned")
	planned = 0;

	@GenModel(documentation="Billable")
	billable = 1;

	@GenModel(documentation="Not billable")
	notBillable = 2;

	@GenModel(documentation="Aborted")
	aborted = 3;

	@GenModel(documentation="Billed")
	billed = 4;

	@GenModel(documentation="Entered in Error")
	enteredInError = 5;

	@GenModel(documentation="Unknown")
	unknown = 6;
}

@ExtendedMetaData(name="ChargeItemStatusEnum:Object", baseType="ChargeItemStatusEnum")
datatype ChargeItemStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Citation", kind="elementOnly")
class Citation extends MetadataResource {

	@GenModel(documentation="An absolute URI that is used to identify this citation record when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this summary is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the summary is stored on different servers.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri url;

	@GenModel(documentation="A formal identifier that is used to identify this citation record when it is represented in other formats, or referenced in a specification, model, design or an instance.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The identifier that is used to identify this version of the citation record when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the citation record author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@ExtendedMetaData(kind="element", name="versionAlgorithmString", namespace="##targetNamespace")
	!resolve val String versionAlgorithmString;

	@ExtendedMetaData(kind="element", name="versionAlgorithmCoding", namespace="##targetNamespace")
	!resolve val Coding versionAlgorithmCoding;

	@GenModel(documentation="A natural language name identifying the citation record. This name should be usable as an identifier for the module by machine processing applications such as code generation.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="A short, descriptive, user-friendly title for the citation record.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="The status of this summary. Enables tracking the life-cycle of the content.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="A Boolean value to indicate that this citation record is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.")
	@ExtendedMetaData(kind="element", name="experimental", namespace="##targetNamespace")
	!resolve val Boolean experimental;

	@GenModel(documentation="The date (and optionally time) when the citation record was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the citation record changes.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="The name of the organization or individual that published the citation record.")
	@ExtendedMetaData(kind="element", name="publisher", namespace="##targetNamespace")
	!resolve val String publisher;

	@GenModel(documentation="Contact details to assist a user in finding and communicating with the publisher.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactDetail[*] contact;

	@GenModel(documentation="A free text natural language description of the citation from a consumer's perspective.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate citation record instances.")
	@ExtendedMetaData(kind="element", name="useContext", namespace="##targetNamespace")
	!resolve val UsageContext[*] useContext;

	@GenModel(documentation="A legal or geographic region in which the citation record is intended to be used.")
	@ExtendedMetaData(kind="element", name="jurisdiction", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] jurisdiction;

	@GenModel(documentation="Explanation of why this citation is needed and why it has been designed as it has.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val Markdown purpose;

	@GenModel(documentation="Use and/or publishing restrictions for the citation record, not for the cited artifact.")
	@ExtendedMetaData(kind="element", name="copyright", namespace="##targetNamespace")
	!resolve val Markdown copyright;

	@GenModel(documentation="A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').")
	@ExtendedMetaData(kind="element", name="copyrightLabel", namespace="##targetNamespace")
	!resolve val String copyrightLabel;

	@GenModel(documentation="The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.")
	@ExtendedMetaData(kind="element", name="approvalDate", namespace="##targetNamespace")
	!resolve val Date approvalDate;

	@GenModel(documentation="The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.")
	@ExtendedMetaData(kind="element", name="lastReviewDate", namespace="##targetNamespace")
	!resolve val Date lastReviewDate;

	@GenModel(documentation="The period during which the citation record content was or is planned to be in active use.")
	@ExtendedMetaData(kind="element", name="effectivePeriod", namespace="##targetNamespace")
	!resolve val Period effectivePeriod;

	@GenModel(documentation="Who authored or created the citation record.")
	@ExtendedMetaData(kind="element", name="author", namespace="##targetNamespace")
	!resolve val ContactDetail[*] author;

	@GenModel(documentation="Who edited or revised the citation record.")
	@ExtendedMetaData(kind="element", name="editor", namespace="##targetNamespace")
	!resolve val ContactDetail[*] editor;

	@GenModel(documentation="Who reviewed the citation record.")
	@ExtendedMetaData(kind="element", name="reviewer", namespace="##targetNamespace")
	!resolve val ContactDetail[*] reviewer;

	@GenModel(documentation="Who endorsed the citation record.")
	@ExtendedMetaData(kind="element", name="endorser", namespace="##targetNamespace")
	!resolve val ContactDetail[*] endorser;

	@GenModel(documentation="A human-readable display of key concepts to represent the citation.")
	@ExtendedMetaData(kind="element", name="summary", namespace="##targetNamespace")
	!resolve val CitationSummary[*] summary;

	@GenModel(documentation="The assignment to an organizing scheme.")
	@ExtendedMetaData(kind="element", name="classification", namespace="##targetNamespace")
	!resolve val CitationClassification[*] classification;

	@GenModel(documentation="Used for general notes and annotations not coded elsewhere.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="The status of the citation record.")
	@ExtendedMetaData(kind="element", name="currentState", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] currentState;

	@GenModel(documentation="The state or status of the citation record paired with an effective date or period for that state.")
	@ExtendedMetaData(kind="element", name="statusDate", namespace="##targetNamespace")
	!resolve val CitationStatusDate[*] statusDate;

	@GenModel(documentation="Artifact related to the citation record.")
	@ExtendedMetaData(kind="element", name="relatedArtifact", namespace="##targetNamespace")
	!resolve val RelatedArtifact[*] relatedArtifact;

	@GenModel(documentation="The article or artifact being described.")
	@ExtendedMetaData(kind="element", name="citedArtifact", namespace="##targetNamespace")
	!resolve val CitationCitedArtifact citedArtifact;
}

@GenModel(documentation="The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources.")
@ExtendedMetaData(name="Citation.Abstract", kind="elementOnly")
class CitationAbstract extends BackboneElement {

	@GenModel(documentation="Used to express the reason for or classification of the abstract.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="Used to express the specific language of the abstract.")
	@ExtendedMetaData(kind="element", name="language", namespace="##targetNamespace")
	!resolve val CodeableConcept language;

	@GenModel(documentation="Abstract content.")
	@ExtendedMetaData(kind="element", name="text", namespace="##targetNamespace")
	!resolve val Markdown[1] text;

	@GenModel(documentation="Copyright notice for the abstract.")
	@ExtendedMetaData(kind="element", name="copyright", namespace="##targetNamespace")
	!resolve val Markdown copyright;
}

@GenModel(documentation="The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources.")
@ExtendedMetaData(name="Citation.CitedArtifact", kind="elementOnly")
class CitationCitedArtifact extends BackboneElement {

	@GenModel(documentation="A formal identifier that is used to identify the cited artifact when it is represented in other formats, or referenced in a specification, model, design or an instance.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="A formal identifier that is used to identify things closely related to the cited artifact.")
	@ExtendedMetaData(kind="element", name="relatedIdentifier", namespace="##targetNamespace")
	!resolve val Identifier[*] relatedIdentifier;

	@GenModel(documentation="When the cited artifact was accessed.")
	@ExtendedMetaData(kind="element", name="dateAccessed", namespace="##targetNamespace")
	!resolve val DateTime dateAccessed;

	@GenModel(documentation="The defined version of the cited artifact.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val CitationVersion version;

	@GenModel(documentation="The status of the cited artifact.")
	@ExtendedMetaData(kind="element", name="currentState", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] currentState;

	@GenModel(documentation="An effective date or period, historical or future, actual or expected, for a status of the cited artifact.")
	@ExtendedMetaData(kind="element", name="statusDate", namespace="##targetNamespace")
	!resolve val CitationStatusDate1[*] statusDate;

	@GenModel(documentation="The title details of the article or artifact.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val CitationTitle[*] title;

	@GenModel(documentation="The abstract may be used to convey article-contained abstracts, externally-created abstracts, or other descriptive summaries.")
	@ExtendedMetaData(kind="element", name="abstract", namespace="##targetNamespace")
	!resolve val CitationAbstract[*] ~abstract;

	@GenModel(documentation="The component of the article or artifact.")
	@ExtendedMetaData(kind="element", name="part", namespace="##targetNamespace")
	!resolve val CitationPart part;

	@GenModel(documentation="The artifact related to the cited artifact.")
	@ExtendedMetaData(kind="element", name="relatesTo", namespace="##targetNamespace")
	!resolve val CitationRelatesTo[*] relatesTo;

	@GenModel(documentation="If multiple, used to represent alternative forms of the article that are not separate citations.")
	@ExtendedMetaData(kind="element", name="publicationForm", namespace="##targetNamespace")
	!resolve val CitationPublicationForm[*] publicationForm;

	@GenModel(documentation="Used for any URL for the article or artifact cited.")
	@ExtendedMetaData(kind="element", name="webLocation", namespace="##targetNamespace")
	!resolve val CitationWebLocation[*] webLocation;

	@GenModel(documentation="The assignment to an organizing scheme.")
	@ExtendedMetaData(kind="element", name="classification", namespace="##targetNamespace")
	!resolve val CitationClassification1[*] classification;

	@GenModel(documentation="This element is used to list authors and other contributors, their contact information, specific contributions, and summary statements.")
	@ExtendedMetaData(kind="element", name="contributorship", namespace="##targetNamespace")
	!resolve val CitationContributorship contributorship;

	@GenModel(documentation="Any additional information or content for the article or artifact.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;
}

@GenModel(documentation="The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources.")
@ExtendedMetaData(name="Citation.Classification", kind="elementOnly")
class CitationClassification extends BackboneElement {

	@GenModel(documentation="The kind of classifier (e.g. publication type, keyword).")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="The specific classification value.")
	@ExtendedMetaData(kind="element", name="classifier", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] classifier;
}

@GenModel(documentation="The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources.")
@ExtendedMetaData(name="Citation.Classification1", kind="elementOnly")
class CitationClassification1 extends BackboneElement {

	@GenModel(documentation="The kind of classifier (e.g. publication type, keyword).")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="The specific classification value.")
	@ExtendedMetaData(kind="element", name="classifier", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] classifier;

	@GenModel(documentation="Complex or externally created classification.")
	@ExtendedMetaData(kind="element", name="artifactAssessment", namespace="##targetNamespace")
	!resolve val Reference[*] artifactAssessment;
}

@GenModel(documentation="The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources.")
@ExtendedMetaData(name="Citation.ContributionInstance", kind="elementOnly")
class CitationContributionInstance extends BackboneElement {

	@GenModel(documentation="The specific contribution.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@GenModel(documentation="The time that the contribution was made.")
	@ExtendedMetaData(kind="element", name="time", namespace="##targetNamespace")
	!resolve val DateTime time;
}

@GenModel(documentation="The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources.")
@ExtendedMetaData(name="Citation.Contributorship", kind="elementOnly")
class CitationContributorship extends BackboneElement {

	@GenModel(documentation="Indicates if the list includes all authors and/or contributors.")
	@ExtendedMetaData(kind="element", name="complete", namespace="##targetNamespace")
	!resolve val Boolean complete;

	@GenModel(documentation="An individual entity named as a contributor, for example in the author list or contributor list.")
	@ExtendedMetaData(kind="element", name="entry", namespace="##targetNamespace")
	!resolve val CitationEntry[*] entry;

	@GenModel(documentation="Used to record a display of the author/contributor list without separate data element for each list member.")
	@ExtendedMetaData(kind="element", name="summary", namespace="##targetNamespace")
	!resolve val CitationSummary1[*] summary;
}

@GenModel(documentation="The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources.")
@ExtendedMetaData(name="Citation.Entry", kind="elementOnly")
class CitationEntry extends BackboneElement {

	@GenModel(documentation="The identity of the individual contributor.")
	@ExtendedMetaData(kind="element", name="contributor", namespace="##targetNamespace")
	!resolve val Reference[1] contributor;

	@GenModel(documentation="For citation styles that use initials.")
	@ExtendedMetaData(kind="element", name="forenameInitials", namespace="##targetNamespace")
	!resolve val String forenameInitials;

	@GenModel(documentation="Organization affiliated with the contributor.")
	@ExtendedMetaData(kind="element", name="affiliation", namespace="##targetNamespace")
	!resolve val Reference[*] affiliation;

	@GenModel(documentation="This element identifies the specific nature of an individual’s contribution with respect to the cited work.")
	@ExtendedMetaData(kind="element", name="contributionType", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] contributionType;

	@GenModel(documentation="The role of the contributor (e.g. author, editor, reviewer, funder).")
	@ExtendedMetaData(kind="element", name="role", namespace="##targetNamespace")
	!resolve val CodeableConcept role;

	@GenModel(documentation="Contributions with accounting for time or number.")
	@ExtendedMetaData(kind="element", name="contributionInstance", namespace="##targetNamespace")
	!resolve val CitationContributionInstance[*] contributionInstance;

	@GenModel(documentation="Whether the contributor is the corresponding contributor for the role.")
	@ExtendedMetaData(kind="element", name="correspondingContact", namespace="##targetNamespace")
	!resolve val Boolean correspondingContact;

	@GenModel(documentation="Provides a numerical ranking to represent the degree of contributorship relative to other contributors, such as 1 for first author and 2 for second author.")
	@ExtendedMetaData(kind="element", name="rankingOrder", namespace="##targetNamespace")
	!resolve val PositiveInt rankingOrder;
}

@GenModel(documentation="The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources.")
@ExtendedMetaData(name="Citation.Part", kind="elementOnly")
class CitationPart extends BackboneElement {

	@GenModel(documentation="The kind of component.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="The specification of the component.")
	@ExtendedMetaData(kind="element", name="value", namespace="##targetNamespace")
	!resolve val String value;

	@GenModel(documentation="The citation for the full article or artifact.")
	@ExtendedMetaData(kind="element", name="baseCitation", namespace="##targetNamespace")
	!resolve val Reference baseCitation;
}

@GenModel(documentation="The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources.")
@ExtendedMetaData(name="Citation.PublicationForm", kind="elementOnly")
class CitationPublicationForm extends BackboneElement {

	@GenModel(documentation="The collection the cited article or artifact is published in.")
	@ExtendedMetaData(kind="element", name="publishedIn", namespace="##targetNamespace")
	!resolve val CitationPublishedIn publishedIn;

	@GenModel(documentation="Describes the form of the medium cited. Common codes are \"Internet\" or \"Print\". The CitedMedium value set has 6 codes. The codes internet, print, and offline-digital-storage are the common codes for a typical publication form, though internet and print are more common for study citations. Three additional codes (each appending one of the primary codes with \"-without-issue\" are used for situations when a study is published both within an issue (of a periodical release as commonly done for journals) AND is published separately from the issue (as commonly done with early online publication), to represent specific identification of the publication form not associated with the issue.")
	@ExtendedMetaData(kind="element", name="citedMedium", namespace="##targetNamespace")
	!resolve val CodeableConcept citedMedium;

	@GenModel(documentation="Volume number of journal or other collection in which the article is published.")
	@ExtendedMetaData(kind="element", name="volume", namespace="##targetNamespace")
	!resolve val String volume;

	@GenModel(documentation="Issue, part or supplement of journal or other collection in which the article is published.")
	@ExtendedMetaData(kind="element", name="issue", namespace="##targetNamespace")
	!resolve val String issue;

	@GenModel(documentation="The date the article was added to the database, or the date the article was released.")
	@ExtendedMetaData(kind="element", name="articleDate", namespace="##targetNamespace")
	!resolve val DateTime articleDate;

	@GenModel(documentation="Text representation of the date on which the issue of the cited artifact was published.")
	@ExtendedMetaData(kind="element", name="publicationDateText", namespace="##targetNamespace")
	!resolve val String publicationDateText;

	@GenModel(documentation="Spring, Summer, Fall/Autumn, Winter.")
	@ExtendedMetaData(kind="element", name="publicationDateSeason", namespace="##targetNamespace")
	!resolve val String publicationDateSeason;

	@GenModel(documentation="The date the article was last revised or updated in the database.")
	@ExtendedMetaData(kind="element", name="lastRevisionDate", namespace="##targetNamespace")
	!resolve val DateTime lastRevisionDate;

	@GenModel(documentation="The language or languages in which this form of the article is published.")
	@ExtendedMetaData(kind="element", name="language", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] language;

	@GenModel(documentation="Entry number or identifier for inclusion in a database.")
	@ExtendedMetaData(kind="element", name="accessionNumber", namespace="##targetNamespace")
	!resolve val String accessionNumber;

	@GenModel(documentation="Used for full display of pagination.")
	@ExtendedMetaData(kind="element", name="pageString", namespace="##targetNamespace")
	!resolve val String pageString;

	@GenModel(documentation="Used for isolated representation of first page.")
	@ExtendedMetaData(kind="element", name="firstPage", namespace="##targetNamespace")
	!resolve val String firstPage;

	@GenModel(documentation="Used for isolated representation of last page.")
	@ExtendedMetaData(kind="element", name="lastPage", namespace="##targetNamespace")
	!resolve val String lastPage;

	@GenModel(documentation="Actual or approximate number of pages or screens. Distinct from reporting the page numbers.")
	@ExtendedMetaData(kind="element", name="pageCount", namespace="##targetNamespace")
	!resolve val String pageCount;

	@GenModel(documentation="Copyright notice for the full article or artifact.")
	@ExtendedMetaData(kind="element", name="copyright", namespace="##targetNamespace")
	!resolve val Markdown copyright;
}

@GenModel(documentation="The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources.")
@ExtendedMetaData(name="Citation.PublishedIn", kind="elementOnly")
class CitationPublishedIn extends BackboneElement {

	@GenModel(documentation="Kind of container (e.g. Periodical, database, or book).")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="Journal identifiers include ISSN, ISO Abbreviation and NLMuniqueID; Book identifiers include ISBN.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Name of the database or title of the book or journal.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="Name of or resource describing the publisher.")
	@ExtendedMetaData(kind="element", name="publisher", namespace="##targetNamespace")
	!resolve val Reference publisher;

	@GenModel(documentation="Geographic location of the publisher.")
	@ExtendedMetaData(kind="element", name="publisherLocation", namespace="##targetNamespace")
	!resolve val String publisherLocation;
}

@GenModel(documentation="The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources.")
@ExtendedMetaData(name="Citation.RelatesTo", kind="elementOnly")
class CitationRelatesTo extends BackboneElement {

	@GenModel(documentation="The type of relationship to the related artifact.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val RelatedArtifactTypeExpanded[1] type;

	@GenModel(documentation="Provides additional classifiers of the related artifact.")
	@ExtendedMetaData(kind="element", name="classifier", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] classifier;

	@GenModel(documentation="A short label that can be used to reference the related artifact from elsewhere in the containing artifact, such as a footnote index.")
	@ExtendedMetaData(kind="element", name="label", namespace="##targetNamespace")
	!resolve val String label;

	@GenModel(documentation="A brief description of the document or knowledge resource being referenced, suitable for display to a consumer.")
	@ExtendedMetaData(kind="element", name="display", namespace="##targetNamespace")
	!resolve val String display;

	@GenModel(documentation="A bibliographic citation for the related artifact. This text SHOULD be formatted according to an accepted citation format.")
	@ExtendedMetaData(kind="element", name="citation", namespace="##targetNamespace")
	!resolve val Markdown citation;

	@GenModel(documentation="The document being referenced, represented as an attachment. Do not use this element if using the resource element to provide the canonical to the related artifact.")
	@ExtendedMetaData(kind="element", name="document", namespace="##targetNamespace")
	!resolve val Attachment document;

	@GenModel(documentation="The related artifact, such as a library, value set, profile, or other knowledge resource.")
	@ExtendedMetaData(kind="element", name="resource", namespace="##targetNamespace")
	!resolve val Canonical resource;

	@GenModel(documentation="The related artifact, if the artifact is not a canonical resource, or a resource reference to a canonical resource.")
	@ExtendedMetaData(kind="element", name="resourceReference", namespace="##targetNamespace")
	!resolve val Reference resourceReference;
}

@GenModel(documentation="The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources.")
@ExtendedMetaData(name="Citation.StatusDate", kind="elementOnly")
class CitationStatusDate extends BackboneElement {

	@GenModel(documentation="The state or status of the citation record (that will be paired with the period).")
	@ExtendedMetaData(kind="element", name="activity", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] activity;

	@GenModel(documentation="Whether the status date is actual (has occurred) or expected (estimated or anticipated).")
	@ExtendedMetaData(kind="element", name="actual", namespace="##targetNamespace")
	!resolve val Boolean actual;

	@GenModel(documentation="When the status started and/or ended.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period[1] period;
}

@GenModel(documentation="The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources.")
@ExtendedMetaData(name="Citation.StatusDate1", kind="elementOnly")
class CitationStatusDate1 extends BackboneElement {

	@GenModel(documentation="A definition of the status associated with a date or period.")
	@ExtendedMetaData(kind="element", name="activity", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] activity;

	@GenModel(documentation="Either occurred or expected.")
	@ExtendedMetaData(kind="element", name="actual", namespace="##targetNamespace")
	!resolve val Boolean actual;

	@GenModel(documentation="When the status started and/or ended.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period[1] period;
}

@GenModel(documentation="The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources.")
@ExtendedMetaData(name="Citation.Summary", kind="elementOnly")
class CitationSummary extends BackboneElement {

	@GenModel(documentation="Format for display of the citation summary.")
	@ExtendedMetaData(kind="element", name="style", namespace="##targetNamespace")
	!resolve val CodeableConcept style;

	@GenModel(documentation="The human-readable display of the citation summary.")
	@ExtendedMetaData(kind="element", name="text", namespace="##targetNamespace")
	!resolve val Markdown[1] text;
}

@GenModel(documentation="The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources.")
@ExtendedMetaData(name="Citation.Summary1", kind="elementOnly")
class CitationSummary1 extends BackboneElement {

	@GenModel(documentation="Used most commonly to express an author list or a contributorship statement.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="The format for the display string, such as author last name with first letter capitalized followed by forename initials.")
	@ExtendedMetaData(kind="element", name="style", namespace="##targetNamespace")
	!resolve val CodeableConcept style;

	@GenModel(documentation="Used to code the producer or rule for creating the display string.")
	@ExtendedMetaData(kind="element", name="source", namespace="##targetNamespace")
	!resolve val CodeableConcept source;

	@GenModel(documentation="The display string for the author list, contributor list, or contributorship statement.")
	@ExtendedMetaData(kind="element", name="value", namespace="##targetNamespace")
	!resolve val Markdown[1] value;
}

@GenModel(documentation="The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources.")
@ExtendedMetaData(name="Citation.Title", kind="elementOnly")
class CitationTitle extends BackboneElement {

	@GenModel(documentation="Used to express the reason for or classification of the title.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] type;

	@GenModel(documentation="Used to express the specific language of the title.")
	@ExtendedMetaData(kind="element", name="language", namespace="##targetNamespace")
	!resolve val CodeableConcept language;

	@GenModel(documentation="The title of the article or artifact.")
	@ExtendedMetaData(kind="element", name="text", namespace="##targetNamespace")
	!resolve val Markdown[1] text;
}

@GenModel(documentation="The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources.")
@ExtendedMetaData(name="Citation.Version", kind="elementOnly")
class CitationVersion extends BackboneElement {

	@GenModel(documentation="The version number or other version identifier.")
	@ExtendedMetaData(kind="element", name="value", namespace="##targetNamespace")
	!resolve val String[1] value;

	@GenModel(documentation="Citation for the main version of the cited artifact.")
	@ExtendedMetaData(kind="element", name="baseCitation", namespace="##targetNamespace")
	!resolve val Reference baseCitation;
}

@GenModel(documentation="The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources.")
@ExtendedMetaData(name="Citation.WebLocation", kind="elementOnly")
class CitationWebLocation extends BackboneElement {

	@GenModel(documentation="A characterization of the object expected at the web location.")
	@ExtendedMetaData(kind="element", name="classifier", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] classifier;

	@GenModel(documentation="The specific URL.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri url;
}

@GenModel(documentation="A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Claim", kind="elementOnly")
class Claim extends DomainResource {

	@GenModel(documentation="A unique identifier assigned to this claim.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.")
	@ExtendedMetaData(kind="element", name="traceNumber", namespace="##targetNamespace")
	!resolve val Identifier[*] traceNumber;

	@GenModel(documentation="The status of the resource instance.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val FinancialResourceStatusCodes[1] status;

	@GenModel(documentation="The category of claim, e.g. oral, pharmacy, vision, institutional, professional.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@GenModel(documentation="A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service.")
	@ExtendedMetaData(kind="element", name="subType", namespace="##targetNamespace")
	!resolve val CodeableConcept subType;

	@GenModel(documentation="A code to indicate whether the nature of the request is: Claim - A request to an Insurer to adjudicate the supplied charges for health care goods and services under the identified policy and to pay the determined Benefit amount, if any; Preauthorization - A request to an Insurer to adjudicate the supplied proposed future charges for health care goods and services under the identified policy and to approve the services and provide the expected benefit amounts and potentially to reserve funds to pay the benefits when Claims for the indicated services are later submitted; or, Pre-determination - A request to an Insurer to adjudicate the supplied 'what if' charges for health care goods and services under the identified policy and report back what the Benefit payable would be had the services actually been provided.")
	@ExtendedMetaData(kind="element", name="use", namespace="##targetNamespace")
	!resolve val Use[1] use;

	@GenModel(documentation="The party to whom the professional services and/or products have been supplied or are being considered and for whom actual or forecast reimbursement is sought.")
	@ExtendedMetaData(kind="element", name="patient", namespace="##targetNamespace")
	!resolve val Reference[1] patient;

	@GenModel(documentation="The period for which charges are being submitted.")
	@ExtendedMetaData(kind="element", name="billablePeriod", namespace="##targetNamespace")
	!resolve val Period billablePeriod;

	@GenModel(documentation="The date this resource was created.")
	@ExtendedMetaData(kind="element", name="created", namespace="##targetNamespace")
	!resolve val DateTime[1] created;

	@GenModel(documentation="Individual who created the claim, predetermination or preauthorization.")
	@ExtendedMetaData(kind="element", name="enterer", namespace="##targetNamespace")
	!resolve val Reference enterer;

	@GenModel(documentation="The Insurer who is target of the request.")
	@ExtendedMetaData(kind="element", name="insurer", namespace="##targetNamespace")
	!resolve val Reference insurer;

	@GenModel(documentation="The provider which is responsible for the claim, predetermination or preauthorization.")
	@ExtendedMetaData(kind="element", name="provider", namespace="##targetNamespace")
	!resolve val Reference provider;

	@GenModel(documentation="The provider-required urgency of processing the request. Typical values include: stat, normal, deferred.")
	@ExtendedMetaData(kind="element", name="priority", namespace="##targetNamespace")
	!resolve val CodeableConcept priority;

	@GenModel(documentation="A code to indicate whether and for whom funds are to be reserved for future claims.")
	@ExtendedMetaData(kind="element", name="fundsReserve", namespace="##targetNamespace")
	!resolve val CodeableConcept fundsReserve;

	@GenModel(documentation="Other claims which are related to this claim such as prior submissions or claims for related services or for the same event.")
	@ExtendedMetaData(kind="element", name="related", namespace="##targetNamespace")
	!resolve val ClaimRelated[*] related;

	@GenModel(documentation="Prescription is the document/authorization given to the claim author for them to provide products and services for which consideration (reimbursement) is sought. Could be a RX for medications, an 'order' for oxygen or wheelchair or physiotherapy treatments.")
	@ExtendedMetaData(kind="element", name="prescription", namespace="##targetNamespace")
	!resolve val Reference prescription;

	@GenModel(documentation="Original prescription which has been superseded by this prescription to support the dispensing of pharmacy services, medications or products.")
	@ExtendedMetaData(kind="element", name="originalPrescription", namespace="##targetNamespace")
	!resolve val Reference originalPrescription;

	@GenModel(documentation="The party to be reimbursed for cost of the products and services according to the terms of the policy.")
	@ExtendedMetaData(kind="element", name="payee", namespace="##targetNamespace")
	!resolve val ClaimPayee payee;

	@GenModel(documentation="The referral information received by the claim author, it is not to be used when the author generates a referral for a patient. A copy of that referral may be provided as supporting information. Some insurers require proof of referral to pay for services or to pay specialist rates for services.")
	@ExtendedMetaData(kind="element", name="referral", namespace="##targetNamespace")
	!resolve val Reference referral;

	@GenModel(documentation="Healthcare encounters related to this claim.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference[*] encounter;

	@GenModel(documentation="Facility where the services were provided.")
	@ExtendedMetaData(kind="element", name="facility", namespace="##targetNamespace")
	!resolve val Reference facility;

	@GenModel(documentation="A package billing code or bundle code used to group products and services to a particular health condition (such as heart attack) which is based on a predetermined grouping code system.")
	@ExtendedMetaData(kind="element", name="diagnosisRelatedGroup", namespace="##targetNamespace")
	!resolve val CodeableConcept diagnosisRelatedGroup;

	@GenModel(documentation="Information code for an event with a corresponding date or period.")
	@ExtendedMetaData(kind="element", name="event", namespace="##targetNamespace")
	!resolve val ClaimEvent[*] event;

	@GenModel(documentation="The members of the team who provided the products and services.")
	@ExtendedMetaData(kind="element", name="careTeam", namespace="##targetNamespace")
	!resolve val ClaimCareTeam[*] careTeam;

	@GenModel(documentation="Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues.")
	@ExtendedMetaData(kind="element", name="supportingInfo", namespace="##targetNamespace")
	!resolve val ClaimSupportingInfo[*] supportingInfo;

	@GenModel(documentation="Information about diagnoses relevant to the claim items.")
	@ExtendedMetaData(kind="element", name="diagnosis", namespace="##targetNamespace")
	!resolve val ClaimDiagnosis[*] diagnosis;

	@GenModel(documentation="Procedures performed on the patient relevant to the billing items with the claim.")
	@ExtendedMetaData(kind="element", name="procedure", namespace="##targetNamespace")
	!resolve val ClaimProcedure[*] procedure;

	@GenModel(documentation="Financial instruments for reimbursement for the health care products and services specified on the claim.")
	@ExtendedMetaData(kind="element", name="insurance", namespace="##targetNamespace")
	!resolve val ClaimInsurance[*] insurance;

	@GenModel(documentation="Details of an accident which resulted in injuries which required the products and services listed in the claim.")
	@ExtendedMetaData(kind="element", name="accident", namespace="##targetNamespace")
	!resolve val ClaimAccident accident;

	@GenModel(documentation="The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.")
	@ExtendedMetaData(kind="element", name="patientPaid", namespace="##targetNamespace")
	!resolve val Money patientPaid;

	@GenModel(documentation="A claim line. Either a simple  product or service or a 'group' of details which can each be a simple items or groups of sub-details.")
	@ExtendedMetaData(kind="element", name="item", namespace="##targetNamespace")
	!resolve val ClaimItem[*] item;

	@GenModel(documentation="The total value of the all the items in the claim.")
	@ExtendedMetaData(kind="element", name="total", namespace="##targetNamespace")
	!resolve val Money total;
}

@GenModel(documentation="A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.")
@ExtendedMetaData(name="Claim.Accident", kind="elementOnly")
class ClaimAccident extends BackboneElement {

	@GenModel(documentation="Date of an accident event  related to the products and services contained in the claim.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val Date[1] date;

	@GenModel(documentation="The type or context of the accident event for the purposes of selection of potential insurance coverages and determination of coordination between insurers.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@ExtendedMetaData(kind="element", name="locationAddress", namespace="##targetNamespace")
	!resolve val Address locationAddress;

	@ExtendedMetaData(kind="element", name="locationReference", namespace="##targetNamespace")
	!resolve val Reference locationReference;
}

@GenModel(documentation="A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.")
@ExtendedMetaData(name="Claim.BodySite", kind="elementOnly")
class ClaimBodySite extends BackboneElement {

	@GenModel(documentation="Physical service site on the patient (limb, tooth, etc.).")
	@ExtendedMetaData(kind="element", name="site", namespace="##targetNamespace")
	!resolve val CodeableReference[+] site;

	@GenModel(documentation="A region or surface of the bodySite, e.g. limb region or tooth surface(s).")
	@ExtendedMetaData(kind="element", name="subSite", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] subSite;
}

@GenModel(documentation="A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.")
@ExtendedMetaData(name="Claim.CareTeam", kind="elementOnly")
class ClaimCareTeam extends BackboneElement {

	@GenModel(documentation="A number to uniquely identify care team entries.")
	@ExtendedMetaData(kind="element", name="sequence", namespace="##targetNamespace")
	!resolve val PositiveInt[1] sequence;

	@GenModel(documentation="Member of the team who provided the product or service.")
	@ExtendedMetaData(kind="element", name="provider", namespace="##targetNamespace")
	!resolve val Reference[1] provider;

	@GenModel(documentation="The party who is billing and/or responsible for the claimed products or services.")
	@ExtendedMetaData(kind="element", name="responsible", namespace="##targetNamespace")
	!resolve val Boolean responsible;

	@GenModel(documentation="The lead, assisting or supervising practitioner and their discipline if a multidisciplinary team.")
	@ExtendedMetaData(kind="element", name="role", namespace="##targetNamespace")
	!resolve val CodeableConcept role;

	@GenModel(documentation="The specialization of the practitioner or provider which is applicable for this service.")
	@ExtendedMetaData(kind="element", name="specialty", namespace="##targetNamespace")
	!resolve val CodeableConcept specialty;
}

@GenModel(documentation="A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.")
@ExtendedMetaData(name="Claim.Detail", kind="elementOnly")
class ClaimDetail extends BackboneElement {

	@GenModel(documentation="A number to uniquely identify item entries.")
	@ExtendedMetaData(kind="element", name="sequence", namespace="##targetNamespace")
	!resolve val PositiveInt[1] sequence;

	@GenModel(documentation="Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.")
	@ExtendedMetaData(kind="element", name="traceNumber", namespace="##targetNamespace")
	!resolve val Identifier[*] traceNumber;

	@GenModel(documentation="The type of revenue or cost center providing the product and/or service.")
	@ExtendedMetaData(kind="element", name="revenue", namespace="##targetNamespace")
	!resolve val CodeableConcept revenue;

	@GenModel(documentation="Code to identify the general type of benefits under which products and services are provided.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept category;

	@GenModel(documentation="When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.")
	@ExtendedMetaData(kind="element", name="productOrService", namespace="##targetNamespace")
	!resolve val CodeableConcept productOrService;

	@GenModel(documentation="This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.")
	@ExtendedMetaData(kind="element", name="productOrServiceEnd", namespace="##targetNamespace")
	!resolve val CodeableConcept productOrServiceEnd;

	@GenModel(documentation="Item typification or modifiers codes to convey additional context for the product or service.")
	@ExtendedMetaData(kind="element", name="modifier", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] modifier;

	@GenModel(documentation="Identifies the program under which this may be recovered.")
	@ExtendedMetaData(kind="element", name="programCode", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] programCode;

	@GenModel(documentation="The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.")
	@ExtendedMetaData(kind="element", name="patientPaid", namespace="##targetNamespace")
	!resolve val Money patientPaid;

	@GenModel(documentation="The number of repetitions of a service or product.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Quantity quantity;

	@GenModel(documentation="If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.")
	@ExtendedMetaData(kind="element", name="unitPrice", namespace="##targetNamespace")
	!resolve val Money unitPrice;

	@GenModel(documentation="A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.")
	@ExtendedMetaData(kind="element", name="factor", namespace="##targetNamespace")
	!resolve val Decimal factor;

	@GenModel(documentation="The total of taxes applicable for this product or service.")
	@ExtendedMetaData(kind="element", name="tax", namespace="##targetNamespace")
	!resolve val Money tax;

	@GenModel(documentation="The total amount claimed for the group (if a grouper) or the line item.detail. Net = unit price * quantity * factor.")
	@ExtendedMetaData(kind="element", name="net", namespace="##targetNamespace")
	!resolve val Money net;

	@GenModel(documentation="Unique Device Identifiers associated with this line item.")
	@ExtendedMetaData(kind="element", name="udi", namespace="##targetNamespace")
	!resolve val Reference[*] udi;

	@GenModel(documentation="A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.")
	@ExtendedMetaData(kind="element", name="subDetail", namespace="##targetNamespace")
	!resolve val ClaimSubDetail[*] subDetail;
}

@GenModel(documentation="A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.")
@ExtendedMetaData(name="Claim.Diagnosis", kind="elementOnly")
class ClaimDiagnosis extends BackboneElement {

	@GenModel(documentation="A number to uniquely identify diagnosis entries.")
	@ExtendedMetaData(kind="element", name="sequence", namespace="##targetNamespace")
	!resolve val PositiveInt[1] sequence;

	@ExtendedMetaData(kind="element", name="diagnosisCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept diagnosisCodeableConcept;

	@ExtendedMetaData(kind="element", name="diagnosisReference", namespace="##targetNamespace")
	!resolve val Reference diagnosisReference;

	@GenModel(documentation="When the condition was observed or the relative ranking.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] type;

	@GenModel(documentation="Indication of whether the diagnosis was present on admission to a facility.")
	@ExtendedMetaData(kind="element", name="onAdmission", namespace="##targetNamespace")
	!resolve val CodeableConcept onAdmission;
}

@GenModel(documentation="A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.")
@ExtendedMetaData(name="Claim.Event", kind="elementOnly")
class ClaimEvent extends BackboneElement {

	@GenModel(documentation="A coded event such as when a service is expected or a card printed.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@ExtendedMetaData(kind="element", name="whenDateTime", namespace="##targetNamespace")
	!resolve val DateTime whenDateTime;

	@ExtendedMetaData(kind="element", name="whenPeriod", namespace="##targetNamespace")
	!resolve val Period whenPeriod;
}

@GenModel(documentation="A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.")
@ExtendedMetaData(name="Claim.Insurance", kind="elementOnly")
class ClaimInsurance extends BackboneElement {

	@GenModel(documentation="A number to uniquely identify insurance entries and provide a sequence of coverages to convey coordination of benefit order.")
	@ExtendedMetaData(kind="element", name="sequence", namespace="##targetNamespace")
	!resolve val PositiveInt[1] sequence;

	@GenModel(documentation="A flag to indicate that this Coverage is to be used for adjudication of this claim when set to true.")
	@ExtendedMetaData(kind="element", name="focal", namespace="##targetNamespace")
	!resolve val Boolean[1] focal;

	@GenModel(documentation="The business identifier to be used when the claim is sent for adjudication against this insurance policy.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier identifier;

	@GenModel(documentation="Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.")
	@ExtendedMetaData(kind="element", name="coverage", namespace="##targetNamespace")
	!resolve val Reference[1] coverage;

	@GenModel(documentation="A business agreement number established between the provider and the insurer for special business processing purposes.")
	@ExtendedMetaData(kind="element", name="businessArrangement", namespace="##targetNamespace")
	!resolve val String businessArrangement;

	@GenModel(documentation="Reference numbers previously provided by the insurer to the provider to be quoted on subsequent claims containing services or products related to the prior authorization.")
	@ExtendedMetaData(kind="element", name="preAuthRef", namespace="##targetNamespace")
	!resolve val String[*] preAuthRef;

	@GenModel(documentation="The result of the adjudication of the line items for the Coverage specified in this insurance.")
	@ExtendedMetaData(kind="element", name="claimResponse", namespace="##targetNamespace")
	!resolve val Reference claimResponse;
}

@GenModel(documentation="A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.")
@ExtendedMetaData(name="Claim.Item", kind="elementOnly")
class ClaimItem extends BackboneElement {

	@GenModel(documentation="A number to uniquely identify item entries.")
	@ExtendedMetaData(kind="element", name="sequence", namespace="##targetNamespace")
	!resolve val PositiveInt[1] sequence;

	@GenModel(documentation="Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.")
	@ExtendedMetaData(kind="element", name="traceNumber", namespace="##targetNamespace")
	!resolve val Identifier[*] traceNumber;

	@GenModel(documentation="CareTeam members related to this service or product.")
	@ExtendedMetaData(kind="element", name="careTeamSequence", namespace="##targetNamespace")
	!resolve val PositiveInt[*] careTeamSequence;

	@GenModel(documentation="Diagnosis applicable for this service or product.")
	@ExtendedMetaData(kind="element", name="diagnosisSequence", namespace="##targetNamespace")
	!resolve val PositiveInt[*] diagnosisSequence;

	@GenModel(documentation="Procedures applicable for this service or product.")
	@ExtendedMetaData(kind="element", name="procedureSequence", namespace="##targetNamespace")
	!resolve val PositiveInt[*] procedureSequence;

	@GenModel(documentation="Exceptions, special conditions and supporting information applicable for this service or product.")
	@ExtendedMetaData(kind="element", name="informationSequence", namespace="##targetNamespace")
	!resolve val PositiveInt[*] informationSequence;

	@GenModel(documentation="The type of revenue or cost center providing the product and/or service.")
	@ExtendedMetaData(kind="element", name="revenue", namespace="##targetNamespace")
	!resolve val CodeableConcept revenue;

	@GenModel(documentation="Code to identify the general type of benefits under which products and services are provided.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept category;

	@GenModel(documentation="When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.")
	@ExtendedMetaData(kind="element", name="productOrService", namespace="##targetNamespace")
	!resolve val CodeableConcept productOrService;

	@GenModel(documentation="This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.")
	@ExtendedMetaData(kind="element", name="productOrServiceEnd", namespace="##targetNamespace")
	!resolve val CodeableConcept productOrServiceEnd;

	@GenModel(documentation="Request or Referral for Goods or Service to be rendered.")
	@ExtendedMetaData(kind="element", name="request", namespace="##targetNamespace")
	!resolve val Reference[*] request;

	@GenModel(documentation="Item typification or modifiers codes to convey additional context for the product or service.")
	@ExtendedMetaData(kind="element", name="modifier", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] modifier;

	@GenModel(documentation="Identifies the program under which this may be recovered.")
	@ExtendedMetaData(kind="element", name="programCode", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] programCode;

	@ExtendedMetaData(kind="element", name="servicedDate", namespace="##targetNamespace")
	!resolve val Date servicedDate;

	@ExtendedMetaData(kind="element", name="servicedPeriod", namespace="##targetNamespace")
	!resolve val Period servicedPeriod;

	@ExtendedMetaData(kind="element", name="locationCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept locationCodeableConcept;

	@ExtendedMetaData(kind="element", name="locationAddress", namespace="##targetNamespace")
	!resolve val Address locationAddress;

	@ExtendedMetaData(kind="element", name="locationReference", namespace="##targetNamespace")
	!resolve val Reference locationReference;

	@GenModel(documentation="The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.")
	@ExtendedMetaData(kind="element", name="patientPaid", namespace="##targetNamespace")
	!resolve val Money patientPaid;

	@GenModel(documentation="The number of repetitions of a service or product.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Quantity quantity;

	@GenModel(documentation="If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.")
	@ExtendedMetaData(kind="element", name="unitPrice", namespace="##targetNamespace")
	!resolve val Money unitPrice;

	@GenModel(documentation="A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.")
	@ExtendedMetaData(kind="element", name="factor", namespace="##targetNamespace")
	!resolve val Decimal factor;

	@GenModel(documentation="The total of taxes applicable for this product or service.")
	@ExtendedMetaData(kind="element", name="tax", namespace="##targetNamespace")
	!resolve val Money tax;

	@GenModel(documentation="The total amount claimed for the group (if a grouper) or the line item. Net = unit price * quantity * factor.")
	@ExtendedMetaData(kind="element", name="net", namespace="##targetNamespace")
	!resolve val Money net;

	@GenModel(documentation="Unique Device Identifiers associated with this line item.")
	@ExtendedMetaData(kind="element", name="udi", namespace="##targetNamespace")
	!resolve val Reference[*] udi;

	@GenModel(documentation="Physical location where the service is performed or applies.")
	@ExtendedMetaData(kind="element", name="bodySite", namespace="##targetNamespace")
	!resolve val ClaimBodySite[*] bodySite;

	@GenModel(documentation="Healthcare encounters related to this claim.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference[*] encounter;

	@GenModel(documentation="A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.")
	@ExtendedMetaData(kind="element", name="detail", namespace="##targetNamespace")
	!resolve val ClaimDetail[*] detail;
}

@GenModel(documentation="A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.")
@ExtendedMetaData(name="Claim.Payee", kind="elementOnly")
class ClaimPayee extends BackboneElement {

	@GenModel(documentation="Type of Party to be reimbursed: subscriber, provider, other.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@GenModel(documentation="Reference to the individual or organization to whom any payment will be made.")
	@ExtendedMetaData(kind="element", name="party", namespace="##targetNamespace")
	!resolve val Reference party;
}

@GenModel(documentation="A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.")
@ExtendedMetaData(name="Claim.Procedure", kind="elementOnly")
class ClaimProcedure extends BackboneElement {

	@GenModel(documentation="A number to uniquely identify procedure entries.")
	@ExtendedMetaData(kind="element", name="sequence", namespace="##targetNamespace")
	!resolve val PositiveInt[1] sequence;

	@GenModel(documentation="When the condition was observed or the relative ranking.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] type;

	@GenModel(documentation="Date and optionally time the procedure was performed.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@ExtendedMetaData(kind="element", name="procedureCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept procedureCodeableConcept;

	@ExtendedMetaData(kind="element", name="procedureReference", namespace="##targetNamespace")
	!resolve val Reference procedureReference;

	@GenModel(documentation="Unique Device Identifiers associated with this line item.")
	@ExtendedMetaData(kind="element", name="udi", namespace="##targetNamespace")
	!resolve val Reference[*] udi;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ClaimProcessingCodes", kind="elementOnly")
class ClaimProcessingCodes extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ClaimProcessingCodesEnum value;
}

@ExtendedMetaData(name="ClaimProcessingCodesEnum")
enum ClaimProcessingCodesEnum {

	@GenModel(documentation="Queued")
	queued = 0;

	@GenModel(documentation="Processing Complete")
	complete = 1;

	@GenModel(documentation="Error")
	error = 2;

	@GenModel(documentation="Partial Processing")
	partial = 3;
}

@ExtendedMetaData(name="ClaimProcessingCodesEnum:Object", baseType="ClaimProcessingCodesEnum")
datatype ClaimProcessingCodesEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.")
@ExtendedMetaData(name="Claim.Related", kind="elementOnly")
class ClaimRelated extends BackboneElement {

	@GenModel(documentation="Reference to a related claim.")
	@ExtendedMetaData(kind="element", name="claim", namespace="##targetNamespace")
	!resolve val Reference claim;

	@GenModel(documentation="A code to convey how the claims are related.")
	@ExtendedMetaData(kind="element", name="relationship", namespace="##targetNamespace")
	!resolve val CodeableConcept relationship;

	@GenModel(documentation="An alternate organizational reference to the case or file to which this particular claim pertains.")
	@ExtendedMetaData(kind="element", name="reference", namespace="##targetNamespace")
	!resolve val Identifier reference;
}

@GenModel(documentation="This resource provides the adjudication details from the processing of a Claim resource.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ClaimResponse", kind="elementOnly")
class ClaimResponse extends DomainResource {

	@GenModel(documentation="A unique identifier assigned to this claim response.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.")
	@ExtendedMetaData(kind="element", name="traceNumber", namespace="##targetNamespace")
	!resolve val Identifier[*] traceNumber;

	@GenModel(documentation="The status of the resource instance.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val FinancialResourceStatusCodes[1] status;

	@GenModel(documentation="A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@GenModel(documentation="A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service.")
	@ExtendedMetaData(kind="element", name="subType", namespace="##targetNamespace")
	!resolve val CodeableConcept subType;

	@GenModel(documentation="A code to indicate whether the nature of the request is: Claim - A request to an Insurer to adjudicate the supplied charges for health care goods and services under the identified policy and to pay the determined Benefit amount, if any; Preauthorization - A request to an Insurer to adjudicate the supplied proposed future charges for health care goods and services under the identified policy and to approve the services and provide the expected benefit amounts and potentially to reserve funds to pay the benefits when Claims for the indicated services are later submitted; or, Pre-determination - A request to an Insurer to adjudicate the supplied 'what if' charges for health care goods and services under the identified policy and report back what the Benefit payable would be had the services actually been provided.")
	@ExtendedMetaData(kind="element", name="use", namespace="##targetNamespace")
	!resolve val Use[1] use;

	@GenModel(documentation="The party to whom the professional services and/or products have been supplied or are being considered and for whom actual for facast reimbursement is sought.")
	@ExtendedMetaData(kind="element", name="patient", namespace="##targetNamespace")
	!resolve val Reference[1] patient;

	@GenModel(documentation="The date this resource was created.")
	@ExtendedMetaData(kind="element", name="created", namespace="##targetNamespace")
	!resolve val DateTime[1] created;

	@GenModel(documentation="The party responsible for authorization, adjudication and reimbursement.")
	@ExtendedMetaData(kind="element", name="insurer", namespace="##targetNamespace")
	!resolve val Reference insurer;

	@GenModel(documentation="The provider which is responsible for the claim, predetermination or preauthorization.")
	@ExtendedMetaData(kind="element", name="requestor", namespace="##targetNamespace")
	!resolve val Reference requestor;

	@GenModel(documentation="Original request resource reference.")
	@ExtendedMetaData(kind="element", name="request", namespace="##targetNamespace")
	!resolve val Reference request;

	@GenModel(documentation="The outcome of the claim, predetermination, or preauthorization processing.")
	@ExtendedMetaData(kind="element", name="outcome", namespace="##targetNamespace")
	!resolve val ClaimProcessingCodes[1] outcome;

	@GenModel(documentation="The result of the claim, predetermination, or preauthorization adjudication.")
	@ExtendedMetaData(kind="element", name="decision", namespace="##targetNamespace")
	!resolve val CodeableConcept decision;

	@GenModel(documentation="A human readable description of the status of the adjudication.")
	@ExtendedMetaData(kind="element", name="disposition", namespace="##targetNamespace")
	!resolve val String disposition;

	@GenModel(documentation="Reference from the Insurer which is used in later communications which refers to this adjudication.")
	@ExtendedMetaData(kind="element", name="preAuthRef", namespace="##targetNamespace")
	!resolve val String preAuthRef;

	@GenModel(documentation="The time frame during which this authorization is effective.")
	@ExtendedMetaData(kind="element", name="preAuthPeriod", namespace="##targetNamespace")
	!resolve val Period preAuthPeriod;

	@GenModel(documentation="Information code for an event with a corresponding date or period.")
	@ExtendedMetaData(kind="element", name="event", namespace="##targetNamespace")
	!resolve val ClaimResponseEvent[*] event;

	@GenModel(documentation="Type of Party to be reimbursed: subscriber, provider, other.")
	@ExtendedMetaData(kind="element", name="payeeType", namespace="##targetNamespace")
	!resolve val CodeableConcept payeeType;

	@GenModel(documentation="Healthcare encounters related to this claim.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference[*] encounter;

	@GenModel(documentation="A package billing code or bundle code used to group products and services to a particular health condition (such as heart attack) which is based on a predetermined grouping code system.")
	@ExtendedMetaData(kind="element", name="diagnosisRelatedGroup", namespace="##targetNamespace")
	!resolve val CodeableConcept diagnosisRelatedGroup;

	@GenModel(documentation="A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.")
	@ExtendedMetaData(kind="element", name="item", namespace="##targetNamespace")
	!resolve val ClaimResponseItem[*] item;

	@GenModel(documentation="The first-tier service adjudications for payor added product or service lines.")
	@ExtendedMetaData(kind="element", name="addItem", namespace="##targetNamespace")
	!resolve val ClaimResponseAddItem[*] addItem;

	@GenModel(documentation="The adjudication results which are presented at the header level rather than at the line-item or add-item levels.")
	@ExtendedMetaData(kind="element", name="adjudication", namespace="##targetNamespace")
	!resolve val ClaimResponseAdjudication[*] adjudication;

	@GenModel(documentation="Categorized monetary totals for the adjudication.")
	@ExtendedMetaData(kind="element", name="total", namespace="##targetNamespace")
	!resolve val ClaimResponseTotal[*] total;

	@GenModel(documentation="Payment details for the adjudication of the claim.")
	@ExtendedMetaData(kind="element", name="payment", namespace="##targetNamespace")
	!resolve val ClaimResponsePayment payment;

	@GenModel(documentation="A code, used only on a response to a preauthorization, to indicate whether the benefits payable have been reserved and for whom.")
	@ExtendedMetaData(kind="element", name="fundsReserve", namespace="##targetNamespace")
	!resolve val CodeableConcept fundsReserve;

	@GenModel(documentation="A code for the form to be used for printing the content.")
	@ExtendedMetaData(kind="element", name="formCode", namespace="##targetNamespace")
	!resolve val CodeableConcept formCode;

	@GenModel(documentation="The actual form, by reference or inclusion, for printing the content or an EOB.")
	@ExtendedMetaData(kind="element", name="form", namespace="##targetNamespace")
	!resolve val Attachment form;

	@GenModel(documentation="A note that describes or explains adjudication results in a human readable form.")
	@ExtendedMetaData(kind="element", name="processNote", namespace="##targetNamespace")
	!resolve val ClaimResponseProcessNote[*] processNote;

	@GenModel(documentation="Request for additional supporting or authorizing information.")
	@ExtendedMetaData(kind="element", name="communicationRequest", namespace="##targetNamespace")
	!resolve val Reference[*] communicationRequest;

	@GenModel(documentation="Financial instruments for reimbursement for the health care products and services specified on the claim.")
	@ExtendedMetaData(kind="element", name="insurance", namespace="##targetNamespace")
	!resolve val ClaimResponseInsurance[*] insurance;

	@GenModel(documentation="Errors encountered during the processing of the adjudication.")
	@ExtendedMetaData(kind="element", name="error", namespace="##targetNamespace")
	!resolve val ClaimResponseError[*] error;
}

@GenModel(documentation="This resource provides the adjudication details from the processing of a Claim resource.")
@ExtendedMetaData(name="ClaimResponse.AddItem", kind="elementOnly")
class ClaimResponseAddItem extends BackboneElement {

	@GenModel(documentation="Claim items which this service line is intended to replace.")
	@ExtendedMetaData(kind="element", name="itemSequence", namespace="##targetNamespace")
	!resolve val PositiveInt[*] itemSequence;

	@GenModel(documentation="The sequence number of the details within the claim item which this line is intended to replace.")
	@ExtendedMetaData(kind="element", name="detailSequence", namespace="##targetNamespace")
	!resolve val PositiveInt[*] detailSequence;

	@GenModel(documentation="The sequence number of the sub-details within the details within the claim item which this line is intended to replace.")
	@ExtendedMetaData(kind="element", name="subdetailSequence", namespace="##targetNamespace")
	!resolve val PositiveInt[*] subdetailSequence;

	@GenModel(documentation="Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.")
	@ExtendedMetaData(kind="element", name="traceNumber", namespace="##targetNamespace")
	!resolve val Identifier[*] traceNumber;

	@GenModel(documentation="The providers who are authorized for the services rendered to the patient.")
	@ExtendedMetaData(kind="element", name="provider", namespace="##targetNamespace")
	!resolve val Reference[*] provider;

	@GenModel(documentation="The type of revenue or cost center providing the product and/or service.")
	@ExtendedMetaData(kind="element", name="revenue", namespace="##targetNamespace")
	!resolve val CodeableConcept revenue;

	@GenModel(documentation="When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.")
	@ExtendedMetaData(kind="element", name="productOrService", namespace="##targetNamespace")
	!resolve val CodeableConcept productOrService;

	@GenModel(documentation="This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.")
	@ExtendedMetaData(kind="element", name="productOrServiceEnd", namespace="##targetNamespace")
	!resolve val CodeableConcept productOrServiceEnd;

	@GenModel(documentation="Request or Referral for Goods or Service to be rendered.")
	@ExtendedMetaData(kind="element", name="request", namespace="##targetNamespace")
	!resolve val Reference[*] request;

	@GenModel(documentation="Item typification or modifiers codes to convey additional context for the product or service.")
	@ExtendedMetaData(kind="element", name="modifier", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] modifier;

	@GenModel(documentation="Identifies the program under which this may be recovered.")
	@ExtendedMetaData(kind="element", name="programCode", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] programCode;

	@ExtendedMetaData(kind="element", name="servicedDate", namespace="##targetNamespace")
	!resolve val Date servicedDate;

	@ExtendedMetaData(kind="element", name="servicedPeriod", namespace="##targetNamespace")
	!resolve val Period servicedPeriod;

	@ExtendedMetaData(kind="element", name="locationCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept locationCodeableConcept;

	@ExtendedMetaData(kind="element", name="locationAddress", namespace="##targetNamespace")
	!resolve val Address locationAddress;

	@ExtendedMetaData(kind="element", name="locationReference", namespace="##targetNamespace")
	!resolve val Reference locationReference;

	@GenModel(documentation="The number of repetitions of a service or product.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Quantity quantity;

	@GenModel(documentation="If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.")
	@ExtendedMetaData(kind="element", name="unitPrice", namespace="##targetNamespace")
	!resolve val Money unitPrice;

	@GenModel(documentation="A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.")
	@ExtendedMetaData(kind="element", name="factor", namespace="##targetNamespace")
	!resolve val Decimal factor;

	@GenModel(documentation="The total of taxes applicable for this product or service.")
	@ExtendedMetaData(kind="element", name="tax", namespace="##targetNamespace")
	!resolve val Money tax;

	@GenModel(documentation="The total amount claimed for the group (if a grouper) or the addItem. Net = unit price * quantity * factor.")
	@ExtendedMetaData(kind="element", name="net", namespace="##targetNamespace")
	!resolve val Money net;

	@GenModel(documentation="Physical location where the service is performed or applies.")
	@ExtendedMetaData(kind="element", name="bodySite", namespace="##targetNamespace")
	!resolve val ClaimResponseBodySite[*] bodySite;

	@GenModel(documentation="The numbers associated with notes below which apply to the adjudication of this item.")
	@ExtendedMetaData(kind="element", name="noteNumber", namespace="##targetNamespace")
	!resolve val PositiveInt[*] noteNumber;

	@GenModel(documentation="The high-level results of the adjudication if adjudication has been performed.")
	@ExtendedMetaData(kind="element", name="reviewOutcome", namespace="##targetNamespace")
	!resolve val ClaimResponseReviewOutcome reviewOutcome;

	@GenModel(documentation="The adjudication results.")
	@ExtendedMetaData(kind="element", name="adjudication", namespace="##targetNamespace")
	!resolve val ClaimResponseAdjudication[*] adjudication;

	@GenModel(documentation="The second-tier service adjudications for payor added services.")
	@ExtendedMetaData(kind="element", name="detail", namespace="##targetNamespace")
	!resolve val ClaimResponseDetail1[*] detail;
}

@GenModel(documentation="This resource provides the adjudication details from the processing of a Claim resource.")
@ExtendedMetaData(name="ClaimResponse.Adjudication", kind="elementOnly")
class ClaimResponseAdjudication extends BackboneElement {

	@GenModel(documentation="A code to indicate the information type of this adjudication record. Information types may include the value submitted, maximum values or percentages allowed or payable under the plan, amounts that: the patient is responsible for in aggregate or pertaining to this item; amounts paid by other coverages; and, the benefit payable for this item.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] category;

	@GenModel(documentation="A code supporting the understanding of the adjudication result and explaining variance from expected amount.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val CodeableConcept reason;

	@GenModel(documentation="Monetary amount associated with the category.")
	@ExtendedMetaData(kind="element", name="amount", namespace="##targetNamespace")
	!resolve val Money amount;

	@GenModel(documentation="A non-monetary value associated with the category. Mutually exclusive to the amount element above.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Quantity quantity;
}

@GenModel(documentation="This resource provides the adjudication details from the processing of a Claim resource.")
@ExtendedMetaData(name="ClaimResponse.BodySite", kind="elementOnly")
class ClaimResponseBodySite extends BackboneElement {

	@GenModel(documentation="Physical service site on the patient (limb, tooth, etc.).")
	@ExtendedMetaData(kind="element", name="site", namespace="##targetNamespace")
	!resolve val CodeableReference[+] site;

	@GenModel(documentation="A region or surface of the bodySite, e.g. limb region or tooth surface(s).")
	@ExtendedMetaData(kind="element", name="subSite", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] subSite;
}

@GenModel(documentation="This resource provides the adjudication details from the processing of a Claim resource.")
@ExtendedMetaData(name="ClaimResponse.Detail", kind="elementOnly")
class ClaimResponseDetail extends BackboneElement {

	@GenModel(documentation="A number to uniquely reference the claim detail entry.")
	@ExtendedMetaData(kind="element", name="detailSequence", namespace="##targetNamespace")
	!resolve val PositiveInt[1] detailSequence;

	@GenModel(documentation="Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.")
	@ExtendedMetaData(kind="element", name="traceNumber", namespace="##targetNamespace")
	!resolve val Identifier[*] traceNumber;

	@GenModel(documentation="The numbers associated with notes below which apply to the adjudication of this item.")
	@ExtendedMetaData(kind="element", name="noteNumber", namespace="##targetNamespace")
	!resolve val PositiveInt[*] noteNumber;

	@GenModel(documentation="The high-level results of the adjudication if adjudication has been performed.")
	@ExtendedMetaData(kind="element", name="reviewOutcome", namespace="##targetNamespace")
	!resolve val ClaimResponseReviewOutcome reviewOutcome;

	@GenModel(documentation="The adjudication results.")
	@ExtendedMetaData(kind="element", name="adjudication", namespace="##targetNamespace")
	!resolve val ClaimResponseAdjudication[*] adjudication;

	@GenModel(documentation="A sub-detail adjudication of a simple product or service.")
	@ExtendedMetaData(kind="element", name="subDetail", namespace="##targetNamespace")
	!resolve val ClaimResponseSubDetail[*] subDetail;
}

@GenModel(documentation="This resource provides the adjudication details from the processing of a Claim resource.")
@ExtendedMetaData(name="ClaimResponse.Detail1", kind="elementOnly")
class ClaimResponseDetail1 extends BackboneElement {

	@GenModel(documentation="Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.")
	@ExtendedMetaData(kind="element", name="traceNumber", namespace="##targetNamespace")
	!resolve val Identifier[*] traceNumber;

	@GenModel(documentation="The type of revenue or cost center providing the product and/or service.")
	@ExtendedMetaData(kind="element", name="revenue", namespace="##targetNamespace")
	!resolve val CodeableConcept revenue;

	@GenModel(documentation="When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.")
	@ExtendedMetaData(kind="element", name="productOrService", namespace="##targetNamespace")
	!resolve val CodeableConcept productOrService;

	@GenModel(documentation="This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.")
	@ExtendedMetaData(kind="element", name="productOrServiceEnd", namespace="##targetNamespace")
	!resolve val CodeableConcept productOrServiceEnd;

	@GenModel(documentation="Item typification or modifiers codes to convey additional context for the product or service.")
	@ExtendedMetaData(kind="element", name="modifier", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] modifier;

	@GenModel(documentation="The number of repetitions of a service or product.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Quantity quantity;

	@GenModel(documentation="If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.")
	@ExtendedMetaData(kind="element", name="unitPrice", namespace="##targetNamespace")
	!resolve val Money unitPrice;

	@GenModel(documentation="A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.")
	@ExtendedMetaData(kind="element", name="factor", namespace="##targetNamespace")
	!resolve val Decimal factor;

	@GenModel(documentation="The total of taxes applicable for this product or service.")
	@ExtendedMetaData(kind="element", name="tax", namespace="##targetNamespace")
	!resolve val Money tax;

	@GenModel(documentation="The total amount claimed for the group (if a grouper) or the addItem.detail. Net = unit price * quantity * factor.")
	@ExtendedMetaData(kind="element", name="net", namespace="##targetNamespace")
	!resolve val Money net;

	@GenModel(documentation="The numbers associated with notes below which apply to the adjudication of this item.")
	@ExtendedMetaData(kind="element", name="noteNumber", namespace="##targetNamespace")
	!resolve val PositiveInt[*] noteNumber;

	@GenModel(documentation="The high-level results of the adjudication if adjudication has been performed.")
	@ExtendedMetaData(kind="element", name="reviewOutcome", namespace="##targetNamespace")
	!resolve val ClaimResponseReviewOutcome reviewOutcome;

	@GenModel(documentation="The adjudication results.")
	@ExtendedMetaData(kind="element", name="adjudication", namespace="##targetNamespace")
	!resolve val ClaimResponseAdjudication[*] adjudication;

	@GenModel(documentation="The third-tier service adjudications for payor added services.")
	@ExtendedMetaData(kind="element", name="subDetail", namespace="##targetNamespace")
	!resolve val ClaimResponseSubDetail1[*] subDetail;
}

@GenModel(documentation="This resource provides the adjudication details from the processing of a Claim resource.")
@ExtendedMetaData(name="ClaimResponse.Error", kind="elementOnly")
class ClaimResponseError extends BackboneElement {

	@GenModel(documentation="The sequence number of the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.")
	@ExtendedMetaData(kind="element", name="itemSequence", namespace="##targetNamespace")
	!resolve val PositiveInt itemSequence;

	@GenModel(documentation="The sequence number of the detail within the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.")
	@ExtendedMetaData(kind="element", name="detailSequence", namespace="##targetNamespace")
	!resolve val PositiveInt detailSequence;

	@GenModel(documentation="The sequence number of the sub-detail within the detail within the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.")
	@ExtendedMetaData(kind="element", name="subDetailSequence", namespace="##targetNamespace")
	!resolve val PositiveInt subDetailSequence;

	@GenModel(documentation="An error code, from a specified code system, which details why the claim could not be adjudicated.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] code;

	@GenModel(documentation="A [simple subset of FHIRPath](fhirpath.html#simple) limited to element names, repetition indicators and the default child accessor that identifies one of the elements in the resource that caused this issue to be raised.")
	@ExtendedMetaData(kind="element", name="expression", namespace="##targetNamespace")
	!resolve val String[*] expression;
}

@GenModel(documentation="This resource provides the adjudication details from the processing of a Claim resource.")
@ExtendedMetaData(name="ClaimResponse.Event", kind="elementOnly")
class ClaimResponseEvent extends BackboneElement {

	@GenModel(documentation="A coded event such as when a service is expected or a card printed.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@ExtendedMetaData(kind="element", name="whenDateTime", namespace="##targetNamespace")
	!resolve val DateTime whenDateTime;

	@ExtendedMetaData(kind="element", name="whenPeriod", namespace="##targetNamespace")
	!resolve val Period whenPeriod;
}

@GenModel(documentation="This resource provides the adjudication details from the processing of a Claim resource.")
@ExtendedMetaData(name="ClaimResponse.Insurance", kind="elementOnly")
class ClaimResponseInsurance extends BackboneElement {

	@GenModel(documentation="A number to uniquely identify insurance entries and provide a sequence of coverages to convey coordination of benefit order.")
	@ExtendedMetaData(kind="element", name="sequence", namespace="##targetNamespace")
	!resolve val PositiveInt[1] sequence;

	@GenModel(documentation="A flag to indicate that this Coverage is to be used for adjudication of this claim when set to true.")
	@ExtendedMetaData(kind="element", name="focal", namespace="##targetNamespace")
	!resolve val Boolean[1] focal;

	@GenModel(documentation="Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.")
	@ExtendedMetaData(kind="element", name="coverage", namespace="##targetNamespace")
	!resolve val Reference[1] coverage;

	@GenModel(documentation="A business agreement number established between the provider and the insurer for special business processing purposes.")
	@ExtendedMetaData(kind="element", name="businessArrangement", namespace="##targetNamespace")
	!resolve val String businessArrangement;

	@GenModel(documentation="The result of the adjudication of the line items for the Coverage specified in this insurance.")
	@ExtendedMetaData(kind="element", name="claimResponse", namespace="##targetNamespace")
	!resolve val Reference claimResponse;
}

@GenModel(documentation="This resource provides the adjudication details from the processing of a Claim resource.")
@ExtendedMetaData(name="ClaimResponse.Item", kind="elementOnly")
class ClaimResponseItem extends BackboneElement {

	@GenModel(documentation="A number to uniquely reference the claim item entries.")
	@ExtendedMetaData(kind="element", name="itemSequence", namespace="##targetNamespace")
	!resolve val PositiveInt[1] itemSequence;

	@GenModel(documentation="Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.")
	@ExtendedMetaData(kind="element", name="traceNumber", namespace="##targetNamespace")
	!resolve val Identifier[*] traceNumber;

	@GenModel(documentation="The numbers associated with notes below which apply to the adjudication of this item.")
	@ExtendedMetaData(kind="element", name="noteNumber", namespace="##targetNamespace")
	!resolve val PositiveInt[*] noteNumber;

	@GenModel(documentation="The high-level results of the adjudication if adjudication has been performed.")
	@ExtendedMetaData(kind="element", name="reviewOutcome", namespace="##targetNamespace")
	!resolve val ClaimResponseReviewOutcome reviewOutcome;

	@GenModel(documentation="If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.")
	@ExtendedMetaData(kind="element", name="adjudication", namespace="##targetNamespace")
	!resolve val ClaimResponseAdjudication[*] adjudication;

	@GenModel(documentation="A claim detail. Either a simple (a product or service) or a 'group' of sub-details which are simple items.")
	@ExtendedMetaData(kind="element", name="detail", namespace="##targetNamespace")
	!resolve val ClaimResponseDetail[*] detail;
}

@GenModel(documentation="This resource provides the adjudication details from the processing of a Claim resource.")
@ExtendedMetaData(name="ClaimResponse.Payment", kind="elementOnly")
class ClaimResponsePayment extends BackboneElement {

	@GenModel(documentation="Whether this represents partial or complete payment of the benefits payable.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@GenModel(documentation="Total amount of all adjustments to this payment included in this transaction which are not related to this claim's adjudication.")
	@ExtendedMetaData(kind="element", name="adjustment", namespace="##targetNamespace")
	!resolve val Money adjustment;

	@GenModel(documentation="Reason for the payment adjustment.")
	@ExtendedMetaData(kind="element", name="adjustmentReason", namespace="##targetNamespace")
	!resolve val CodeableConcept adjustmentReason;

	@GenModel(documentation="Estimated date the payment will be issued or the actual issue date of payment.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val Date date;

	@GenModel(documentation="Benefits payable less any payment adjustment.")
	@ExtendedMetaData(kind="element", name="amount", namespace="##targetNamespace")
	!resolve val Money[1] amount;

	@GenModel(documentation="Issuer's unique identifier for the payment instrument.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier identifier;
}

@GenModel(documentation="This resource provides the adjudication details from the processing of a Claim resource.")
@ExtendedMetaData(name="ClaimResponse.ProcessNote", kind="elementOnly")
class ClaimResponseProcessNote extends BackboneElement {

	@GenModel(documentation="A number to uniquely identify a note entry.")
	@ExtendedMetaData(kind="element", name="number", namespace="##targetNamespace")
	!resolve val PositiveInt number;

	@GenModel(documentation="The business purpose of the note text.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="The explanation or description associated with the processing.")
	@ExtendedMetaData(kind="element", name="text", namespace="##targetNamespace")
	!resolve val String[1] text;

	@GenModel(documentation="A code to define the language used in the text of the note.")
	@ExtendedMetaData(kind="element", name="language", namespace="##targetNamespace")
	!resolve val CodeableConcept language;
}

@GenModel(documentation="This resource provides the adjudication details from the processing of a Claim resource.")
@ExtendedMetaData(name="ClaimResponse.ReviewOutcome", kind="elementOnly")
class ClaimResponseReviewOutcome extends BackboneElement {

	@GenModel(documentation="The result of the claim, predetermination, or preauthorization adjudication.")
	@ExtendedMetaData(kind="element", name="decision", namespace="##targetNamespace")
	!resolve val CodeableConcept decision;

	@GenModel(documentation="The reasons for the result of the claim, predetermination, or preauthorization adjudication.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] reason;

	@GenModel(documentation="Reference from the Insurer which is used in later communications which refers to this adjudication.")
	@ExtendedMetaData(kind="element", name="preAuthRef", namespace="##targetNamespace")
	!resolve val String preAuthRef;

	@GenModel(documentation="The time frame during which this authorization is effective.")
	@ExtendedMetaData(kind="element", name="preAuthPeriod", namespace="##targetNamespace")
	!resolve val Period preAuthPeriod;
}

@GenModel(documentation="This resource provides the adjudication details from the processing of a Claim resource.")
@ExtendedMetaData(name="ClaimResponse.SubDetail", kind="elementOnly")
class ClaimResponseSubDetail extends BackboneElement {

	@GenModel(documentation="A number to uniquely reference the claim sub-detail entry.")
	@ExtendedMetaData(kind="element", name="subDetailSequence", namespace="##targetNamespace")
	!resolve val PositiveInt[1] subDetailSequence;

	@GenModel(documentation="Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.")
	@ExtendedMetaData(kind="element", name="traceNumber", namespace="##targetNamespace")
	!resolve val Identifier[*] traceNumber;

	@GenModel(documentation="The numbers associated with notes below which apply to the adjudication of this item.")
	@ExtendedMetaData(kind="element", name="noteNumber", namespace="##targetNamespace")
	!resolve val PositiveInt[*] noteNumber;

	@GenModel(documentation="The high-level results of the adjudication if adjudication has been performed.")
	@ExtendedMetaData(kind="element", name="reviewOutcome", namespace="##targetNamespace")
	!resolve val ClaimResponseReviewOutcome reviewOutcome;

	@GenModel(documentation="The adjudication results.")
	@ExtendedMetaData(kind="element", name="adjudication", namespace="##targetNamespace")
	!resolve val ClaimResponseAdjudication[*] adjudication;
}

@GenModel(documentation="This resource provides the adjudication details from the processing of a Claim resource.")
@ExtendedMetaData(name="ClaimResponse.SubDetail1", kind="elementOnly")
class ClaimResponseSubDetail1 extends BackboneElement {

	@GenModel(documentation="Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.")
	@ExtendedMetaData(kind="element", name="traceNumber", namespace="##targetNamespace")
	!resolve val Identifier[*] traceNumber;

	@GenModel(documentation="The type of revenue or cost center providing the product and/or service.")
	@ExtendedMetaData(kind="element", name="revenue", namespace="##targetNamespace")
	!resolve val CodeableConcept revenue;

	@GenModel(documentation="When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.")
	@ExtendedMetaData(kind="element", name="productOrService", namespace="##targetNamespace")
	!resolve val CodeableConcept productOrService;

	@GenModel(documentation="This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.")
	@ExtendedMetaData(kind="element", name="productOrServiceEnd", namespace="##targetNamespace")
	!resolve val CodeableConcept productOrServiceEnd;

	@GenModel(documentation="Item typification or modifiers codes to convey additional context for the product or service.")
	@ExtendedMetaData(kind="element", name="modifier", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] modifier;

	@GenModel(documentation="The number of repetitions of a service or product.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Quantity quantity;

	@GenModel(documentation="If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.")
	@ExtendedMetaData(kind="element", name="unitPrice", namespace="##targetNamespace")
	!resolve val Money unitPrice;

	@GenModel(documentation="A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.")
	@ExtendedMetaData(kind="element", name="factor", namespace="##targetNamespace")
	!resolve val Decimal factor;

	@GenModel(documentation="The total of taxes applicable for this product or service.")
	@ExtendedMetaData(kind="element", name="tax", namespace="##targetNamespace")
	!resolve val Money tax;

	@GenModel(documentation="The total amount claimed for the addItem.detail.subDetail. Net = unit price * quantity * factor.")
	@ExtendedMetaData(kind="element", name="net", namespace="##targetNamespace")
	!resolve val Money net;

	@GenModel(documentation="The numbers associated with notes below which apply to the adjudication of this item.")
	@ExtendedMetaData(kind="element", name="noteNumber", namespace="##targetNamespace")
	!resolve val PositiveInt[*] noteNumber;

	@GenModel(documentation="The high-level results of the adjudication if adjudication has been performed.")
	@ExtendedMetaData(kind="element", name="reviewOutcome", namespace="##targetNamespace")
	!resolve val ClaimResponseReviewOutcome reviewOutcome;

	@GenModel(documentation="The adjudication results.")
	@ExtendedMetaData(kind="element", name="adjudication", namespace="##targetNamespace")
	!resolve val ClaimResponseAdjudication[*] adjudication;
}

@GenModel(documentation="This resource provides the adjudication details from the processing of a Claim resource.")
@ExtendedMetaData(name="ClaimResponse.Total", kind="elementOnly")
class ClaimResponseTotal extends BackboneElement {

	@GenModel(documentation="A code to indicate the information type of this adjudication record. Information types may include: the value submitted, maximum values or percentages allowed or payable under the plan, amounts that the patient is responsible for in aggregate or pertaining to this item, amounts paid by other coverages, and the benefit payable for this item.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] category;

	@GenModel(documentation="Monetary total amount associated with the category.")
	@ExtendedMetaData(kind="element", name="amount", namespace="##targetNamespace")
	!resolve val Money[1] amount;
}

@GenModel(documentation="A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.")
@ExtendedMetaData(name="Claim.SubDetail", kind="elementOnly")
class ClaimSubDetail extends BackboneElement {

	@GenModel(documentation="A number to uniquely identify item entries.")
	@ExtendedMetaData(kind="element", name="sequence", namespace="##targetNamespace")
	!resolve val PositiveInt[1] sequence;

	@GenModel(documentation="Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.")
	@ExtendedMetaData(kind="element", name="traceNumber", namespace="##targetNamespace")
	!resolve val Identifier[*] traceNumber;

	@GenModel(documentation="The type of revenue or cost center providing the product and/or service.")
	@ExtendedMetaData(kind="element", name="revenue", namespace="##targetNamespace")
	!resolve val CodeableConcept revenue;

	@GenModel(documentation="Code to identify the general type of benefits under which products and services are provided.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept category;

	@GenModel(documentation="When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.")
	@ExtendedMetaData(kind="element", name="productOrService", namespace="##targetNamespace")
	!resolve val CodeableConcept productOrService;

	@GenModel(documentation="This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.")
	@ExtendedMetaData(kind="element", name="productOrServiceEnd", namespace="##targetNamespace")
	!resolve val CodeableConcept productOrServiceEnd;

	@GenModel(documentation="Item typification or modifiers codes to convey additional context for the product or service.")
	@ExtendedMetaData(kind="element", name="modifier", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] modifier;

	@GenModel(documentation="Identifies the program under which this may be recovered.")
	@ExtendedMetaData(kind="element", name="programCode", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] programCode;

	@GenModel(documentation="The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.")
	@ExtendedMetaData(kind="element", name="patientPaid", namespace="##targetNamespace")
	!resolve val Money patientPaid;

	@GenModel(documentation="The number of repetitions of a service or product.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Quantity quantity;

	@GenModel(documentation="If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.")
	@ExtendedMetaData(kind="element", name="unitPrice", namespace="##targetNamespace")
	!resolve val Money unitPrice;

	@GenModel(documentation="A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.")
	@ExtendedMetaData(kind="element", name="factor", namespace="##targetNamespace")
	!resolve val Decimal factor;

	@GenModel(documentation="The total of taxes applicable for this product or service.")
	@ExtendedMetaData(kind="element", name="tax", namespace="##targetNamespace")
	!resolve val Money tax;

	@GenModel(documentation="The total amount claimed for line item.detail.subDetail. Net = unit price * quantity * factor.")
	@ExtendedMetaData(kind="element", name="net", namespace="##targetNamespace")
	!resolve val Money net;

	@GenModel(documentation="Unique Device Identifiers associated with this line item.")
	@ExtendedMetaData(kind="element", name="udi", namespace="##targetNamespace")
	!resolve val Reference[*] udi;
}

@GenModel(documentation="A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.")
@ExtendedMetaData(name="Claim.SupportingInfo", kind="elementOnly")
class ClaimSupportingInfo extends BackboneElement {

	@GenModel(documentation="A number to uniquely identify supporting information entries.")
	@ExtendedMetaData(kind="element", name="sequence", namespace="##targetNamespace")
	!resolve val PositiveInt[1] sequence;

	@GenModel(documentation="The general class of the information supplied: information; exception; accident, employment; onset, etc.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] category;

	@GenModel(documentation="System and code pertaining to the specific information regarding special conditions relating to the setting, treatment or patient  for which care is sought.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@ExtendedMetaData(kind="element", name="timingDate", namespace="##targetNamespace")
	!resolve val Date timingDate;

	@ExtendedMetaData(kind="element", name="timingPeriod", namespace="##targetNamespace")
	!resolve val Period timingPeriod;

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;

	@ExtendedMetaData(kind="element", name="valueString", namespace="##targetNamespace")
	!resolve val String valueString;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueAttachment", namespace="##targetNamespace")
	!resolve val Attachment valueAttachment;

	@ExtendedMetaData(kind="element", name="valueReference", namespace="##targetNamespace")
	!resolve val Reference valueReference;

	@ExtendedMetaData(kind="element", name="valueIdentifier", namespace="##targetNamespace")
	!resolve val Identifier valueIdentifier;

	@GenModel(documentation="Provides the reason in the situation where a reason code is required in addition to the content.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val CodeableConcept reason;
}

@GenModel(documentation="A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient's condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called \"ClinicalImpression\" rather than \"ClinicalAssessment\" to avoid confusion with the recording of assessment tools such as Apgar score.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ClinicalImpression", kind="elementOnly")
class ClinicalImpression extends DomainResource {

	@GenModel(documentation="Business identifiers assigned to this clinical impression by the performer or other systems which remain constant as the resource is updated and propagates from server to server.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Identifies the workflow status of the assessment.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val EventStatus[1] status;

	@GenModel(documentation="Captures the reason for the current state of the ClinicalImpression.")
	@ExtendedMetaData(kind="element", name="statusReason", namespace="##targetNamespace")
	!resolve val CodeableConcept statusReason;

	@GenModel(documentation="A summary of the context and/or cause of the assessment - why / where it was performed, and what patient events/status prompted it.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val String description;

	@GenModel(documentation="The patient or group of individuals assessed as part of this record.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference[1] subject;

	@GenModel(documentation="The Encounter during which this ClinicalImpression was created or to which the creation of this record is tightly associated.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@ExtendedMetaData(kind="element", name="effectiveDateTime", namespace="##targetNamespace")
	!resolve val DateTime effectiveDateTime;

	@ExtendedMetaData(kind="element", name="effectivePeriod", namespace="##targetNamespace")
	!resolve val Period effectivePeriod;

	@GenModel(documentation="Indicates when the documentation of the assessment was complete.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="The clinician performing the assessment.")
	@ExtendedMetaData(kind="element", name="performer", namespace="##targetNamespace")
	!resolve val Reference performer;

	@GenModel(documentation="A reference to the last assessment that was conducted on this patient. Assessments are often/usually ongoing in nature; a care provider (practitioner or team) will make new assessments on an ongoing basis as new data arises or the patient's conditions changes.")
	@ExtendedMetaData(kind="element", name="previous", namespace="##targetNamespace")
	!resolve val Reference previous;

	@GenModel(documentation="A list of the relevant problems/conditions for a patient.")
	@ExtendedMetaData(kind="element", name="problem", namespace="##targetNamespace")
	!resolve val Reference[*] problem;

	@GenModel(documentation="Change in the status/pattern of a subject's condition since previously assessed, such as worsening, improving, or no change.  It is a subjective assessment of the direction of the change.")
	@ExtendedMetaData(kind="element", name="changePattern", namespace="##targetNamespace")
	!resolve val CodeableConcept changePattern;

	@GenModel(documentation="Reference to a specific published clinical protocol that was followed during this assessment, and/or that provides evidence in support of the diagnosis.")
	@ExtendedMetaData(kind="element", name="protocol", namespace="##targetNamespace")
	!resolve val Uri[*] protocol;

	@GenModel(documentation="A text summary of the investigations and the diagnosis.")
	@ExtendedMetaData(kind="element", name="summary", namespace="##targetNamespace")
	!resolve val String summary;

	@GenModel(documentation="Specific findings or diagnoses that were considered likely or relevant to ongoing treatment.")
	@ExtendedMetaData(kind="element", name="finding", namespace="##targetNamespace")
	!resolve val ClinicalImpressionFinding[*] finding;

	@GenModel(documentation="Estimate of likely outcome.")
	@ExtendedMetaData(kind="element", name="prognosisCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] prognosisCodeableConcept;

	@GenModel(documentation="RiskAssessment expressing likely outcome.")
	@ExtendedMetaData(kind="element", name="prognosisReference", namespace="##targetNamespace")
	!resolve val Reference[*] prognosisReference;

	@GenModel(documentation="Information supporting the clinical impression, which can contain investigation results.")
	@ExtendedMetaData(kind="element", name="supportingInfo", namespace="##targetNamespace")
	!resolve val Reference[*] supportingInfo;

	@GenModel(documentation="Commentary about the impression, typically recorded after the impression itself was made, though supplemental notes by the original author could also appear.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;
}

@GenModel(documentation="A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient's condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called \"ClinicalImpression\" rather than \"ClinicalAssessment\" to avoid confusion with the recording of assessment tools such as Apgar score.")
@ExtendedMetaData(name="ClinicalImpression.Finding", kind="elementOnly")
class ClinicalImpressionFinding extends BackboneElement {

	@GenModel(documentation="Specific text, code or reference for finding or diagnosis, which may include ruled-out or resolved conditions.")
	@ExtendedMetaData(kind="element", name="item", namespace="##targetNamespace")
	!resolve val CodeableReference item;

	@GenModel(documentation="Which investigations support finding or diagnosis.")
	@ExtendedMetaData(kind="element", name="basis", namespace="##targetNamespace")
	!resolve val String basis;
}

@GenModel(documentation="A single issue - either an indication, contraindication, interaction or an undesirable effect for a medicinal product, medication, device or procedure.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ClinicalUseDefinition", kind="elementOnly")
class ClinicalUseDefinition extends DomainResource {

	@GenModel(documentation="Business identifier for this issue.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="indication | contraindication | interaction | undesirable-effect | warning.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val ClinicalUseDefinitionType[1] type;

	@GenModel(documentation="A categorisation of the issue, primarily for dividing warnings into subject heading areas such as \"Pregnancy and Lactation\", \"Overdose\", \"Effects on Ability to Drive and Use Machines\".")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] category;

	@GenModel(documentation="The medication, product, substance, device, procedure etc. for which this is an indication.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference[*] subject;

	@GenModel(documentation="Whether this is a current issue or one that has been retired etc.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val CodeableConcept status;

	@GenModel(documentation="Specifics for when this is a contraindication.")
	@ExtendedMetaData(kind="element", name="contraindication", namespace="##targetNamespace")
	!resolve val ClinicalUseDefinitionContraindication contraindication;

	@GenModel(documentation="Specifics for when this is an indication.")
	@ExtendedMetaData(kind="element", name="indication", namespace="##targetNamespace")
	!resolve val ClinicalUseDefinitionIndication indication;

	@GenModel(documentation="Specifics for when this is an interaction.")
	@ExtendedMetaData(kind="element", name="interaction", namespace="##targetNamespace")
	!resolve val ClinicalUseDefinitionInteraction interaction;

	@GenModel(documentation="The population group to which this applies.")
	@ExtendedMetaData(kind="element", name="population", namespace="##targetNamespace")
	!resolve val Reference[*] population;

	@GenModel(documentation="Logic used by the clinical use definition.")
	@ExtendedMetaData(kind="element", name="library", namespace="##targetNamespace")
	!resolve val Canonical[*] library;

	@GenModel(documentation="Describe the possible undesirable effects (negative outcomes) from the use of the medicinal product as treatment.")
	@ExtendedMetaData(kind="element", name="undesirableEffect", namespace="##targetNamespace")
	!resolve val ClinicalUseDefinitionUndesirableEffect undesirableEffect;

	@GenModel(documentation="A critical piece of information about environmental, health or physical risks or hazards that serve as caution to the user. For example 'Do not operate heavy machinery', 'May cause drowsiness', or 'Get medical advice/attention if you feel unwell'.")
	@ExtendedMetaData(kind="element", name="warning", namespace="##targetNamespace")
	!resolve val ClinicalUseDefinitionWarning warning;
}

@GenModel(documentation="A single issue - either an indication, contraindication, interaction or an undesirable effect for a medicinal product, medication, device or procedure.")
@ExtendedMetaData(name="ClinicalUseDefinition.Contraindication", kind="elementOnly")
class ClinicalUseDefinitionContraindication extends BackboneElement {

	@GenModel(documentation="The situation that is being documented as contraindicating against this item.")
	@ExtendedMetaData(kind="element", name="diseaseSymptomProcedure", namespace="##targetNamespace")
	!resolve val CodeableReference diseaseSymptomProcedure;

	@GenModel(documentation="The status of the disease or symptom for the contraindication, for example \"chronic\" or \"metastatic\".")
	@ExtendedMetaData(kind="element", name="diseaseStatus", namespace="##targetNamespace")
	!resolve val CodeableReference diseaseStatus;

	@GenModel(documentation="A comorbidity (concurrent condition) or coinfection.")
	@ExtendedMetaData(kind="element", name="comorbidity", namespace="##targetNamespace")
	!resolve val CodeableReference[*] comorbidity;

	@GenModel(documentation="The indication which this is a contraidication for.")
	@ExtendedMetaData(kind="element", name="indication", namespace="##targetNamespace")
	!resolve val Reference[*] indication;

	@GenModel(documentation="An expression that returns true or false, indicating whether the indication is applicable or not, after having applied its other elements.")
	@ExtendedMetaData(kind="element", name="applicability", namespace="##targetNamespace")
	!resolve val Expression applicability;

	@GenModel(documentation="Information about the use of the medicinal product in relation to other therapies described as part of the contraindication.")
	@ExtendedMetaData(kind="element", name="otherTherapy", namespace="##targetNamespace")
	!resolve val ClinicalUseDefinitionOtherTherapy[*] otherTherapy;
}

@GenModel(documentation="A single issue - either an indication, contraindication, interaction or an undesirable effect for a medicinal product, medication, device or procedure.")
@ExtendedMetaData(name="ClinicalUseDefinition.Indication", kind="elementOnly")
class ClinicalUseDefinitionIndication extends BackboneElement {

	@GenModel(documentation="The situation that is being documented as an indicaton for this item.")
	@ExtendedMetaData(kind="element", name="diseaseSymptomProcedure", namespace="##targetNamespace")
	!resolve val CodeableReference diseaseSymptomProcedure;

	@GenModel(documentation="The status of the disease or symptom for the indication, for example \"chronic\" or \"metastatic\".")
	@ExtendedMetaData(kind="element", name="diseaseStatus", namespace="##targetNamespace")
	!resolve val CodeableReference diseaseStatus;

	@GenModel(documentation="A comorbidity (concurrent condition) or coinfection as part of the indication.")
	@ExtendedMetaData(kind="element", name="comorbidity", namespace="##targetNamespace")
	!resolve val CodeableReference[*] comorbidity;

	@GenModel(documentation="The intended effect, aim or strategy to be achieved.")
	@ExtendedMetaData(kind="element", name="intendedEffect", namespace="##targetNamespace")
	!resolve val CodeableReference intendedEffect;

	@ExtendedMetaData(kind="element", name="durationRange", namespace="##targetNamespace")
	!resolve val Range durationRange;

	@ExtendedMetaData(kind="element", name="durationString", namespace="##targetNamespace")
	!resolve val String durationString;

	@GenModel(documentation="An unwanted side effect or negative outcome that may happen if you use the drug (or other subject of this resource) for this indication.")
	@ExtendedMetaData(kind="element", name="undesirableEffect", namespace="##targetNamespace")
	!resolve val Reference[*] undesirableEffect;

	@GenModel(documentation="An expression that returns true or false, indicating whether the indication is applicable or not, after having applied its other elements.")
	@ExtendedMetaData(kind="element", name="applicability", namespace="##targetNamespace")
	!resolve val Expression applicability;

	@GenModel(documentation="Information about the use of the medicinal product in relation to other therapies described as part of the indication.")
	@ExtendedMetaData(kind="element", name="otherTherapy", namespace="##targetNamespace")
	!resolve val ClinicalUseDefinitionOtherTherapy[*] otherTherapy;
}

@GenModel(documentation="A single issue - either an indication, contraindication, interaction or an undesirable effect for a medicinal product, medication, device or procedure.")
@ExtendedMetaData(name="ClinicalUseDefinition.Interactant", kind="elementOnly")
class ClinicalUseDefinitionInteractant extends BackboneElement {

	@ExtendedMetaData(kind="element", name="itemReference", namespace="##targetNamespace")
	!resolve val Reference itemReference;

	@ExtendedMetaData(kind="element", name="itemCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept itemCodeableConcept;
}

@GenModel(documentation="A single issue - either an indication, contraindication, interaction or an undesirable effect for a medicinal product, medication, device or procedure.")
@ExtendedMetaData(name="ClinicalUseDefinition.Interaction", kind="elementOnly")
class ClinicalUseDefinitionInteraction extends BackboneElement {

	@GenModel(documentation="The specific medication, product, food, substance etc. or laboratory test that interacts.")
	@ExtendedMetaData(kind="element", name="interactant", namespace="##targetNamespace")
	!resolve val ClinicalUseDefinitionInteractant[*] interactant;

	@GenModel(documentation="The type of the interaction e.g. drug-drug interaction, drug-food interaction, drug-lab test interaction.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="The effect of the interaction, for example \"reduced gastric absorption of primary medication\".")
	@ExtendedMetaData(kind="element", name="effect", namespace="##targetNamespace")
	!resolve val CodeableReference effect;

	@GenModel(documentation="The incidence of the interaction, e.g. theoretical, observed.")
	@ExtendedMetaData(kind="element", name="incidence", namespace="##targetNamespace")
	!resolve val CodeableConcept incidence;

	@GenModel(documentation="Actions for managing the interaction.")
	@ExtendedMetaData(kind="element", name="management", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] management;
}

@GenModel(documentation="A single issue - either an indication, contraindication, interaction or an undesirable effect for a medicinal product, medication, device or procedure.")
@ExtendedMetaData(name="ClinicalUseDefinition.OtherTherapy", kind="elementOnly")
class ClinicalUseDefinitionOtherTherapy extends BackboneElement {

	@GenModel(documentation="The type of relationship between the medicinal product indication or contraindication and another therapy.")
	@ExtendedMetaData(kind="element", name="relationshipType", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] relationshipType;

	@GenModel(documentation="Reference to a specific medication (active substance, medicinal product or class of products, biological, food etc.) as part of an indication or contraindication.")
	@ExtendedMetaData(kind="element", name="treatment", namespace="##targetNamespace")
	!resolve val CodeableReference[1] treatment;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ClinicalUseDefinitionType", kind="elementOnly")
class ClinicalUseDefinitionType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ClinicalUseDefinitionTypeEnum value;
}

@ExtendedMetaData(name="ClinicalUseDefinitionTypeEnum")
enum ClinicalUseDefinitionTypeEnum {

	@GenModel(documentation="Indication")
	indication = 0;

	@GenModel(documentation="Contraindication")
	contraindication = 1;

	@GenModel(documentation="Interaction")
	interaction = 2;

	@GenModel(documentation="Undesirable Effect")
	undesirableEffect = 3;

	@GenModel(documentation="Warning")
	warning = 4;
}

@ExtendedMetaData(name="ClinicalUseDefinitionTypeEnum:Object", baseType="ClinicalUseDefinitionTypeEnum")
datatype ClinicalUseDefinitionTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A single issue - either an indication, contraindication, interaction or an undesirable effect for a medicinal product, medication, device or procedure.")
@ExtendedMetaData(name="ClinicalUseDefinition.UndesirableEffect", kind="elementOnly")
class ClinicalUseDefinitionUndesirableEffect extends BackboneElement {

	@GenModel(documentation="The situation in which the undesirable effect may manifest.")
	@ExtendedMetaData(kind="element", name="symptomConditionEffect", namespace="##targetNamespace")
	!resolve val CodeableReference symptomConditionEffect;

	@GenModel(documentation="High level classification of the effect.")
	@ExtendedMetaData(kind="element", name="classification", namespace="##targetNamespace")
	!resolve val CodeableConcept classification;

	@GenModel(documentation="How often the effect is seen.")
	@ExtendedMetaData(kind="element", name="frequencyOfOccurrence", namespace="##targetNamespace")
	!resolve val CodeableConcept frequencyOfOccurrence;
}

@GenModel(documentation="A single issue - either an indication, contraindication, interaction or an undesirable effect for a medicinal product, medication, device or procedure.")
@ExtendedMetaData(name="ClinicalUseDefinition.Warning", kind="elementOnly")
class ClinicalUseDefinitionWarning extends BackboneElement {

	@GenModel(documentation="A textual definition of this warning, with formatting.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="A coded or unformatted textual definition of this warning.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;
}

@GenModel(documentation="A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents
If the element is present, it must have either a @value, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="code", kind="elementOnly")
class Code extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	attr CodePrimitive value;
}

@GenModel(documentation="A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="CodeableConcept", kind="elementOnly")
class CodeableConcept extends DataType {

	@GenModel(documentation="A reference to a code defined by a terminology system.")
	@ExtendedMetaData(kind="element", name="coding", namespace="##targetNamespace")
	!resolve val Coding[*] coding;

	@GenModel(documentation="A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user.")
	@ExtendedMetaData(kind="element", name="text", namespace="##targetNamespace")
	!resolve val String text;
}

@GenModel(documentation="A reference to a resource (by instance), or instead, a reference to a concept defined in a terminology or ontology (by class).
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="CodeableReference", kind="elementOnly")
class CodeableReference extends DataType {

	@GenModel(documentation="A reference to a concept - e.g. the information is identified by its general class to the degree of precision found in the terminology.")
	@ExtendedMetaData(kind="element", name="concept", namespace="##targetNamespace")
	!resolve val CodeableConcept concept;

	@GenModel(documentation="A reference to a resource the provides exact details about the information being referenced.")
	@ExtendedMetaData(kind="element", name="reference", namespace="##targetNamespace")
	!resolve val Reference reference;
}

@ExtendedMetaData(name="code-primitive", baseType="http://www.eclipse.org/emf/2003/XMLType#token", minLength="1", pattern="[^\s]+(%20[^\s]+)*")
datatype CodePrimitive : java.lang.String;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="CodeSearchSupport", kind="elementOnly")
class CodeSearchSupport extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr CodeSearchSupportEnum value;
}

@ExtendedMetaData(name="CodeSearchSupportEnum")
enum CodeSearchSupportEnum {

	@GenModel(documentation="In Compose")
	inCompose = 0;

	@GenModel(documentation="In Expansion")
	inExpansion = 1;

	@GenModel(documentation="In Compose Or Expansion")
	inComposeOrExpansion = 2;
}

@ExtendedMetaData(name="CodeSearchSupportEnum:Object", baseType="CodeSearchSupportEnum")
datatype CodeSearchSupportEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="CodeSystem", kind="elementOnly")
class CodeSystem extends MetadataResource {

	@GenModel(documentation="An absolute URI that is used to identify this code system when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this code system is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the code system is stored on different servers. This is used in [Coding](datatypes.html#Coding).system.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri url;

	@GenModel(documentation="A formal identifier that is used to identify this code system when it is represented in other formats, or referenced in a specification, model, design or an instance.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The identifier that is used to identify this version of the code system when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the code system author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. This is used in [Coding](datatypes.html#Coding).version.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@ExtendedMetaData(kind="element", name="versionAlgorithmString", namespace="##targetNamespace")
	!resolve val String versionAlgorithmString;

	@ExtendedMetaData(kind="element", name="versionAlgorithmCoding", namespace="##targetNamespace")
	!resolve val Coding versionAlgorithmCoding;

	@GenModel(documentation="A natural language name identifying the code system. This name should be usable as an identifier for the module by machine processing applications such as code generation.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="A short, descriptive, user-friendly title for the code system.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="The status of this code system. Enables tracking the life-cycle of the content.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="A Boolean value to indicate that this code system is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.")
	@ExtendedMetaData(kind="element", name="experimental", namespace="##targetNamespace")
	!resolve val Boolean experimental;

	@GenModel(documentation="The date  (and optionally time) when the code system was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the code system changes.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="The name of the organization or individual responsible for the release and ongoing maintenance of the code system.")
	@ExtendedMetaData(kind="element", name="publisher", namespace="##targetNamespace")
	!resolve val String publisher;

	@GenModel(documentation="Contact details to assist a user in finding and communicating with the publisher.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactDetail[*] contact;

	@GenModel(documentation="A free text natural language description of the code system from a consumer's perspective.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate code system instances.")
	@ExtendedMetaData(kind="element", name="useContext", namespace="##targetNamespace")
	!resolve val UsageContext[*] useContext;

	@GenModel(documentation="A legal or geographic region in which the code system is intended to be used.")
	@ExtendedMetaData(kind="element", name="jurisdiction", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] jurisdiction;

	@GenModel(documentation="Explanation of why this code system is needed and why it has been designed as it has.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val Markdown purpose;

	@GenModel(documentation="A copyright statement relating to the code system and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the code system.")
	@ExtendedMetaData(kind="element", name="copyright", namespace="##targetNamespace")
	!resolve val Markdown copyright;

	@GenModel(documentation="A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').")
	@ExtendedMetaData(kind="element", name="copyrightLabel", namespace="##targetNamespace")
	!resolve val String copyrightLabel;

	@GenModel(documentation="The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.")
	@ExtendedMetaData(kind="element", name="approvalDate", namespace="##targetNamespace")
	!resolve val Date approvalDate;

	@GenModel(documentation="The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.")
	@ExtendedMetaData(kind="element", name="lastReviewDate", namespace="##targetNamespace")
	!resolve val Date lastReviewDate;

	@GenModel(documentation="The period during which the CodeSystem content was or is planned to be in active use.")
	@ExtendedMetaData(kind="element", name="effectivePeriod", namespace="##targetNamespace")
	!resolve val Period effectivePeriod;

	@GenModel(documentation="Descriptions related to the content of the CodeSystem. Topics provide a high-level categorization as well as keywords for the CodeSystem that can be useful for filtering and searching.")
	@ExtendedMetaData(kind="element", name="topic", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] topic;

	@GenModel(documentation="An individiual or organization primarily involved in the creation and maintenance of the CodeSystem.")
	@ExtendedMetaData(kind="element", name="author", namespace="##targetNamespace")
	!resolve val ContactDetail[*] author;

	@GenModel(documentation="An individual or organization primarily responsible for internal coherence of the CodeSystem.")
	@ExtendedMetaData(kind="element", name="editor", namespace="##targetNamespace")
	!resolve val ContactDetail[*] editor;

	@GenModel(documentation="An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the CodeSystem.")
	@ExtendedMetaData(kind="element", name="reviewer", namespace="##targetNamespace")
	!resolve val ContactDetail[*] reviewer;

	@GenModel(documentation="An individual or organization asserted by the publisher to be responsible for officially endorsing the CodeSystem for use in some setting.")
	@ExtendedMetaData(kind="element", name="endorser", namespace="##targetNamespace")
	!resolve val ContactDetail[*] endorser;

	@GenModel(documentation="Related artifacts such as additional documentation, justification, dependencies, bibliographic references, and predecessor and successor artifacts.")
	@ExtendedMetaData(kind="element", name="relatedArtifact", namespace="##targetNamespace")
	!resolve val RelatedArtifact[*] relatedArtifact;

	@GenModel(documentation="If code comparison is case sensitive when codes within this system are compared to each other.")
	@ExtendedMetaData(kind="element", name="caseSensitive", namespace="##targetNamespace")
	!resolve val Boolean caseSensitive;

	@GenModel(documentation="Canonical reference to the value set that contains all codes in the code system independent of code status.")
	@ExtendedMetaData(kind="element", name="valueSet", namespace="##targetNamespace")
	!resolve val Canonical valueSet;

	@GenModel(documentation="The meaning of the hierarchy of concepts as represented in this resource.")
	@ExtendedMetaData(kind="element", name="hierarchyMeaning", namespace="##targetNamespace")
	!resolve val CodeSystemHierarchyMeaning hierarchyMeaning;

	@GenModel(documentation="The code system defines a compositional (post-coordination) grammar.")
	@ExtendedMetaData(kind="element", name="compositional", namespace="##targetNamespace")
	!resolve val Boolean compositional;

	@GenModel(documentation="This flag is used to signify that the code system does not commit to concept permanence across versions. If true, a version must be specified when referencing this code system.")
	@ExtendedMetaData(kind="element", name="versionNeeded", namespace="##targetNamespace")
	!resolve val Boolean versionNeeded;

	@GenModel(documentation="The extent of the content of the code system (the concepts and codes it defines) are represented in this resource instance.")
	@ExtendedMetaData(kind="element", name="content", namespace="##targetNamespace")
	!resolve val CodeSystemContentMode[1] content;

	@GenModel(documentation="The canonical URL of the code system that this code system supplement is adding designations and properties to.")
	@ExtendedMetaData(kind="element", name="supplements", namespace="##targetNamespace")
	!resolve val Canonical supplements;

	@GenModel(documentation="The total number of concepts defined by the code system. Where the code system has a compositional grammar, the basis of this count is defined by the system steward.")
	@ExtendedMetaData(kind="element", name="count", namespace="##targetNamespace")
	!resolve val UnsignedInt count;

	@GenModel(documentation="A filter that can be used in a value set compose statement when selecting concepts using a filter.")
	@ExtendedMetaData(kind="element", name="filter", namespace="##targetNamespace")
	!resolve val CodeSystemFilter[*] filter;

	@GenModel(documentation="A property defines an additional slot through which additional information can be provided about a concept.")
	@ExtendedMetaData(kind="element", name="property", namespace="##targetNamespace")
	!resolve val CodeSystemProperty[*] property;

	@GenModel(documentation="Concepts that are in the code system. The concept definitions are inherently hierarchical, but the definitions must be consulted to determine what the meanings of the hierarchical relationships are.")
	@ExtendedMetaData(kind="element", name="concept", namespace="##targetNamespace")
	!resolve val CodeSystemConcept[*] concept;
}

@GenModel(documentation="The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.")
@ExtendedMetaData(name="CodeSystem.Concept", kind="elementOnly")
class CodeSystemConcept extends BackboneElement {

	@GenModel(documentation="A code - a text symbol - that uniquely identifies the concept within the code system.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val Code[1] code;

	@GenModel(documentation="A human readable string that is the recommended default way to present this concept to a user.")
	@ExtendedMetaData(kind="element", name="display", namespace="##targetNamespace")
	!resolve val String display;

	@GenModel(documentation="The formal definition of the concept. The code system resource does not make formal definitions required, because of the prevalence of legacy systems. However, they are highly recommended, as without them there is no formal meaning associated with the concept.")
	@ExtendedMetaData(kind="element", name="definition", namespace="##targetNamespace")
	!resolve val String definition;

	@GenModel(documentation="Additional representations for the concept - other languages, aliases, specialized purposes, used for particular purposes, etc.")
	@ExtendedMetaData(kind="element", name="designation", namespace="##targetNamespace")
	!resolve val CodeSystemDesignation[*] designation;

	@GenModel(documentation="A property value for this concept.")
	@ExtendedMetaData(kind="element", name="property", namespace="##targetNamespace")
	!resolve val CodeSystemProperty1[*] property;

	@GenModel(documentation="Defines children of a concept to produce a hierarchy of concepts. The nature of the relationships is variable (is-a/contains/categorizes) - see hierarchyMeaning.")
	@ExtendedMetaData(kind="element", name="concept", namespace="##targetNamespace")
	!resolve val CodeSystemConcept[*] concept;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="CodeSystemContentMode", kind="elementOnly")
class CodeSystemContentMode extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr CodeSystemContentModeEnum value;
}

@ExtendedMetaData(name="CodeSystemContentModeEnum")
enum CodeSystemContentModeEnum {

	@GenModel(documentation="Not Present")
	notPresent = 0;

	@GenModel(documentation="Example")
	example = 1;

	@GenModel(documentation="Fragment")
	fragment = 2;

	@GenModel(documentation="Complete")
	complete = 3;

	@GenModel(documentation="Supplement")
	supplement = 4;
}

@ExtendedMetaData(name="CodeSystemContentModeEnum:Object", baseType="CodeSystemContentModeEnum")
datatype CodeSystemContentModeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.")
@ExtendedMetaData(name="CodeSystem.Designation", kind="elementOnly")
class CodeSystemDesignation extends BackboneElement {

	@GenModel(documentation="The language this designation is defined for.")
	@ExtendedMetaData(kind="element", name="language", namespace="##targetNamespace")
	!resolve val Code language;

	@GenModel(documentation="A code that details how this designation would be used.")
	@ExtendedMetaData(kind="element", name="use", namespace="##targetNamespace")
	!resolve val Coding use;

	@GenModel(documentation="Additional codes that detail how this designation would be used, if there is more than one use.")
	@ExtendedMetaData(kind="element", name="additionalUse", namespace="##targetNamespace")
	!resolve val Coding[*] additionalUse;

	@GenModel(documentation="The text value for this designation.")
	@ExtendedMetaData(kind="element", name="value", namespace="##targetNamespace")
	!resolve val String[1] value;
}

@GenModel(documentation="The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.")
@ExtendedMetaData(name="CodeSystem.Filter", kind="elementOnly")
class CodeSystemFilter extends BackboneElement {

	@GenModel(documentation="The code that identifies this filter when it is used as a filter in [ValueSet](valueset.html#).compose.include.filter.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val Code[1] code;

	@GenModel(documentation="A description of how or why the filter is used.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val String description;

	@GenModel(documentation="A list of operators that can be used with the filter.")
	@ExtendedMetaData(kind="element", name="operator", namespace="##targetNamespace")
	!resolve val FilterOperator[+] operator;

	@GenModel(documentation="A description of what the value for the filter should be.")
	@ExtendedMetaData(kind="element", name="value", namespace="##targetNamespace")
	!resolve val String[1] value;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="CodeSystemHierarchyMeaning", kind="elementOnly")
class CodeSystemHierarchyMeaning extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr CodeSystemHierarchyMeaningEnum value;
}

@ExtendedMetaData(name="CodeSystemHierarchyMeaningEnum")
enum CodeSystemHierarchyMeaningEnum {

	@GenModel(documentation="Grouped By")
	groupedBy = 0;

	@GenModel(documentation="Is-A")
	isA = 1;

	@GenModel(documentation="Part Of")
	partOf = 2;

	@GenModel(documentation="Classified With")
	classifiedWith = 3;
}

@ExtendedMetaData(name="CodeSystemHierarchyMeaningEnum:Object", baseType="CodeSystemHierarchyMeaningEnum")
datatype CodeSystemHierarchyMeaningEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.")
@ExtendedMetaData(name="CodeSystem.Property", kind="elementOnly")
class CodeSystemProperty extends BackboneElement {

	@GenModel(documentation="A code that is used to identify the property. The code is used internally (in CodeSystem.concept.property.code) and also externally, such as in property filters.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val Code[1] code;

	@GenModel(documentation="Reference to the formal meaning of the property. One possible source of meaning is the [Concept Properties](codesystem-concept-properties.html) code system.")
	@ExtendedMetaData(kind="element", name="uri", namespace="##targetNamespace")
	!resolve val Uri uri;

	@GenModel(documentation="A description of the property- why it is defined, and how its value might be used.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val String description;

	@GenModel(documentation="The type of the property value. Properties of type \"code\" contain a code defined by the code system (e.g. a reference to another defined concept).")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val PropertyType[1] type;
}

@GenModel(documentation="The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.")
@ExtendedMetaData(name="CodeSystem.Property1", kind="elementOnly")
class CodeSystemProperty1 extends BackboneElement {

	@GenModel(documentation="A code that is a reference to CodeSystem.property.code.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val Code[1] code;

	@ExtendedMetaData(kind="element", name="valueCode", namespace="##targetNamespace")
	!resolve val Code valueCode;

	@ExtendedMetaData(kind="element", name="valueCoding", namespace="##targetNamespace")
	!resolve val Coding valueCoding;

	@ExtendedMetaData(kind="element", name="valueString", namespace="##targetNamespace")
	!resolve val String valueString;

	@ExtendedMetaData(kind="element", name="valueInteger", namespace="##targetNamespace")
	!resolve val Integer valueInteger;

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;

	@ExtendedMetaData(kind="element", name="valueDateTime", namespace="##targetNamespace")
	!resolve val DateTime valueDateTime;

	@ExtendedMetaData(kind="element", name="valueDecimal", namespace="##targetNamespace")
	!resolve val Decimal valueDecimal;
}

@GenModel(documentation="A reference to a code defined by a terminology system.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="Coding", kind="elementOnly")
class Coding extends DataType {

	@GenModel(documentation="The identification of the code system that defines the meaning of the symbol in the code.")
	@ExtendedMetaData(kind="element", name="system", namespace="##targetNamespace")
	!resolve val Uri system;

	@GenModel(documentation="The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@GenModel(documentation="A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val Code code;

	@GenModel(documentation="A representation of the meaning of the code in the system, following the rules of the system.")
	@ExtendedMetaData(kind="element", name="display", namespace="##targetNamespace")
	!resolve val String display;

	@GenModel(documentation="Indicates that this coding was chosen by a user directly - e.g. off a pick list of available items (codes or displays).")
	@ExtendedMetaData(kind="element", name="userSelected", namespace="##targetNamespace")
	!resolve val Boolean userSelected;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ColorCodesOrRGB", kind="elementOnly")
class ColorCodesOrRGB extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	attr ColorCodesOrRGBEnum value;
}

@ExtendedMetaData(name="ColorCodesOrRGBEnum", baseType="http://www.eclipse.org/emf/2003/XMLType#string", minLength="1", pattern="[\s\S]+")
datatype ColorCodesOrRGBEnum : java.lang.String;

@GenModel(documentation="The languages for a description of an item
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="CommonLanguages", kind="elementOnly")
class CommonLanguages extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr CommonLanguagesEnum value;
}

@ExtendedMetaData(name="CommonLanguagesEnum")
enum CommonLanguagesEnum {

	@GenModel(documentation="Arabisk")
	ar = 0;

	@GenModel(documentation="Bulgarian")
	bg = 1;

	@GenModel(documentation="Bulgarian (Bulgaria)")
	bgBG = 2;

	@GenModel(documentation="Bengali")
	bn = 3;

	@GenModel(documentation="Czech")
	cs = 4;

	@GenModel(documentation="Czech (Czechia)")
	csCZ = 5;

	@GenModel(documentation="Bosnian")
	bs = 6;

	@GenModel(documentation="Bosnian (Bosnia and Herzegovina))")
	bsBA = 7;

	@GenModel(documentation="Danish")
	da = 8;

	@GenModel(documentation="Danish (Denmark)")
	daDK = 9;

	@GenModel(documentation="German")
	de = 10;

	@GenModel(documentation="German (Austria)")
	deAT = 11;

	@GenModel(documentation="German (Switzerland)")
	deCH = 12;

	@GenModel(documentation="German (Germany)")
	deDE = 13;

	@GenModel(documentation="Greek")
	el = 14;

	@GenModel(documentation="Greek (Greece)")
	elGR = 15;

	@GenModel(documentation="English")
	en = 16;

	@GenModel(documentation="English (Australia)")
	enAU = 17;

	@GenModel(documentation="English (Canada)")
	enCA = 18;

	@GenModel(documentation="English (Great Britain)")
	enGB = 19;

	@GenModel(documentation="English (India)")
	enIN = 20;

	@GenModel(documentation="English (New Zealand)")
	enNZ = 21;

	@GenModel(documentation="English (Singapore)")
	enSG = 22;

	@GenModel(documentation="English (United States)")
	enUS = 23;

	@GenModel(documentation="Spanish")
	es = 24;

	@GenModel(documentation="Spanish (Argentina)")
	esAR = 25;

	@GenModel(documentation="Spanish (Spain)")
	esES = 26;

	@GenModel(documentation="Spanish (Uruguay)")
	esUY = 27;

	@GenModel(documentation="Estonian")
	et = 28;

	@GenModel(documentation="Estonian (Estonia)")
	etEE = 29;

	@GenModel(documentation="Finnish")
	fi = 30;

	@GenModel(documentation="French")
	fr = 31;

	@GenModel(documentation="French (Belgium)")
	frBE = 32;

	@GenModel(documentation="French (Switzerland)")
	frCH = 33;

	@GenModel(documentation="French (France)")
	frFR = 34;

	@GenModel(documentation="Finnish (Finland)")
	fiFI = 35;

	@GenModel(documentation="French (Canada)")
	frCA = 36;

	@GenModel(documentation="Frisian")
	fy = 37;

	@GenModel(documentation="Frisian (Netherlands)")
	fyNL = 38;

	@GenModel(documentation="Hindi")
	hi = 39;

	@GenModel(documentation="Croatian")
	hr = 40;

	@GenModel(documentation="Croatian (Croatia)")
	hrHR = 41;

	@GenModel(documentation="Icelandic")
	is = 42;

	@GenModel(documentation="Icelandic (Iceland)")
	isIS = 43;

	@GenModel(documentation="Italian")
	it = 44;

	@GenModel(documentation="Italian (Switzerland)")
	itCH = 45;

	@GenModel(documentation="Italian (Italy)")
	itIT = 46;

	@GenModel(documentation="Japanese")
	ja = 47;

	@GenModel(documentation="Korean")
	ko = 48;

	@GenModel(documentation="Lithuanian")
	lt = 49;

	@GenModel(documentation="Lithuanian (Lithuania)")
	ltLT = 50;

	@GenModel(documentation="Latvian")
	lv = 51;

	@GenModel(documentation="Latvian (Latvia)")
	lvLV = 52;

	@GenModel(documentation="Dutch")
	nl = 53;

	@GenModel(documentation="Dutch (Belgium)")
	nlBE = 54;

	@GenModel(documentation="Dutch (Netherlands)")
	nlNL = 55;

	@GenModel(documentation="Norwegian")
	no = 56;

	@GenModel(documentation="Norwegian (Norway)")
	noNO = 57;

	@GenModel(documentation="Punjabi")
	pa = 58;

	@GenModel(documentation="Polskie")
	pl = 59;

	@GenModel(documentation="Polish (Poland)")
	plPL = 60;

	@GenModel(documentation="Portuguese")
	pt = 61;

	@GenModel(documentation="Portuguese (Portugal)")
	ptPT = 62;

	@GenModel(documentation="Portuguese (Brazil)")
	ptBR = 63;

	@GenModel(documentation="Romanian")
	ro = 64;

	@GenModel(documentation="Romanian (Romania)")
	roRO = 65;

	@GenModel(documentation="Russian")
	ru = 66;

	@GenModel(documentation="Russian (Russia)")
	ruRU = 67;

	@GenModel(documentation="Slovakian")
	sk = 68;

	@GenModel(documentation="Slovakian (Slovakia)")
	skSK = 69;

	@GenModel(documentation="Slovenian")
	sl = 70;

	@GenModel(documentation="Slovenian (Slovenia)")
	slSI = 71;

	@GenModel(documentation="Serbian")
	sr = 72;

	@GenModel(documentation="Serbian (Serbia)")
	srRS = 73;

	@GenModel(documentation="Swedish")
	sv = 74;

	@GenModel(documentation="Swedish (Sweden)")
	svSE = 75;

	@GenModel(documentation="Telugu")
	te = 76;

	@GenModel(documentation="Chinese")
	zh = 77;

	@GenModel(documentation="Chinese (China)")
	zhCN = 78;

	@GenModel(documentation="Chinese (Hong Kong)")
	zhHK = 79;

	@GenModel(documentation="Chinese (Singapore)")
	zhSG = 80;

	@GenModel(documentation="Chinese (Taiwan)")
	zhTW = 81;
}

@ExtendedMetaData(name="CommonLanguagesEnum:Object", baseType="CommonLanguagesEnum")
datatype CommonLanguagesEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A clinical or business level record of information being transmitted or shared; e.g. an alert that was sent to a responsible provider, a public health agency communication to a provider/reporter in response to a case report for a reportable condition.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Communication", kind="elementOnly")
class Communication extends DomainResource {

	@GenModel(documentation="Business identifiers assigned to this communication by the performer or other systems which remain constant as the resource is updated and propagates from server to server.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Communication.")
	@ExtendedMetaData(kind="element", name="instantiatesCanonical", namespace="##targetNamespace")
	!resolve val Canonical[*] instantiatesCanonical;

	@GenModel(documentation="The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Communication.")
	@ExtendedMetaData(kind="element", name="instantiatesUri", namespace="##targetNamespace")
	!resolve val Uri[*] instantiatesUri;

	@GenModel(documentation="An order, proposal or plan fulfilled in whole or in part by this Communication.")
	@ExtendedMetaData(kind="element", name="basedOn", namespace="##targetNamespace")
	!resolve val Reference[*] basedOn;

	@GenModel(documentation="A larger event (e.g. Communication, Procedure) of which this particular communication is a component or step.")
	@ExtendedMetaData(kind="element", name="partOf", namespace="##targetNamespace")
	!resolve val Reference[*] partOf;

	@GenModel(documentation="Prior communication that this communication is in response to.")
	@ExtendedMetaData(kind="element", name="inResponseTo", namespace="##targetNamespace")
	!resolve val Reference[*] inResponseTo;

	@GenModel(documentation="The status of the transmission.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val EventStatus[1] status;

	@GenModel(documentation="Captures the reason for the current state of the Communication.")
	@ExtendedMetaData(kind="element", name="statusReason", namespace="##targetNamespace")
	!resolve val CodeableConcept statusReason;

	@GenModel(documentation="The type of message conveyed such as alert, notification, reminder, instruction, etc.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] category;

	@GenModel(documentation="Characterizes how quickly the planned or in progress communication must be addressed. Includes concepts such as stat, urgent, routine.")
	@ExtendedMetaData(kind="element", name="priority", namespace="##targetNamespace")
	!resolve val RequestPriority priority;

	@GenModel(documentation="A channel that was used for this communication (e.g. email, fax).")
	@ExtendedMetaData(kind="element", name="medium", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] medium;

	@GenModel(documentation="The patient or group that was the focus of this communication.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference subject;

	@GenModel(documentation="Description of the purpose/content, similar to a subject line in an email.")
	@ExtendedMetaData(kind="element", name="topic", namespace="##targetNamespace")
	!resolve val CodeableConcept topic;

	@GenModel(documentation="Other resources that pertain to this communication and to which this communication should be associated.")
	@ExtendedMetaData(kind="element", name="about", namespace="##targetNamespace")
	!resolve val Reference[*] about;

	@GenModel(documentation="The Encounter during which this Communication was created or to which the creation of this record is tightly associated.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@GenModel(documentation="The time when this communication was sent.")
	@ExtendedMetaData(kind="element", name="sent", namespace="##targetNamespace")
	!resolve val DateTime sent;

	@GenModel(documentation="The time when this communication arrived at the destination.")
	@ExtendedMetaData(kind="element", name="received", namespace="##targetNamespace")
	!resolve val DateTime received;

	@GenModel(documentation="The entity (e.g. person, organization, clinical information system, care team or device) which is the target of the communication.")
	@ExtendedMetaData(kind="element", name="recipient", namespace="##targetNamespace")
	!resolve val Reference[*] recipient;

	@GenModel(documentation="The entity (e.g. person, organization, clinical information system, or device) which is the source of the communication.")
	@ExtendedMetaData(kind="element", name="sender", namespace="##targetNamespace")
	!resolve val Reference sender;

	@GenModel(documentation="The reason or justification for the communication.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val CodeableReference[*] reason;

	@GenModel(documentation="Text, attachment(s), or resource(s) that was communicated to the recipient.")
	@ExtendedMetaData(kind="element", name="payload", namespace="##targetNamespace")
	!resolve val CommunicationPayload[*] payload;

	@GenModel(documentation="Additional notes or commentary about the communication by the sender, receiver or other interested parties.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;
}

@GenModel(documentation="A clinical or business level record of information being transmitted or shared; e.g. an alert that was sent to a responsible provider, a public health agency communication to a provider/reporter in response to a case report for a reportable condition.")
@ExtendedMetaData(name="Communication.Payload", kind="elementOnly")
class CommunicationPayload extends BackboneElement {

	@ExtendedMetaData(kind="element", name="contentAttachment", namespace="##targetNamespace")
	!resolve val Attachment contentAttachment;

	@ExtendedMetaData(kind="element", name="contentReference", namespace="##targetNamespace")
	!resolve val Reference contentReference;

	@ExtendedMetaData(kind="element", name="contentCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept contentCodeableConcept;
}

@GenModel(documentation="A request to convey information; e.g. the CDS system proposes that an alert be sent to a responsible provider, the CDS system proposes that the public health agency be notified about a reportable condition.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="CommunicationRequest", kind="elementOnly")
class CommunicationRequest extends DomainResource {

	@GenModel(documentation="Business identifiers assigned to this communication request by the performer or other systems which remain constant as the resource is updated and propagates from server to server.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="A plan or proposal that is fulfilled in whole or in part by this request.")
	@ExtendedMetaData(kind="element", name="basedOn", namespace="##targetNamespace")
	!resolve val Reference[*] basedOn;

	@GenModel(documentation="Completed or terminated request(s) whose function is taken by this new request.")
	@ExtendedMetaData(kind="element", name="replaces", namespace="##targetNamespace")
	!resolve val Reference[*] replaces;

	@GenModel(documentation="A shared identifier common to multiple independent Request instances that were activated/authorized more or less simultaneously by a single author.  The presence of the same identifier on each request ties those requests together and may have business ramifications in terms of reporting of results, billing, etc.  E.g. a requisition number shared by a set of lab tests ordered together, or a prescription number shared by all meds ordered at one time.")
	@ExtendedMetaData(kind="element", name="groupIdentifier", namespace="##targetNamespace")
	!resolve val Identifier groupIdentifier;

	@GenModel(documentation="The status of the proposal or order.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val RequestStatus[1] status;

	@GenModel(documentation="Captures the reason for the current state of the CommunicationRequest.")
	@ExtendedMetaData(kind="element", name="statusReason", namespace="##targetNamespace")
	!resolve val CodeableConcept statusReason;

	@GenModel(documentation="Indicates the level of authority/intentionality associated with the CommunicationRequest and where the request fits into the workflow chain.")
	@ExtendedMetaData(kind="element", name="intent", namespace="##targetNamespace")
	!resolve val RequestIntent[1] intent;

	@GenModel(documentation="The type of message to be sent such as alert, notification, reminder, instruction, etc.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] category;

	@GenModel(documentation="Characterizes how quickly the proposed act must be initiated. Includes concepts such as stat, urgent, routine.")
	@ExtendedMetaData(kind="element", name="priority", namespace="##targetNamespace")
	!resolve val RequestPriority priority;

	@GenModel(documentation="If true indicates that the CommunicationRequest is asking for the specified action to *not* occur.")
	@ExtendedMetaData(kind="element", name="doNotPerform", namespace="##targetNamespace")
	!resolve val Boolean doNotPerform;

	@GenModel(documentation="A channel that was used for this communication (e.g. email, fax).")
	@ExtendedMetaData(kind="element", name="medium", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] medium;

	@GenModel(documentation="The patient or group that is the focus of this communication request.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference subject;

	@GenModel(documentation="Other resources that pertain to this communication request and to which this communication request should be associated.")
	@ExtendedMetaData(kind="element", name="about", namespace="##targetNamespace")
	!resolve val Reference[*] about;

	@GenModel(documentation="The Encounter during which this CommunicationRequest was created or to which the creation of this record is tightly associated.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@GenModel(documentation="Text, attachment(s), or resource(s) to be communicated to the recipient.")
	@ExtendedMetaData(kind="element", name="payload", namespace="##targetNamespace")
	!resolve val CommunicationRequestPayload[*] payload;

	@ExtendedMetaData(kind="element", name="occurrenceDateTime", namespace="##targetNamespace")
	!resolve val DateTime occurrenceDateTime;

	@ExtendedMetaData(kind="element", name="occurrencePeriod", namespace="##targetNamespace")
	!resolve val Period occurrencePeriod;

	@GenModel(documentation="For draft requests, indicates the date of initial creation.  For requests with other statuses, indicates the date of activation.")
	@ExtendedMetaData(kind="element", name="authoredOn", namespace="##targetNamespace")
	!resolve val DateTime authoredOn;

	@GenModel(documentation="The device, individual, or organization who asks for the information to be shared.")
	@ExtendedMetaData(kind="element", name="requester", namespace="##targetNamespace")
	!resolve val Reference requester;

	@GenModel(documentation="The entity (e.g. person, organization, clinical information system, device, group, or care team) which is the intended target of the communication.")
	@ExtendedMetaData(kind="element", name="recipient", namespace="##targetNamespace")
	!resolve val Reference[*] recipient;

	@GenModel(documentation="The entity (e.g. person, organization, clinical information system, or device) which is to be the source of the communication.")
	@ExtendedMetaData(kind="element", name="informationProvider", namespace="##targetNamespace")
	!resolve val Reference[*] informationProvider;

	@GenModel(documentation="Describes why the request is being made in coded or textual form.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val CodeableReference[*] reason;

	@GenModel(documentation="Comments made about the request by the requester, sender, recipient, subject or other participants.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;
}

@GenModel(documentation="A request to convey information; e.g. the CDS system proposes that an alert be sent to a responsible provider, the CDS system proposes that the public health agency be notified about a reportable condition.")
@ExtendedMetaData(name="CommunicationRequest.Payload", kind="elementOnly")
class CommunicationRequestPayload extends BackboneElement {

	@ExtendedMetaData(kind="element", name="contentAttachment", namespace="##targetNamespace")
	!resolve val Attachment contentAttachment;

	@ExtendedMetaData(kind="element", name="contentReference", namespace="##targetNamespace")
	!resolve val Reference contentReference;

	@ExtendedMetaData(kind="element", name="contentCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept contentCodeableConcept;
}

@GenModel(documentation="A compartment definition that defines how resources are accessed on a server.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="CompartmentDefinition", kind="elementOnly")
class CompartmentDefinition extends CanonicalResource {

	@GenModel(documentation="An absolute URI that is used to identify this compartment definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this compartment definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the compartment definition is stored on different servers.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri[1] url;

	@GenModel(documentation="The identifier that is used to identify this version of the compartment definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the compartment definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@ExtendedMetaData(kind="element", name="versionAlgorithmString", namespace="##targetNamespace")
	!resolve val String versionAlgorithmString;

	@ExtendedMetaData(kind="element", name="versionAlgorithmCoding", namespace="##targetNamespace")
	!resolve val Coding versionAlgorithmCoding;

	@GenModel(documentation="A natural language name identifying the compartment definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String[1] name;

	@GenModel(documentation="A short, descriptive, user-friendly title for the capability statement.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="The status of this compartment definition. Enables tracking the life-cycle of the content.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="A Boolean value to indicate that this compartment definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.")
	@ExtendedMetaData(kind="element", name="experimental", namespace="##targetNamespace")
	!resolve val Boolean experimental;

	@GenModel(documentation="The date  (and optionally time) when the compartment definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the compartment definition changes.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="The name of the organization or individual responsible for the release and ongoing maintenance of the compartment definition.")
	@ExtendedMetaData(kind="element", name="publisher", namespace="##targetNamespace")
	!resolve val String publisher;

	@GenModel(documentation="Contact details to assist a user in finding and communicating with the publisher.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactDetail[*] contact;

	@GenModel(documentation="A free text natural language description of the compartment definition from a consumer's perspective.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate compartment definition instances.")
	@ExtendedMetaData(kind="element", name="useContext", namespace="##targetNamespace")
	!resolve val UsageContext[*] useContext;

	@GenModel(documentation="Explanation of why this compartment definition is needed and why it has been designed as it has.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val Markdown purpose;

	@GenModel(documentation="Which compartment this definition describes.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CompartmentType[1] code;

	@GenModel(documentation="Whether the search syntax is supported,.")
	@ExtendedMetaData(kind="element", name="search", namespace="##targetNamespace")
	!resolve val Boolean[1] search;

	@GenModel(documentation="Information about how a resource is related to the compartment.")
	@ExtendedMetaData(kind="element", name="resource", namespace="##targetNamespace")
	!resolve val CompartmentDefinitionResource[*] resource;
}

@GenModel(documentation="A compartment definition that defines how resources are accessed on a server.")
@ExtendedMetaData(name="CompartmentDefinition.Resource", kind="elementOnly")
class CompartmentDefinitionResource extends BackboneElement {

	@GenModel(documentation="The name of a resource supported by the server.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val ResourceType[1] code;

	@GenModel(documentation="The name of a search parameter that represents the link to the compartment. More than one may be listed because a resource may be linked to a compartment in more than one way,.")
	@ExtendedMetaData(kind="element", name="param", namespace="##targetNamespace")
	!resolve val String[*] param;

	@GenModel(documentation="Additional documentation about the resource and compartment.")
	@ExtendedMetaData(kind="element", name="documentation", namespace="##targetNamespace")
	!resolve val String documentation;

	@GenModel(documentation="Search Parameter for mapping requests made with $everything.start (e.g. on [Patient.$everything](patient-operation-everything.html)).")
	@ExtendedMetaData(kind="element", name="startParam", namespace="##targetNamespace")
	!resolve val Uri startParam;

	@GenModel(documentation="Search Parameter for mapping requests made with $everything.end (e.g. on [Patient.$everything](patient-operation-everything.html)).")
	@ExtendedMetaData(kind="element", name="endParam", namespace="##targetNamespace")
	!resolve val Uri endParam;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="CompartmentType", kind="elementOnly")
class CompartmentType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr CompartmentTypeEnum value;
}

@ExtendedMetaData(name="CompartmentTypeEnum")
enum CompartmentTypeEnum {

	@GenModel(documentation="Patient")
	Patient = 0;

	@GenModel(documentation="Encounter")
	Encounter = 1;

	@GenModel(documentation="RelatedPerson")
	RelatedPerson = 2;

	@GenModel(documentation="Practitioner")
	Practitioner = 3;

	@GenModel(documentation="Device")
	Device = 4;

	@GenModel(documentation="EpisodeOfCare")
	EpisodeOfCare = 5;
}

@ExtendedMetaData(name="CompartmentTypeEnum:Object", baseType="CompartmentTypeEnum")
datatype CompartmentTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. A Composition defines the structure and narrative content necessary for a document. However, a Composition alone does not constitute a document. Rather, the Composition must be the first entry in a Bundle where Bundle.type=document, and any other resources referenced from Composition must be included as subsequent entries in the Bundle (for example Patient, Practitioner, Encounter, etc.).
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Composition", kind="elementOnly")
class Composition extends DomainResource {

	@GenModel(documentation="An absolute URI that is used to identify this Composition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this Composition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the Composition is stored on different servers.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri url;

	@GenModel(documentation="A version-independent identifier for the Composition. This identifier stays constant as the composition is changed over time.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="An explicitly assigned identifer of a variation of the content in the Composition.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@GenModel(documentation="The workflow/clinical status of this composition. The status is a marker for the clinical standing of the document.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val CompositionStatus[1] status;

	@GenModel(documentation="Specifies the particular kind of composition (e.g. History and Physical, Discharge Summary, Progress Note). This usually equates to the purpose of making the composition.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@GenModel(documentation="A categorization for the type of the composition - helps for indexing and searching. This may be implied by or derived from the code specified in the Composition Type.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] category;

	@GenModel(documentation="Who or what the composition is about. The composition can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of livestock, or a set of patients that share a common exposure).")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference[*] subject;

	@GenModel(documentation="Describes the clinical encounter or type of care this documentation is associated with.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@GenModel(documentation="The composition editing time, when the composition was last logically changed by the author.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime[1] date;

	@GenModel(documentation="The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate Composition instances.")
	@ExtendedMetaData(kind="element", name="useContext", namespace="##targetNamespace")
	!resolve val UsageContext[*] useContext;

	@GenModel(documentation="Identifies who is responsible for the information in the composition, not necessarily who typed it in.")
	@ExtendedMetaData(kind="element", name="author", namespace="##targetNamespace")
	!resolve val Reference[+] author;

	@GenModel(documentation="A natural language name identifying the {{title}}. This name should be usable as an identifier for the module by machine processing applications such as code generation.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="Official human-readable label for the composition.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String[1] title;

	@GenModel(documentation="For any additional notes.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="A participant who has attested to the accuracy of the composition/document.")
	@ExtendedMetaData(kind="element", name="attester", namespace="##targetNamespace")
	!resolve val CompositionAttester[*] attester;

	@GenModel(documentation="Identifies the organization or group who is responsible for ongoing maintenance of and access to the composition/document information.")
	@ExtendedMetaData(kind="element", name="custodian", namespace="##targetNamespace")
	!resolve val Reference custodian;

	@GenModel(documentation="Relationships that this composition has with other compositions or documents that already exist.")
	@ExtendedMetaData(kind="element", name="relatesTo", namespace="##targetNamespace")
	!resolve val RelatedArtifact[*] relatesTo;

	@GenModel(documentation="The clinical service, such as a colonoscopy or an appendectomy, being documented.")
	@ExtendedMetaData(kind="element", name="event", namespace="##targetNamespace")
	!resolve val CompositionEvent[*] event;

	@GenModel(documentation="The root of the sections that make up the composition.")
	@ExtendedMetaData(kind="element", name="section", namespace="##targetNamespace")
	!resolve val CompositionSection[*] section;
}

@GenModel(documentation="A set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. A Composition defines the structure and narrative content necessary for a document. However, a Composition alone does not constitute a document. Rather, the Composition must be the first entry in a Bundle where Bundle.type=document, and any other resources referenced from Composition must be included as subsequent entries in the Bundle (for example Patient, Practitioner, Encounter, etc.).")
@ExtendedMetaData(name="Composition.Attester", kind="elementOnly")
class CompositionAttester extends BackboneElement {

	@GenModel(documentation="The type of attestation the authenticator offers.")
	@ExtendedMetaData(kind="element", name="mode", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] mode;

	@GenModel(documentation="When the composition was attested by the party.")
	@ExtendedMetaData(kind="element", name="time", namespace="##targetNamespace")
	!resolve val DateTime time;

	@GenModel(documentation="Who attested the composition in the specified way.")
	@ExtendedMetaData(kind="element", name="party", namespace="##targetNamespace")
	!resolve val Reference party;
}

@GenModel(documentation="A set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. A Composition defines the structure and narrative content necessary for a document. However, a Composition alone does not constitute a document. Rather, the Composition must be the first entry in a Bundle where Bundle.type=document, and any other resources referenced from Composition must be included as subsequent entries in the Bundle (for example Patient, Practitioner, Encounter, etc.).")
@ExtendedMetaData(name="Composition.Event", kind="elementOnly")
class CompositionEvent extends BackboneElement {

	@GenModel(documentation="The period of time covered by the documentation. There is no assertion that the documentation is a complete representation for this period, only that it documents events during this time.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;

	@GenModel(documentation="Represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the typeCode, such as a \"History and Physical Report\" in which case the procedure being documented is necessarily a \"History and Physical\" act. The events may be included as a code or as a reference to an other resource.")
	@ExtendedMetaData(kind="element", name="detail", namespace="##targetNamespace")
	!resolve val CodeableReference[*] detail;
}

@GenModel(documentation="A set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. A Composition defines the structure and narrative content necessary for a document. However, a Composition alone does not constitute a document. Rather, the Composition must be the first entry in a Bundle where Bundle.type=document, and any other resources referenced from Composition must be included as subsequent entries in the Bundle (for example Patient, Practitioner, Encounter, etc.).")
@ExtendedMetaData(name="Composition.Section", kind="elementOnly")
class CompositionSection extends BackboneElement {

	@GenModel(documentation="The label for this particular section.  This will be part of the rendered content for the document, and is often used to build a table of contents.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="A code identifying the kind of content contained within the section. This must be consistent with the section title.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@GenModel(documentation="Identifies who is responsible for the information in this section, not necessarily who typed it in.")
	@ExtendedMetaData(kind="element", name="author", namespace="##targetNamespace")
	!resolve val Reference[*] author;

	@GenModel(documentation="The actual focus of the section when it is not the subject of the composition, but instead represents something or someone associated with the subject such as (for a patient subject) a spouse, parent, fetus, or donor. If not focus is specified, the focus is assumed to be focus of the parent section, or, for a section in the Composition itself, the subject of the composition. Sections with a focus SHALL only include resources where the logical subject (patient, subject, focus, etc.) matches the section focus, or the resources have no logical subject (few resources).")
	@ExtendedMetaData(kind="element", name="focus", namespace="##targetNamespace")
	!resolve val Reference focus;

	@GenModel(documentation="A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative.")
	@ExtendedMetaData(kind="element", name="text", namespace="##targetNamespace")
	!resolve val Narrative text;

	@GenModel(documentation="Specifies the order applied to the items in the section entries.")
	@ExtendedMetaData(kind="element", name="orderedBy", namespace="##targetNamespace")
	!resolve val CodeableConcept orderedBy;

	@GenModel(documentation="A reference to the actual resource from which the narrative in the section is derived.")
	@ExtendedMetaData(kind="element", name="entry", namespace="##targetNamespace")
	!resolve val Reference[*] entry;

	@GenModel(documentation="If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.")
	@ExtendedMetaData(kind="element", name="emptyReason", namespace="##targetNamespace")
	!resolve val CodeableConcept emptyReason;

	@GenModel(documentation="A nested sub-section within this section.")
	@ExtendedMetaData(kind="element", name="section", namespace="##targetNamespace")
	!resolve val CompositionSection[*] section;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="CompositionStatus", kind="elementOnly")
class CompositionStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr CompositionStatusEnum value;
}

@ExtendedMetaData(name="CompositionStatusEnum")
enum CompositionStatusEnum {

	@GenModel(documentation="Registered")
	registered = 0;

	@GenModel(documentation="Partial")
	partial = 1;

	@GenModel(documentation="Preliminary")
	preliminary = 2;

	@GenModel(documentation="Final")
	final = 3;

	@GenModel(documentation="Amended")
	amended = 4;

	@GenModel(documentation="Corrected")
	corrected = 5;

	@GenModel(documentation="Appended")
	appended = 6;

	@GenModel(documentation="Cancelled")
	cancelled = 7;

	@GenModel(documentation="Entered in Error")
	enteredInError = 8;

	@GenModel(documentation="Deprecated")
	deprecated = 9;

	@GenModel(documentation="Unknown")
	unknown = 10;
}

@ExtendedMetaData(name="CompositionStatusEnum:Object", baseType="CompositionStatusEnum")
datatype CompositionStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ConceptMap", kind="elementOnly")
class ConceptMap extends MetadataResource {

	@GenModel(documentation="An absolute URI that is used to identify this concept map when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this concept map is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the concept map is stored on different servers.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri url;

	@GenModel(documentation="A formal identifier that is used to identify this concept map when it is represented in other formats, or referenced in a specification, model, design or an instance.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The identifier that is used to identify this version of the concept map when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the concept map author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@ExtendedMetaData(kind="element", name="versionAlgorithmString", namespace="##targetNamespace")
	!resolve val String versionAlgorithmString;

	@ExtendedMetaData(kind="element", name="versionAlgorithmCoding", namespace="##targetNamespace")
	!resolve val Coding versionAlgorithmCoding;

	@GenModel(documentation="A natural language name identifying the concept map. This name should be usable as an identifier for the module by machine processing applications such as code generation.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="A short, descriptive, user-friendly title for the concept map.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="The status of this concept map. Enables tracking the life-cycle of the content.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="A Boolean value to indicate that this concept map is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.")
	@ExtendedMetaData(kind="element", name="experimental", namespace="##targetNamespace")
	!resolve val Boolean experimental;

	@GenModel(documentation="The date  (and optionally time) when the concept map was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the concept map changes.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="The name of the organization or individual responsible for the release and ongoing maintenance of the concept map.")
	@ExtendedMetaData(kind="element", name="publisher", namespace="##targetNamespace")
	!resolve val String publisher;

	@GenModel(documentation="Contact details to assist a user in finding and communicating with the publisher.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactDetail[*] contact;

	@GenModel(documentation="A free text natural language description of the concept map from a consumer's perspective.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate concept map instances.")
	@ExtendedMetaData(kind="element", name="useContext", namespace="##targetNamespace")
	!resolve val UsageContext[*] useContext;

	@GenModel(documentation="A legal or geographic region in which the concept map is intended to be used.")
	@ExtendedMetaData(kind="element", name="jurisdiction", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] jurisdiction;

	@GenModel(documentation="Explanation of why this concept map is needed and why it has been designed as it has.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val Markdown purpose;

	@GenModel(documentation="A copyright statement relating to the concept map and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the concept map.")
	@ExtendedMetaData(kind="element", name="copyright", namespace="##targetNamespace")
	!resolve val Markdown copyright;

	@GenModel(documentation="A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').")
	@ExtendedMetaData(kind="element", name="copyrightLabel", namespace="##targetNamespace")
	!resolve val String copyrightLabel;

	@GenModel(documentation="The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.")
	@ExtendedMetaData(kind="element", name="approvalDate", namespace="##targetNamespace")
	!resolve val Date approvalDate;

	@GenModel(documentation="The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.")
	@ExtendedMetaData(kind="element", name="lastReviewDate", namespace="##targetNamespace")
	!resolve val Date lastReviewDate;

	@GenModel(documentation="The period during which the ConceptMap content was or is planned to be in active use.")
	@ExtendedMetaData(kind="element", name="effectivePeriod", namespace="##targetNamespace")
	!resolve val Period effectivePeriod;

	@GenModel(documentation="Descriptions related to the content of the ConceptMap. Topics provide a high-level categorization as well as keywords for the ConceptMap that can be useful for filtering and searching.")
	@ExtendedMetaData(kind="element", name="topic", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] topic;

	@GenModel(documentation="An individiual or organization primarily involved in the creation and maintenance of the ConceptMap.")
	@ExtendedMetaData(kind="element", name="author", namespace="##targetNamespace")
	!resolve val ContactDetail[*] author;

	@GenModel(documentation="An individual or organization primarily responsible for internal coherence of the ConceptMap.")
	@ExtendedMetaData(kind="element", name="editor", namespace="##targetNamespace")
	!resolve val ContactDetail[*] editor;

	@GenModel(documentation="An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the ConceptMap.")
	@ExtendedMetaData(kind="element", name="reviewer", namespace="##targetNamespace")
	!resolve val ContactDetail[*] reviewer;

	@GenModel(documentation="An individual or organization asserted by the publisher to be responsible for officially endorsing the ConceptMap for use in some setting.")
	@ExtendedMetaData(kind="element", name="endorser", namespace="##targetNamespace")
	!resolve val ContactDetail[*] endorser;

	@GenModel(documentation="Related artifacts such as additional documentation, justification, dependencies, bibliographic references, and predecessor and successor artifacts.")
	@ExtendedMetaData(kind="element", name="relatedArtifact", namespace="##targetNamespace")
	!resolve val RelatedArtifact[*] relatedArtifact;

	@GenModel(documentation="A property defines a slot through which additional information can be provided about a map from source -> target.")
	@ExtendedMetaData(kind="element", name="property", namespace="##targetNamespace")
	!resolve val ConceptMapProperty[*] property;

	@GenModel(documentation="An additionalAttribute defines an additional data element found in the source or target data model where the data will come from or be mapped to. Some mappings are based on data in addition to the source data element, where codes in multiple fields are combined to a single field (or vice versa).")
	@ExtendedMetaData(kind="element", name="additionalAttribute", namespace="##targetNamespace")
	!resolve val ConceptMapAdditionalAttribute[*] additionalAttribute;

	@ExtendedMetaData(kind="element", name="sourceScopeUri", namespace="##targetNamespace")
	!resolve val Uri sourceScopeUri;

	@ExtendedMetaData(kind="element", name="sourceScopeCanonical", namespace="##targetNamespace")
	!resolve val Canonical sourceScopeCanonical;

	@ExtendedMetaData(kind="element", name="targetScopeUri", namespace="##targetNamespace")
	!resolve val Uri targetScopeUri;

	@ExtendedMetaData(kind="element", name="targetScopeCanonical", namespace="##targetNamespace")
	!resolve val Canonical targetScopeCanonical;

	@GenModel(documentation="A group of mappings that all have the same source and target system.")
	@ExtendedMetaData(kind="element", name="group", namespace="##targetNamespace")
	!resolve val ConceptMapGroup[*] group;
}

@GenModel(documentation="A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models.")
@ExtendedMetaData(name="ConceptMap.AdditionalAttribute", kind="elementOnly")
class ConceptMapAdditionalAttribute extends BackboneElement {

	@GenModel(documentation="A code that is used to identify this additional data attribute. The code is used internally in ConceptMap.group.element.target.dependsOn.attribute and ConceptMap.group.element.target.product.attribute.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val Code[1] code;

	@GenModel(documentation="Reference to the formal definition of the source/target data element. For elements defined by the FHIR specification, or using a FHIR logical model, the correct format is {canonical-url}#{element-id}.")
	@ExtendedMetaData(kind="element", name="uri", namespace="##targetNamespace")
	!resolve val Uri uri;

	@GenModel(documentation="A description of the additional attribute and/or the data element it refers to - why it is defined, and how the value might be used in mappings, and a discussion of issues associated with the use of the data element.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val String description;

	@GenModel(documentation="The type of the source data contained in this concept map for this data element.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val ConceptMapAttributeType[1] type;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ConceptMapAttributeType", kind="elementOnly")
class ConceptMapAttributeType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ConceptMapAttributeTypeEnum value;
}

@ExtendedMetaData(name="ConceptMapAttributeTypeEnum")
enum ConceptMapAttributeTypeEnum {

	@GenModel(documentation="code")
	code = 0;

	@GenModel(documentation="Coding")
	Coding = 1;

	@GenModel(documentation="string")
	string = 2;

	@GenModel(documentation="boolean")
	boolean = 3;

	@GenModel(documentation="Quantity")
	Quantity = 4;
}

@ExtendedMetaData(name="ConceptMapAttributeTypeEnum:Object", baseType="ConceptMapAttributeTypeEnum")
datatype ConceptMapAttributeTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models.")
@ExtendedMetaData(name="ConceptMap.DependsOn", kind="elementOnly")
class ConceptMapDependsOn extends BackboneElement {

	@GenModel(documentation="A reference to the additional attribute that holds a value the map depends on.")
	@ExtendedMetaData(kind="element", name="attribute", namespace="##targetNamespace")
	!resolve val Code[1] attribute;

	@ExtendedMetaData(kind="element", name="valueCode", namespace="##targetNamespace")
	!resolve val Code valueCode;

	@ExtendedMetaData(kind="element", name="valueCoding", namespace="##targetNamespace")
	!resolve val Coding valueCoding;

	@ExtendedMetaData(kind="element", name="valueString", namespace="##targetNamespace")
	!resolve val String valueString;

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@GenModel(documentation="This mapping applies if the data element value is a code from this value set.")
	@ExtendedMetaData(kind="element", name="valueSet", namespace="##targetNamespace")
	!resolve val Canonical valueSet;
}

@GenModel(documentation="A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models.")
@ExtendedMetaData(name="ConceptMap.Element", kind="elementOnly")
class ConceptMapElement extends BackboneElement {

	@GenModel(documentation="Identity (code or path) or the element/item being mapped.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val Code code;

	@GenModel(documentation="The display for the code. The display is only provided to help editors when editing the concept map.")
	@ExtendedMetaData(kind="element", name="display", namespace="##targetNamespace")
	!resolve val String display;

	@GenModel(documentation="The set of concepts from the ConceptMap.group.source code system which are all being mapped to the target as part of this mapping rule.")
	@ExtendedMetaData(kind="element", name="valueSet", namespace="##targetNamespace")
	!resolve val Canonical valueSet;

	@GenModel(documentation="If noMap = true this indicates that no mapping to a target concept exists for this source concept.")
	@ExtendedMetaData(kind="element", name="noMap", namespace="##targetNamespace")
	!resolve val Boolean noMap;

	@GenModel(documentation="A concept from the target value set that this concept maps to.")
	@ExtendedMetaData(kind="element", name="target", namespace="##targetNamespace")
	!resolve val ConceptMapTarget[*] target;
}

@GenModel(documentation="A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models.")
@ExtendedMetaData(name="ConceptMap.Group", kind="elementOnly")
class ConceptMapGroup extends BackboneElement {

	@GenModel(documentation="An absolute URI that identifies the source system where the concepts to be mapped are defined.")
	@ExtendedMetaData(kind="element", name="source", namespace="##targetNamespace")
	!resolve val Canonical source;

	@GenModel(documentation="An absolute URI that identifies the target system that the concepts will be mapped to.")
	@ExtendedMetaData(kind="element", name="target", namespace="##targetNamespace")
	!resolve val Canonical target;

	@GenModel(documentation="Mappings for an individual concept in the source to one or more concepts in the target.")
	@ExtendedMetaData(kind="element", name="element", namespace="##targetNamespace")
	!resolve val ConceptMapElement[+] element;

	@GenModel(documentation="What to do when there is no mapping to a target concept from the source concept and ConceptMap.group.element.noMap is not true. This provides the \"default\" to be applied when there is no target concept mapping specified or the expansion of ConceptMap.group.element.target.valueSet is empty.")
	@ExtendedMetaData(kind="element", name="unmapped", namespace="##targetNamespace")
	!resolve val ConceptMapUnmapped unmapped;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ConceptMapGroupUnmappedMode", kind="elementOnly")
class ConceptMapGroupUnmappedMode extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ConceptMapGroupUnmappedModeEnum value;
}

@ExtendedMetaData(name="ConceptMapGroupUnmappedModeEnum")
enum ConceptMapGroupUnmappedModeEnum {

	@GenModel(documentation="Use Provided Source Code")
	useSourceCode = 0;

	@GenModel(documentation="Fixed Code")
	fixed = 1;

	@GenModel(documentation="Other Map")
	otherMap = 2;
}

@ExtendedMetaData(name="ConceptMapGroupUnmappedModeEnum:Object", baseType="ConceptMapGroupUnmappedModeEnum")
datatype ConceptMapGroupUnmappedModeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models.")
@ExtendedMetaData(name="ConceptMap.Property", kind="elementOnly")
class ConceptMapProperty extends BackboneElement {

	@GenModel(documentation="A code that is used to identify the property. The code is used internally (in ConceptMap.group.element.target.property.code) and also in the $translate operation.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val Code[1] code;

	@GenModel(documentation="Reference to the formal meaning of the property.")
	@ExtendedMetaData(kind="element", name="uri", namespace="##targetNamespace")
	!resolve val Uri uri;

	@GenModel(documentation="A description of the property - why it is defined, and how its value might be used.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val String description;

	@GenModel(documentation="The type of the property value.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val ConceptMapPropertyType[1] type;

	@GenModel(documentation="The CodeSystem that defines the codes from which values of type ```code``` in property values.")
	@ExtendedMetaData(kind="element", name="system", namespace="##targetNamespace")
	!resolve val Canonical system;
}

@GenModel(documentation="A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models.")
@ExtendedMetaData(name="ConceptMap.Property1", kind="elementOnly")
class ConceptMapProperty1 extends BackboneElement {

	@GenModel(documentation="A reference to a mapping property defined in ConceptMap.property.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val Code[1] code;

	@ExtendedMetaData(kind="element", name="valueCoding", namespace="##targetNamespace")
	!resolve val Coding valueCoding;

	@ExtendedMetaData(kind="element", name="valueString", namespace="##targetNamespace")
	!resolve val String valueString;

	@ExtendedMetaData(kind="element", name="valueInteger", namespace="##targetNamespace")
	!resolve val Integer valueInteger;

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;

	@ExtendedMetaData(kind="element", name="valueDateTime", namespace="##targetNamespace")
	!resolve val DateTime valueDateTime;

	@ExtendedMetaData(kind="element", name="valueDecimal", namespace="##targetNamespace")
	!resolve val Decimal valueDecimal;

	@ExtendedMetaData(kind="element", name="valueCode", namespace="##targetNamespace")
	!resolve val Code valueCode;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ConceptMapPropertyType", kind="elementOnly")
class ConceptMapPropertyType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ConceptMapPropertyTypeEnum value;
}

@ExtendedMetaData(name="ConceptMapPropertyTypeEnum")
enum ConceptMapPropertyTypeEnum {

	@GenModel(documentation="Coding (external reference)")
	Coding = 0;

	@GenModel(documentation="string")
	string = 1;

	@GenModel(documentation="integer")
	integer = 2;

	@GenModel(documentation="boolean")
	boolean = 3;

	@GenModel(documentation="dateTime")
	dateTime = 4;

	@GenModel(documentation="decimal")
	decimal = 5;

	@GenModel(documentation="code")
	code = 6;
}

@ExtendedMetaData(name="ConceptMapPropertyTypeEnum:Object", baseType="ConceptMapPropertyTypeEnum")
datatype ConceptMapPropertyTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ConceptMapRelationship", kind="elementOnly")
class ConceptMapRelationship extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ConceptMapRelationshipEnum value;
}

@ExtendedMetaData(name="ConceptMapRelationshipEnum")
enum ConceptMapRelationshipEnum {

	@GenModel(documentation="Related To")
	relatedTo = 0;

	@GenModel(documentation="Equivalent")
	equivalent = 1;

	@GenModel(documentation="Source Is Narrower Than Target")
	sourceIsNarrowerThanTarget = 2;

	@GenModel(documentation="Source Is Broader Than Target")
	sourceIsBroaderThanTarget = 3;

	@GenModel(documentation="Not Related To")
	notRelatedTo = 4;
}

@ExtendedMetaData(name="ConceptMapRelationshipEnum:Object", baseType="ConceptMapRelationshipEnum")
datatype ConceptMapRelationshipEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models.")
@ExtendedMetaData(name="ConceptMap.Target", kind="elementOnly")
class ConceptMapTarget extends BackboneElement {

	@GenModel(documentation="Identity (code or path) or the element/item that the map refers to.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val Code code;

	@GenModel(documentation="The display for the code. The display is only provided to help editors when editing the concept map.")
	@ExtendedMetaData(kind="element", name="display", namespace="##targetNamespace")
	!resolve val String display;

	@GenModel(documentation="The set of concepts from the ConceptMap.group.target code system which are all being mapped to as part of this mapping rule. The effect of using this data element is the same as having multiple ConceptMap.group.element.target elements with one for each concept in the ConceptMap.group.element.target.valueSet value set.")
	@ExtendedMetaData(kind="element", name="valueSet", namespace="##targetNamespace")
	!resolve val Canonical valueSet;

	@GenModel(documentation="The relationship between the source and target concepts. The relationship is read from source to target (e.g. source-is-narrower-than-target).")
	@ExtendedMetaData(kind="element", name="relationship", namespace="##targetNamespace")
	!resolve val ConceptMapRelationship[1] relationship;

	@GenModel(documentation="A description of status/issues in mapping that conveys additional information not represented in  the structured data.")
	@ExtendedMetaData(kind="element", name="comment", namespace="##targetNamespace")
	!resolve val String comment;

	@GenModel(documentation="A property value for this source -> target mapping.")
	@ExtendedMetaData(kind="element", name="property", namespace="##targetNamespace")
	!resolve val ConceptMapProperty1[*] property;

	@GenModel(documentation="A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified data attribute can be resolved, and it has the specified value.")
	@ExtendedMetaData(kind="element", name="dependsOn", namespace="##targetNamespace")
	!resolve val ConceptMapDependsOn[*] dependsOn;

	@GenModel(documentation="Product is the output of a ConceptMap that provides additional values that go in other attributes / data elemnts of the target data.")
	@ExtendedMetaData(kind="element", name="product", namespace="##targetNamespace")
	!resolve val ConceptMapDependsOn[*] product;
}

@GenModel(documentation="A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models.")
@ExtendedMetaData(name="ConceptMap.Unmapped", kind="elementOnly")
class ConceptMapUnmapped extends BackboneElement {

	@GenModel(documentation="Defines which action to take if there is no match for the source concept in the target system designated for the group. One of 3 actions are possible: use the unmapped source code (this is useful when doing a mapping between versions, and only a few codes have changed), use a fixed code (a default code), or alternatively, a reference to a different concept map can be provided (by canonical URL).")
	@ExtendedMetaData(kind="element", name="mode", namespace="##targetNamespace")
	!resolve val ConceptMapGroupUnmappedMode[1] mode;

	@GenModel(documentation="The fixed code to use when the mode = 'fixed'  - all unmapped codes are mapped to a single fixed code.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val Code code;

	@GenModel(documentation="The display for the code. The display is only provided to help editors when editing the concept map.")
	@ExtendedMetaData(kind="element", name="display", namespace="##targetNamespace")
	!resolve val String display;

	@GenModel(documentation="The set of fixed codes to use when the mode = 'fixed'  - all unmapped codes are mapped to each of the fixed codes.")
	@ExtendedMetaData(kind="element", name="valueSet", namespace="##targetNamespace")
	!resolve val Canonical valueSet;

	@GenModel(documentation="The default relationship value to apply between the source and target concepts when the source code is unmapped and the mode is 'fixed' or 'use-source-code'.")
	@ExtendedMetaData(kind="element", name="relationship", namespace="##targetNamespace")
	!resolve val ConceptMapRelationship relationship;

	@GenModel(documentation="The canonical reference to an additional ConceptMap resource instance to use for mapping if this ConceptMap resource contains no matching mapping for the source concept.")
	@ExtendedMetaData(kind="element", name="otherMap", namespace="##targetNamespace")
	!resolve val Canonical otherMap;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ConcreteFHIRTypes", kind="elementOnly")
class ConcreteFHIRTypes extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ConcreteFHIRTypesEnum value;
}

@ExtendedMetaData(name="ConcreteFHIRTypesEnum")
enum ConcreteFHIRTypesEnum {

	@GenModel(documentation="Account")
	Account = 0;

	@GenModel(documentation="ActivityDefinition")
	ActivityDefinition = 1;

	@GenModel(documentation="ActorDefinition")
	ActorDefinition = 2;

	@GenModel(documentation="Address")
	Address = 3;

	@GenModel(documentation="AdministrableProductDefinition")
	AdministrableProductDefinition = 4;

	@GenModel(documentation="AdverseEvent")
	AdverseEvent = 5;

	@GenModel(documentation="Age")
	Age = 6;

	@GenModel(documentation="AllergyIntolerance")
	AllergyIntolerance = 7;

	@GenModel(documentation="Annotation")
	Annotation = 8;

	@GenModel(documentation="Appointment")
	Appointment = 9;

	@GenModel(documentation="AppointmentResponse")
	AppointmentResponse = 10;

	@GenModel(documentation="ArtifactAssessment")
	ArtifactAssessment = 11;

	@GenModel(documentation="Attachment")
	Attachment = 12;

	@GenModel(documentation="AuditEvent")
	AuditEvent = 13;

	@GenModel(documentation="Availability")
	Availability = 14;

	@GenModel(documentation="base64Binary")
	base64Binary = 15;

	@GenModel(documentation="Basic")
	Basic = 16;

	@GenModel(documentation="Binary")
	Binary = 17;

	@GenModel(documentation="BiologicallyDerivedProduct")
	BiologicallyDerivedProduct = 18;

	@GenModel(documentation="BiologicallyDerivedProductDispense")
	BiologicallyDerivedProductDispense = 19;

	@GenModel(documentation="BodyStructure")
	BodyStructure = 20;

	@GenModel(documentation="boolean")
	boolean = 21;

	@GenModel(documentation="Bundle")
	Bundle = 22;

	@GenModel(documentation="canonical")
	canonical = 23;

	@GenModel(documentation="CapabilityStatement")
	CapabilityStatement = 24;

	@GenModel(documentation="CarePlan")
	CarePlan = 25;

	@GenModel(documentation="CareTeam")
	CareTeam = 26;

	@GenModel(documentation="ChargeItem")
	ChargeItem = 27;

	@GenModel(documentation="ChargeItemDefinition")
	ChargeItemDefinition = 28;

	@GenModel(documentation="Citation")
	Citation = 29;

	@GenModel(documentation="Claim")
	Claim = 30;

	@GenModel(documentation="ClaimResponse")
	ClaimResponse = 31;

	@GenModel(documentation="ClinicalImpression")
	ClinicalImpression = 32;

	@GenModel(documentation="ClinicalUseDefinition")
	ClinicalUseDefinition = 33;

	@GenModel(documentation="code")
	code = 34;

	@GenModel(documentation="CodeableConcept")
	CodeableConcept = 35;

	@GenModel(documentation="CodeableReference")
	CodeableReference = 36;

	@GenModel(documentation="CodeSystem")
	CodeSystem = 37;

	@GenModel(documentation="Coding")
	Coding = 38;

	@GenModel(documentation="Communication")
	Communication = 39;

	@GenModel(documentation="CommunicationRequest")
	CommunicationRequest = 40;

	@GenModel(documentation="CompartmentDefinition")
	CompartmentDefinition = 41;

	@GenModel(documentation="Composition")
	Composition = 42;

	@GenModel(documentation="ConceptMap")
	ConceptMap = 43;

	@GenModel(documentation="Condition")
	Condition = 44;

	@GenModel(documentation="ConditionDefinition")
	ConditionDefinition = 45;

	@GenModel(documentation="Consent")
	Consent = 46;

	@GenModel(documentation="ContactDetail")
	ContactDetail = 47;

	@GenModel(documentation="ContactPoint")
	ContactPoint = 48;

	@GenModel(documentation="Contract")
	Contract = 49;

	@GenModel(documentation="Contributor")
	Contributor = 50;

	@GenModel(documentation="Count")
	Count = 51;

	@GenModel(documentation="Coverage")
	Coverage = 52;

	@GenModel(documentation="CoverageEligibilityRequest")
	CoverageEligibilityRequest = 53;

	@GenModel(documentation="CoverageEligibilityResponse")
	CoverageEligibilityResponse = 54;

	@GenModel(documentation="DataRequirement")
	DataRequirement = 55;

	@GenModel(documentation="date")
	date = 56;

	@GenModel(documentation="dateTime")
	dateTime = 57;

	@GenModel(documentation="decimal")
	decimal = 58;

	@GenModel(documentation="DetectedIssue")
	DetectedIssue = 59;

	@GenModel(documentation="Device")
	Device = 60;

	@GenModel(documentation="DeviceAssociation")
	DeviceAssociation = 61;

	@GenModel(documentation="DeviceDefinition")
	DeviceDefinition = 62;

	@GenModel(documentation="DeviceDispense")
	DeviceDispense = 63;

	@GenModel(documentation="DeviceMetric")
	DeviceMetric = 64;

	@GenModel(documentation="DeviceRequest")
	DeviceRequest = 65;

	@GenModel(documentation="DeviceUsage")
	DeviceUsage = 66;

	@GenModel(documentation="DiagnosticReport")
	DiagnosticReport = 67;

	@GenModel(documentation="Distance")
	Distance = 68;

	@GenModel(documentation="DocumentReference")
	DocumentReference = 69;

	@GenModel(documentation="Dosage")
	Dosage = 70;

	@GenModel(documentation="Duration")
	Duration = 71;

	@GenModel(documentation="ElementDefinition")
	ElementDefinition = 72;

	@GenModel(documentation="Encounter")
	Encounter = 73;

	@GenModel(documentation="EncounterHistory")
	EncounterHistory = 74;

	@GenModel(documentation="Endpoint")
	Endpoint = 75;

	@GenModel(documentation="EnrollmentRequest")
	EnrollmentRequest = 76;

	@GenModel(documentation="EnrollmentResponse")
	EnrollmentResponse = 77;

	@GenModel(documentation="EpisodeOfCare")
	EpisodeOfCare = 78;

	@GenModel(documentation="EventDefinition")
	EventDefinition = 79;

	@GenModel(documentation="Evidence")
	Evidence = 80;

	@GenModel(documentation="EvidenceReport")
	EvidenceReport = 81;

	@GenModel(documentation="EvidenceVariable")
	EvidenceVariable = 82;

	@GenModel(documentation="ExampleScenario")
	ExampleScenario = 83;

	@GenModel(documentation="ExplanationOfBenefit")
	ExplanationOfBenefit = 84;

	@GenModel(documentation="Expression")
	Expression = 85;

	@GenModel(documentation="ExtendedContactDetail")
	ExtendedContactDetail = 86;

	@GenModel(documentation="Extension")
	Extension = 87;

	@GenModel(documentation="FamilyMemberHistory")
	FamilyMemberHistory = 88;

	@GenModel(documentation="Flag")
	Flag = 89;

	@GenModel(documentation="FormularyItem")
	FormularyItem = 90;

	@GenModel(documentation="GenomicStudy")
	GenomicStudy = 91;

	@GenModel(documentation="Goal")
	Goal = 92;

	@GenModel(documentation="GraphDefinition")
	GraphDefinition = 93;

	@GenModel(documentation="Group")
	Group = 94;

	@GenModel(documentation="GuidanceResponse")
	GuidanceResponse = 95;

	@GenModel(documentation="HealthcareService")
	HealthcareService = 96;

	@GenModel(documentation="HumanName")
	HumanName = 97;

	@GenModel(documentation="id")
	~id = 98;

	@GenModel(documentation="Identifier")
	Identifier = 99;

	@GenModel(documentation="ImagingSelection")
	ImagingSelection = 100;

	@GenModel(documentation="ImagingStudy")
	ImagingStudy = 101;

	@GenModel(documentation="Immunization")
	Immunization = 102;

	@GenModel(documentation="ImmunizationEvaluation")
	ImmunizationEvaluation = 103;

	@GenModel(documentation="ImmunizationRecommendation")
	ImmunizationRecommendation = 104;

	@GenModel(documentation="ImplementationGuide")
	ImplementationGuide = 105;

	@GenModel(documentation="Ingredient")
	Ingredient = 106;

	@GenModel(documentation="instant")
	instant = 107;

	@GenModel(documentation="InsurancePlan")
	InsurancePlan = 108;

	@GenModel(documentation="integer")
	integer = 109;

	@GenModel(documentation="integer64")
	integer64 = 110;

	@GenModel(documentation="InventoryItem")
	InventoryItem = 111;

	@GenModel(documentation="InventoryReport")
	InventoryReport = 112;

	@GenModel(documentation="Invoice")
	Invoice = 113;

	@GenModel(documentation="Library")
	Library = 114;

	@GenModel(documentation="Linkage")
	Linkage = 115;

	@GenModel(documentation="List")
	List = 116;

	@GenModel(documentation="Location")
	Location = 117;

	@GenModel(documentation="ManufacturedItemDefinition")
	ManufacturedItemDefinition = 118;

	@GenModel(documentation="markdown")
	markdown = 119;

	@GenModel(documentation="MarketingStatus")
	MarketingStatus = 120;

	@GenModel(documentation="Measure")
	Measure = 121;

	@GenModel(documentation="MeasureReport")
	MeasureReport = 122;

	@GenModel(documentation="Medication")
	Medication = 123;

	@GenModel(documentation="MedicationAdministration")
	MedicationAdministration = 124;

	@GenModel(documentation="MedicationDispense")
	MedicationDispense = 125;

	@GenModel(documentation="MedicationKnowledge")
	MedicationKnowledge = 126;

	@GenModel(documentation="MedicationRequest")
	MedicationRequest = 127;

	@GenModel(documentation="MedicationStatement")
	MedicationStatement = 128;

	@GenModel(documentation="MedicinalProductDefinition")
	MedicinalProductDefinition = 129;

	@GenModel(documentation="MessageDefinition")
	MessageDefinition = 130;

	@GenModel(documentation="MessageHeader")
	MessageHeader = 131;

	@GenModel(documentation="Meta")
	Meta = 132;

	@GenModel(documentation="MolecularSequence")
	MolecularSequence = 133;

	@GenModel(documentation="MonetaryComponent")
	MonetaryComponent = 134;

	@GenModel(documentation="Money")
	Money = 135;

	@GenModel(documentation="NamingSystem")
	NamingSystem = 136;

	@GenModel(documentation="Narrative")
	Narrative = 137;

	@GenModel(documentation="NutritionIntake")
	NutritionIntake = 138;

	@GenModel(documentation="NutritionOrder")
	NutritionOrder = 139;

	@GenModel(documentation="NutritionProduct")
	NutritionProduct = 140;

	@GenModel(documentation="Observation")
	Observation = 141;

	@GenModel(documentation="ObservationDefinition")
	ObservationDefinition = 142;

	@GenModel(documentation="oid")
	oid = 143;

	@GenModel(documentation="OperationDefinition")
	OperationDefinition = 144;

	@GenModel(documentation="OperationOutcome")
	OperationOutcome = 145;

	@GenModel(documentation="Organization")
	Organization = 146;

	@GenModel(documentation="OrganizationAffiliation")
	OrganizationAffiliation = 147;

	@GenModel(documentation="PackagedProductDefinition")
	PackagedProductDefinition = 148;

	@GenModel(documentation="ParameterDefinition")
	ParameterDefinition = 149;

	@GenModel(documentation="Parameters")
	Parameters = 150;

	@GenModel(documentation="Patient")
	Patient = 151;

	@GenModel(documentation="PaymentNotice")
	PaymentNotice = 152;

	@GenModel(documentation="PaymentReconciliation")
	PaymentReconciliation = 153;

	@GenModel(documentation="Period")
	Period = 154;

	@GenModel(documentation="Permission")
	Permission = 155;

	@GenModel(documentation="Person")
	Person = 156;

	@GenModel(documentation="PlanDefinition")
	PlanDefinition = 157;

	@GenModel(documentation="positiveInt")
	positiveInt = 158;

	@GenModel(documentation="Practitioner")
	Practitioner = 159;

	@GenModel(documentation="PractitionerRole")
	PractitionerRole = 160;

	@GenModel(documentation="Procedure")
	Procedure = 161;

	@GenModel(documentation="ProductShelfLife")
	ProductShelfLife = 162;

	@GenModel(documentation="Provenance")
	Provenance = 163;

	@GenModel(documentation="Quantity")
	Quantity = 164;

	@GenModel(documentation="Questionnaire")
	Questionnaire = 165;

	@GenModel(documentation="QuestionnaireResponse")
	QuestionnaireResponse = 166;

	@GenModel(documentation="Range")
	Range = 167;

	@GenModel(documentation="Ratio")
	Ratio = 168;

	@GenModel(documentation="RatioRange")
	RatioRange = 169;

	@GenModel(documentation="Reference")
	Reference = 170;

	@GenModel(documentation="RegulatedAuthorization")
	RegulatedAuthorization = 171;

	@GenModel(documentation="RelatedArtifact")
	RelatedArtifact = 172;

	@GenModel(documentation="RelatedPerson")
	RelatedPerson = 173;

	@GenModel(documentation="RequestOrchestration")
	RequestOrchestration = 174;

	@GenModel(documentation="Requirements")
	Requirements = 175;

	@GenModel(documentation="ResearchStudy")
	ResearchStudy = 176;

	@GenModel(documentation="ResearchSubject")
	ResearchSubject = 177;

	@GenModel(documentation="RiskAssessment")
	RiskAssessment = 178;

	@GenModel(documentation="SampledData")
	SampledData = 179;

	@GenModel(documentation="Schedule")
	Schedule = 180;

	@GenModel(documentation="SearchParameter")
	SearchParameter = 181;

	@GenModel(documentation="ServiceRequest")
	ServiceRequest = 182;

	@GenModel(documentation="Signature")
	Signature = 183;

	@GenModel(documentation="Slot")
	Slot = 184;

	@GenModel(documentation="Specimen")
	Specimen = 185;

	@GenModel(documentation="SpecimenDefinition")
	SpecimenDefinition = 186;

	@GenModel(documentation="string")
	string = 187;

	@GenModel(documentation="StructureDefinition")
	StructureDefinition = 188;

	@GenModel(documentation="StructureMap")
	StructureMap = 189;

	@GenModel(documentation="Subscription")
	Subscription = 190;

	@GenModel(documentation="SubscriptionStatus")
	SubscriptionStatus = 191;

	@GenModel(documentation="SubscriptionTopic")
	SubscriptionTopic = 192;

	@GenModel(documentation="Substance")
	Substance = 193;

	@GenModel(documentation="SubstanceDefinition")
	SubstanceDefinition = 194;

	@GenModel(documentation="SubstanceNucleicAcid")
	SubstanceNucleicAcid = 195;

	@GenModel(documentation="SubstancePolymer")
	SubstancePolymer = 196;

	@GenModel(documentation="SubstanceProtein")
	SubstanceProtein = 197;

	@GenModel(documentation="SubstanceReferenceInformation")
	SubstanceReferenceInformation = 198;

	@GenModel(documentation="SubstanceSourceMaterial")
	SubstanceSourceMaterial = 199;

	@GenModel(documentation="SupplyDelivery")
	SupplyDelivery = 200;

	@GenModel(documentation="SupplyRequest")
	SupplyRequest = 201;

	@GenModel(documentation="Task")
	Task = 202;

	@GenModel(documentation="TerminologyCapabilities")
	TerminologyCapabilities = 203;

	@GenModel(documentation="TestPlan")
	TestPlan = 204;

	@GenModel(documentation="TestReport")
	TestReport = 205;

	@GenModel(documentation="TestScript")
	TestScript = 206;

	@GenModel(documentation="time")
	time = 207;

	@GenModel(documentation="Timing")
	Timing = 208;

	@GenModel(documentation="Transport")
	Transport = 209;

	@GenModel(documentation="TriggerDefinition")
	TriggerDefinition = 210;

	@GenModel(documentation="unsignedInt")
	unsignedInt = 211;

	@GenModel(documentation="uri")
	uri = 212;

	@GenModel(documentation="url")
	url = 213;

	@GenModel(documentation="UsageContext")
	UsageContext = 214;

	@GenModel(documentation="uuid")
	uuid = 215;

	@GenModel(documentation="ValueSet")
	ValueSet = 216;

	@GenModel(documentation="VerificationResult")
	VerificationResult = 217;

	@GenModel(documentation="VirtualServiceDetail")
	VirtualServiceDetail = 218;

	@GenModel(documentation="VisionPrescription")
	VisionPrescription = 219;

	@GenModel(documentation="xhtml")
	xhtml = 220;
}

@ExtendedMetaData(name="ConcreteFHIRTypesEnum:Object", baseType="ConcreteFHIRTypesEnum")
datatype ConcreteFHIRTypesEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept that has risen to a level of concern.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Condition", kind="elementOnly")
class Condition extends DomainResource {

	@GenModel(documentation="Business identifiers assigned to this condition by the performer or other systems which remain constant as the resource is updated and propagates from server to server.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The clinical status of the condition.")
	@ExtendedMetaData(kind="element", name="clinicalStatus", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] clinicalStatus;

	@GenModel(documentation="The verification status to support the clinical status of the condition.  The verification status pertains to the condition, itself, not to any specific condition attribute.")
	@ExtendedMetaData(kind="element", name="verificationStatus", namespace="##targetNamespace")
	!resolve val CodeableConcept verificationStatus;

	@GenModel(documentation="A category assigned to the condition.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] category;

	@GenModel(documentation="A subjective assessment of the severity of the condition as evaluated by the clinician.")
	@ExtendedMetaData(kind="element", name="severity", namespace="##targetNamespace")
	!resolve val CodeableConcept severity;

	@GenModel(documentation="Identification of the condition, problem or diagnosis.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@GenModel(documentation="The anatomical location where this condition manifests itself.")
	@ExtendedMetaData(kind="element", name="bodySite", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] bodySite;

	@GenModel(documentation="Indicates the patient or group who the condition record is associated with.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference[1] subject;

	@GenModel(documentation="The Encounter during which this Condition was created or to which the creation of this record is tightly associated.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@ExtendedMetaData(kind="element", name="onsetDateTime", namespace="##targetNamespace")
	!resolve val DateTime onsetDateTime;

	@ExtendedMetaData(kind="element", name="onsetAge", namespace="##targetNamespace")
	!resolve val Age onsetAge;

	@ExtendedMetaData(kind="element", name="onsetPeriod", namespace="##targetNamespace")
	!resolve val Period onsetPeriod;

	@ExtendedMetaData(kind="element", name="onsetRange", namespace="##targetNamespace")
	!resolve val Range onsetRange;

	@ExtendedMetaData(kind="element", name="onsetString", namespace="##targetNamespace")
	!resolve val String onsetString;

	@ExtendedMetaData(kind="element", name="abatementDateTime", namespace="##targetNamespace")
	!resolve val DateTime abatementDateTime;

	@ExtendedMetaData(kind="element", name="abatementAge", namespace="##targetNamespace")
	!resolve val Age abatementAge;

	@ExtendedMetaData(kind="element", name="abatementPeriod", namespace="##targetNamespace")
	!resolve val Period abatementPeriod;

	@ExtendedMetaData(kind="element", name="abatementRange", namespace="##targetNamespace")
	!resolve val Range abatementRange;

	@ExtendedMetaData(kind="element", name="abatementString", namespace="##targetNamespace")
	!resolve val String abatementString;

	@GenModel(documentation="The recordedDate represents when this particular Condition record was created in the system, which is often a system-generated date.")
	@ExtendedMetaData(kind="element", name="recordedDate", namespace="##targetNamespace")
	!resolve val DateTime recordedDate;

	@GenModel(documentation="Indicates who or what participated in the activities related to the condition and how they were involved.")
	@ExtendedMetaData(kind="element", name="participant", namespace="##targetNamespace")
	!resolve val ConditionParticipant[*] participant;

	@GenModel(documentation="A simple summary of the stage such as \"Stage 3\" or \"Early Onset\". The determination of the stage is disease-specific, such as cancer, retinopathy of prematurity, kidney diseases, Alzheimer's, or Parkinson disease.")
	@ExtendedMetaData(kind="element", name="stage", namespace="##targetNamespace")
	!resolve val ConditionStage[*] stage;

	@GenModel(documentation="Supporting evidence / manifestations that are the basis of the Condition's verification status, such as evidence that confirmed or refuted the condition.")
	@ExtendedMetaData(kind="element", name="evidence", namespace="##targetNamespace")
	!resolve val CodeableReference[*] evidence;

	@GenModel(documentation="Additional information about the Condition. This is a general notes/comments entry  for description of the Condition, its diagnosis and prognosis.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ConditionalDeleteStatus", kind="elementOnly")
class ConditionalDeleteStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ConditionalDeleteStatusEnum value;
}

@ExtendedMetaData(name="ConditionalDeleteStatusEnum")
enum ConditionalDeleteStatusEnum {

	@GenModel(documentation="Not Supported")
	notSupported = 0;

	@GenModel(documentation="Single Deletes Supported")
	single = 1;

	@GenModel(documentation="Multiple Deletes Supported")
	multiple = 2;
}

@ExtendedMetaData(name="ConditionalDeleteStatusEnum:Object", baseType="ConditionalDeleteStatusEnum")
datatype ConditionalDeleteStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ConditionalReadStatus", kind="elementOnly")
class ConditionalReadStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ConditionalReadStatusEnum value;
}

@ExtendedMetaData(name="ConditionalReadStatusEnum")
enum ConditionalReadStatusEnum {

	@GenModel(documentation="Not Supported")
	notSupported = 0;

	@GenModel(documentation="If-Modified-Since")
	modifiedSince = 1;

	@GenModel(documentation="If-None-Match")
	notMatch = 2;

	@GenModel(documentation="Full Support")
	fullSupport = 3;
}

@ExtendedMetaData(name="ConditionalReadStatusEnum:Object", baseType="ConditionalReadStatusEnum")
datatype ConditionalReadStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A definition of a condition and information relevant to managing it.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ConditionDefinition", kind="elementOnly")
class ConditionDefinition extends MetadataResource {

	@GenModel(documentation="An absolute URI that is used to identify this condition definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this condition definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the condition definition is stored on different servers.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri url;

	@GenModel(documentation="A formal identifier that is used to identify this condition definition when it is represented in other formats, or referenced in a specification, model, design or an instance.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The identifier that is used to identify this version of the condition definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the condition definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@ExtendedMetaData(kind="element", name="versionAlgorithmString", namespace="##targetNamespace")
	!resolve val String versionAlgorithmString;

	@ExtendedMetaData(kind="element", name="versionAlgorithmCoding", namespace="##targetNamespace")
	!resolve val Coding versionAlgorithmCoding;

	@GenModel(documentation="A natural language name identifying the condition definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="A short, descriptive, user-friendly title for the condition definition.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="An explanatory or alternate title for the event definition giving additional information about its content.")
	@ExtendedMetaData(kind="element", name="subtitle", namespace="##targetNamespace")
	!resolve val String subtitle;

	@GenModel(documentation="The status of this condition definition. Enables tracking the life-cycle of the content.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="A Boolean value to indicate that this condition definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.")
	@ExtendedMetaData(kind="element", name="experimental", namespace="##targetNamespace")
	!resolve val Boolean experimental;

	@GenModel(documentation="The date  (and optionally time) when the condition definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the condition definition changes.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="The name of the organization or individual responsible for the release and ongoing maintenance of the condition definition.")
	@ExtendedMetaData(kind="element", name="publisher", namespace="##targetNamespace")
	!resolve val String publisher;

	@GenModel(documentation="Contact details to assist a user in finding and communicating with the publisher.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactDetail[*] contact;

	@GenModel(documentation="A free text natural language description of the condition definition from a consumer's perspective.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate condition definition instances.")
	@ExtendedMetaData(kind="element", name="useContext", namespace="##targetNamespace")
	!resolve val UsageContext[*] useContext;

	@GenModel(documentation="A legal or geographic region in which the condition definition is intended to be used.")
	@ExtendedMetaData(kind="element", name="jurisdiction", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] jurisdiction;

	@GenModel(documentation="Identification of the condition, problem or diagnosis.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] code;

	@GenModel(documentation="A subjective assessment of the severity of the condition as evaluated by the clinician.")
	@ExtendedMetaData(kind="element", name="severity", namespace="##targetNamespace")
	!resolve val CodeableConcept severity;

	@GenModel(documentation="The anatomical location where this condition manifests itself.")
	@ExtendedMetaData(kind="element", name="bodySite", namespace="##targetNamespace")
	!resolve val CodeableConcept bodySite;

	@GenModel(documentation="Clinical stage or grade of a condition. May include formal severity assessments.")
	@ExtendedMetaData(kind="element", name="stage", namespace="##targetNamespace")
	!resolve val CodeableConcept stage;

	@GenModel(documentation="Whether Severity is appropriate to collect for this condition.")
	@ExtendedMetaData(kind="element", name="hasSeverity", namespace="##targetNamespace")
	!resolve val Boolean hasSeverity;

	@GenModel(documentation="Whether bodySite is appropriate to collect for this condition.")
	@ExtendedMetaData(kind="element", name="hasBodySite", namespace="##targetNamespace")
	!resolve val Boolean hasBodySite;

	@GenModel(documentation="Whether stage is appropriate to collect for this condition.")
	@ExtendedMetaData(kind="element", name="hasStage", namespace="##targetNamespace")
	!resolve val Boolean hasStage;

	@GenModel(documentation="Formal definitions of the condition. These may be references to ontologies, published clinical protocols or research papers.")
	@ExtendedMetaData(kind="element", name="definition", namespace="##targetNamespace")
	!resolve val Uri[*] definition;

	@GenModel(documentation="Observations particularly relevant to this condition.")
	@ExtendedMetaData(kind="element", name="observation", namespace="##targetNamespace")
	!resolve val ConditionDefinitionObservation[*] observation;

	@GenModel(documentation="Medications particularly relevant for this condition.")
	@ExtendedMetaData(kind="element", name="medication", namespace="##targetNamespace")
	!resolve val ConditionDefinitionMedication[*] medication;

	@GenModel(documentation="An observation that suggests that this condition applies.")
	@ExtendedMetaData(kind="element", name="precondition", namespace="##targetNamespace")
	!resolve val ConditionDefinitionPrecondition[*] precondition;

	@GenModel(documentation="Appropriate team for this condition.")
	@ExtendedMetaData(kind="element", name="team", namespace="##targetNamespace")
	!resolve val Reference[*] team;

	@GenModel(documentation="Questionnaire for this condition.")
	@ExtendedMetaData(kind="element", name="questionnaire", namespace="##targetNamespace")
	!resolve val ConditionDefinitionQuestionnaire[*] questionnaire;

	@GenModel(documentation="Plan that is appropriate.")
	@ExtendedMetaData(kind="element", name="plan", namespace="##targetNamespace")
	!resolve val ConditionDefinitionPlan[*] plan;
}

@GenModel(documentation="A definition of a condition and information relevant to managing it.")
@ExtendedMetaData(name="ConditionDefinition.Medication", kind="elementOnly")
class ConditionDefinitionMedication extends BackboneElement {

	@GenModel(documentation="Category that is relevant.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept category;

	@GenModel(documentation="Code for relevant Medication.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;
}

@GenModel(documentation="A definition of a condition and information relevant to managing it.")
@ExtendedMetaData(name="ConditionDefinition.Observation", kind="elementOnly")
class ConditionDefinitionObservation extends BackboneElement {

	@GenModel(documentation="Category that is relevant.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept category;

	@GenModel(documentation="Code for relevant Observation.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;
}

@GenModel(documentation="A definition of a condition and information relevant to managing it.")
@ExtendedMetaData(name="ConditionDefinition.Plan", kind="elementOnly")
class ConditionDefinitionPlan extends BackboneElement {

	@GenModel(documentation="Use for the plan.")
	@ExtendedMetaData(kind="element", name="role", namespace="##targetNamespace")
	!resolve val CodeableConcept role;

	@GenModel(documentation="The actual plan.")
	@ExtendedMetaData(kind="element", name="reference", namespace="##targetNamespace")
	!resolve val Reference[1] reference;
}

@GenModel(documentation="A definition of a condition and information relevant to managing it.")
@ExtendedMetaData(name="ConditionDefinition.Precondition", kind="elementOnly")
class ConditionDefinitionPrecondition extends BackboneElement {

	@GenModel(documentation="Kind of pre-condition.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val ConditionPreconditionType[1] type;

	@GenModel(documentation="Code for relevant Observation.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] code;

	@ExtendedMetaData(kind="element", name="valueCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept valueCodeableConcept;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;
}

@GenModel(documentation="A definition of a condition and information relevant to managing it.")
@ExtendedMetaData(name="ConditionDefinition.Questionnaire", kind="elementOnly")
class ConditionDefinitionQuestionnaire extends BackboneElement {

	@GenModel(documentation="Use of the questionnaire.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val ConditionQuestionnairePurpose[1] purpose;

	@GenModel(documentation="Specific Questionnaire.")
	@ExtendedMetaData(kind="element", name="reference", namespace="##targetNamespace")
	!resolve val Reference[1] reference;
}

@GenModel(documentation="A clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept that has risen to a level of concern.")
@ExtendedMetaData(name="Condition.Participant", kind="elementOnly")
class ConditionParticipant extends BackboneElement {

	@GenModel(documentation="Distinguishes the type of involvement of the actor in the activities related to the condition.")
	@ExtendedMetaData(kind="element", name="function", namespace="##targetNamespace")
	!resolve val CodeableConcept function;

	@GenModel(documentation="Indicates who or what participated in the activities related to the condition.")
	@ExtendedMetaData(kind="element", name="actor", namespace="##targetNamespace")
	!resolve val Reference[1] actor;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ConditionPreconditionType", kind="elementOnly")
class ConditionPreconditionType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ConditionPreconditionTypeEnum value;
}

@ExtendedMetaData(name="ConditionPreconditionTypeEnum")
enum ConditionPreconditionTypeEnum {

	@GenModel(documentation="Sensitive")
	sensitive = 0;

	@GenModel(documentation="Specific")
	specific = 1;
}

@ExtendedMetaData(name="ConditionPreconditionTypeEnum:Object", baseType="ConditionPreconditionTypeEnum")
datatype ConditionPreconditionTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ConditionQuestionnairePurpose", kind="elementOnly")
class ConditionQuestionnairePurpose extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ConditionQuestionnairePurposeEnum value;
}

@ExtendedMetaData(name="ConditionQuestionnairePurposeEnum")
enum ConditionQuestionnairePurposeEnum {

	@GenModel(documentation="Pre-admit")
	preadmit = 0;

	@GenModel(documentation="Diff Diagnosis")
	diffDiagnosis = 1;

	@GenModel(documentation="Outcome")
	outcome = 2;
}

@ExtendedMetaData(name="ConditionQuestionnairePurposeEnum:Object", baseType="ConditionQuestionnairePurposeEnum")
datatype ConditionQuestionnairePurposeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept that has risen to a level of concern.")
@ExtendedMetaData(name="Condition.Stage", kind="elementOnly")
class ConditionStage extends BackboneElement {

	@GenModel(documentation="A simple summary of the stage such as \"Stage 3\" or \"Early Onset\". The determination of the stage is disease-specific, such as cancer, retinopathy of prematurity, kidney diseases, Alzheimer's, or Parkinson disease.")
	@ExtendedMetaData(kind="element", name="summary", namespace="##targetNamespace")
	!resolve val CodeableConcept summary;

	@GenModel(documentation="Reference to a formal record of the evidence on which the staging assessment is based.")
	@ExtendedMetaData(kind="element", name="assessment", namespace="##targetNamespace")
	!resolve val Reference[*] assessment;

	@GenModel(documentation="The kind of staging, such as pathological or clinical staging.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ConformanceExpectation", kind="elementOnly")
class ConformanceExpectation extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ConformanceExpectationEnum value;
}

@ExtendedMetaData(name="ConformanceExpectationEnum")
enum ConformanceExpectationEnum {

	@GenModel(documentation="SHALL")
	SHALL = 0;

	@GenModel(documentation="SHOULD")
	SHOULD = 1;

	@GenModel(documentation="MAY")
	MAY = 2;

	@GenModel(documentation="SHOULD-NOT")
	SHOULDNOT = 3;
}

@ExtendedMetaData(name="ConformanceExpectationEnum:Object", baseType="ConformanceExpectationEnum")
datatype ConformanceExpectationEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A record of a healthcare consumer’s  choices  or choices made on their behalf by a third party, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Consent", kind="elementOnly")
class Consent extends DomainResource {

	@GenModel(documentation="Unique identifier for this copy of the Consent Statement.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Indicates the current state of this Consent resource.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val ConsentState[1] status;

	@GenModel(documentation="A classification of the type of consents found in the statement. This element supports indexing and retrieval of consent statements.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] category;

	@GenModel(documentation="The patient/healthcare practitioner or group of persons to whom this consent applies.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference subject;

	@GenModel(documentation="Date the consent instance was agreed to.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val Date date;

	@GenModel(documentation="Effective period for this Consent Resource and all provisions unless specified in that provision.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;

	@GenModel(documentation="The entity responsible for granting the rights listed in a Consent Directive.")
	@ExtendedMetaData(kind="element", name="grantor", namespace="##targetNamespace")
	!resolve val Reference[*] grantor;

	@GenModel(documentation="The entity responsible for complying with the Consent Directive, including any obligations or limitations on authorizations and enforcement of prohibitions.")
	@ExtendedMetaData(kind="element", name="grantee", namespace="##targetNamespace")
	!resolve val Reference[*] grantee;

	@GenModel(documentation="The actor that manages the consent through its lifecycle.")
	@ExtendedMetaData(kind="element", name="manager", namespace="##targetNamespace")
	!resolve val Reference[*] manager;

	@GenModel(documentation="The actor that controls/enforces the access according to the consent.")
	@ExtendedMetaData(kind="element", name="controller", namespace="##targetNamespace")
	!resolve val Reference[*] controller;

	@GenModel(documentation="The source on which this consent statement is based. The source might be a scanned original paper form.")
	@ExtendedMetaData(kind="element", name="sourceAttachment", namespace="##targetNamespace")
	!resolve val Attachment[*] sourceAttachment;

	@GenModel(documentation="A reference to a consent that links back to such a source, a reference to a document repository (e.g. XDS) that stores the original consent document.")
	@ExtendedMetaData(kind="element", name="sourceReference", namespace="##targetNamespace")
	!resolve val Reference[*] sourceReference;

	@GenModel(documentation="A set of codes that indicate the regulatory basis (if any) that this consent supports.")
	@ExtendedMetaData(kind="element", name="regulatoryBasis", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] regulatoryBasis;

	@GenModel(documentation="A Reference or URL used to uniquely identify the policy the organization will enforce for this Consent. This Reference or URL should be specific to the version of the policy and should be dereferencable to a computable policy of some form.")
	@ExtendedMetaData(kind="element", name="policyBasis", namespace="##targetNamespace")
	!resolve val ConsentPolicyBasis policyBasis;

	@GenModel(documentation="A Reference to the human readable policy explaining the basis for the Consent.")
	@ExtendedMetaData(kind="element", name="policyText", namespace="##targetNamespace")
	!resolve val Reference[*] policyText;

	@GenModel(documentation="Whether a treatment instruction (e.g. artificial respiration: yes or no) was verified with the patient, his/her family or another authorized person.")
	@ExtendedMetaData(kind="element", name="verification", namespace="##targetNamespace")
	!resolve val ConsentVerification[*] verification;

	@GenModel(documentation="Action to take - permit or deny - as default.")
	@ExtendedMetaData(kind="element", name="decision", namespace="##targetNamespace")
	!resolve val ConsentProvisionType decision;

	@GenModel(documentation="An exception to the base policy of this consent. An exception can be an addition or removal of access permissions.")
	@ExtendedMetaData(kind="element", name="provision", namespace="##targetNamespace")
	!resolve val ConsentProvision[*] provision;
}

@GenModel(documentation="A record of a healthcare consumer’s  choices  or choices made on their behalf by a third party, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time.")
@ExtendedMetaData(name="Consent.Actor", kind="elementOnly")
class ConsentActor extends BackboneElement {

	@GenModel(documentation="How the individual is involved in the resources content that is described in the exception.")
	@ExtendedMetaData(kind="element", name="role", namespace="##targetNamespace")
	!resolve val CodeableConcept role;

	@GenModel(documentation="The resource that identifies the actor. To identify actors by type, use group to identify a set of actors by some property they share (e.g. 'admitting officers').")
	@ExtendedMetaData(kind="element", name="reference", namespace="##targetNamespace")
	!resolve val Reference reference;
}

@GenModel(documentation="A record of a healthcare consumer’s  choices  or choices made on their behalf by a third party, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time.")
@ExtendedMetaData(name="Consent.Data", kind="elementOnly")
class ConsentData extends BackboneElement {

	@GenModel(documentation="How the resource reference is interpreted when testing consent restrictions.")
	@ExtendedMetaData(kind="element", name="meaning", namespace="##targetNamespace")
	!resolve val ConsentDataMeaning[1] meaning;

	@GenModel(documentation="A reference to a specific resource that defines which resources are covered by this consent.")
	@ExtendedMetaData(kind="element", name="reference", namespace="##targetNamespace")
	!resolve val Reference[1] reference;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ConsentDataMeaning", kind="elementOnly")
class ConsentDataMeaning extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ConsentDataMeaningEnum value;
}

@ExtendedMetaData(name="ConsentDataMeaningEnum")
enum ConsentDataMeaningEnum {

	@GenModel(documentation="Instance")
	instance = 0;

	@GenModel(documentation="Related")
	related = 1;

	@GenModel(documentation="Dependents")
	dependents = 2;

	@GenModel(documentation="AuthoredBy")
	authoredby = 3;
}

@ExtendedMetaData(name="ConsentDataMeaningEnum:Object", baseType="ConsentDataMeaningEnum")
datatype ConsentDataMeaningEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A record of a healthcare consumer’s  choices  or choices made on their behalf by a third party, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time.")
@ExtendedMetaData(name="Consent.PolicyBasis", kind="elementOnly")
class ConsentPolicyBasis extends BackboneElement {

	@GenModel(documentation="A Reference that identifies the policy the organization will enforce for this Consent.")
	@ExtendedMetaData(kind="element", name="reference", namespace="##targetNamespace")
	!resolve val Reference reference;

	@GenModel(documentation="A URL that links to a computable version of the policy the organization will enforce for this Consent.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Url url;
}

@GenModel(documentation="A record of a healthcare consumer’s  choices  or choices made on their behalf by a third party, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time.")
@ExtendedMetaData(name="Consent.Provision", kind="elementOnly")
class ConsentProvision extends BackboneElement {

	@GenModel(documentation="Timeframe for this provision.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;

	@GenModel(documentation="Who or what is controlled by this provision. Use group to identify a set of actors by some property they share (e.g. 'admitting officers').")
	@ExtendedMetaData(kind="element", name="actor", namespace="##targetNamespace")
	!resolve val ConsentActor[*] actor;

	@GenModel(documentation="Actions controlled by this provision.")
	@ExtendedMetaData(kind="element", name="action", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] action;

	@GenModel(documentation="A security label, comprised of 0..* security label fields (Privacy tags), which define which resources are controlled by this exception.")
	@ExtendedMetaData(kind="element", name="securityLabel", namespace="##targetNamespace")
	!resolve val Coding[*] securityLabel;

	@GenModel(documentation="The context of the activities a user is taking - why the user is accessing the data - that are controlled by this provision.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val Coding[*] purpose;

	@GenModel(documentation="The documentType(s) covered by this provision. The type can be a CDA document, or some other type that indicates what sort of information the consent relates to.")
	@ExtendedMetaData(kind="element", name="documentType", namespace="##targetNamespace")
	!resolve val Coding[*] documentType;

	@GenModel(documentation="The resourceType(s) covered by this provision. The type can be a FHIR resource type or a profile on a type that indicates what information the consent relates to.")
	@ExtendedMetaData(kind="element", name="resourceType", namespace="##targetNamespace")
	!resolve val Coding[*] resourceType;

	@GenModel(documentation="If this code is found in an instance, then the provision applies.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] code;

	@GenModel(documentation="Clinical or Operational Relevant period of time that bounds the data controlled by this provision.")
	@ExtendedMetaData(kind="element", name="dataPeriod", namespace="##targetNamespace")
	!resolve val Period dataPeriod;

	@GenModel(documentation="The resources controlled by this provision if specific resources are referenced.")
	@ExtendedMetaData(kind="element", name="data", namespace="##targetNamespace")
	!resolve val ConsentData[*] data;

	@GenModel(documentation="A computable (FHIRPath or other) definition of what is controlled by this consent.")
	@ExtendedMetaData(kind="element", name="expression", namespace="##targetNamespace")
	!resolve val Expression expression;

	@GenModel(documentation="Provisions which provide exceptions to the base provision or subprovisions.")
	@ExtendedMetaData(kind="element", name="provision", namespace="##targetNamespace")
	!resolve val ConsentProvision[*] provision;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ConsentProvisionType", kind="elementOnly")
class ConsentProvisionType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ConsentProvisionTypeEnum value;
}

@ExtendedMetaData(name="ConsentProvisionTypeEnum")
enum ConsentProvisionTypeEnum {

	@GenModel(documentation="Deny")
	deny = 0;

	@GenModel(documentation="Permit")
	permit = 1;
}

@ExtendedMetaData(name="ConsentProvisionTypeEnum:Object", baseType="ConsentProvisionTypeEnum")
datatype ConsentProvisionTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ConsentState", kind="elementOnly")
class ConsentState extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ConsentStateEnum value;
}

@ExtendedMetaData(name="ConsentStateEnum")
enum ConsentStateEnum {

	@GenModel(documentation="Pending")
	draft = 0;

	@GenModel(documentation="Active")
	active = 1;

	@GenModel(documentation="Inactive")
	inactive = 2;

	@GenModel(documentation="Abandoned")
	notDone = 3;

	@GenModel(documentation="Entered in Error")
	enteredInError = 4;

	@GenModel(documentation="Unknown")
	unknown = 5;
}

@ExtendedMetaData(name="ConsentStateEnum:Object", baseType="ConsentStateEnum")
datatype ConsentStateEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A record of a healthcare consumer’s  choices  or choices made on their behalf by a third party, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time.")
@ExtendedMetaData(name="Consent.Verification", kind="elementOnly")
class ConsentVerification extends BackboneElement {

	@GenModel(documentation="Has the instruction been verified.")
	@ExtendedMetaData(kind="element", name="verified", namespace="##targetNamespace")
	!resolve val Boolean[1] verified;

	@GenModel(documentation="Extensible list of verification type starting with verification and re-validation.")
	@ExtendedMetaData(kind="element", name="verificationType", namespace="##targetNamespace")
	!resolve val CodeableConcept verificationType;

	@GenModel(documentation="The person who conducted the verification/validation of the Grantor decision.")
	@ExtendedMetaData(kind="element", name="verifiedBy", namespace="##targetNamespace")
	!resolve val Reference verifiedBy;

	@GenModel(documentation="Who verified the instruction (Patient, Relative or other Authorized Person).")
	@ExtendedMetaData(kind="element", name="verifiedWith", namespace="##targetNamespace")
	!resolve val Reference verifiedWith;

	@GenModel(documentation="Date(s) verification was collected.")
	@ExtendedMetaData(kind="element", name="verificationDate", namespace="##targetNamespace")
	!resolve val DateTime[*] verificationDate;
}

@GenModel(documentation="SHALL applications comply with this constraint?
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ConstraintSeverity", kind="elementOnly")
class ConstraintSeverity extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ConstraintSeverityEnum value;
}

@ExtendedMetaData(name="ConstraintSeverityEnum")
enum ConstraintSeverityEnum {

	@GenModel(documentation="Error")
	error = 0;

	@GenModel(documentation="Warning")
	warning = 1;
}

@ExtendedMetaData(name="ConstraintSeverityEnum:Object", baseType="ConstraintSeverityEnum")
datatype ConstraintSeverityEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="Specifies contact information for a person or organization.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="ContactDetail", kind="elementOnly")
class ContactDetail extends DataType {

	@GenModel(documentation="The name of an individual to contact.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="The contact details for the individual (if a name was provided) or the organization.")
	@ExtendedMetaData(kind="element", name="telecom", namespace="##targetNamespace")
	!resolve val ContactPoint[*] telecom;
}

@GenModel(documentation="Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="ContactPoint", kind="elementOnly")
class ContactPoint extends DataType {

	@GenModel(documentation="Telecommunications form for contact point - what communications system is required to make use of the contact.")
	@ExtendedMetaData(kind="element", name="system", namespace="##targetNamespace")
	!resolve val ContactPointSystem system;

	@GenModel(documentation="The actual contact point details, in a form that is meaningful to the designated communication system (i.e. phone number or email address).")
	@ExtendedMetaData(kind="element", name="value", namespace="##targetNamespace")
	!resolve val String value;

	@GenModel(documentation="Identifies the purpose for the contact point.")
	@ExtendedMetaData(kind="element", name="use", namespace="##targetNamespace")
	!resolve val ContactPointUse use;

	@GenModel(documentation="Specifies a preferred order in which to use a set of contacts. ContactPoints with lower rank values are more preferred than those with higher rank values.")
	@ExtendedMetaData(kind="element", name="rank", namespace="##targetNamespace")
	!resolve val PositiveInt rank;

	@GenModel(documentation="Time period when the contact point was/is in use.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;
}

@GenModel(documentation="Telecommunications form for contact point.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ContactPointSystem", kind="elementOnly")
class ContactPointSystem extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ContactPointSystemEnum value;
}

@ExtendedMetaData(name="ContactPointSystemEnum")
enum ContactPointSystemEnum {

	@GenModel(documentation="Phone")
	phone = 0;

	@GenModel(documentation="Fax")
	fax = 1;

	@GenModel(documentation="Email")
	email = 2;

	@GenModel(documentation="Pager")
	pager = 3;

	@GenModel(documentation="URL")
	url = 4;

	@GenModel(documentation="SMS")
	sms = 5;

	@GenModel(documentation="Other")
	other = 6;
}

@ExtendedMetaData(name="ContactPointSystemEnum:Object", baseType="ContactPointSystemEnum")
datatype ContactPointSystemEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="Use of contact point.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ContactPointUse", kind="elementOnly")
class ContactPointUse extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ContactPointUseEnum value;
}

@ExtendedMetaData(name="ContactPointUseEnum")
enum ContactPointUseEnum {

	@GenModel(documentation="Home")
	home = 0;

	@GenModel(documentation="Work")
	work = 1;

	@GenModel(documentation="Temp")
	temp = 2;

	@GenModel(documentation="Old")
	old = 3;

	@GenModel(documentation="Mobile")
	mobile = 4;
}

@ExtendedMetaData(name="ContactPointUseEnum:Object", baseType="ContactPointUseEnum")
datatype ContactPointUseEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Contract", kind="elementOnly")
class Contract extends DomainResource {

	@GenModel(documentation="Unique identifier for this Contract or a derivative that references a Source Contract.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Canonical identifier for this contract, represented as a URI (globally unique).")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri url;

	@GenModel(documentation="An edition identifier used for business purposes to label business significant variants.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@GenModel(documentation="The status of the resource instance.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val ContractResourceStatusCodes status;

	@GenModel(documentation="Legal states of the formation of a legal instrument, which is a formally executed written document that can be formally attributed to its author, records and formally expresses a legally enforceable act, process, or contractual duty, obligation, or right, and therefore evidences that act, process, or agreement.")
	@ExtendedMetaData(kind="element", name="legalState", namespace="##targetNamespace")
	!resolve val CodeableConcept legalState;

	@GenModel(documentation="The URL pointing to a FHIR-defined Contract Definition that is adhered to in whole or part by this Contract.")
	@ExtendedMetaData(kind="element", name="instantiatesCanonical", namespace="##targetNamespace")
	!resolve val Reference instantiatesCanonical;

	@GenModel(documentation="The URL pointing to an externally maintained definition that is adhered to in whole or in part by this Contract.")
	@ExtendedMetaData(kind="element", name="instantiatesUri", namespace="##targetNamespace")
	!resolve val Uri instantiatesUri;

	@GenModel(documentation="The minimal content derived from the basal information source at a specific stage in its lifecycle.")
	@ExtendedMetaData(kind="element", name="contentDerivative", namespace="##targetNamespace")
	!resolve val CodeableConcept contentDerivative;

	@GenModel(documentation="When this  Contract was issued.")
	@ExtendedMetaData(kind="element", name="issued", namespace="##targetNamespace")
	!resolve val DateTime issued;

	@GenModel(documentation="Relevant time or time-period when this Contract is applicable.")
	@ExtendedMetaData(kind="element", name="applies", namespace="##targetNamespace")
	!resolve val Period applies;

	@GenModel(documentation="Event resulting in discontinuation or termination of this Contract instance by one or more parties to the contract.")
	@ExtendedMetaData(kind="element", name="expirationType", namespace="##targetNamespace")
	!resolve val CodeableConcept expirationType;

	@GenModel(documentation="The target entity impacted by or of interest to parties to the agreement.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference[*] subject;

	@GenModel(documentation="A formally or informally recognized grouping of people, principals, organizations, or jurisdictions formed for the purpose of achieving some form of collective action such as the promulgation, administration and enforcement of contracts and policies.")
	@ExtendedMetaData(kind="element", name="authority", namespace="##targetNamespace")
	!resolve val Reference[*] authority;

	@GenModel(documentation="Recognized governance framework or system operating with a circumscribed scope in accordance with specified principles, policies, processes or procedures for managing rights, actions, or behaviors of parties or principals relative to resources.")
	@ExtendedMetaData(kind="element", name="domain", namespace="##targetNamespace")
	!resolve val Reference[*] domain;

	@GenModel(documentation="Sites in which the contract is complied with,  exercised, or in force.")
	@ExtendedMetaData(kind="element", name="site", namespace="##targetNamespace")
	!resolve val Reference[*] site;

	@GenModel(documentation="A natural language name identifying this Contract definition, derivative, or instance in any legal state. Provides additional information about its content. This name should be usable as an identifier for the module by machine processing applications such as code generation.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="A short, descriptive, user-friendly title for this Contract definition, derivative, or instance in any legal state.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="A more detailed or qualifying explanatory or alternate user-friendly title for this Contract definition, derivative, or instance in any legal state.")
	@ExtendedMetaData(kind="element", name="subtitle", namespace="##targetNamespace")
	!resolve val String subtitle;

	@GenModel(documentation="Alternative representation of the title for this Contract definition, derivative, or instance in any legal state., e.g., a domain specific contract number related to legislation.")
	@ExtendedMetaData(kind="element", name="alias", namespace="##targetNamespace")
	!resolve val String[*] alias;

	@GenModel(documentation="The individual or organization that authored the Contract definition, derivative, or instance in any legal state.")
	@ExtendedMetaData(kind="element", name="author", namespace="##targetNamespace")
	!resolve val Reference author;

	@GenModel(documentation="A selector of legal concerns for this Contract definition, derivative, or instance in any legal state.")
	@ExtendedMetaData(kind="element", name="scope", namespace="##targetNamespace")
	!resolve val CodeableConcept scope;

	@ExtendedMetaData(kind="element", name="topicCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept topicCodeableConcept;

	@ExtendedMetaData(kind="element", name="topicReference", namespace="##targetNamespace")
	!resolve val Reference topicReference;

	@GenModel(documentation="A high-level category for the legal instrument, whether constructed as a Contract definition, derivative, or instance in any legal state.  Provides additional information about its content within the context of the Contract's scope to distinguish the kinds of systems that would be interested in the contract.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="Sub-category for the Contract that distinguishes the kinds of systems that would be interested in the Contract within the context of the Contract's scope.")
	@ExtendedMetaData(kind="element", name="subType", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] subType;

	@GenModel(documentation="Precusory content developed with a focus and intent of supporting the formation a Contract instance, which may be associated with and transformable into a Contract.")
	@ExtendedMetaData(kind="element", name="contentDefinition", namespace="##targetNamespace")
	!resolve val ContractContentDefinition contentDefinition;

	@GenModel(documentation="One or more Contract Provisions, which may be related and conveyed as a group, and may contain nested groups.")
	@ExtendedMetaData(kind="element", name="term", namespace="##targetNamespace")
	!resolve val ContractTerm[*] term;

	@GenModel(documentation="Information that may be needed by/relevant to the performer in their execution of this term action.")
	@ExtendedMetaData(kind="element", name="supportingInfo", namespace="##targetNamespace")
	!resolve val Reference[*] supportingInfo;

	@GenModel(documentation="Links to Provenance records for past versions of this Contract definition, derivative, or instance, which identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the Contract.  The Provenance.entity indicates the target that was changed in the update (see [Provenance.entity](provenance-definitions.html#Provenance.entity)).")
	@ExtendedMetaData(kind="element", name="relevantHistory", namespace="##targetNamespace")
	!resolve val Reference[*] relevantHistory;

	@GenModel(documentation="Parties with legal standing in the Contract, including the principal parties, the grantor(s) and grantee(s), which are any person or organization bound by the contract, and any ancillary parties, which facilitate the execution of the contract such as a notary or witness.")
	@ExtendedMetaData(kind="element", name="signer", namespace="##targetNamespace")
	!resolve val ContractSigner[*] signer;

	@GenModel(documentation="The \"patient friendly language\" versionof the Contract in whole or in parts. \"Patient friendly language\" means the representation of the Contract and Contract Provisions in a manner that is readily accessible and understandable by a layperson in accordance with best practices for communication styles that ensure that those agreeing to or signing the Contract understand the roles, actions, obligations, responsibilities, and implication of the agreement.")
	@ExtendedMetaData(kind="element", name="friendly", namespace="##targetNamespace")
	!resolve val ContractFriendly[*] friendly;

	@GenModel(documentation="List of Legal expressions or representations of this Contract.")
	@ExtendedMetaData(kind="element", name="legal", namespace="##targetNamespace")
	!resolve val ContractLegal[*] legal;

	@GenModel(documentation="List of Computable Policy Rule Language Representations of this Contract.")
	@ExtendedMetaData(kind="element", name="rule", namespace="##targetNamespace")
	!resolve val ContractRule[*] rule;

	@ExtendedMetaData(kind="element", name="legallyBindingAttachment", namespace="##targetNamespace")
	!resolve val Attachment legallyBindingAttachment;

	@ExtendedMetaData(kind="element", name="legallyBindingReference", namespace="##targetNamespace")
	!resolve val Reference legallyBindingReference;
}

@GenModel(documentation="Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.")
@ExtendedMetaData(name="Contract.Action", kind="elementOnly")
class ContractAction extends BackboneElement {

	@GenModel(documentation="True if the term prohibits the  action.")
	@ExtendedMetaData(kind="element", name="doNotPerform", namespace="##targetNamespace")
	!resolve val Boolean doNotPerform;

	@GenModel(documentation="Activity or service obligation to be done or not done, performed or not performed, effectuated or not by this Contract term.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@GenModel(documentation="Entity of the action.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val ContractSubject[*] subject;

	@GenModel(documentation="Reason or purpose for the action stipulated by this Contract Provision.")
	@ExtendedMetaData(kind="element", name="intent", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] intent;

	@GenModel(documentation="Id [identifier??] of the clause or question text related to this action in the referenced form or QuestionnaireResponse.")
	@ExtendedMetaData(kind="element", name="linkId", namespace="##targetNamespace")
	!resolve val String[*] linkId;

	@GenModel(documentation="Current state of the term action.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] status;

	@GenModel(documentation="Encounter or Episode with primary association to the specified term activity.")
	@ExtendedMetaData(kind="element", name="context", namespace="##targetNamespace")
	!resolve val Reference context;

	@GenModel(documentation="Id [identifier??] of the clause or question text related to the requester of this action in the referenced form or QuestionnaireResponse.")
	@ExtendedMetaData(kind="element", name="contextLinkId", namespace="##targetNamespace")
	!resolve val String[*] contextLinkId;

	@ExtendedMetaData(kind="element", name="occurrenceDateTime", namespace="##targetNamespace")
	!resolve val DateTime occurrenceDateTime;

	@ExtendedMetaData(kind="element", name="occurrencePeriod", namespace="##targetNamespace")
	!resolve val Period occurrencePeriod;

	@ExtendedMetaData(kind="element", name="occurrenceTiming", namespace="##targetNamespace")
	!resolve val Timing occurrenceTiming;

	@GenModel(documentation="Who or what initiated the action and has responsibility for its activation.")
	@ExtendedMetaData(kind="element", name="requester", namespace="##targetNamespace")
	!resolve val Reference[*] requester;

	@GenModel(documentation="Id [identifier??] of the clause or question text related to the requester of this action in the referenced form or QuestionnaireResponse.")
	@ExtendedMetaData(kind="element", name="requesterLinkId", namespace="##targetNamespace")
	!resolve val String[*] requesterLinkId;

	@GenModel(documentation="The type of individual that is desired or required to perform or not perform the action.")
	@ExtendedMetaData(kind="element", name="performerType", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] performerType;

	@GenModel(documentation="The type of role or competency of an individual desired or required to perform or not perform the action.")
	@ExtendedMetaData(kind="element", name="performerRole", namespace="##targetNamespace")
	!resolve val CodeableConcept performerRole;

	@GenModel(documentation="Indicates who or what is being asked to perform (or not perform) the ction.")
	@ExtendedMetaData(kind="element", name="performer", namespace="##targetNamespace")
	!resolve val Reference performer;

	@GenModel(documentation="Id [identifier??] of the clause or question text related to the reason type or reference of this  action in the referenced form or QuestionnaireResponse.")
	@ExtendedMetaData(kind="element", name="performerLinkId", namespace="##targetNamespace")
	!resolve val String[*] performerLinkId;

	@GenModel(documentation="Rationale for the action to be performed or not performed. Describes why the action is permitted or prohibited. Either a coded concept, or another resource whose existence justifies permitting or not permitting this action.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val CodeableReference[*] reason;

	@GenModel(documentation="Id [identifier??] of the clause or question text related to the reason type or reference of this  action in the referenced form or QuestionnaireResponse.")
	@ExtendedMetaData(kind="element", name="reasonLinkId", namespace="##targetNamespace")
	!resolve val String[*] reasonLinkId;

	@GenModel(documentation="Comments made about the term action made by the requester, performer, subject or other participants.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="Security labels that protects the action.")
	@ExtendedMetaData(kind="element", name="securityLabelNumber", namespace="##targetNamespace")
	!resolve val UnsignedInt[*] securityLabelNumber;
}

@GenModel(documentation="Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.")
@ExtendedMetaData(name="Contract.Answer", kind="elementOnly")
class ContractAnswer extends BackboneElement {

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;

	@ExtendedMetaData(kind="element", name="valueDecimal", namespace="##targetNamespace")
	!resolve val Decimal valueDecimal;

	@ExtendedMetaData(kind="element", name="valueInteger", namespace="##targetNamespace")
	!resolve val Integer valueInteger;

	@ExtendedMetaData(kind="element", name="valueDate", namespace="##targetNamespace")
	!resolve val Date valueDate;

	@ExtendedMetaData(kind="element", name="valueDateTime", namespace="##targetNamespace")
	!resolve val DateTime valueDateTime;

	@ExtendedMetaData(kind="element", name="valueTime", namespace="##targetNamespace")
	!resolve val Time valueTime;

	@ExtendedMetaData(kind="element", name="valueString", namespace="##targetNamespace")
	!resolve val String valueString;

	@ExtendedMetaData(kind="element", name="valueUri", namespace="##targetNamespace")
	!resolve val Uri valueUri;

	@ExtendedMetaData(kind="element", name="valueAttachment", namespace="##targetNamespace")
	!resolve val Attachment valueAttachment;

	@ExtendedMetaData(kind="element", name="valueCoding", namespace="##targetNamespace")
	!resolve val Coding valueCoding;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueReference", namespace="##targetNamespace")
	!resolve val Reference valueReference;
}

@GenModel(documentation="Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.")
@ExtendedMetaData(name="Contract.Asset", kind="elementOnly")
class ContractAsset extends BackboneElement {

	@GenModel(documentation="Differentiates the kind of the asset .")
	@ExtendedMetaData(kind="element", name="scope", namespace="##targetNamespace")
	!resolve val CodeableConcept scope;

	@GenModel(documentation="Target entity type about which the term may be concerned.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] type;

	@GenModel(documentation="Associated entities.")
	@ExtendedMetaData(kind="element", name="typeReference", namespace="##targetNamespace")
	!resolve val Reference[*] typeReference;

	@GenModel(documentation="May be a subtype or part of an offered asset.")
	@ExtendedMetaData(kind="element", name="subtype", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] subtype;

	@GenModel(documentation="Specifies the applicability of the term to an asset resource instance, and instances it refers to or instances that refer to it, and/or are owned by the offeree.")
	@ExtendedMetaData(kind="element", name="relationship", namespace="##targetNamespace")
	!resolve val Coding relationship;

	@GenModel(documentation="Circumstance of the asset.")
	@ExtendedMetaData(kind="element", name="context", namespace="##targetNamespace")
	!resolve val ContractContext[*] context;

	@GenModel(documentation="Description of the quality and completeness of the asset that may be a factor in its valuation.")
	@ExtendedMetaData(kind="element", name="condition", namespace="##targetNamespace")
	!resolve val String condition;

	@GenModel(documentation="Type of Asset availability for use or ownership.")
	@ExtendedMetaData(kind="element", name="periodType", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] periodType;

	@GenModel(documentation="Asset relevant contractual time period.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period[*] period;

	@GenModel(documentation="Time period of asset use.")
	@ExtendedMetaData(kind="element", name="usePeriod", namespace="##targetNamespace")
	!resolve val Period[*] usePeriod;

	@GenModel(documentation="Clause or question text (Prose Object) concerning the asset in a linked form, such as a QuestionnaireResponse used in the formation of the contract.")
	@ExtendedMetaData(kind="element", name="text", namespace="##targetNamespace")
	!resolve val String text;

	@GenModel(documentation="Id [identifier??] of the clause or question text about the asset in the referenced form or QuestionnaireResponse.")
	@ExtendedMetaData(kind="element", name="linkId", namespace="##targetNamespace")
	!resolve val String[*] linkId;

	@GenModel(documentation="Response to assets.")
	@ExtendedMetaData(kind="element", name="answer", namespace="##targetNamespace")
	!resolve val ContractAnswer[*] answer;

	@GenModel(documentation="Security labels that protects the asset.")
	@ExtendedMetaData(kind="element", name="securityLabelNumber", namespace="##targetNamespace")
	!resolve val UnsignedInt[*] securityLabelNumber;

	@GenModel(documentation="Contract Valued Item List.")
	@ExtendedMetaData(kind="element", name="valuedItem", namespace="##targetNamespace")
	!resolve val ContractValuedItem[*] valuedItem;
}

@GenModel(documentation="Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.")
@ExtendedMetaData(name="Contract.ContentDefinition", kind="elementOnly")
class ContractContentDefinition extends BackboneElement {

	@GenModel(documentation="Precusory content structure and use, i.e., a boilerplate, template, application for a contract such as an insurance policy or benefits under a program, e.g., workers compensation.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@GenModel(documentation="Detailed Precusory content type.")
	@ExtendedMetaData(kind="element", name="subType", namespace="##targetNamespace")
	!resolve val CodeableConcept subType;

	@GenModel(documentation="The  individual or organization that published the Contract precursor content.")
	@ExtendedMetaData(kind="element", name="publisher", namespace="##targetNamespace")
	!resolve val Reference publisher;

	@GenModel(documentation="The date (and optionally time) when the contract was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the contract changes.")
	@ExtendedMetaData(kind="element", name="publicationDate", namespace="##targetNamespace")
	!resolve val DateTime publicationDate;

	@GenModel(documentation="amended | appended | cancelled | disputed | entered-in-error | executable +.")
	@ExtendedMetaData(kind="element", name="publicationStatus", namespace="##targetNamespace")
	!resolve val ContractResourcePublicationStatusCodes[1] publicationStatus;

	@GenModel(documentation="A copyright statement relating to Contract precursor content. Copyright statements are generally legal restrictions on the use and publishing of the Contract precursor content.")
	@ExtendedMetaData(kind="element", name="copyright", namespace="##targetNamespace")
	!resolve val Markdown copyright;
}

@GenModel(documentation="Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.")
@ExtendedMetaData(name="Contract.Context", kind="elementOnly")
class ContractContext extends BackboneElement {

	@GenModel(documentation="Asset context reference may include the creator, custodian, or owning Person or Organization (e.g., bank, repository),  location held, e.g., building,  jurisdiction.")
	@ExtendedMetaData(kind="element", name="reference", namespace="##targetNamespace")
	!resolve val Reference reference;

	@GenModel(documentation="Coded representation of the context generally or of the Referenced entity, such as the asset holder type or location.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] code;

	@GenModel(documentation="Context description.")
	@ExtendedMetaData(kind="element", name="text", namespace="##targetNamespace")
	!resolve val String text;
}

@GenModel(documentation="Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.")
@ExtendedMetaData(name="Contract.Friendly", kind="elementOnly")
class ContractFriendly extends BackboneElement {

	@ExtendedMetaData(kind="element", name="contentAttachment", namespace="##targetNamespace")
	!resolve val Attachment contentAttachment;

	@ExtendedMetaData(kind="element", name="contentReference", namespace="##targetNamespace")
	!resolve val Reference contentReference;
}

@GenModel(documentation="Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.")
@ExtendedMetaData(name="Contract.Legal", kind="elementOnly")
class ContractLegal extends BackboneElement {

	@ExtendedMetaData(kind="element", name="contentAttachment", namespace="##targetNamespace")
	!resolve val Attachment contentAttachment;

	@ExtendedMetaData(kind="element", name="contentReference", namespace="##targetNamespace")
	!resolve val Reference contentReference;
}

@GenModel(documentation="Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.")
@ExtendedMetaData(name="Contract.Offer", kind="elementOnly")
class ContractOffer extends BackboneElement {

	@GenModel(documentation="Unique identifier for this particular Contract Provision.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Offer Recipient.")
	@ExtendedMetaData(kind="element", name="party", namespace="##targetNamespace")
	!resolve val ContractParty[*] party;

	@GenModel(documentation="The owner of an asset has the residual control rights over the asset: the right to decide all usages of the asset in any way not inconsistent with a prior contract, custom, or law (Hart, 1995, p. 30).")
	@ExtendedMetaData(kind="element", name="topic", namespace="##targetNamespace")
	!resolve val Reference topic;

	@GenModel(documentation="Type of Contract Provision such as specific requirements, purposes for actions, obligations, prohibitions, e.g. life time maximum benefit.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="Type of choice made by accepting party with respect to an offer made by an offeror/ grantee.")
	@ExtendedMetaData(kind="element", name="decision", namespace="##targetNamespace")
	!resolve val CodeableConcept decision;

	@GenModel(documentation="How the decision about a Contract was conveyed.")
	@ExtendedMetaData(kind="element", name="decisionMode", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] decisionMode;

	@GenModel(documentation="Response to offer text.")
	@ExtendedMetaData(kind="element", name="answer", namespace="##targetNamespace")
	!resolve val ContractAnswer[*] answer;

	@GenModel(documentation="Human readable form of this Contract Offer.")
	@ExtendedMetaData(kind="element", name="text", namespace="##targetNamespace")
	!resolve val String text;

	@GenModel(documentation="The id of the clause or question text of the offer in the referenced questionnaire/response.")
	@ExtendedMetaData(kind="element", name="linkId", namespace="##targetNamespace")
	!resolve val String[*] linkId;

	@GenModel(documentation="Security labels that protects the offer.")
	@ExtendedMetaData(kind="element", name="securityLabelNumber", namespace="##targetNamespace")
	!resolve val UnsignedInt[*] securityLabelNumber;
}

@GenModel(documentation="Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.")
@ExtendedMetaData(name="Contract.Party", kind="elementOnly")
class ContractParty extends BackboneElement {

	@GenModel(documentation="Participant in the offer.")
	@ExtendedMetaData(kind="element", name="reference", namespace="##targetNamespace")
	!resolve val Reference[+] reference;

	@GenModel(documentation="How the party participates in the offer.")
	@ExtendedMetaData(kind="element", name="role", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] role;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ContractResourcePublicationStatusCodes", kind="elementOnly")
class ContractResourcePublicationStatusCodes extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ContractResourcePublicationStatusCodesEnum value;
}

@ExtendedMetaData(name="ContractResourcePublicationStatusCodesEnum")
enum ContractResourcePublicationStatusCodesEnum {

	@GenModel(documentation="Amended")
	amended = 0;

	@GenModel(documentation="Appended")
	appended = 1;

	@GenModel(documentation="Cancelled")
	cancelled = 2;

	@GenModel(documentation="Disputed")
	disputed = 3;

	@GenModel(documentation="Entered in Error")
	enteredInError = 4;

	@GenModel(documentation="Executable")
	executable = 5;

	@GenModel(documentation="Executed")
	executed = 6;

	@GenModel(documentation="Negotiable")
	negotiable = 7;

	@GenModel(documentation="Offered")
	offered = 8;

	@GenModel(documentation="Policy")
	policy = 9;

	@GenModel(documentation="Rejected")
	rejected = 10;

	@GenModel(documentation="Renewed")
	renewed = 11;

	@GenModel(documentation="Revoked")
	revoked = 12;

	@GenModel(documentation="Resolved")
	resolved = 13;

	@GenModel(documentation="Terminated")
	terminated = 14;
}

@ExtendedMetaData(name="ContractResourcePublicationStatusCodesEnum:Object", baseType="ContractResourcePublicationStatusCodesEnum")
datatype ContractResourcePublicationStatusCodesEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ContractResourceStatusCodes", kind="elementOnly")
class ContractResourceStatusCodes extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ContractResourceStatusCodesEnum value;
}

@ExtendedMetaData(name="ContractResourceStatusCodesEnum")
enum ContractResourceStatusCodesEnum {

	@GenModel(documentation="Amended")
	amended = 0;

	@GenModel(documentation="Appended")
	appended = 1;

	@GenModel(documentation="Cancelled")
	cancelled = 2;

	@GenModel(documentation="Disputed")
	disputed = 3;

	@GenModel(documentation="Entered in Error")
	enteredInError = 4;

	@GenModel(documentation="Executable")
	executable = 5;

	@GenModel(documentation="Executed")
	executed = 6;

	@GenModel(documentation="Negotiable")
	negotiable = 7;

	@GenModel(documentation="Offered")
	offered = 8;

	@GenModel(documentation="Policy")
	policy = 9;

	@GenModel(documentation="Rejected")
	rejected = 10;

	@GenModel(documentation="Renewed")
	renewed = 11;

	@GenModel(documentation="Revoked")
	revoked = 12;

	@GenModel(documentation="Resolved")
	resolved = 13;

	@GenModel(documentation="Terminated")
	terminated = 14;
}

@ExtendedMetaData(name="ContractResourceStatusCodesEnum:Object", baseType="ContractResourceStatusCodesEnum")
datatype ContractResourceStatusCodesEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.")
@ExtendedMetaData(name="Contract.Rule", kind="elementOnly")
class ContractRule extends BackboneElement {

	@ExtendedMetaData(kind="element", name="contentAttachment", namespace="##targetNamespace")
	!resolve val Attachment contentAttachment;

	@ExtendedMetaData(kind="element", name="contentReference", namespace="##targetNamespace")
	!resolve val Reference contentReference;
}

@GenModel(documentation="Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.")
@ExtendedMetaData(name="Contract.SecurityLabel", kind="elementOnly")
class ContractSecurityLabel extends BackboneElement {

	@GenModel(documentation="Number used to link this term or term element to the applicable Security Label.")
	@ExtendedMetaData(kind="element", name="number", namespace="##targetNamespace")
	!resolve val UnsignedInt[*] number;

	@GenModel(documentation="Security label privacy tag that specifies the level of confidentiality protection required for this term and/or term elements.")
	@ExtendedMetaData(kind="element", name="classification", namespace="##targetNamespace")
	!resolve val Coding[1] classification;

	@GenModel(documentation="Security label privacy tag that specifies the applicable privacy and security policies governing this term and/or term elements.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val Coding[*] category;

	@GenModel(documentation="Security label privacy tag that specifies the manner in which term and/or term elements are to be protected.")
	@ExtendedMetaData(kind="element", name="control", namespace="##targetNamespace")
	!resolve val Coding[*] control;
}

@GenModel(documentation="Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.")
@ExtendedMetaData(name="Contract.Signer", kind="elementOnly")
class ContractSigner extends BackboneElement {

	@GenModel(documentation="Role of this Contract signer, e.g. notary, grantee.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val Coding[1] type;

	@GenModel(documentation="Party which is a signator to this Contract.")
	@ExtendedMetaData(kind="element", name="party", namespace="##targetNamespace")
	!resolve val Reference[1] party;

	@GenModel(documentation="Legally binding Contract DSIG signature contents in Base64.")
	@ExtendedMetaData(kind="element", name="signature", namespace="##targetNamespace")
	!resolve val Signature[+] signature;
}

@GenModel(documentation="Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.")
@ExtendedMetaData(name="Contract.Subject", kind="elementOnly")
class ContractSubject extends BackboneElement {

	@GenModel(documentation="The entity the action is performed or not performed on or for.")
	@ExtendedMetaData(kind="element", name="reference", namespace="##targetNamespace")
	!resolve val Reference[+] reference;

	@GenModel(documentation="Role type of agent assigned roles in this Contract.")
	@ExtendedMetaData(kind="element", name="role", namespace="##targetNamespace")
	!resolve val CodeableConcept role;
}

@GenModel(documentation="Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.")
@ExtendedMetaData(name="Contract.Term", kind="elementOnly")
class ContractTerm extends BackboneElement {

	@GenModel(documentation="Unique identifier for this particular Contract Provision.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier identifier;

	@GenModel(documentation="When this Contract Provision was issued.")
	@ExtendedMetaData(kind="element", name="issued", namespace="##targetNamespace")
	!resolve val DateTime issued;

	@GenModel(documentation="Relevant time or time-period when this Contract Provision is applicable.")
	@ExtendedMetaData(kind="element", name="applies", namespace="##targetNamespace")
	!resolve val Period applies;

	@ExtendedMetaData(kind="element", name="topicCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept topicCodeableConcept;

	@ExtendedMetaData(kind="element", name="topicReference", namespace="##targetNamespace")
	!resolve val Reference topicReference;

	@GenModel(documentation="A legal clause or condition contained within a contract that requires one or both parties to perform a particular requirement by some specified time or prevents one or both parties from performing a particular requirement by some specified time.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="A specialized legal clause or condition based on overarching contract type.")
	@ExtendedMetaData(kind="element", name="subType", namespace="##targetNamespace")
	!resolve val CodeableConcept subType;

	@GenModel(documentation="Statement of a provision in a policy or a contract.")
	@ExtendedMetaData(kind="element", name="text", namespace="##targetNamespace")
	!resolve val String text;

	@GenModel(documentation="Security labels that protect the handling of information about the term and its elements, which may be specifically identified.")
	@ExtendedMetaData(kind="element", name="securityLabel", namespace="##targetNamespace")
	!resolve val ContractSecurityLabel[*] securityLabel;

	@GenModel(documentation="The matter of concern in the context of this provision of the agrement.")
	@ExtendedMetaData(kind="element", name="offer", namespace="##targetNamespace")
	!resolve val ContractOffer[1] offer;

	@GenModel(documentation="Contract Term Asset List.")
	@ExtendedMetaData(kind="element", name="asset", namespace="##targetNamespace")
	!resolve val ContractAsset[*] asset;

	@GenModel(documentation="An actor taking a role in an activity for which it can be assigned some degree of responsibility for the activity taking place.")
	@ExtendedMetaData(kind="element", name="action", namespace="##targetNamespace")
	!resolve val ContractAction[*] action;

	@GenModel(documentation="Nested group of Contract Provisions.")
	@ExtendedMetaData(kind="element", name="group", namespace="##targetNamespace")
	!resolve val ContractTerm[*] group;
}

@GenModel(documentation="Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.")
@ExtendedMetaData(name="Contract.ValuedItem", kind="elementOnly")
class ContractValuedItem extends BackboneElement {

	@ExtendedMetaData(kind="element", name="entityCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept entityCodeableConcept;

	@ExtendedMetaData(kind="element", name="entityReference", namespace="##targetNamespace")
	!resolve val Reference entityReference;

	@GenModel(documentation="Identifies a Contract Valued Item instance.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier identifier;

	@GenModel(documentation="Indicates the time during which this Contract ValuedItem information is effective.")
	@ExtendedMetaData(kind="element", name="effectiveTime", namespace="##targetNamespace")
	!resolve val DateTime effectiveTime;

	@GenModel(documentation="Specifies the units by which the Contract Valued Item is measured or counted, and quantifies the countable or measurable Contract Valued Item instances.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Quantity quantity;

	@GenModel(documentation="A Contract Valued Item unit valuation measure.")
	@ExtendedMetaData(kind="element", name="unitPrice", namespace="##targetNamespace")
	!resolve val Money unitPrice;

	@GenModel(documentation="A real number that represents a multiplier used in determining the overall value of the Contract Valued Item delivered. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.")
	@ExtendedMetaData(kind="element", name="factor", namespace="##targetNamespace")
	!resolve val Decimal factor;

	@GenModel(documentation="An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the Contract Valued Item delivered. The concept of Points allows for assignment of point values for a Contract Valued Item, such that a monetary amount can be assigned to each point.")
	@ExtendedMetaData(kind="element", name="points", namespace="##targetNamespace")
	!resolve val Decimal points;

	@GenModel(documentation="Expresses the product of the Contract Valued Item unitQuantity and the unitPriceAmt. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points = net Amount. Quantity, factor and points are assumed to be 1 if not supplied.")
	@ExtendedMetaData(kind="element", name="net", namespace="##targetNamespace")
	!resolve val Money net;

	@GenModel(documentation="Terms of valuation.")
	@ExtendedMetaData(kind="element", name="payment", namespace="##targetNamespace")
	!resolve val String payment;

	@GenModel(documentation="When payment is due.")
	@ExtendedMetaData(kind="element", name="paymentDate", namespace="##targetNamespace")
	!resolve val DateTime paymentDate;

	@GenModel(documentation="Who will make payment.")
	@ExtendedMetaData(kind="element", name="responsible", namespace="##targetNamespace")
	!resolve val Reference responsible;

	@GenModel(documentation="Who will receive payment.")
	@ExtendedMetaData(kind="element", name="recipient", namespace="##targetNamespace")
	!resolve val Reference recipient;

	@GenModel(documentation="Id  of the clause or question text related to the context of this valuedItem in the referenced form or QuestionnaireResponse.")
	@ExtendedMetaData(kind="element", name="linkId", namespace="##targetNamespace")
	!resolve val String[*] linkId;

	@GenModel(documentation="A set of security labels that define which terms are controlled by this condition.")
	@ExtendedMetaData(kind="element", name="securityLabelNumber", namespace="##targetNamespace")
	!resolve val UnsignedInt[*] securityLabelNumber;
}

@GenModel(documentation="A contributor to the content of a knowledge asset, including authors, editors, reviewers, and endorsers.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="Contributor", kind="elementOnly")
class Contributor extends DataType {

	@GenModel(documentation="The type of contributor.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val ContributorType[1] type;

	@GenModel(documentation="The name of the individual or organization responsible for the contribution.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String[1] name;

	@GenModel(documentation="Contact details to assist a user in finding and communicating with the contributor.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactDetail[*] contact;
}

@GenModel(documentation="The type of contributor.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ContributorType", kind="elementOnly")
class ContributorType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ContributorTypeEnum value;
}

@ExtendedMetaData(name="ContributorTypeEnum")
enum ContributorTypeEnum {

	@GenModel(documentation="Author")
	author = 0;

	@GenModel(documentation="Editor")
	editor = 1;

	@GenModel(documentation="Reviewer")
	reviewer = 2;

	@GenModel(documentation="Endorser")
	endorser = 3;
}

@ExtendedMetaData(name="ContributorTypeEnum:Object", baseType="ContributorTypeEnum")
datatype ContributorTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="Count", kind="elementOnly")
class Count extends Quantity {
}

@GenModel(documentation="Financial instrument which may be used to reimburse or pay for health care products and services. Includes both insurance and self-payment.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Coverage", kind="elementOnly")
class Coverage extends DomainResource {

	@GenModel(documentation="The identifier of the coverage as issued by the insurer.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The status of the resource instance.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val FinancialResourceStatusCodes[1] status;

	@GenModel(documentation="The nature of the coverage be it insurance, or cash payment such as self-pay.")
	@ExtendedMetaData(kind="element", name="kind", namespace="##targetNamespace")
	!resolve val Kind[1] kind;

	@GenModel(documentation="Link to the paying party and optionally what specifically they will be responsible to pay.")
	@ExtendedMetaData(kind="element", name="paymentBy", namespace="##targetNamespace")
	!resolve val CoveragePaymentBy[*] paymentBy;

	@GenModel(documentation="The type of coverage: social program, medical plan, accident coverage (workers compensation, auto), group health or payment by an individual or organization.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="The party who 'owns' the insurance policy.")
	@ExtendedMetaData(kind="element", name="policyHolder", namespace="##targetNamespace")
	!resolve val Reference policyHolder;

	@GenModel(documentation="The party who has signed-up for or 'owns' the contractual relationship to the policy or to whom the benefit of the policy for services rendered to them or their family is due.")
	@ExtendedMetaData(kind="element", name="subscriber", namespace="##targetNamespace")
	!resolve val Reference subscriber;

	@GenModel(documentation="The insurer assigned ID for the Subscriber.")
	@ExtendedMetaData(kind="element", name="subscriberId", namespace="##targetNamespace")
	!resolve val Identifier[*] subscriberId;

	@GenModel(documentation="The party who benefits from the insurance coverage; the patient when products and/or services are provided.")
	@ExtendedMetaData(kind="element", name="beneficiary", namespace="##targetNamespace")
	!resolve val Reference[1] beneficiary;

	@GenModel(documentation="A designator for a dependent under the coverage.")
	@ExtendedMetaData(kind="element", name="dependent", namespace="##targetNamespace")
	!resolve val String dependent;

	@GenModel(documentation="The relationship of beneficiary (patient) to the subscriber.")
	@ExtendedMetaData(kind="element", name="relationship", namespace="##targetNamespace")
	!resolve val CodeableConcept relationship;

	@GenModel(documentation="Time period during which the coverage is in force. A missing start date indicates the start date isn't known, a missing end date means the coverage is continuing to be in force.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;

	@GenModel(documentation="The program or plan underwriter, payor, insurance company.")
	@ExtendedMetaData(kind="element", name="insurer", namespace="##targetNamespace")
	!resolve val Reference insurer;

	@GenModel(documentation="A suite of underwriter specific classifiers.")
	@ExtendedMetaData(kind="element", name="class", namespace="##targetNamespace")
	!resolve val CoverageClass[*] ~class;

	@GenModel(documentation="The order of applicability of this coverage relative to other coverages which are currently in force. Note, there may be gaps in the numbering and this does not imply primary, secondary etc. as the specific positioning of coverages depends upon the episode of care. For example; a patient might have (0) auto insurance (1) their own health insurance and (2) spouse's health insurance. When claiming for treatments which were not the result of an auto accident then only coverages (1) and (2) above would be applicatble and would apply in the order specified in parenthesis.")
	@ExtendedMetaData(kind="element", name="order", namespace="##targetNamespace")
	!resolve val PositiveInt order;

	@GenModel(documentation="The insurer-specific identifier for the insurer-defined network of providers to which the beneficiary may seek treatment which will be covered at the 'in-network' rate, otherwise 'out of network' terms and conditions apply.")
	@ExtendedMetaData(kind="element", name="network", namespace="##targetNamespace")
	!resolve val String network;

	@GenModel(documentation="A suite of codes indicating the cost category and associated amount which have been detailed in the policy and may have been  included on the health card.")
	@ExtendedMetaData(kind="element", name="costToBeneficiary", namespace="##targetNamespace")
	!resolve val CoverageCostToBeneficiary[*] costToBeneficiary;

	@GenModel(documentation="When 'subrogation=true' this insurance instance has been included not for adjudication but to provide insurers with the details to recover costs.")
	@ExtendedMetaData(kind="element", name="subrogation", namespace="##targetNamespace")
	!resolve val Boolean subrogation;

	@GenModel(documentation="The policy(s) which constitute this insurance coverage.")
	@ExtendedMetaData(kind="element", name="contract", namespace="##targetNamespace")
	!resolve val Reference[*] contract;

	@GenModel(documentation="The insurance plan details, benefits and costs, which constitute this insurance coverage.")
	@ExtendedMetaData(kind="element", name="insurancePlan", namespace="##targetNamespace")
	!resolve val Reference insurancePlan;
}

@GenModel(documentation="Financial instrument which may be used to reimburse or pay for health care products and services. Includes both insurance and self-payment.")
@ExtendedMetaData(name="Coverage.Class", kind="elementOnly")
class CoverageClass extends BackboneElement {

	@GenModel(documentation="The type of classification for which an insurer-specific class label or number and optional name is provided.  For example, type may be used to identify a class of coverage or employer group, policy, or plan.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@GenModel(documentation="The alphanumeric identifier associated with the insurer issued label.")
	@ExtendedMetaData(kind="element", name="value", namespace="##targetNamespace")
	!resolve val Identifier[1] value;

	@GenModel(documentation="A short description for the class.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;
}

@GenModel(documentation="Financial instrument which may be used to reimburse or pay for health care products and services. Includes both insurance and self-payment.")
@ExtendedMetaData(name="Coverage.CostToBeneficiary", kind="elementOnly")
class CoverageCostToBeneficiary extends BackboneElement {

	@GenModel(documentation="The category of patient centric costs associated with treatment.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="Code to identify the general type of benefits under which products and services are provided.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept category;

	@GenModel(documentation="Is a flag to indicate whether the benefits refer to in-network providers or out-of-network providers.")
	@ExtendedMetaData(kind="element", name="network", namespace="##targetNamespace")
	!resolve val CodeableConcept network;

	@GenModel(documentation="Indicates if the benefits apply to an individual or to the family.")
	@ExtendedMetaData(kind="element", name="unit", namespace="##targetNamespace")
	!resolve val CodeableConcept unit;

	@GenModel(documentation="The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual visits'.")
	@ExtendedMetaData(kind="element", name="term", namespace="##targetNamespace")
	!resolve val CodeableConcept term;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueMoney", namespace="##targetNamespace")
	!resolve val Money valueMoney;

	@GenModel(documentation="A suite of codes indicating exceptions or reductions to patient costs and their effective periods.")
	@ExtendedMetaData(kind="element", name="exception", namespace="##targetNamespace")
	!resolve val CoverageException[*] exception;
}

@GenModel(documentation="The CoverageEligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an CoverageEligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="CoverageEligibilityRequest", kind="elementOnly")
class CoverageEligibilityRequest extends DomainResource {

	@GenModel(documentation="A unique identifier assigned to this coverage eligiblity request.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The status of the resource instance.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val FinancialResourceStatusCodes[1] status;

	@GenModel(documentation="When the requestor expects the processor to complete processing.")
	@ExtendedMetaData(kind="element", name="priority", namespace="##targetNamespace")
	!resolve val CodeableConcept priority;

	@GenModel(documentation="Code to specify whether requesting: prior authorization requirements for some service categories or billing codes; benefits for coverages specified or discovered; discovery and return of coverages for the patient; and/or validation that the specified coverage is in-force at the date/period specified or 'now' if not specified.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val EligibilityRequestPurpose[+] purpose;

	@GenModel(documentation="The party who is the beneficiary of the supplied coverage and for whom eligibility is sought.")
	@ExtendedMetaData(kind="element", name="patient", namespace="##targetNamespace")
	!resolve val Reference[1] patient;

	@GenModel(documentation="Information code for an event with a corresponding date or period.")
	@ExtendedMetaData(kind="element", name="event", namespace="##targetNamespace")
	!resolve val CoverageEligibilityRequestEvent[*] event;

	@ExtendedMetaData(kind="element", name="servicedDate", namespace="##targetNamespace")
	!resolve val Date servicedDate;

	@ExtendedMetaData(kind="element", name="servicedPeriod", namespace="##targetNamespace")
	!resolve val Period servicedPeriod;

	@GenModel(documentation="The date when this resource was created.")
	@ExtendedMetaData(kind="element", name="created", namespace="##targetNamespace")
	!resolve val DateTime[1] created;

	@GenModel(documentation="Person who created the request.")
	@ExtendedMetaData(kind="element", name="enterer", namespace="##targetNamespace")
	!resolve val Reference enterer;

	@GenModel(documentation="The provider which is responsible for the request.")
	@ExtendedMetaData(kind="element", name="provider", namespace="##targetNamespace")
	!resolve val Reference provider;

	@GenModel(documentation="The Insurer who issued the coverage in question and is the recipient of the request.")
	@ExtendedMetaData(kind="element", name="insurer", namespace="##targetNamespace")
	!resolve val Reference[1] insurer;

	@GenModel(documentation="Facility where the services are intended to be provided.")
	@ExtendedMetaData(kind="element", name="facility", namespace="##targetNamespace")
	!resolve val Reference facility;

	@GenModel(documentation="Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues.")
	@ExtendedMetaData(kind="element", name="supportingInfo", namespace="##targetNamespace")
	!resolve val CoverageEligibilityRequestSupportingInfo[*] supportingInfo;

	@GenModel(documentation="Financial instruments for reimbursement for the health care products and services.")
	@ExtendedMetaData(kind="element", name="insurance", namespace="##targetNamespace")
	!resolve val CoverageEligibilityRequestInsurance[*] insurance;

	@GenModel(documentation="Service categories or billable services for which benefit details and/or an authorization prior to service delivery may be required by the payor.")
	@ExtendedMetaData(kind="element", name="item", namespace="##targetNamespace")
	!resolve val CoverageEligibilityRequestItem[*] item;
}

@GenModel(documentation="The CoverageEligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an CoverageEligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy.")
@ExtendedMetaData(name="CoverageEligibilityRequest.Diagnosis", kind="elementOnly")
class CoverageEligibilityRequestDiagnosis extends BackboneElement {

	@ExtendedMetaData(kind="element", name="diagnosisCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept diagnosisCodeableConcept;

	@ExtendedMetaData(kind="element", name="diagnosisReference", namespace="##targetNamespace")
	!resolve val Reference diagnosisReference;
}

@GenModel(documentation="The CoverageEligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an CoverageEligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy.")
@ExtendedMetaData(name="CoverageEligibilityRequest.Event", kind="elementOnly")
class CoverageEligibilityRequestEvent extends BackboneElement {

	@GenModel(documentation="A coded event such as when a service is expected or a card printed.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@ExtendedMetaData(kind="element", name="whenDateTime", namespace="##targetNamespace")
	!resolve val DateTime whenDateTime;

	@ExtendedMetaData(kind="element", name="whenPeriod", namespace="##targetNamespace")
	!resolve val Period whenPeriod;
}

@GenModel(documentation="The CoverageEligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an CoverageEligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy.")
@ExtendedMetaData(name="CoverageEligibilityRequest.Insurance", kind="elementOnly")
class CoverageEligibilityRequestInsurance extends BackboneElement {

	@GenModel(documentation="A flag to indicate that this Coverage is to be used for evaluation of this request when set to true.")
	@ExtendedMetaData(kind="element", name="focal", namespace="##targetNamespace")
	!resolve val Boolean focal;

	@GenModel(documentation="Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.")
	@ExtendedMetaData(kind="element", name="coverage", namespace="##targetNamespace")
	!resolve val Reference[1] coverage;

	@GenModel(documentation="A business agreement number established between the provider and the insurer for special business processing purposes.")
	@ExtendedMetaData(kind="element", name="businessArrangement", namespace="##targetNamespace")
	!resolve val String businessArrangement;
}

@GenModel(documentation="The CoverageEligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an CoverageEligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy.")
@ExtendedMetaData(name="CoverageEligibilityRequest.Item", kind="elementOnly")
class CoverageEligibilityRequestItem extends BackboneElement {

	@GenModel(documentation="Exceptions, special conditions and supporting information applicable for this service or product line.")
	@ExtendedMetaData(kind="element", name="supportingInfoSequence", namespace="##targetNamespace")
	!resolve val PositiveInt[*] supportingInfoSequence;

	@GenModel(documentation="Code to identify the general type of benefits under which products and services are provided.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept category;

	@GenModel(documentation="This contains the product, service, drug or other billing code for the item.")
	@ExtendedMetaData(kind="element", name="productOrService", namespace="##targetNamespace")
	!resolve val CodeableConcept productOrService;

	@GenModel(documentation="Item typification or modifiers codes to convey additional context for the product or service.")
	@ExtendedMetaData(kind="element", name="modifier", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] modifier;

	@GenModel(documentation="The practitioner who is responsible for the product or service to be rendered to the patient.")
	@ExtendedMetaData(kind="element", name="provider", namespace="##targetNamespace")
	!resolve val Reference provider;

	@GenModel(documentation="The number of repetitions of a service or product.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Quantity quantity;

	@GenModel(documentation="The amount charged to the patient by the provider for a single unit.")
	@ExtendedMetaData(kind="element", name="unitPrice", namespace="##targetNamespace")
	!resolve val Money unitPrice;

	@GenModel(documentation="Facility where the services will be provided.")
	@ExtendedMetaData(kind="element", name="facility", namespace="##targetNamespace")
	!resolve val Reference facility;

	@GenModel(documentation="Patient diagnosis for which care is sought.")
	@ExtendedMetaData(kind="element", name="diagnosis", namespace="##targetNamespace")
	!resolve val CoverageEligibilityRequestDiagnosis[*] diagnosis;

	@GenModel(documentation="The plan/proposal/order describing the proposed service in detail.")
	@ExtendedMetaData(kind="element", name="detail", namespace="##targetNamespace")
	!resolve val Reference[*] detail;
}

@GenModel(documentation="The CoverageEligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an CoverageEligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy.")
@ExtendedMetaData(name="CoverageEligibilityRequest.SupportingInfo", kind="elementOnly")
class CoverageEligibilityRequestSupportingInfo extends BackboneElement {

	@GenModel(documentation="A number to uniquely identify supporting information entries.")
	@ExtendedMetaData(kind="element", name="sequence", namespace="##targetNamespace")
	!resolve val PositiveInt[1] sequence;

	@GenModel(documentation="Additional data or information such as resources, documents, images etc. including references to the data or the actual inclusion of the data.")
	@ExtendedMetaData(kind="element", name="information", namespace="##targetNamespace")
	!resolve val Reference[1] information;

	@GenModel(documentation="The supporting materials are applicable for all detail items, product/servce categories and specific billing codes.")
	@ExtendedMetaData(kind="element", name="appliesToAll", namespace="##targetNamespace")
	!resolve val Boolean appliesToAll;
}

@GenModel(documentation="This resource provides eligibility and plan details from the processing of an CoverageEligibilityRequest resource.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="CoverageEligibilityResponse", kind="elementOnly")
class CoverageEligibilityResponse extends DomainResource {

	@GenModel(documentation="A unique identifier assigned to this coverage eligiblity request.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The status of the resource instance.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val FinancialResourceStatusCodes[1] status;

	@GenModel(documentation="Code to specify whether requesting: prior authorization requirements for some service categories or billing codes; benefits for coverages specified or discovered; discovery and return of coverages for the patient; and/or validation that the specified coverage is in-force at the date/period specified or 'now' if not specified.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val EligibilityResponsePurpose[+] purpose;

	@GenModel(documentation="The party who is the beneficiary of the supplied coverage and for whom eligibility is sought.")
	@ExtendedMetaData(kind="element", name="patient", namespace="##targetNamespace")
	!resolve val Reference[1] patient;

	@GenModel(documentation="Information code for an event with a corresponding date or period.")
	@ExtendedMetaData(kind="element", name="event", namespace="##targetNamespace")
	!resolve val CoverageEligibilityResponseEvent[*] event;

	@ExtendedMetaData(kind="element", name="servicedDate", namespace="##targetNamespace")
	!resolve val Date servicedDate;

	@ExtendedMetaData(kind="element", name="servicedPeriod", namespace="##targetNamespace")
	!resolve val Period servicedPeriod;

	@GenModel(documentation="The date this resource was created.")
	@ExtendedMetaData(kind="element", name="created", namespace="##targetNamespace")
	!resolve val DateTime[1] created;

	@GenModel(documentation="The provider which is responsible for the request.")
	@ExtendedMetaData(kind="element", name="requestor", namespace="##targetNamespace")
	!resolve val Reference requestor;

	@GenModel(documentation="Reference to the original request resource.")
	@ExtendedMetaData(kind="element", name="request", namespace="##targetNamespace")
	!resolve val Reference[1] request;

	@GenModel(documentation="The outcome of the request processing.")
	@ExtendedMetaData(kind="element", name="outcome", namespace="##targetNamespace")
	!resolve val EligibilityOutcome[1] outcome;

	@GenModel(documentation="A human readable description of the status of the adjudication.")
	@ExtendedMetaData(kind="element", name="disposition", namespace="##targetNamespace")
	!resolve val String disposition;

	@GenModel(documentation="The Insurer who issued the coverage in question and is the author of the response.")
	@ExtendedMetaData(kind="element", name="insurer", namespace="##targetNamespace")
	!resolve val Reference[1] insurer;

	@GenModel(documentation="Financial instruments for reimbursement for the health care products and services.")
	@ExtendedMetaData(kind="element", name="insurance", namespace="##targetNamespace")
	!resolve val CoverageEligibilityResponseInsurance[*] insurance;

	@GenModel(documentation="A reference from the Insurer to which these services pertain to be used on further communication and as proof that the request occurred.")
	@ExtendedMetaData(kind="element", name="preAuthRef", namespace="##targetNamespace")
	!resolve val String preAuthRef;

	@GenModel(documentation="A code for the form to be used for printing the content.")
	@ExtendedMetaData(kind="element", name="form", namespace="##targetNamespace")
	!resolve val CodeableConcept form;

	@GenModel(documentation="Errors encountered during the processing of the request.")
	@ExtendedMetaData(kind="element", name="error", namespace="##targetNamespace")
	!resolve val CoverageEligibilityResponseError[*] error;
}

@GenModel(documentation="This resource provides eligibility and plan details from the processing of an CoverageEligibilityRequest resource.")
@ExtendedMetaData(name="CoverageEligibilityResponse.Benefit", kind="elementOnly")
class CoverageEligibilityResponseBenefit extends BackboneElement {

	@GenModel(documentation="Classification of benefit being provided.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@ExtendedMetaData(kind="element", name="allowedUnsignedInt", namespace="##targetNamespace")
	!resolve val UnsignedInt allowedUnsignedInt;

	@ExtendedMetaData(kind="element", name="allowedString", namespace="##targetNamespace")
	!resolve val String allowedString;

	@ExtendedMetaData(kind="element", name="allowedMoney", namespace="##targetNamespace")
	!resolve val Money allowedMoney;

	@ExtendedMetaData(kind="element", name="usedUnsignedInt", namespace="##targetNamespace")
	!resolve val UnsignedInt usedUnsignedInt;

	@ExtendedMetaData(kind="element", name="usedString", namespace="##targetNamespace")
	!resolve val String usedString;

	@ExtendedMetaData(kind="element", name="usedMoney", namespace="##targetNamespace")
	!resolve val Money usedMoney;
}

@GenModel(documentation="This resource provides eligibility and plan details from the processing of an CoverageEligibilityRequest resource.")
@ExtendedMetaData(name="CoverageEligibilityResponse.Error", kind="elementOnly")
class CoverageEligibilityResponseError extends BackboneElement {

	@GenModel(documentation="An error code,from a specified code system, which details why the eligibility check could not be performed.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] code;

	@GenModel(documentation="A [simple subset of FHIRPath](fhirpath.html#simple) limited to element names, repetition indicators and the default child accessor that identifies one of the elements in the resource that caused this issue to be raised.")
	@ExtendedMetaData(kind="element", name="expression", namespace="##targetNamespace")
	!resolve val String[*] expression;
}

@GenModel(documentation="This resource provides eligibility and plan details from the processing of an CoverageEligibilityRequest resource.")
@ExtendedMetaData(name="CoverageEligibilityResponse.Event", kind="elementOnly")
class CoverageEligibilityResponseEvent extends BackboneElement {

	@GenModel(documentation="A coded event such as when a service is expected or a card printed.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@ExtendedMetaData(kind="element", name="whenDateTime", namespace="##targetNamespace")
	!resolve val DateTime whenDateTime;

	@ExtendedMetaData(kind="element", name="whenPeriod", namespace="##targetNamespace")
	!resolve val Period whenPeriod;
}

@GenModel(documentation="This resource provides eligibility and plan details from the processing of an CoverageEligibilityRequest resource.")
@ExtendedMetaData(name="CoverageEligibilityResponse.Insurance", kind="elementOnly")
class CoverageEligibilityResponseInsurance extends BackboneElement {

	@GenModel(documentation="Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.")
	@ExtendedMetaData(kind="element", name="coverage", namespace="##targetNamespace")
	!resolve val Reference[1] coverage;

	@GenModel(documentation="Flag indicating if the coverage provided is inforce currently if no service date(s) specified or for the whole duration of the service dates.")
	@ExtendedMetaData(kind="element", name="inforce", namespace="##targetNamespace")
	!resolve val Boolean inforce;

	@GenModel(documentation="The term of the benefits documented in this response.")
	@ExtendedMetaData(kind="element", name="benefitPeriod", namespace="##targetNamespace")
	!resolve val Period benefitPeriod;

	@GenModel(documentation="Benefits and optionally current balances, and authorization details by category or service.")
	@ExtendedMetaData(kind="element", name="item", namespace="##targetNamespace")
	!resolve val CoverageEligibilityResponseItem[*] item;
}

@GenModel(documentation="This resource provides eligibility and plan details from the processing of an CoverageEligibilityRequest resource.")
@ExtendedMetaData(name="CoverageEligibilityResponse.Item", kind="elementOnly")
class CoverageEligibilityResponseItem extends BackboneElement {

	@GenModel(documentation="Code to identify the general type of benefits under which products and services are provided.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept category;

	@GenModel(documentation="This contains the product, service, drug or other billing code for the item.")
	@ExtendedMetaData(kind="element", name="productOrService", namespace="##targetNamespace")
	!resolve val CodeableConcept productOrService;

	@GenModel(documentation="Item typification or modifiers codes to convey additional context for the product or service.")
	@ExtendedMetaData(kind="element", name="modifier", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] modifier;

	@GenModel(documentation="The practitioner who is eligible for the provision of the product or service.")
	@ExtendedMetaData(kind="element", name="provider", namespace="##targetNamespace")
	!resolve val Reference provider;

	@GenModel(documentation="True if the indicated class of service is excluded from the plan, missing or False indicates the product or service is included in the coverage.")
	@ExtendedMetaData(kind="element", name="excluded", namespace="##targetNamespace")
	!resolve val Boolean excluded;

	@GenModel(documentation="A short name or tag for the benefit.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="A richer description of the benefit or services covered.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val String description;

	@GenModel(documentation="Is a flag to indicate whether the benefits refer to in-network providers or out-of-network providers.")
	@ExtendedMetaData(kind="element", name="network", namespace="##targetNamespace")
	!resolve val CodeableConcept network;

	@GenModel(documentation="Indicates if the benefits apply to an individual or to the family.")
	@ExtendedMetaData(kind="element", name="unit", namespace="##targetNamespace")
	!resolve val CodeableConcept unit;

	@GenModel(documentation="The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual visits'.")
	@ExtendedMetaData(kind="element", name="term", namespace="##targetNamespace")
	!resolve val CodeableConcept term;

	@GenModel(documentation="Benefits used to date.")
	@ExtendedMetaData(kind="element", name="benefit", namespace="##targetNamespace")
	!resolve val CoverageEligibilityResponseBenefit[*] benefit;

	@GenModel(documentation="A boolean flag indicating whether a preauthorization is required prior to actual service delivery.")
	@ExtendedMetaData(kind="element", name="authorizationRequired", namespace="##targetNamespace")
	!resolve val Boolean authorizationRequired;

	@GenModel(documentation="Codes or comments regarding information or actions associated with the preauthorization.")
	@ExtendedMetaData(kind="element", name="authorizationSupporting", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] authorizationSupporting;

	@GenModel(documentation="A web location for obtaining requirements or descriptive information regarding the preauthorization.")
	@ExtendedMetaData(kind="element", name="authorizationUrl", namespace="##targetNamespace")
	!resolve val Uri authorizationUrl;
}

@GenModel(documentation="Financial instrument which may be used to reimburse or pay for health care products and services. Includes both insurance and self-payment.")
@ExtendedMetaData(name="Coverage.Exception", kind="elementOnly")
class CoverageException extends BackboneElement {

	@GenModel(documentation="The code for the specific exception.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@GenModel(documentation="The timeframe the exception is in force.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;
}

@GenModel(documentation="Financial instrument which may be used to reimburse or pay for health care products and services. Includes both insurance and self-payment.")
@ExtendedMetaData(name="Coverage.PaymentBy", kind="elementOnly")
class CoveragePaymentBy extends BackboneElement {

	@GenModel(documentation="The list of parties providing non-insurance payment for the treatment costs.")
	@ExtendedMetaData(kind="element", name="party", namespace="##targetNamespace")
	!resolve val Reference[1] party;

	@GenModel(documentation=" Description of the financial responsibility.")
	@ExtendedMetaData(kind="element", name="responsibility", namespace="##targetNamespace")
	!resolve val String responsibility;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="CriteriaNotExistsBehavior", kind="elementOnly")
class CriteriaNotExistsBehavior extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr CriteriaNotExistsBehaviorEnum value;
}

@ExtendedMetaData(name="CriteriaNotExistsBehaviorEnum")
enum CriteriaNotExistsBehaviorEnum {

	@GenModel(documentation="Test passes")
	testPasses = 0;

	@GenModel(documentation="Test fails")
	testFails = 1;
}

@ExtendedMetaData(name="CriteriaNotExistsBehaviorEnum:Object", baseType="CriteriaNotExistsBehaviorEnum")
datatype CriteriaNotExistsBehaviorEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="DataRequirement", kind="elementOnly")
class DataRequirement extends DataType {

	@GenModel(documentation="The type of the required data, specified as the type name of a resource. For profiles, this value is set to the type of the base resource of the profile.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val Code[1] type;

	@GenModel(documentation="The profile of the required data, specified as the uri of the profile definition.")
	@ExtendedMetaData(kind="element", name="profile", namespace="##targetNamespace")
	!resolve val Canonical[*] profile;

	@ExtendedMetaData(kind="element", name="subjectCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept subjectCodeableConcept;

	@ExtendedMetaData(kind="element", name="subjectReference", namespace="##targetNamespace")
	!resolve val Reference subjectReference;

	@GenModel(documentation="Indicates that specific elements of the type are referenced by the knowledge module and must be supported by the consumer in order to obtain an effective evaluation. This does not mean that a value is required for this element, only that the consuming system must understand the element and be able to provide values for it if they are available. 

The value of mustSupport SHALL be a FHIRPath resolvable on the type of the DataRequirement. The path SHALL consist only of identifiers, constant indexers, and .resolve() (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).")
	@ExtendedMetaData(kind="element", name="mustSupport", namespace="##targetNamespace")
	!resolve val String[*] mustSupport;

	@GenModel(documentation="Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data. Each code filter defines an additional constraint on the data, i.e. code filters are AND'ed, not OR'ed.")
	@ExtendedMetaData(kind="element", name="codeFilter", namespace="##targetNamespace")
	!resolve val DataRequirementCodeFilter[*] codeFilter;

	@GenModel(documentation="Date filters specify additional constraints on the data in terms of the applicable date range for specific elements. Each date filter specifies an additional constraint on the data, i.e. date filters are AND'ed, not OR'ed.")
	@ExtendedMetaData(kind="element", name="dateFilter", namespace="##targetNamespace")
	!resolve val DataRequirementDateFilter[*] dateFilter;

	@GenModel(documentation="Value filters specify additional constraints on the data for elements other than code-valued or date-valued. Each value filter specifies an additional constraint on the data (i.e. valueFilters are AND'ed, not OR'ed).")
	@ExtendedMetaData(kind="element", name="valueFilter", namespace="##targetNamespace")
	!resolve val DataRequirementValueFilter[*] valueFilter;

	@GenModel(documentation="Specifies a maximum number of results that are required (uses the _count search parameter).")
	@ExtendedMetaData(kind="element", name="limit", namespace="##targetNamespace")
	!resolve val PositiveInt limit;

	@GenModel(documentation="Specifies the order of the results to be returned.")
	@ExtendedMetaData(kind="element", name="sort", namespace="##targetNamespace")
	!resolve val DataRequirementSort[*] sort;
}

@GenModel(documentation="Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="DataRequirement.CodeFilter", kind="elementOnly")
class DataRequirementCodeFilter extends DataType {

	@GenModel(documentation="The code-valued attribute of the filter. The specified path SHALL be a FHIRPath resolvable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of type code, Coding, or CodeableConcept.")
	@ExtendedMetaData(kind="element", name="path", namespace="##targetNamespace")
	!resolve val String path;

	@GenModel(documentation="A token parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type code, Coding, or CodeableConcept.")
	@ExtendedMetaData(kind="element", name="searchParam", namespace="##targetNamespace")
	!resolve val String searchParam;

	@GenModel(documentation="The valueset for the code filter. The valueSet and code elements are additive. If valueSet is specified, the filter will return only those data items for which the value of the code-valued element specified in the path is a member of the specified valueset.")
	@ExtendedMetaData(kind="element", name="valueSet", namespace="##targetNamespace")
	!resolve val Canonical valueSet;

	@GenModel(documentation="The codes for the code filter. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified codes. If codes are specified in addition to a value set, the filter returns items matching a code in the value set or one of the specified codes.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val Coding[*] code;
}

@GenModel(documentation="Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="DataRequirement.DateFilter", kind="elementOnly")
class DataRequirementDateFilter extends DataType {

	@GenModel(documentation="The date-valued attribute of the filter. The specified path SHALL be a FHIRPath resolvable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of type date, dateTime, Period, Schedule, or Timing.")
	@ExtendedMetaData(kind="element", name="path", namespace="##targetNamespace")
	!resolve val String path;

	@GenModel(documentation="A date parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type date, dateTime, Period, Schedule, or Timing.")
	@ExtendedMetaData(kind="element", name="searchParam", namespace="##targetNamespace")
	!resolve val String searchParam;

	@ExtendedMetaData(kind="element", name="valueDateTime", namespace="##targetNamespace")
	!resolve val DateTime valueDateTime;

	@ExtendedMetaData(kind="element", name="valuePeriod", namespace="##targetNamespace")
	!resolve val Period valuePeriod;

	@ExtendedMetaData(kind="element", name="valueDuration", namespace="##targetNamespace")
	!resolve val Duration valueDuration;
}

@GenModel(documentation="Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="DataRequirement.Sort", kind="elementOnly")
class DataRequirementSort extends DataType {

	@GenModel(documentation="The attribute of the sort. The specified path must be resolvable from the type of the required data. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements. Note that the index must be an integer constant.")
	@ExtendedMetaData(kind="element", name="path", namespace="##targetNamespace")
	!resolve val String[1] path;

	@GenModel(documentation="The direction of the sort, ascending or descending.")
	@ExtendedMetaData(kind="element", name="direction", namespace="##targetNamespace")
	!resolve val SortDirection[1] direction;
}

@GenModel(documentation="Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="DataRequirement.ValueFilter", kind="elementOnly")
class DataRequirementValueFilter extends DataType {

	@GenModel(documentation="The attribute of the filter. The specified path SHALL be a FHIRPath resolvable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of a type that is comparable to the valueFilter.value[x] element for the filter.")
	@ExtendedMetaData(kind="element", name="path", namespace="##targetNamespace")
	!resolve val String path;

	@GenModel(documentation="A search parameter defined on the specified type of the DataRequirement, and which searches on elements of a type compatible with the type of the valueFilter.value[x] for the filter.")
	@ExtendedMetaData(kind="element", name="searchParam", namespace="##targetNamespace")
	!resolve val String searchParam;

	@GenModel(documentation="The comparator to be used to determine whether the value is matching.")
	@ExtendedMetaData(kind="element", name="comparator", namespace="##targetNamespace")
	!resolve val Code comparator;

	@ExtendedMetaData(kind="element", name="valueDateTime", namespace="##targetNamespace")
	!resolve val DateTime valueDateTime;

	@ExtendedMetaData(kind="element", name="valuePeriod", namespace="##targetNamespace")
	!resolve val Period valuePeriod;

	@ExtendedMetaData(kind="element", name="valueDuration", namespace="##targetNamespace")
	!resolve val Duration valueDuration;
}

@GenModel(documentation="The base class for all re-useable types defined as part of the FHIR Specification.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="DataType", kind="elementOnly")
class DataType extends Element {
}

@GenModel(documentation="A date or partial date (e.g. just year or year + month). There is no UTC offset. The format is a union of the schema types gYear, gYearMonth and date.  Dates SHALL be valid dates.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="date", kind="elementOnly")
class Date extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	attr DatePrimitive value;
}

@ExtendedMetaData(name="date-primitive", baseType="date-primitive_._base", pattern="([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?")
datatype DatePrimitive : javax.xml.datatype.XMLGregorianCalendar;

@ExtendedMetaData(name="date-primitive_._base", memberTypes="http://www.eclipse.org/emf/2003/XMLType#gYear http://www.eclipse.org/emf/2003/XMLType#gYearMonth http://www.eclipse.org/emf/2003/XMLType#date")
datatype DatePrimitiveBase : javax.xml.datatype.XMLGregorianCalendar;

@GenModel(documentation="A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a UTC offset SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates.
UTC offset is allowed for dates and partial dates
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="dateTime", kind="elementOnly")
class DateTime extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	attr DateTimePrimitive value;
}

@ExtendedMetaData(name="dateTime-primitive", baseType="dateTime-primitive_._base", pattern="([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?")
datatype DateTimePrimitive : javax.xml.datatype.XMLGregorianCalendar;

@ExtendedMetaData(name="dateTime-primitive_._base", memberTypes="http://www.eclipse.org/emf/2003/XMLType#gYear http://www.eclipse.org/emf/2003/XMLType#gYearMonth http://www.eclipse.org/emf/2003/XMLType#date http://www.eclipse.org/emf/2003/XMLType#dateTime")
datatype DateTimePrimitiveBase : javax.xml.datatype.XMLGregorianCalendar;

@GenModel(documentation="A rational number with implicit precision
Do not use an IEEE type floating point type, instead use something that works like a true decimal, with inbuilt precision (e.g. Java BigInteger)
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="decimal", kind="elementOnly")
class Decimal extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	attr DecimalPrimitive value;
}

@ExtendedMetaData(name="decimal-primitive", memberTypes="http://www.eclipse.org/emf/2003/XMLType#decimal http://www.eclipse.org/emf/2003/XMLType#double")
datatype DecimalPrimitive : java.lang.Object;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="DefinitionResourceTypes", kind="elementOnly")
class DefinitionResourceTypes extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr DefinitionResourceTypesEnum value;
}

@ExtendedMetaData(name="DefinitionResourceTypesEnum")
enum DefinitionResourceTypesEnum {

	@GenModel(documentation="ActivityDefinition")
	ActivityDefinition = 0;

	@GenModel(documentation="ChargeItemDefinition")
	ChargeItemDefinition = 1;

	@GenModel(documentation="ClinicalUseDefinition")
	ClinicalUseDefinition = 2;

	@GenModel(documentation="EventDefinition")
	EventDefinition = 3;

	@GenModel(documentation="Measure")
	Measure = 4;

	@GenModel(documentation="MessageDefinition")
	MessageDefinition = 5;

	@GenModel(documentation="ObservationDefinition")
	ObservationDefinition = 6;

	@GenModel(documentation="OperationDefinition")
	OperationDefinition = 7;

	@GenModel(documentation="PlanDefinition")
	PlanDefinition = 8;

	@GenModel(documentation="Questionnaire")
	Questionnaire = 9;

	@GenModel(documentation="Requirements")
	Requirements = 10;

	@GenModel(documentation="SubscriptionTopic")
	SubscriptionTopic = 11;

	@GenModel(documentation="TestPlan")
	TestPlan = 12;

	@GenModel(documentation="TestScript")
	TestScript = 13;
}

@ExtendedMetaData(name="DefinitionResourceTypesEnum:Object", baseType="DefinitionResourceTypesEnum")
datatype DefinitionResourceTypesEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, gaps in care, etc.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="DetectedIssue", kind="elementOnly")
class DetectedIssue extends DomainResource {

	@GenModel(documentation="Business identifier associated with the detected issue record.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Indicates the status of the detected issue.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val DetectedIssueStatus[1] status;

	@GenModel(documentation="A code that classifies the general type of detected issue.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] category;

	@GenModel(documentation="Identifies the specific type of issue identified.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@GenModel(documentation="Indicates the degree of importance associated with the identified issue based on the potential impact on the patient.")
	@ExtendedMetaData(kind="element", name="severity", namespace="##targetNamespace")
	!resolve val DetectedIssueSeverity severity;

	@GenModel(documentation="Indicates the subject whose record the detected issue is associated with.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference subject;

	@GenModel(documentation="The encounter during which this issue was detected.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@ExtendedMetaData(kind="element", name="identifiedDateTime", namespace="##targetNamespace")
	!resolve val DateTime identifiedDateTime;

	@ExtendedMetaData(kind="element", name="identifiedPeriod", namespace="##targetNamespace")
	!resolve val Period identifiedPeriod;

	@GenModel(documentation="Individual or device responsible for the issue being raised.  For example, a decision support application or a pharmacist conducting a medication review.")
	@ExtendedMetaData(kind="element", name="author", namespace="##targetNamespace")
	!resolve val Reference author;

	@GenModel(documentation="Indicates the resource representing the current activity or proposed activity that is potentially problematic.")
	@ExtendedMetaData(kind="element", name="implicated", namespace="##targetNamespace")
	!resolve val Reference[*] implicated;

	@GenModel(documentation="Supporting evidence or manifestations that provide the basis for identifying the detected issue such as a GuidanceResponse or MeasureReport.")
	@ExtendedMetaData(kind="element", name="evidence", namespace="##targetNamespace")
	!resolve val DetectedIssueEvidence[*] evidence;

	@GenModel(documentation="A textual explanation of the detected issue.")
	@ExtendedMetaData(kind="element", name="detail", namespace="##targetNamespace")
	!resolve val Markdown detail;

	@GenModel(documentation="The literature, knowledge-base or similar reference that describes the propensity for the detected issue identified.")
	@ExtendedMetaData(kind="element", name="reference", namespace="##targetNamespace")
	!resolve val Uri reference;

	@GenModel(documentation="Indicates an action that has been taken or is committed to reduce or eliminate the likelihood of the risk identified by the detected issue from manifesting.  Can also reflect an observation of known mitigating factors that may reduce/eliminate the need for any action.")
	@ExtendedMetaData(kind="element", name="mitigation", namespace="##targetNamespace")
	!resolve val DetectedIssueMitigation[*] mitigation;
}

@GenModel(documentation="Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, gaps in care, etc.")
@ExtendedMetaData(name="DetectedIssue.Evidence", kind="elementOnly")
class DetectedIssueEvidence extends BackboneElement {

	@GenModel(documentation="A manifestation that led to the recording of this detected issue.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] code;

	@GenModel(documentation="Links to resources that constitute evidence for the detected issue such as a GuidanceResponse or MeasureReport.")
	@ExtendedMetaData(kind="element", name="detail", namespace="##targetNamespace")
	!resolve val Reference[*] detail;
}

@GenModel(documentation="Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, gaps in care, etc.")
@ExtendedMetaData(name="DetectedIssue.Mitigation", kind="elementOnly")
class DetectedIssueMitigation extends BackboneElement {

	@GenModel(documentation="Describes the action that was taken or the observation that was made that reduces/eliminates the risk associated with the identified issue.")
	@ExtendedMetaData(kind="element", name="action", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] action;

	@GenModel(documentation="Indicates when the mitigating action was documented.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="Identifies the practitioner who determined the mitigation and takes responsibility for the mitigation step occurring.")
	@ExtendedMetaData(kind="element", name="author", namespace="##targetNamespace")
	!resolve val Reference author;

	@GenModel(documentation="Clinicians may add additional notes or justifications about the mitigation action. For example, patient can have this drug because they have had it before without any issues. Multiple justifications may be provided.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="DetectedIssueSeverity", kind="elementOnly")
class DetectedIssueSeverity extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr DetectedIssueSeverityEnum value;
}

@ExtendedMetaData(name="DetectedIssueSeverityEnum")
enum DetectedIssueSeverityEnum {

	@GenModel(documentation="High")
	high = 0;

	@GenModel(documentation="Moderate")
	moderate = 1;

	@GenModel(documentation="Low")
	low = 2;
}

@ExtendedMetaData(name="DetectedIssueSeverityEnum:Object", baseType="DetectedIssueSeverityEnum")
datatype DetectedIssueSeverityEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="DetectedIssueStatus", kind="elementOnly")
class DetectedIssueStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr DetectedIssueStatusEnum value;
}

@ExtendedMetaData(name="DetectedIssueStatusEnum")
enum DetectedIssueStatusEnum {

	@GenModel(documentation="Preliminary")
	preliminary = 0;

	@GenModel(documentation="Final")
	final = 1;

	@GenModel(documentation="Entered in Error")
	enteredInError = 2;

	@GenModel(documentation="Mitigated")
	mitigated = 3;
}

@ExtendedMetaData(name="DetectedIssueStatusEnum:Object", baseType="DetectedIssueStatusEnum")
datatype DetectedIssueStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Device", kind="elementOnly")
class Device extends DomainResource {

	@GenModel(documentation="Unique instance identifiers assigned to a device by manufacturers other organizations or owners.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The name used to display by default when the device is referenced. Based on intent of use by the resource creator, this may reflect one of the names in Device.name, or may be another simple name.")
	@ExtendedMetaData(kind="element", name="displayName", namespace="##targetNamespace")
	!resolve val String displayName;

	@GenModel(documentation="The reference to the definition for the device.")
	@ExtendedMetaData(kind="element", name="definition", namespace="##targetNamespace")
	!resolve val CodeableReference definition;

	@GenModel(documentation="Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.")
	@ExtendedMetaData(kind="element", name="udiCarrier", namespace="##targetNamespace")
	!resolve val DeviceUdiCarrier[*] udiCarrier;

	@GenModel(documentation="The Device record status. This is not the status of the device like availability.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val FHIRDeviceStatus status;

	@GenModel(documentation="The availability of the device.")
	@ExtendedMetaData(kind="element", name="availabilityStatus", namespace="##targetNamespace")
	!resolve val CodeableConcept availabilityStatus;

	@GenModel(documentation="An identifier that supports traceability to the event during which material in this product from one or more biological entities was obtained or pooled.")
	@ExtendedMetaData(kind="element", name="biologicalSourceEvent", namespace="##targetNamespace")
	!resolve val Identifier biologicalSourceEvent;

	@GenModel(documentation="A name of the manufacturer or entity legally responsible for the device.")
	@ExtendedMetaData(kind="element", name="manufacturer", namespace="##targetNamespace")
	!resolve val String manufacturer;

	@GenModel(documentation="The date and time when the device was manufactured.")
	@ExtendedMetaData(kind="element", name="manufactureDate", namespace="##targetNamespace")
	!resolve val DateTime manufactureDate;

	@GenModel(documentation="The date and time beyond which this device is no longer valid or should not be used (if applicable).")
	@ExtendedMetaData(kind="element", name="expirationDate", namespace="##targetNamespace")
	!resolve val DateTime expirationDate;

	@GenModel(documentation="Lot number assigned by the manufacturer.")
	@ExtendedMetaData(kind="element", name="lotNumber", namespace="##targetNamespace")
	!resolve val String lotNumber;

	@GenModel(documentation="The serial number assigned by the organization when the device was manufactured.")
	@ExtendedMetaData(kind="element", name="serialNumber", namespace="##targetNamespace")
	!resolve val String serialNumber;

	@GenModel(documentation="This represents the manufacturer's name of the device as provided by the device, from a UDI label, or by a person describing the Device.  This typically would be used when a person provides the name(s) or when the device represents one of the names available from DeviceDefinition.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val DeviceName[*] name;

	@GenModel(documentation="The manufacturer's model number for the device.")
	@ExtendedMetaData(kind="element", name="modelNumber", namespace="##targetNamespace")
	!resolve val String modelNumber;

	@GenModel(documentation="The part number or catalog number of the device.")
	@ExtendedMetaData(kind="element", name="partNumber", namespace="##targetNamespace")
	!resolve val String partNumber;

	@GenModel(documentation="Devices may be associated with one or more categories.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] category;

	@GenModel(documentation="The kind or type of device. A device instance may have more than one type - in which case those are the types that apply to the specific instance of the device.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] type;

	@GenModel(documentation="The actual design of the device or software version running on the device.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val DeviceVersion[*] version;

	@GenModel(documentation="Identifies the standards, specifications, or formal guidances for the capabilities supported by the device. The device may be certified as conformant to these specifications e.g., communication, performance, process, measurement, or specialization standards.")
	@ExtendedMetaData(kind="element", name="conformsTo", namespace="##targetNamespace")
	!resolve val DeviceConformsTo[*] conformsTo;

	@GenModel(documentation="Static or essentially fixed characteristics or features of the device (e.g., time or timing attributes, resolution, accuracy, intended use or instructions for use, and physical attributes) that are not otherwise captured in more specific attributes.")
	@ExtendedMetaData(kind="element", name="property", namespace="##targetNamespace")
	!resolve val DeviceProperty[*] property;

	@GenModel(documentation="The designated condition for performing a task with the device.")
	@ExtendedMetaData(kind="element", name="mode", namespace="##targetNamespace")
	!resolve val CodeableConcept mode;

	@GenModel(documentation="The series of occurrences that repeats during the operation of the device.")
	@ExtendedMetaData(kind="element", name="cycle", namespace="##targetNamespace")
	!resolve val Count cycle;

	@GenModel(documentation="A measurement of time during the device's operation (e.g., days, hours, mins, etc.).")
	@ExtendedMetaData(kind="element", name="duration", namespace="##targetNamespace")
	!resolve val Duration duration;

	@GenModel(documentation="An organization that is responsible for the provision and ongoing maintenance of the device.")
	@ExtendedMetaData(kind="element", name="owner", namespace="##targetNamespace")
	!resolve val Reference owner;

	@GenModel(documentation="Contact details for an organization or a particular human that is responsible for the device.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactPoint[*] contact;

	@GenModel(documentation="The place where the device can be found.")
	@ExtendedMetaData(kind="element", name="location", namespace="##targetNamespace")
	!resolve val Reference location;

	@GenModel(documentation="A network address on which the device may be contacted directly.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri url;

	@GenModel(documentation="Technical endpoints providing access to services provided by the device defined at this resource.")
	@ExtendedMetaData(kind="element", name="endpoint", namespace="##targetNamespace")
	!resolve val Reference[*] endpoint;

	@GenModel(documentation="The linked device acting as a communication controller, data collector, translator, or concentrator for the current device (e.g., mobile phone application that relays a blood pressure device's data).")
	@ExtendedMetaData(kind="element", name="gateway", namespace="##targetNamespace")
	!resolve val CodeableReference[*] gateway;

	@GenModel(documentation="Descriptive information, usage information or implantation information that is not captured in an existing element.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="Provides additional safety characteristics about a medical device.  For example devices containing latex.")
	@ExtendedMetaData(kind="element", name="safety", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] safety;

	@GenModel(documentation="The higher level or encompassing device that this device is a logical part of.")
	@ExtendedMetaData(kind="element", name="parent", namespace="##targetNamespace")
	!resolve val Reference parent;
}

@GenModel(documentation="A record of association or dissociation of a device with a patient.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="DeviceAssociation", kind="elementOnly")
class DeviceAssociation extends DomainResource {

	@GenModel(documentation="Instance identifier.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Reference to the devices associated with the patient or group.")
	@ExtendedMetaData(kind="element", name="device", namespace="##targetNamespace")
	!resolve val Reference[1] device;

	@GenModel(documentation="Describes the relationship between the device and subject.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] category;

	@GenModel(documentation="Indicates the state of the Device association.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] status;

	@GenModel(documentation="The reasons given for the current association status.")
	@ExtendedMetaData(kind="element", name="statusReason", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] statusReason;

	@GenModel(documentation="The individual, group of individuals or device that the device is on or associated with.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference subject;

	@GenModel(documentation="Current anatomical location of the device in/on subject.")
	@ExtendedMetaData(kind="element", name="bodyStructure", namespace="##targetNamespace")
	!resolve val Reference bodyStructure;

	@GenModel(documentation="Begin and end dates and times for the device association.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;

	@GenModel(documentation="The details about the device when it is in use to describe its operation.")
	@ExtendedMetaData(kind="element", name="operation", namespace="##targetNamespace")
	!resolve val DeviceAssociationOperation[*] operation;
}

@GenModel(documentation="A record of association or dissociation of a device with a patient.")
@ExtendedMetaData(name="DeviceAssociation.Operation", kind="elementOnly")
class DeviceAssociationOperation extends BackboneElement {

	@GenModel(documentation="Device operational condition corresponding to the association.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] status;

	@GenModel(documentation="The individual performing the action enabled by the device.")
	@ExtendedMetaData(kind="element", name="operator", namespace="##targetNamespace")
	!resolve val Reference[*] operator;

	@GenModel(documentation="Begin and end dates and times for the device's operation.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;
}

@GenModel(documentation="A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.")
@ExtendedMetaData(name="Device.ConformsTo", kind="elementOnly")
class DeviceConformsTo extends BackboneElement {

	@GenModel(documentation="Describes the type of the standard, specification, or formal guidance.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept category;

	@GenModel(documentation="Code that identifies the specific standard, specification, protocol, formal guidance, regulation, legislation, or certification scheme to which the device adheres.")
	@ExtendedMetaData(kind="element", name="specification", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] specification;

	@GenModel(documentation="Identifies the specific form or variant of the standard, specification, or formal guidance. This may be a 'version number', release, document edition, publication year, or other label.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="DeviceCorrectiveActionScope", kind="elementOnly")
class DeviceCorrectiveActionScope extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr DeviceCorrectiveActionScopeEnum value;
}

@ExtendedMetaData(name="DeviceCorrectiveActionScopeEnum")
enum DeviceCorrectiveActionScopeEnum {

	@GenModel(documentation="Model")
	model = 0;

	@GenModel(documentation="Lot Numbers")
	lotNumbers = 1;

	@GenModel(documentation="Serial Numbers")
	serialNumbers = 2;
}

@ExtendedMetaData(name="DeviceCorrectiveActionScopeEnum:Object", baseType="DeviceCorrectiveActionScopeEnum")
datatype DeviceCorrectiveActionScopeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="The characteristics, operational status and capabilities of a medical-related component of a medical device.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="DeviceDefinition", kind="elementOnly")
class DeviceDefinition extends DomainResource {

	@GenModel(documentation="Additional information to describe the device.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="Unique instance identifiers assigned to a device by the software, manufacturers, other organizations or owners. For example: handle ID. The identifier is typically valued if the udiDeviceIdentifier, partNumber or modelNumber is not valued and represents a different type of identifier.  However, it is permissible to still include those identifiers in DeviceDefinition.identifier with the appropriate identifier.type.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.")
	@ExtendedMetaData(kind="element", name="udiDeviceIdentifier", namespace="##targetNamespace")
	!resolve val DeviceDefinitionUdiDeviceIdentifier[*] udiDeviceIdentifier;

	@GenModel(documentation="Identifier associated with the regulatory documentation (certificates, technical documentation, post-market surveillance documentation and reports) of a set of device models sharing the same intended purpose, risk class and essential design and manufacturing characteristics. One example is the Basic UDI-DI in Europe.")
	@ExtendedMetaData(kind="element", name="regulatoryIdentifier", namespace="##targetNamespace")
	!resolve val DeviceDefinitionRegulatoryIdentifier[*] regulatoryIdentifier;

	@GenModel(documentation="The part number or catalog number of the device.")
	@ExtendedMetaData(kind="element", name="partNumber", namespace="##targetNamespace")
	!resolve val String partNumber;

	@GenModel(documentation="A name of the manufacturer  or legal representative e.g. labeler. Whether this is the actual manufacturer or the labeler or responsible depends on implementation and jurisdiction.")
	@ExtendedMetaData(kind="element", name="manufacturer", namespace="##targetNamespace")
	!resolve val Reference manufacturer;

	@GenModel(documentation="The name or names of the device as given by the manufacturer.")
	@ExtendedMetaData(kind="element", name="deviceName", namespace="##targetNamespace")
	!resolve val DeviceDefinitionDeviceName[*] deviceName;

	@GenModel(documentation="The model number for the device for example as defined by the manufacturer or labeler, or other agency.")
	@ExtendedMetaData(kind="element", name="modelNumber", namespace="##targetNamespace")
	!resolve val String modelNumber;

	@GenModel(documentation="What kind of device or device system this is.")
	@ExtendedMetaData(kind="element", name="classification", namespace="##targetNamespace")
	!resolve val DeviceDefinitionClassification[*] classification;

	@GenModel(documentation="Identifies the standards, specifications, or formal guidances for the capabilities supported by the device. The device may be certified as conformant to these specifications e.g., communication, performance, process, measurement, or specialization standards.")
	@ExtendedMetaData(kind="element", name="conformsTo", namespace="##targetNamespace")
	!resolve val DeviceDefinitionConformsTo[*] conformsTo;

	@GenModel(documentation="A device that is part (for example a component) of the present device.")
	@ExtendedMetaData(kind="element", name="hasPart", namespace="##targetNamespace")
	!resolve val DeviceDefinitionHasPart[*] hasPart;

	@GenModel(documentation="Information about the packaging of the device, i.e. how the device is packaged.")
	@ExtendedMetaData(kind="element", name="packaging", namespace="##targetNamespace")
	!resolve val DeviceDefinitionPackaging[*] packaging;

	@GenModel(documentation="The version of the device or software.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val DeviceDefinitionVersion[*] version;

	@GenModel(documentation="Safety characteristics of the device.")
	@ExtendedMetaData(kind="element", name="safety", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] safety;

	@GenModel(documentation="Shelf Life and storage information.")
	@ExtendedMetaData(kind="element", name="shelfLifeStorage", namespace="##targetNamespace")
	!resolve val ProductShelfLife[*] shelfLifeStorage;

	@GenModel(documentation="Language code for the human-readable text strings produced by the device (all supported).")
	@ExtendedMetaData(kind="element", name="languageCode", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] languageCode;

	@GenModel(documentation="Static or essentially fixed characteristics or features of this kind of device that are otherwise not captured in more specific attributes, e.g., time or timing attributes, resolution, accuracy, and physical attributes.")
	@ExtendedMetaData(kind="element", name="property", namespace="##targetNamespace")
	!resolve val DeviceDefinitionProperty[*] property;

	@GenModel(documentation="An organization that is responsible for the provision and ongoing maintenance of the device.")
	@ExtendedMetaData(kind="element", name="owner", namespace="##targetNamespace")
	!resolve val Reference owner;

	@GenModel(documentation="Contact details for an organization or a particular human that is responsible for the device.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactPoint[*] contact;

	@GenModel(documentation="An associated device, attached to, used with, communicating with or linking a previous or new device model to the focal device.")
	@ExtendedMetaData(kind="element", name="link", namespace="##targetNamespace")
	!resolve val DeviceDefinitionLink[*] link;

	@GenModel(documentation="Descriptive information, usage information or implantation information that is not captured in an existing element.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="A substance used to create the material(s) of which the device is made.")
	@ExtendedMetaData(kind="element", name="material", namespace="##targetNamespace")
	!resolve val DeviceDefinitionMaterial[*] material;

	@GenModel(documentation="Indicates the production identifier(s) that are expected to appear in the UDI carrier on the device label.")
	@ExtendedMetaData(kind="element", name="productionIdentifierInUDI", namespace="##targetNamespace")
	!resolve val DeviceProductionIdentifierInUDI[*] productionIdentifierInUDI;

	@GenModel(documentation="Information aimed at providing directions for the usage of this model of device.")
	@ExtendedMetaData(kind="element", name="guideline", namespace="##targetNamespace")
	!resolve val DeviceDefinitionGuideline guideline;

	@GenModel(documentation="Tracking of latest field safety corrective action.")
	@ExtendedMetaData(kind="element", name="correctiveAction", namespace="##targetNamespace")
	!resolve val DeviceDefinitionCorrectiveAction correctiveAction;

	@GenModel(documentation="Billing code or reference associated with the device.")
	@ExtendedMetaData(kind="element", name="chargeItem", namespace="##targetNamespace")
	!resolve val DeviceDefinitionChargeItem[*] chargeItem;
}

@GenModel(documentation="The characteristics, operational status and capabilities of a medical-related component of a medical device.")
@ExtendedMetaData(name="DeviceDefinition.ChargeItem", kind="elementOnly")
class DeviceDefinitionChargeItem extends BackboneElement {

	@GenModel(documentation="The code or reference for the charge item.")
	@ExtendedMetaData(kind="element", name="chargeItemCode", namespace="##targetNamespace")
	!resolve val CodeableReference[1] chargeItemCode;

	@GenModel(documentation="Coefficient applicable to the billing code.")
	@ExtendedMetaData(kind="element", name="count", namespace="##targetNamespace")
	!resolve val Quantity[1] count;

	@GenModel(documentation="A specific time period in which this charge item applies.")
	@ExtendedMetaData(kind="element", name="effectivePeriod", namespace="##targetNamespace")
	!resolve val Period effectivePeriod;

	@GenModel(documentation="The context to which this charge item applies.")
	@ExtendedMetaData(kind="element", name="useContext", namespace="##targetNamespace")
	!resolve val UsageContext[*] useContext;
}

@GenModel(documentation="The characteristics, operational status and capabilities of a medical-related component of a medical device.")
@ExtendedMetaData(name="DeviceDefinition.Classification", kind="elementOnly")
class DeviceDefinitionClassification extends BackboneElement {

	@GenModel(documentation="A classification or risk class of the device model.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@GenModel(documentation="Further information qualifying this classification of the device model.")
	@ExtendedMetaData(kind="element", name="justification", namespace="##targetNamespace")
	!resolve val RelatedArtifact[*] justification;
}

@GenModel(documentation="The characteristics, operational status and capabilities of a medical-related component of a medical device.")
@ExtendedMetaData(name="DeviceDefinition.ConformsTo", kind="elementOnly")
class DeviceDefinitionConformsTo extends BackboneElement {

	@GenModel(documentation="Describes the type of the standard, specification, or formal guidance.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept category;

	@GenModel(documentation="Code that identifies the specific standard, specification, protocol, formal guidance, regulation, legislation, or certification scheme to which the device adheres.")
	@ExtendedMetaData(kind="element", name="specification", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] specification;

	@GenModel(documentation="Identifies the specific form or variant of the standard, specification, or formal guidance. This may be a 'version number', release, document edition, publication year, or other label.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String[*] version;

	@GenModel(documentation="Standard, regulation, certification, or guidance website, document, or other publication, or similar, supporting the conformance.")
	@ExtendedMetaData(kind="element", name="source", namespace="##targetNamespace")
	!resolve val RelatedArtifact[*] source;
}

@GenModel(documentation="The characteristics, operational status and capabilities of a medical-related component of a medical device.")
@ExtendedMetaData(name="DeviceDefinition.CorrectiveAction", kind="elementOnly")
class DeviceDefinitionCorrectiveAction extends BackboneElement {

	@GenModel(documentation="Whether the last corrective action known for this device was a recall.")
	@ExtendedMetaData(kind="element", name="recall", namespace="##targetNamespace")
	!resolve val Boolean[1] recall;

	@GenModel(documentation="The scope of the corrective action - whether the action targeted all units of a given device model, or only a specific set of batches identified by lot numbers, or individually identified devices identified by the serial name.")
	@ExtendedMetaData(kind="element", name="scope", namespace="##targetNamespace")
	!resolve val DeviceCorrectiveActionScope scope;

	@GenModel(documentation="Start and end dates of the  corrective action.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period[1] period;
}

@GenModel(documentation="The characteristics, operational status and capabilities of a medical-related component of a medical device.")
@ExtendedMetaData(name="DeviceDefinition.DeviceName", kind="elementOnly")
class DeviceDefinitionDeviceName extends BackboneElement {

	@GenModel(documentation="A human-friendly name that is used to refer to the device - depending on the type, it can be the brand name, the common name or alias, or other.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String[1] name;

	@GenModel(documentation="The type of deviceName.
RegisteredName | UserFriendlyName | PatientReportedName.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val DeviceNameType[1] type;
}

@GenModel(documentation="The characteristics, operational status and capabilities of a medical-related component of a medical device.")
@ExtendedMetaData(name="DeviceDefinition.Distributor", kind="elementOnly")
class DeviceDefinitionDistributor extends BackboneElement {

	@GenModel(documentation="Distributor's human-readable name.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="Distributor as an Organization resource.")
	@ExtendedMetaData(kind="element", name="organizationReference", namespace="##targetNamespace")
	!resolve val Reference[*] organizationReference;
}

@GenModel(documentation="The characteristics, operational status and capabilities of a medical-related component of a medical device.")
@ExtendedMetaData(name="DeviceDefinition.Guideline", kind="elementOnly")
class DeviceDefinitionGuideline extends BackboneElement {

	@GenModel(documentation="The circumstances that form the setting for using the device.")
	@ExtendedMetaData(kind="element", name="useContext", namespace="##targetNamespace")
	!resolve val UsageContext[*] useContext;

	@GenModel(documentation="Detailed written and visual directions for the user on how to use the device.")
	@ExtendedMetaData(kind="element", name="usageInstruction", namespace="##targetNamespace")
	!resolve val Markdown usageInstruction;

	@GenModel(documentation="A source of information or reference for this guideline.")
	@ExtendedMetaData(kind="element", name="relatedArtifact", namespace="##targetNamespace")
	!resolve val RelatedArtifact[*] relatedArtifact;

	@GenModel(documentation="A clinical condition for which the device was designed to be used.")
	@ExtendedMetaData(kind="element", name="indication", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] indication;

	@GenModel(documentation="A specific situation when a device should not be used because it may cause harm.")
	@ExtendedMetaData(kind="element", name="contraindication", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] contraindication;

	@GenModel(documentation="Specific hazard alert information that a user needs to know before using the device.")
	@ExtendedMetaData(kind="element", name="warning", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] warning;

	@GenModel(documentation="A description of the general purpose or medical use of the device or its function.")
	@ExtendedMetaData(kind="element", name="intendedUse", namespace="##targetNamespace")
	!resolve val String intendedUse;
}

@GenModel(documentation="The characteristics, operational status and capabilities of a medical-related component of a medical device.")
@ExtendedMetaData(name="DeviceDefinition.HasPart", kind="elementOnly")
class DeviceDefinitionHasPart extends BackboneElement {

	@GenModel(documentation="Reference to the device that is part of the current device.")
	@ExtendedMetaData(kind="element", name="reference", namespace="##targetNamespace")
	!resolve val Reference[1] reference;

	@GenModel(documentation="Number of instances of the component device in the current device.")
	@ExtendedMetaData(kind="element", name="count", namespace="##targetNamespace")
	!resolve val Integer count;
}

@GenModel(documentation="The characteristics, operational status and capabilities of a medical-related component of a medical device.")
@ExtendedMetaData(name="DeviceDefinition.Link", kind="elementOnly")
class DeviceDefinitionLink extends BackboneElement {

	@GenModel(documentation="The type indicates the relationship of the related device to the device instance.")
	@ExtendedMetaData(kind="element", name="relation", namespace="##targetNamespace")
	!resolve val Coding[1] relation;

	@GenModel(documentation="A reference to the linked device.")
	@ExtendedMetaData(kind="element", name="relatedDevice", namespace="##targetNamespace")
	!resolve val CodeableReference[1] relatedDevice;
}

@GenModel(documentation="The characteristics, operational status and capabilities of a medical-related component of a medical device.")
@ExtendedMetaData(name="DeviceDefinition.MarketDistribution", kind="elementOnly")
class DeviceDefinitionMarketDistribution extends BackboneElement {

	@GenModel(documentation="Begin and end dates for the commercial distribution of the device.")
	@ExtendedMetaData(kind="element", name="marketPeriod", namespace="##targetNamespace")
	!resolve val Period[1] marketPeriod;

	@GenModel(documentation="National state or territory to which the marketDistribution recers, typically where the device is commercialized.")
	@ExtendedMetaData(kind="element", name="subJurisdiction", namespace="##targetNamespace")
	!resolve val Uri[1] subJurisdiction;
}

@GenModel(documentation="The characteristics, operational status and capabilities of a medical-related component of a medical device.")
@ExtendedMetaData(name="DeviceDefinition.Material", kind="elementOnly")
class DeviceDefinitionMaterial extends BackboneElement {

	@GenModel(documentation="A substance that the device contains, may contain, or is made of - for example latex - to be used to determine patient compatibility. This is not intended to represent the composition of the device, only the clinically relevant materials.")
	@ExtendedMetaData(kind="element", name="substance", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] substance;

	@GenModel(documentation="Indicates an alternative material of the device.")
	@ExtendedMetaData(kind="element", name="alternate", namespace="##targetNamespace")
	!resolve val Boolean alternate;

	@GenModel(documentation="Whether the substance is a known or suspected allergen.")
	@ExtendedMetaData(kind="element", name="allergenicIndicator", namespace="##targetNamespace")
	!resolve val Boolean allergenicIndicator;
}

@GenModel(documentation="The characteristics, operational status and capabilities of a medical-related component of a medical device.")
@ExtendedMetaData(name="DeviceDefinition.Packaging", kind="elementOnly")
class DeviceDefinitionPackaging extends BackboneElement {

	@GenModel(documentation="The business identifier of the packaged medication.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier identifier;

	@GenModel(documentation="A code that defines the specific type of packaging.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="The number of items contained in the package (devices or sub-packages).")
	@ExtendedMetaData(kind="element", name="count", namespace="##targetNamespace")
	!resolve val Integer count;

	@GenModel(documentation="An organization that distributes the packaged device.")
	@ExtendedMetaData(kind="element", name="distributor", namespace="##targetNamespace")
	!resolve val DeviceDefinitionDistributor[*] distributor;

	@GenModel(documentation="Unique Device Identifier (UDI) Barcode string on the packaging.")
	@ExtendedMetaData(kind="element", name="udiDeviceIdentifier", namespace="##targetNamespace")
	!resolve val DeviceDefinitionUdiDeviceIdentifier[*] udiDeviceIdentifier;

	@GenModel(documentation="Allows packages within packages.")
	@ExtendedMetaData(kind="element", name="packaging", namespace="##targetNamespace")
	!resolve val DeviceDefinitionPackaging[*] packaging;
}

@GenModel(documentation="The characteristics, operational status and capabilities of a medical-related component of a medical device.")
@ExtendedMetaData(name="DeviceDefinition.Property", kind="elementOnly")
class DeviceDefinitionProperty extends BackboneElement {

	@GenModel(documentation="Code that specifies the property such as a resolution or color being represented.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept valueCodeableConcept;

	@ExtendedMetaData(kind="element", name="valueString", namespace="##targetNamespace")
	!resolve val String valueString;

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;

	@ExtendedMetaData(kind="element", name="valueInteger", namespace="##targetNamespace")
	!resolve val Integer valueInteger;

	@ExtendedMetaData(kind="element", name="valueRange", namespace="##targetNamespace")
	!resolve val Range valueRange;

	@ExtendedMetaData(kind="element", name="valueAttachment", namespace="##targetNamespace")
	!resolve val Attachment valueAttachment;
}

@GenModel(documentation="The characteristics, operational status and capabilities of a medical-related component of a medical device.")
@ExtendedMetaData(name="DeviceDefinition.RegulatoryIdentifier", kind="elementOnly")
class DeviceDefinitionRegulatoryIdentifier extends BackboneElement {

	@GenModel(documentation="The type of identifier itself.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val DeviceDefinitionRegulatoryIdentifierType[1] type;

	@GenModel(documentation="The identifier itself.")
	@ExtendedMetaData(kind="element", name="deviceIdentifier", namespace="##targetNamespace")
	!resolve val String[1] deviceIdentifier;

	@GenModel(documentation="The organization that issued this identifier.")
	@ExtendedMetaData(kind="element", name="issuer", namespace="##targetNamespace")
	!resolve val Uri[1] issuer;

	@GenModel(documentation="The jurisdiction to which the deviceIdentifier applies.")
	@ExtendedMetaData(kind="element", name="jurisdiction", namespace="##targetNamespace")
	!resolve val Uri[1] jurisdiction;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="DeviceDefinitionRegulatoryIdentifierType", kind="elementOnly")
class DeviceDefinitionRegulatoryIdentifierType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr DeviceDefinitionRegulatoryIdentifierTypeEnum value;
}

@ExtendedMetaData(name="DeviceDefinitionRegulatoryIdentifierTypeEnum")
enum DeviceDefinitionRegulatoryIdentifierTypeEnum {

	@GenModel(documentation="Basic")
	basic = 0;

	@GenModel(documentation="Master")
	master = 1;

	@GenModel(documentation="License")
	license = 2;
}

@ExtendedMetaData(name="DeviceDefinitionRegulatoryIdentifierTypeEnum:Object", baseType="DeviceDefinitionRegulatoryIdentifierTypeEnum")
datatype DeviceDefinitionRegulatoryIdentifierTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="The characteristics, operational status and capabilities of a medical-related component of a medical device.")
@ExtendedMetaData(name="DeviceDefinition.UdiDeviceIdentifier", kind="elementOnly")
class DeviceDefinitionUdiDeviceIdentifier extends BackboneElement {

	@GenModel(documentation="The identifier that is to be associated with every Device that references this DeviceDefintiion for the issuer and jurisdiction provided in the DeviceDefinition.udiDeviceIdentifier.")
	@ExtendedMetaData(kind="element", name="deviceIdentifier", namespace="##targetNamespace")
	!resolve val String[1] deviceIdentifier;

	@GenModel(documentation="The organization that assigns the identifier algorithm.")
	@ExtendedMetaData(kind="element", name="issuer", namespace="##targetNamespace")
	!resolve val Uri[1] issuer;

	@GenModel(documentation="The jurisdiction to which the deviceIdentifier applies.")
	@ExtendedMetaData(kind="element", name="jurisdiction", namespace="##targetNamespace")
	!resolve val Uri[1] jurisdiction;

	@GenModel(documentation="Indicates where and when the device is available on the market.")
	@ExtendedMetaData(kind="element", name="marketDistribution", namespace="##targetNamespace")
	!resolve val DeviceDefinitionMarketDistribution[*] marketDistribution;
}

@GenModel(documentation="The characteristics, operational status and capabilities of a medical-related component of a medical device.")
@ExtendedMetaData(name="DeviceDefinition.Version", kind="elementOnly")
class DeviceDefinitionVersion extends BackboneElement {

	@GenModel(documentation="The type of the device version, e.g. manufacturer, approved, internal.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="The hardware or software module of the device to which the version applies.")
	@ExtendedMetaData(kind="element", name="component", namespace="##targetNamespace")
	!resolve val Identifier component;

	@GenModel(documentation="The version text.")
	@ExtendedMetaData(kind="element", name="value", namespace="##targetNamespace")
	!resolve val String[1] value;
}

@GenModel(documentation="A record of dispensation of a device - i.e., assigning a device to a patient, or to a professional for their use.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="DeviceDispense", kind="elementOnly")
class DeviceDispense extends DomainResource {

	@GenModel(documentation="Business identifier for this dispensation.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The order or request that this dispense is fulfilling.")
	@ExtendedMetaData(kind="element", name="basedOn", namespace="##targetNamespace")
	!resolve val Reference[*] basedOn;

	@GenModel(documentation="The bigger event that this dispense is a part of.")
	@ExtendedMetaData(kind="element", name="partOf", namespace="##targetNamespace")
	!resolve val Reference[*] partOf;

	@GenModel(documentation="A code specifying the state of the set of dispense events.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val DeviceDispenseStatusCodes[1] status;

	@GenModel(documentation="Indicates the reason why a dispense was or was not performed.")
	@ExtendedMetaData(kind="element", name="statusReason", namespace="##targetNamespace")
	!resolve val CodeableReference statusReason;

	@GenModel(documentation="Indicates the type of device dispense.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] category;

	@GenModel(documentation="Identifies the device being dispensed. This is either a link to a resource representing the details of the device or a simple attribute carrying a code that identifies the device from a known list of devices.")
	@ExtendedMetaData(kind="element", name="device", namespace="##targetNamespace")
	!resolve val CodeableReference[1] device;

	@GenModel(documentation="A link to a resource representing the person to whom the device is intended.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference[1] subject;

	@GenModel(documentation="Identifies the person who picked up the device or the person or location where the device was delivered.  This may be a patient or their caregiver, but some cases exist where it can be a healthcare professional or a location.")
	@ExtendedMetaData(kind="element", name="receiver", namespace="##targetNamespace")
	!resolve val Reference receiver;

	@GenModel(documentation="The encounter that establishes the context for this event.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@GenModel(documentation="Additional information that supports the device being dispensed.")
	@ExtendedMetaData(kind="element", name="supportingInformation", namespace="##targetNamespace")
	!resolve val Reference[*] supportingInformation;

	@GenModel(documentation="Indicates who or what performed the event.")
	@ExtendedMetaData(kind="element", name="performer", namespace="##targetNamespace")
	!resolve val DeviceDispensePerformer[*] performer;

	@GenModel(documentation="The principal physical location where the dispense was performed.")
	@ExtendedMetaData(kind="element", name="location", namespace="##targetNamespace")
	!resolve val Reference location;

	@GenModel(documentation="Indicates the type of dispensing event that is performed.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="The number of devices that have been dispensed.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Quantity quantity;

	@GenModel(documentation="The time when the dispensed product was packaged and reviewed.")
	@ExtendedMetaData(kind="element", name="preparedDate", namespace="##targetNamespace")
	!resolve val DateTime preparedDate;

	@GenModel(documentation="The time the dispensed product was made available to the patient or their representative.")
	@ExtendedMetaData(kind="element", name="whenHandedOver", namespace="##targetNamespace")
	!resolve val DateTime whenHandedOver;

	@GenModel(documentation="Identification of the facility/location where the device was /should be shipped to, as part of the dispense process.")
	@ExtendedMetaData(kind="element", name="destination", namespace="##targetNamespace")
	!resolve val Reference destination;

	@GenModel(documentation="Extra information about the dispense that could not be conveyed in the other attributes.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="The full representation of the instructions.")
	@ExtendedMetaData(kind="element", name="usageInstruction", namespace="##targetNamespace")
	!resolve val Markdown usageInstruction;

	@GenModel(documentation="A summary of the events of interest that have occurred, such as when the dispense was verified.")
	@ExtendedMetaData(kind="element", name="eventHistory", namespace="##targetNamespace")
	!resolve val Reference[*] eventHistory;
}

@GenModel(documentation="A record of dispensation of a device - i.e., assigning a device to a patient, or to a professional for their use.")
@ExtendedMetaData(name="DeviceDispense.Performer", kind="elementOnly")
class DeviceDispensePerformer extends BackboneElement {

	@GenModel(documentation="Distinguishes the type of performer in the dispense.  For example, date enterer, packager, final checker.")
	@ExtendedMetaData(kind="element", name="function", namespace="##targetNamespace")
	!resolve val CodeableConcept function;

	@GenModel(documentation="The device, practitioner, etc. who performed the action.  It should be assumed that the actor is the dispenser of the device.")
	@ExtendedMetaData(kind="element", name="actor", namespace="##targetNamespace")
	!resolve val Reference[1] actor;
}

@GenModel(documentation="A coded concept specifying the state of the dispense event.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="DeviceDispenseStatusCodes", kind="elementOnly")
class DeviceDispenseStatusCodes extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr DeviceDispenseStatusCodesEnum value;
}

@ExtendedMetaData(name="DeviceDispenseStatusCodesEnum")
enum DeviceDispenseStatusCodesEnum {

	@GenModel(documentation="Preparation")
	preparation = 0;

	@GenModel(documentation="In Progress")
	inProgress = 1;

	@GenModel(documentation="Cancelled")
	cancelled = 2;

	@GenModel(documentation="On Hold")
	onHold = 3;

	@GenModel(documentation="Completed")
	completed = 4;

	@GenModel(documentation="Entered in Error")
	enteredInError = 5;

	@GenModel(documentation="Stopped")
	stopped = 6;

	@GenModel(documentation="Declined")
	declined = 7;

	@GenModel(documentation="Unknown")
	unknown = 8;
}

@ExtendedMetaData(name="DeviceDispenseStatusCodesEnum:Object", baseType="DeviceDispenseStatusCodesEnum")
datatype DeviceDispenseStatusCodesEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="Describes a measurement, calculation or setting capability of a device.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="DeviceMetric", kind="elementOnly")
class DeviceMetric extends DomainResource {

	@GenModel(documentation="Instance identifiers assigned to a device, by the device or gateway software, manufacturers, other organizations or owners. For example, handle ID.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Describes the type of the metric. For example: Heart Rate, PEEP Setting, etc.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@GenModel(documentation="Describes the unit that an observed value determined for this metric will have. For example: Percent, Seconds, etc.")
	@ExtendedMetaData(kind="element", name="unit", namespace="##targetNamespace")
	!resolve val CodeableConcept unit;

	@GenModel(documentation="Describes the link to the Device.  This is also known as a channel device.")
	@ExtendedMetaData(kind="element", name="device", namespace="##targetNamespace")
	!resolve val Reference[1] device;

	@GenModel(documentation="Indicates current operational state of the device. For example: On, Off, Standby, etc.")
	@ExtendedMetaData(kind="element", name="operationalStatus", namespace="##targetNamespace")
	!resolve val DeviceMetricOperationalStatus operationalStatus;

	@GenModel(documentation="The preferred color associated with the metric (e.g., display color). This is often used to aid clinicians to track and identify parameter types by color. In practice, consider a Patient Monitor that has ECG/HR and Pleth; the metrics are displayed in different characteristic colors, such as HR in blue, BP in green, and PR and SpO2 in magenta.")
	@ExtendedMetaData(kind="element", name="color", namespace="##targetNamespace")
	!resolve val ColorCodesOrRGB color;

	@GenModel(documentation="Indicates the category of the observation generation process. A DeviceMetric can be for example a setting, measurement, or calculation.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val DeviceMetricCategory[1] category;

	@GenModel(documentation="The frequency at which the metric is taken or recorded. Devices measure metrics at a wide range of frequencies; for example, an ECG might sample measurements in the millisecond range, while an NIBP might trigger only once an hour. Less often, the measurementFrequency may be based on a unit other than time, such as distance (e.g. for a measuring wheel). The update period may be different than the measurement frequency, if the device does not update the published observed value with the same frequency as it was measured.")
	@ExtendedMetaData(kind="element", name="measurementFrequency", namespace="##targetNamespace")
	!resolve val Quantity measurementFrequency;

	@GenModel(documentation="Describes the calibrations that have been performed or that are required to be performed.")
	@ExtendedMetaData(kind="element", name="calibration", namespace="##targetNamespace")
	!resolve val DeviceMetricCalibration[*] calibration;
}

@GenModel(documentation="Describes a measurement, calculation or setting capability of a device.")
@ExtendedMetaData(name="DeviceMetric.Calibration", kind="elementOnly")
class DeviceMetricCalibration extends BackboneElement {

	@GenModel(documentation="Describes the type of the calibration method.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val DeviceMetricCalibrationType type;

	@GenModel(documentation="Describes the state of the calibration.")
	@ExtendedMetaData(kind="element", name="state", namespace="##targetNamespace")
	!resolve val DeviceMetricCalibrationState state;

	@GenModel(documentation="Describes the time last calibration has been performed.")
	@ExtendedMetaData(kind="element", name="time", namespace="##targetNamespace")
	!resolve val Instant time;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="DeviceMetricCalibrationState", kind="elementOnly")
class DeviceMetricCalibrationState extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr DeviceMetricCalibrationStateEnum value;
}

@ExtendedMetaData(name="DeviceMetricCalibrationStateEnum")
enum DeviceMetricCalibrationStateEnum {

	@GenModel(documentation="Not Calibrated")
	notCalibrated = 0;

	@GenModel(documentation="Calibration Required")
	calibrationRequired = 1;

	@GenModel(documentation="Calibrated")
	calibrated = 2;

	@GenModel(documentation="Unspecified")
	unspecified = 3;
}

@ExtendedMetaData(name="DeviceMetricCalibrationStateEnum:Object", baseType="DeviceMetricCalibrationStateEnum")
datatype DeviceMetricCalibrationStateEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="DeviceMetricCalibrationType", kind="elementOnly")
class DeviceMetricCalibrationType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr DeviceMetricCalibrationTypeEnum value;
}

@ExtendedMetaData(name="DeviceMetricCalibrationTypeEnum")
enum DeviceMetricCalibrationTypeEnum {

	@GenModel(documentation="Unspecified")
	unspecified = 0;

	@GenModel(documentation="Offset")
	offset = 1;

	@GenModel(documentation="Gain")
	gain = 2;

	@GenModel(documentation="Two Point")
	twoPoint = 3;
}

@ExtendedMetaData(name="DeviceMetricCalibrationTypeEnum:Object", baseType="DeviceMetricCalibrationTypeEnum")
datatype DeviceMetricCalibrationTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="DeviceMetricCategory", kind="elementOnly")
class DeviceMetricCategory extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr DeviceMetricCategoryEnum value;
}

@ExtendedMetaData(name="DeviceMetricCategoryEnum")
enum DeviceMetricCategoryEnum {

	@GenModel(documentation="Measurement")
	measurement = 0;

	@GenModel(documentation="Setting")
	setting = 1;

	@GenModel(documentation="Calculation")
	calculation = 2;

	@GenModel(documentation="Unspecified")
	unspecified = 3;
}

@ExtendedMetaData(name="DeviceMetricCategoryEnum:Object", baseType="DeviceMetricCategoryEnum")
datatype DeviceMetricCategoryEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="DeviceMetricOperationalStatus", kind="elementOnly")
class DeviceMetricOperationalStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr DeviceMetricOperationalStatusEnum value;
}

@ExtendedMetaData(name="DeviceMetricOperationalStatusEnum")
enum DeviceMetricOperationalStatusEnum {

	@GenModel(documentation="On")
	on = 0;

	@GenModel(documentation="Off")
	off = 1;

	@GenModel(documentation="Standby")
	standby = 2;

	@GenModel(documentation="Entered In Error")
	enteredInError = 3;
}

@ExtendedMetaData(name="DeviceMetricOperationalStatusEnum:Object", baseType="DeviceMetricOperationalStatusEnum")
datatype DeviceMetricOperationalStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.")
@ExtendedMetaData(name="Device.Name", kind="elementOnly")
class DeviceName extends BackboneElement {

	@GenModel(documentation="The actual name that identifies the device.")
	@ExtendedMetaData(kind="element", name="value", namespace="##targetNamespace")
	!resolve val String[1] value;

	@GenModel(documentation="Indicates the kind of name. RegisteredName | UserFriendlyName | PatientReportedName.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val DeviceNameType[1] type;

	@GenModel(documentation="Indicates the default or preferred name to be displayed.")
	@ExtendedMetaData(kind="element", name="display", namespace="##targetNamespace")
	!resolve val Boolean display;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="DeviceNameType", kind="elementOnly")
class DeviceNameType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr DeviceNameTypeEnum value;
}

@ExtendedMetaData(name="DeviceNameTypeEnum")
enum DeviceNameTypeEnum {

	@GenModel(documentation="Registered name")
	registeredName = 0;

	@GenModel(documentation="User Friendly name")
	userFriendlyName = 1;

	@GenModel(documentation="Patient Reported name")
	patientReportedName = 2;
}

@ExtendedMetaData(name="DeviceNameTypeEnum:Object", baseType="DeviceNameTypeEnum")
datatype DeviceNameTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="DeviceProductionIdentifierInUDI", kind="elementOnly")
class DeviceProductionIdentifierInUDI extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr DeviceProductionIdentifierInUDIEnum value;
}

@ExtendedMetaData(name="DeviceProductionIdentifierInUDIEnum")
enum DeviceProductionIdentifierInUDIEnum {

	@GenModel(documentation="Lot Number")
	lotNumber = 0;

	@GenModel(documentation="Manufactured date")
	manufacturedDate = 1;

	@GenModel(documentation="Serial Number")
	serialNumber = 2;

	@GenModel(documentation="Expiration date")
	expirationDate = 3;

	@GenModel(documentation="Biological source")
	biologicalSource = 4;

	@GenModel(documentation="Software Version")
	softwareVersion = 5;
}

@ExtendedMetaData(name="DeviceProductionIdentifierInUDIEnum:Object", baseType="DeviceProductionIdentifierInUDIEnum")
datatype DeviceProductionIdentifierInUDIEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.")
@ExtendedMetaData(name="Device.Property", kind="elementOnly")
class DeviceProperty extends BackboneElement {

	@GenModel(documentation="Code that specifies the property, such as resolution, color, size, being represented.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept valueCodeableConcept;

	@ExtendedMetaData(kind="element", name="valueString", namespace="##targetNamespace")
	!resolve val String valueString;

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;

	@ExtendedMetaData(kind="element", name="valueInteger", namespace="##targetNamespace")
	!resolve val Integer valueInteger;

	@ExtendedMetaData(kind="element", name="valueRange", namespace="##targetNamespace")
	!resolve val Range valueRange;

	@ExtendedMetaData(kind="element", name="valueAttachment", namespace="##targetNamespace")
	!resolve val Attachment valueAttachment;
}

@GenModel(documentation="Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="DeviceRequest", kind="elementOnly")
class DeviceRequest extends DomainResource {

	@GenModel(documentation="Identifiers assigned to this order by the orderer or by the receiver.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this DeviceRequest.")
	@ExtendedMetaData(kind="element", name="instantiatesCanonical", namespace="##targetNamespace")
	!resolve val Canonical[*] instantiatesCanonical;

	@GenModel(documentation="The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this DeviceRequest.")
	@ExtendedMetaData(kind="element", name="instantiatesUri", namespace="##targetNamespace")
	!resolve val Uri[*] instantiatesUri;

	@GenModel(documentation="Plan/proposal/order fulfilled by this request.")
	@ExtendedMetaData(kind="element", name="basedOn", namespace="##targetNamespace")
	!resolve val Reference[*] basedOn;

	@GenModel(documentation="The request takes the place of the referenced completed or terminated request(s).")
	@ExtendedMetaData(kind="element", name="replaces", namespace="##targetNamespace")
	!resolve val Reference[*] replaces;

	@GenModel(documentation="A shared identifier common to multiple independent Request instances that were activated/authorized more or less simultaneously by a single author.  The presence of the same identifier on each request ties those requests together and may have business ramifications in terms of reporting of results, billing, etc.  E.g. a requisition number shared by a set of lab tests ordered together, or a prescription number shared by all meds ordered at one time.")
	@ExtendedMetaData(kind="element", name="groupIdentifier", namespace="##targetNamespace")
	!resolve val Identifier groupIdentifier;

	@GenModel(documentation="The status of the request.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val RequestStatus status;

	@GenModel(documentation="Whether the request is a proposal, plan, an original order or a reflex order.")
	@ExtendedMetaData(kind="element", name="intent", namespace="##targetNamespace")
	!resolve val RequestIntent[1] intent;

	@GenModel(documentation="Indicates how quickly the request should be addressed with respect to other requests.")
	@ExtendedMetaData(kind="element", name="priority", namespace="##targetNamespace")
	!resolve val RequestPriority priority;

	@GenModel(documentation="If true, indicates that the provider is asking for the patient to either stop using or to not start using the specified device or category of devices. For example, the patient has undergone surgery and the provider is indicating that the patient should not wear contact lenses.")
	@ExtendedMetaData(kind="element", name="doNotPerform", namespace="##targetNamespace")
	!resolve val Boolean doNotPerform;

	@GenModel(documentation="The details of the device to be used.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableReference[1] code;

	@GenModel(documentation="The number of devices to be provided.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Integer quantity;

	@GenModel(documentation="Specific parameters for the ordered item.  For example, the prism value for lenses.")
	@ExtendedMetaData(kind="element", name="parameter", namespace="##targetNamespace")
	!resolve val DeviceRequestParameter[*] parameter;

	@GenModel(documentation="The patient who will use the device.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference[1] subject;

	@GenModel(documentation="An encounter that provides additional context in which this request is made.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@ExtendedMetaData(kind="element", name="occurrenceDateTime", namespace="##targetNamespace")
	!resolve val DateTime occurrenceDateTime;

	@ExtendedMetaData(kind="element", name="occurrencePeriod", namespace="##targetNamespace")
	!resolve val Period occurrencePeriod;

	@ExtendedMetaData(kind="element", name="occurrenceTiming", namespace="##targetNamespace")
	!resolve val Timing occurrenceTiming;

	@GenModel(documentation="When the request transitioned to being actionable.")
	@ExtendedMetaData(kind="element", name="authoredOn", namespace="##targetNamespace")
	!resolve val DateTime authoredOn;

	@GenModel(documentation="The individual or entity who initiated the request and has responsibility for its activation.")
	@ExtendedMetaData(kind="element", name="requester", namespace="##targetNamespace")
	!resolve val Reference requester;

	@GenModel(documentation="The desired individual or entity to provide the device to the subject of the request (e.g., patient, location).")
	@ExtendedMetaData(kind="element", name="performer", namespace="##targetNamespace")
	!resolve val CodeableReference performer;

	@GenModel(documentation="Reason or justification for the use of this device.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val CodeableReference[*] reason;

	@GenModel(documentation="This status is to indicate whether the request is a PRN or may be given as needed.")
	@ExtendedMetaData(kind="element", name="asNeeded", namespace="##targetNamespace")
	!resolve val Boolean asNeeded;

	@GenModel(documentation="The reason for using the device.")
	@ExtendedMetaData(kind="element", name="asNeededFor", namespace="##targetNamespace")
	!resolve val CodeableConcept asNeededFor;

	@GenModel(documentation="Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be required for delivering the requested service.")
	@ExtendedMetaData(kind="element", name="insurance", namespace="##targetNamespace")
	!resolve val Reference[*] insurance;

	@GenModel(documentation="Additional clinical information about the patient that may influence the request fulfilment.  For example, this may include where on the subject's body the device will be used (i.e. the target site).")
	@ExtendedMetaData(kind="element", name="supportingInfo", namespace="##targetNamespace")
	!resolve val Reference[*] supportingInfo;

	@GenModel(documentation="Details about this request that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="Key events in the history of the request.")
	@ExtendedMetaData(kind="element", name="relevantHistory", namespace="##targetNamespace")
	!resolve val Reference[*] relevantHistory;
}

@GenModel(documentation="Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker.")
@ExtendedMetaData(name="DeviceRequest.Parameter", kind="elementOnly")
class DeviceRequestParameter extends BackboneElement {

	@GenModel(documentation="A code or string that identifies the device detail being asserted.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@ExtendedMetaData(kind="element", name="valueCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept valueCodeableConcept;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueRange", namespace="##targetNamespace")
	!resolve val Range valueRange;

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;
}

@GenModel(documentation="A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.")
@ExtendedMetaData(name="Device.UdiCarrier", kind="elementOnly")
class DeviceUdiCarrier extends BackboneElement {

	@GenModel(documentation="The device identifier (DI) is a mandatory, fixed portion of a UDI that identifies the labeler and the specific version or model of a device.")
	@ExtendedMetaData(kind="element", name="deviceIdentifier", namespace="##targetNamespace")
	!resolve val String[1] deviceIdentifier;

	@GenModel(documentation="Organization that is charged with issuing UDIs for devices. For example, the US FDA issuers include: 
1) GS1: http://hl7.org/fhir/NamingSystem/gs1-di, 
2) HIBCC: http://hl7.org/fhir/NamingSystem/hibcc-diI, 
3) ICCBBA for blood containers: http://hl7.org/fhir/NamingSystem/iccbba-blood-di, 
4) ICCBA for other devices: http://hl7.org/fhir/NamingSystem/iccbba-other-di # Informationsstelle für Arzneispezialitäten (IFA GmbH) (EU only): http://hl7.org/fhir/NamingSystem/ifa-gmbh-di.")
	@ExtendedMetaData(kind="element", name="issuer", namespace="##targetNamespace")
	!resolve val Uri[1] issuer;

	@GenModel(documentation="The identity of the authoritative source for UDI generation within a jurisdiction. All UDIs are globally unique within a single namespace with the appropriate repository uri as the system. For example, UDIs of devices managed in the U.S. by the FDA, the value is http://hl7.org/fhir/NamingSystem/us-fda-udi or in the European Union by the European Commission http://hl7.org/fhir/NamingSystem/eu-ec-udi.")
	@ExtendedMetaData(kind="element", name="jurisdiction", namespace="##targetNamespace")
	!resolve val Uri jurisdiction;

	@GenModel(documentation="The full UDI carrier of the Automatic Identification and Data Capture (AIDC) technology representation of the barcode string as printed on the packaging of the device - e.g., a barcode or RFID.   Because of limitations on character sets in XML and the need to round-trip JSON data through XML, AIDC Formats *SHALL* be base64 encoded.")
	@ExtendedMetaData(kind="element", name="carrierAIDC", namespace="##targetNamespace")
	!resolve val Base64Binary carrierAIDC;

	@GenModel(documentation="The full UDI carrier as the human readable form (HRF) representation of the barcode string as printed on the packaging of the device.")
	@ExtendedMetaData(kind="element", name="carrierHRF", namespace="##targetNamespace")
	!resolve val String carrierHRF;

	@GenModel(documentation="A coded entry to indicate how the data was entered.")
	@ExtendedMetaData(kind="element", name="entryType", namespace="##targetNamespace")
	!resolve val UDIEntryType entryType;
}

@GenModel(documentation="A record of a device being used by a patient where the record is the result of a report from the patient or a clinician.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="DeviceUsage", kind="elementOnly")
class DeviceUsage extends DomainResource {

	@GenModel(documentation="An external identifier for this statement such as an IRI.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="A plan, proposal or order that is fulfilled in whole or in part by this DeviceUsage.")
	@ExtendedMetaData(kind="element", name="basedOn", namespace="##targetNamespace")
	!resolve val Reference[*] basedOn;

	@GenModel(documentation="A code representing the patient or other source's judgment about the state of the device used that this statement is about.  Generally this will be active or completed.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val DeviceUsageStatus[1] status;

	@GenModel(documentation="This attribute indicates a category for the statement - The device statement may be made in an inpatient or outpatient settting (inpatient | outpatient | community | patientspecified).")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] category;

	@GenModel(documentation="The patient who used the device.")
	@ExtendedMetaData(kind="element", name="patient", namespace="##targetNamespace")
	!resolve val Reference[1] patient;

	@GenModel(documentation="Allows linking the DeviceUsage to the underlying Request, or to other information that supports or is used to derive the DeviceUsage.")
	@ExtendedMetaData(kind="element", name="derivedFrom", namespace="##targetNamespace")
	!resolve val Reference[*] derivedFrom;

	@GenModel(documentation="The encounter or episode of care that establishes the context for this device use statement.")
	@ExtendedMetaData(kind="element", name="context", namespace="##targetNamespace")
	!resolve val Reference context;

	@ExtendedMetaData(kind="element", name="timingTiming", namespace="##targetNamespace")
	!resolve val Timing timingTiming;

	@ExtendedMetaData(kind="element", name="timingPeriod", namespace="##targetNamespace")
	!resolve val Period timingPeriod;

	@ExtendedMetaData(kind="element", name="timingDateTime", namespace="##targetNamespace")
	!resolve val DateTime timingDateTime;

	@GenModel(documentation="The time at which the statement was recorded by informationSource.")
	@ExtendedMetaData(kind="element", name="dateAsserted", namespace="##targetNamespace")
	!resolve val DateTime dateAsserted;

	@GenModel(documentation="The status of the device usage, for example always, sometimes, never. This is not the same as the status of the statement.")
	@ExtendedMetaData(kind="element", name="usageStatus", namespace="##targetNamespace")
	!resolve val CodeableConcept usageStatus;

	@GenModel(documentation="The reason for asserting the usage status - for example forgot, lost, stolen, broken.")
	@ExtendedMetaData(kind="element", name="usageReason", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] usageReason;

	@GenModel(documentation="This indicates how or if the device is being used.")
	@ExtendedMetaData(kind="element", name="adherence", namespace="##targetNamespace")
	!resolve val DeviceUsageAdherence adherence;

	@GenModel(documentation="Who reported the device was being used by the patient.")
	@ExtendedMetaData(kind="element", name="informationSource", namespace="##targetNamespace")
	!resolve val Reference informationSource;

	@GenModel(documentation="Code or Reference to device used.")
	@ExtendedMetaData(kind="element", name="device", namespace="##targetNamespace")
	!resolve val CodeableReference[1] device;

	@GenModel(documentation="Reason or justification for the use of the device. A coded concept, or another resource whose existence justifies this DeviceUsage.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val CodeableReference[*] reason;

	@GenModel(documentation="Indicates the anotomic location on the subject's body where the device was used ( i.e. the target).")
	@ExtendedMetaData(kind="element", name="bodySite", namespace="##targetNamespace")
	!resolve val CodeableReference bodySite;

	@GenModel(documentation="Details about the device statement that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;
}

@GenModel(documentation="A record of a device being used by a patient where the record is the result of a report from the patient or a clinician.")
@ExtendedMetaData(name="DeviceUsage.Adherence", kind="elementOnly")
class DeviceUsageAdherence extends BackboneElement {

	@GenModel(documentation="Type of adherence.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] code;

	@GenModel(documentation="Reason for adherence type.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val CodeableConcept[+] reason;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="DeviceUsageStatus", kind="elementOnly")
class DeviceUsageStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr DeviceUsageStatusEnum value;
}

@ExtendedMetaData(name="DeviceUsageStatusEnum")
enum DeviceUsageStatusEnum {

	@GenModel(documentation="Active")
	active = 0;

	@GenModel(documentation="Completed")
	completed = 1;

	@GenModel(documentation="Not done")
	notDone = 2;

	@GenModel(documentation="Entered in Error")
	enteredInError = 3;

	@GenModel(documentation="Intended")
	intended = 4;

	@GenModel(documentation="Stopped")
	stopped = 5;

	@GenModel(documentation="On Hold")
	onHold = 6;
}

@ExtendedMetaData(name="DeviceUsageStatusEnum:Object", baseType="DeviceUsageStatusEnum")
datatype DeviceUsageStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.")
@ExtendedMetaData(name="Device.Version", kind="elementOnly")
class DeviceVersion extends BackboneElement {

	@GenModel(documentation="The type of the device version, e.g. manufacturer, approved, internal.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="The hardware or software module of the device to which the version applies.")
	@ExtendedMetaData(kind="element", name="component", namespace="##targetNamespace")
	!resolve val Identifier component;

	@GenModel(documentation="The date the version was installed on the device.")
	@ExtendedMetaData(kind="element", name="installDate", namespace="##targetNamespace")
	!resolve val DateTime installDate;

	@GenModel(documentation="The version text.")
	@ExtendedMetaData(kind="element", name="value", namespace="##targetNamespace")
	!resolve val String[1] value;
}

@GenModel(documentation="The findings and interpretation of diagnostic tests performed on patients, groups of patients, products, substances, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports. The report also includes non-clinical context such as batch analysis and stability reporting of products and substances.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="DiagnosticReport", kind="elementOnly")
class DiagnosticReport extends DomainResource {

	@GenModel(documentation="Identifiers assigned to this report by the performer or other systems.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Details concerning a service requested.")
	@ExtendedMetaData(kind="element", name="basedOn", namespace="##targetNamespace")
	!resolve val Reference[*] basedOn;

	@GenModel(documentation="The status of the diagnostic report.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val DiagnosticReportStatus[1] status;

	@GenModel(documentation="A code that classifies the clinical discipline, department or diagnostic service that created the report (e.g. cardiology, biochemistry, hematology, MRI). This is used for searching, sorting and display purposes.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] category;

	@GenModel(documentation="A code or name that describes this diagnostic report.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] code;

	@GenModel(documentation="The subject of the report. Usually, but not always, this is a patient. However, diagnostic services also perform analyses on specimens collected from a variety of other sources.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference subject;

	@GenModel(documentation="The healthcare event  (e.g. a patient and healthcare provider interaction) which this DiagnosticReport is about.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@ExtendedMetaData(kind="element", name="effectiveDateTime", namespace="##targetNamespace")
	!resolve val DateTime effectiveDateTime;

	@ExtendedMetaData(kind="element", name="effectivePeriod", namespace="##targetNamespace")
	!resolve val Period effectivePeriod;

	@GenModel(documentation="The date and time that this version of the report was made available to providers, typically after the report was reviewed and verified.")
	@ExtendedMetaData(kind="element", name="issued", namespace="##targetNamespace")
	!resolve val Instant issued;

	@GenModel(documentation="The diagnostic service that is responsible for issuing the report.")
	@ExtendedMetaData(kind="element", name="performer", namespace="##targetNamespace")
	!resolve val Reference[*] performer;

	@GenModel(documentation="The practitioner or organization that is responsible for the report's conclusions and interpretations.")
	@ExtendedMetaData(kind="element", name="resultsInterpreter", namespace="##targetNamespace")
	!resolve val Reference[*] resultsInterpreter;

	@GenModel(documentation="Details about the specimens on which this diagnostic report is based.")
	@ExtendedMetaData(kind="element", name="specimen", namespace="##targetNamespace")
	!resolve val Reference[*] specimen;

	@GenModel(documentation="[Observations](observation.html)  that are part of this diagnostic report.")
	@ExtendedMetaData(kind="element", name="result", namespace="##targetNamespace")
	!resolve val Reference[*] result;

	@GenModel(documentation="Comments about the diagnostic report.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="One or more links to full details of any study performed during the diagnostic investigation. An ImagingStudy might comprise a set of radiologic images obtained via a procedure that are analyzed as a group. Typically, this is imaging performed by DICOM enabled modalities, but this is not required. A fully enabled PACS viewer can use this information to provide views of the source images. A GenomicStudy might comprise one or more analyses, each serving a specific purpose. These analyses may vary in method (e.g., karyotyping, CNV, or SNV detection), performer, software, devices used, or regions targeted.")
	@ExtendedMetaData(kind="element", name="study", namespace="##targetNamespace")
	!resolve val Reference[*] study;

	@GenModel(documentation="This backbone element contains supporting information that was used in the creation of the report not included in the results already included in the report.")
	@ExtendedMetaData(kind="element", name="supportingInfo", namespace="##targetNamespace")
	!resolve val DiagnosticReportSupportingInfo[*] supportingInfo;

	@GenModel(documentation="A list of key images or data associated with this report. The images or data are generally created during the diagnostic process, and may be directly of the patient, or of treated specimens (i.e. slides of interest).")
	@ExtendedMetaData(kind="element", name="media", namespace="##targetNamespace")
	!resolve val DiagnosticReportMedia[*] media;

	@GenModel(documentation="Reference to a Composition resource instance that provides structure for organizing the contents of the DiagnosticReport.")
	@ExtendedMetaData(kind="element", name="composition", namespace="##targetNamespace")
	!resolve val Reference composition;

	@GenModel(documentation="Concise and clinically contextualized summary conclusion (interpretation/impression) of the diagnostic report.")
	@ExtendedMetaData(kind="element", name="conclusion", namespace="##targetNamespace")
	!resolve val Markdown conclusion;

	@GenModel(documentation="One or more codes that represent the summary conclusion (interpretation/impression) of the diagnostic report.")
	@ExtendedMetaData(kind="element", name="conclusionCode", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] conclusionCode;

	@GenModel(documentation="Rich text representation of the entire result as issued by the diagnostic service. Multiple formats are allowed but they SHALL be semantically equivalent.")
	@ExtendedMetaData(kind="element", name="presentedForm", namespace="##targetNamespace")
	!resolve val Attachment[*] presentedForm;
}

@GenModel(documentation="The findings and interpretation of diagnostic tests performed on patients, groups of patients, products, substances, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports. The report also includes non-clinical context such as batch analysis and stability reporting of products and substances.")
@ExtendedMetaData(name="DiagnosticReport.Media", kind="elementOnly")
class DiagnosticReportMedia extends BackboneElement {

	@GenModel(documentation="A comment about the image or data. Typically, this is used to provide an explanation for why the image or data is included, or to draw the viewer's attention to important features.")
	@ExtendedMetaData(kind="element", name="comment", namespace="##targetNamespace")
	!resolve val String comment;

	@GenModel(documentation="Reference to the image or data source.")
	@ExtendedMetaData(kind="element", name="link", namespace="##targetNamespace")
	!resolve val Reference[1] link;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="DiagnosticReportStatus", kind="elementOnly")
class DiagnosticReportStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr DiagnosticReportStatusEnum value;
}

@ExtendedMetaData(name="DiagnosticReportStatusEnum")
enum DiagnosticReportStatusEnum {

	@GenModel(documentation="Registered")
	registered = 0;

	@GenModel(documentation="Partial")
	partial = 1;

	@GenModel(documentation="Preliminary")
	preliminary = 2;

	@GenModel(documentation="Modified")
	modified = 3;

	@GenModel(documentation="Final")
	final = 4;

	@GenModel(documentation="Amended")
	amended = 5;

	@GenModel(documentation="Corrected")
	corrected = 6;

	@GenModel(documentation="Appended")
	appended = 7;

	@GenModel(documentation="Cancelled")
	cancelled = 8;

	@GenModel(documentation="Entered in Error")
	enteredInError = 9;

	@GenModel(documentation="Unknown")
	unknown = 10;
}

@ExtendedMetaData(name="DiagnosticReportStatusEnum:Object", baseType="DiagnosticReportStatusEnum")
datatype DiagnosticReportStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="The findings and interpretation of diagnostic tests performed on patients, groups of patients, products, substances, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports. The report also includes non-clinical context such as batch analysis and stability reporting of products and substances.")
@ExtendedMetaData(name="DiagnosticReport.SupportingInfo", kind="elementOnly")
class DiagnosticReportSupportingInfo extends BackboneElement {

	@GenModel(documentation="The code value for the role of the supporting information in the diagnostic report.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@GenModel(documentation="The reference for the supporting information in the diagnostic report.")
	@ExtendedMetaData(kind="element", name="reference", namespace="##targetNamespace")
	!resolve val Reference[1] reference;
}

@GenModel(documentation="How an element value is interpreted when discrimination is evaluated.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="DiscriminatorType", kind="elementOnly")
class DiscriminatorType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr DiscriminatorTypeEnum value;
}

@ExtendedMetaData(name="DiscriminatorTypeEnum")
enum DiscriminatorTypeEnum {

	@GenModel(documentation="Value")
	value = 0;

	@GenModel(documentation="Exists")
	exists = 1;

	@GenModel(documentation="Pattern")
	pattern = 2;

	@GenModel(documentation="Type")
	type = 3;

	@GenModel(documentation="Profile")
	profile = 4;

	@GenModel(documentation="Position")
	position = 5;
}

@ExtendedMetaData(name="DiscriminatorTypeEnum:Object", baseType="DiscriminatorTypeEnum")
datatype DiscriminatorTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A length - a value with a unit that is a physical distance.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="Distance", kind="elementOnly")
class Distance extends Quantity {
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="DocumentMode", kind="elementOnly")
class DocumentMode extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr DocumentModeEnum value;
}

@ExtendedMetaData(name="DocumentModeEnum")
enum DocumentModeEnum {

	@GenModel(documentation="Producer")
	producer = 0;

	@GenModel(documentation="Consumer")
	consumer = 1;
}

@ExtendedMetaData(name="DocumentModeEnum:Object", baseType="DocumentModeEnum")
datatype DocumentModeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A reference to a document of any kind for any purpose. While the term “document” implies a more narrow focus, for this resource this \"document\" encompasses *any* serialized object with a mime-type, it includes formal patient-centric documents (CDA), clinical notes, scanned paper, non-patient specific documents like policy text, as well as a photo, video, or audio recording acquired or used in healthcare.  The DocumentReference resource provides metadata about the document so that the document can be discovered and managed.  The actual content may be inline base64 encoded data or provided by direct reference.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="DocumentReference", kind="elementOnly")
class DocumentReference extends DomainResource {

	@GenModel(documentation="Other business identifiers associated with the document, including version independent identifiers.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="An explicitly assigned identifer of a variation of the content in the DocumentReference.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@GenModel(documentation="A procedure that is fulfilled in whole or in part by the creation of this media.")
	@ExtendedMetaData(kind="element", name="basedOn", namespace="##targetNamespace")
	!resolve val Reference[*] basedOn;

	@GenModel(documentation="The status of this document reference.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val DocumentReferenceStatus[1] status;

	@GenModel(documentation="The status of the underlying document.")
	@ExtendedMetaData(kind="element", name="docStatus", namespace="##targetNamespace")
	!resolve val CompositionStatus docStatus;

	@GenModel(documentation="Imaging modality used. This may include both acquisition and non-acquisition modalities.")
	@ExtendedMetaData(kind="element", name="modality", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] modality;

	@GenModel(documentation="Specifies the particular kind of document referenced  (e.g. History and Physical, Discharge Summary, Progress Note). This usually equates to the purpose of making the document referenced.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="A categorization for the type of document referenced - helps for indexing and searching. This may be implied by or derived from the code specified in the DocumentReference.type.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] category;

	@GenModel(documentation="Who or what the document is about. The document can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of farm animals, or a set of patients that share a common exposure).")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference subject;

	@GenModel(documentation="Describes the clinical encounter or type of care that the document content is associated with.")
	@ExtendedMetaData(kind="element", name="context", namespace="##targetNamespace")
	!resolve val Reference[*] context;

	@GenModel(documentation="This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the type Code, such as a \"History and Physical Report\" in which the procedure being documented is necessarily a \"History and Physical\" act.")
	@ExtendedMetaData(kind="element", name="event", namespace="##targetNamespace")
	!resolve val CodeableReference[*] event;

	@GenModel(documentation="The anatomic structures included in the document.")
	@ExtendedMetaData(kind="element", name="bodySite", namespace="##targetNamespace")
	!resolve val CodeableReference[*] bodySite;

	@GenModel(documentation="The kind of facility where the patient was seen.")
	@ExtendedMetaData(kind="element", name="facilityType", namespace="##targetNamespace")
	!resolve val CodeableConcept facilityType;

	@GenModel(documentation="This property may convey specifics about the practice setting where the content was created, often reflecting the clinical specialty.")
	@ExtendedMetaData(kind="element", name="practiceSetting", namespace="##targetNamespace")
	!resolve val CodeableConcept practiceSetting;

	@GenModel(documentation="The time period over which the service that is described by the document was provided.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;

	@GenModel(documentation="When the document reference was created.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val Instant date;

	@GenModel(documentation="Identifies who is responsible for adding the information to the document.")
	@ExtendedMetaData(kind="element", name="author", namespace="##targetNamespace")
	!resolve val Reference[*] author;

	@GenModel(documentation="A participant who has authenticated the accuracy of the document.")
	@ExtendedMetaData(kind="element", name="attester", namespace="##targetNamespace")
	!resolve val DocumentReferenceAttester[*] attester;

	@GenModel(documentation="Identifies the organization or group who is responsible for ongoing maintenance of and access to the document.")
	@ExtendedMetaData(kind="element", name="custodian", namespace="##targetNamespace")
	!resolve val Reference custodian;

	@GenModel(documentation="Relationships that this document has with other document references that already exist.")
	@ExtendedMetaData(kind="element", name="relatesTo", namespace="##targetNamespace")
	!resolve val DocumentReferenceRelatesTo[*] relatesTo;

	@GenModel(documentation="Human-readable description of the source document.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="A set of Security-Tag codes specifying the level of privacy/security of the Document found at DocumentReference.content.attachment.url. Note that DocumentReference.meta.security contains the security labels of the data elements in DocumentReference, while DocumentReference.securityLabel contains the security labels for the document the reference refers to. The distinction recognizes that the document may contain sensitive information, while the DocumentReference is metadata about the document and thus might not be as sensitive as the document. For example: a psychotherapy episode may contain highly sensitive information, while the metadata may simply indicate that some episode happened.")
	@ExtendedMetaData(kind="element", name="securityLabel", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] securityLabel;

	@GenModel(documentation="The document and format referenced.  If there are multiple content element repetitions, these must all represent the same document in different format, or attachment metadata.")
	@ExtendedMetaData(kind="element", name="content", namespace="##targetNamespace")
	!resolve val DocumentReferenceContent[+] content;
}

@GenModel(documentation="A reference to a document of any kind for any purpose. While the term “document” implies a more narrow focus, for this resource this \"document\" encompasses *any* serialized object with a mime-type, it includes formal patient-centric documents (CDA), clinical notes, scanned paper, non-patient specific documents like policy text, as well as a photo, video, or audio recording acquired or used in healthcare.  The DocumentReference resource provides metadata about the document so that the document can be discovered and managed.  The actual content may be inline base64 encoded data or provided by direct reference.")
@ExtendedMetaData(name="DocumentReference.Attester", kind="elementOnly")
class DocumentReferenceAttester extends BackboneElement {

	@GenModel(documentation="The type of attestation the authenticator offers.")
	@ExtendedMetaData(kind="element", name="mode", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] mode;

	@GenModel(documentation="When the document was attested by the party.")
	@ExtendedMetaData(kind="element", name="time", namespace="##targetNamespace")
	!resolve val DateTime time;

	@GenModel(documentation="Who attested the document in the specified way.")
	@ExtendedMetaData(kind="element", name="party", namespace="##targetNamespace")
	!resolve val Reference party;
}

@GenModel(documentation="A reference to a document of any kind for any purpose. While the term “document” implies a more narrow focus, for this resource this \"document\" encompasses *any* serialized object with a mime-type, it includes formal patient-centric documents (CDA), clinical notes, scanned paper, non-patient specific documents like policy text, as well as a photo, video, or audio recording acquired or used in healthcare.  The DocumentReference resource provides metadata about the document so that the document can be discovered and managed.  The actual content may be inline base64 encoded data or provided by direct reference.")
@ExtendedMetaData(name="DocumentReference.Content", kind="elementOnly")
class DocumentReferenceContent extends BackboneElement {

	@GenModel(documentation="The document or URL of the document along with critical metadata to prove content has integrity.")
	@ExtendedMetaData(kind="element", name="attachment", namespace="##targetNamespace")
	!resolve val Attachment[1] attachment;

	@GenModel(documentation="An identifier of the document constraints, encoding, structure, and template that the document conforms to beyond the base format indicated in the mimeType.")
	@ExtendedMetaData(kind="element", name="profile", namespace="##targetNamespace")
	!resolve val DocumentReferenceProfile[*] profile;
}

@GenModel(documentation="A reference to a document of any kind for any purpose. While the term “document” implies a more narrow focus, for this resource this \"document\" encompasses *any* serialized object with a mime-type, it includes formal patient-centric documents (CDA), clinical notes, scanned paper, non-patient specific documents like policy text, as well as a photo, video, or audio recording acquired or used in healthcare.  The DocumentReference resource provides metadata about the document so that the document can be discovered and managed.  The actual content may be inline base64 encoded data or provided by direct reference.")
@ExtendedMetaData(name="DocumentReference.Profile", kind="elementOnly")
class DocumentReferenceProfile extends BackboneElement {

	@ExtendedMetaData(kind="element", name="valueCoding", namespace="##targetNamespace")
	!resolve val Coding valueCoding;

	@ExtendedMetaData(kind="element", name="valueUri", namespace="##targetNamespace")
	!resolve val Uri valueUri;

	@ExtendedMetaData(kind="element", name="valueCanonical", namespace="##targetNamespace")
	!resolve val Canonical valueCanonical;
}

@GenModel(documentation="A reference to a document of any kind for any purpose. While the term “document” implies a more narrow focus, for this resource this \"document\" encompasses *any* serialized object with a mime-type, it includes formal patient-centric documents (CDA), clinical notes, scanned paper, non-patient specific documents like policy text, as well as a photo, video, or audio recording acquired or used in healthcare.  The DocumentReference resource provides metadata about the document so that the document can be discovered and managed.  The actual content may be inline base64 encoded data or provided by direct reference.")
@ExtendedMetaData(name="DocumentReference.RelatesTo", kind="elementOnly")
class DocumentReferenceRelatesTo extends BackboneElement {

	@GenModel(documentation="The type of relationship that this document has with anther document.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] code;

	@GenModel(documentation="The target document of this relationship.")
	@ExtendedMetaData(kind="element", name="target", namespace="##targetNamespace")
	!resolve val Reference[1] target;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="DocumentReferenceStatus", kind="elementOnly")
class DocumentReferenceStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr DocumentReferenceStatusEnum value;
}

@ExtendedMetaData(name="DocumentReferenceStatusEnum")
enum DocumentReferenceStatusEnum {

	@GenModel(documentation="Current")
	current = 0;

	@GenModel(documentation="Superseded")
	superseded = 1;

	@GenModel(documentation="Entered in Error")
	enteredInError = 2;
}

@ExtendedMetaData(name="DocumentReferenceStatusEnum:Object", baseType="DocumentReferenceStatusEnum")
datatype DocumentReferenceStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@ExtendedMetaData(name="", kind="mixed")
class DocumentRoot {

	@ExtendedMetaData(kind="elementWildcard", name=":mixed")
	!unique attr ecore.EFeatureMapEntry[*] mixed;

	@ExtendedMetaData(kind="attribute", name="xmlns:prefix")
	transient !resolve val ecore.EStringToStringMapEntry[*] xMLNSPrefixMap;

	@ExtendedMetaData(kind="attribute", name="xsi:schemaLocation")
	transient !resolve val ecore.EStringToStringMapEntry[*] xSISchemaLocation;

	@GenModel(documentation="A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc.")
	@ExtendedMetaData(kind="element", name="Account", namespace="##targetNamespace")
	volatile transient derived !resolve val Account[0..?] account;

	@GenModel(documentation="This resource allows for the definition of some activity to be performed, independent of a particular patient, practitioner, or other performance context.")
	@ExtendedMetaData(kind="element", name="ActivityDefinition", namespace="##targetNamespace")
	volatile transient derived !resolve val ActivityDefinition[0..?] activityDefinition;

	@GenModel(documentation="Describes an actor - a human or an application that plays a role in data exchange, and that may have obligations associated with the role the actor plays.")
	@ExtendedMetaData(kind="element", name="ActorDefinition", namespace="##targetNamespace")
	volatile transient derived !resolve val ActorDefinition[0..?] actorDefinition;

	@GenModel(documentation="A medicinal product in the final form which is suitable for administering to a patient (after any mixing of multiple components, dissolution etc. has been performed).")
	@ExtendedMetaData(kind="element", name="AdministrableProductDefinition", namespace="##targetNamespace")
	volatile transient derived !resolve val AdministrableProductDefinition[0..?] administrableProductDefinition;

	@GenModel(documentation="An event (i.e. any change to current patient status) that may be related to unintended effects on a patient or research participant. The unintended effects may require additional monitoring, treatment, hospitalization, or may result in death. The AdverseEvent resource also extends to potential or avoided events that could have had such effects. There are two major domains where the AdverseEvent resource is expected to be used. One is in clinical care reported adverse events and the other is in reporting adverse events in clinical  research trial management. Adverse events can be reported by healthcare providers, patients, caregivers or by medical products manufacturers. Given the differences between these two concepts, we recommend consulting the domain specific implementation guides when implementing the AdverseEvent Resource. The implementation guides include specific extensions, value sets and constraints.")
	@ExtendedMetaData(kind="element", name="AdverseEvent", namespace="##targetNamespace")
	volatile transient derived !resolve val AdverseEvent[0..?] adverseEvent;

	@GenModel(documentation="Risk of harmful or undesirable physiological response which is specific to an individual and associated with exposure to a substance.")
	@ExtendedMetaData(kind="element", name="AllergyIntolerance", namespace="##targetNamespace")
	volatile transient derived !resolve val AllergyIntolerance[0..?] allergyIntolerance;

	@GenModel(documentation="A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s).")
	@ExtendedMetaData(kind="element", name="Appointment", namespace="##targetNamespace")
	volatile transient derived !resolve val Appointment[0..?] appointment;

	@GenModel(documentation="A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection.")
	@ExtendedMetaData(kind="element", name="AppointmentResponse", namespace="##targetNamespace")
	volatile transient derived !resolve val AppointmentResponse[0..?] appointmentResponse;

	@GenModel(documentation="This Resource provides one or more comments, classifiers or ratings about a Resource and supports attribution and rights management metadata for the added content.")
	@ExtendedMetaData(kind="element", name="ArtifactAssessment", namespace="##targetNamespace")
	volatile transient derived !resolve val ArtifactAssessment[0..?] artifactAssessment;

	@GenModel(documentation="A record of an event relevant for purposes such as operations, privacy, security, maintenance, and performance analysis.")
	@ExtendedMetaData(kind="element", name="AuditEvent", namespace="##targetNamespace")
	volatile transient derived !resolve val AuditEvent[0..?] auditEvent;

	@GenModel(documentation="Basic is used for handling concepts not yet defined in FHIR, narrative-only resources that don't map to an existing resource, and custom resources not appropriate for inclusion in the FHIR specification.")
	@ExtendedMetaData(kind="element", name="Basic", namespace="##targetNamespace")
	volatile transient derived !resolve val Basic[0..?] basic;

	@GenModel(documentation="A resource that represents the data of a single raw artifact as digital content accessible in its native format.  A Binary resource can contain any content, whether text, image, pdf, zip archive, etc.")
	@ExtendedMetaData(kind="element", name="Binary", namespace="##targetNamespace")
	volatile transient derived !resolve val Binary[0..?] binary;

	@GenModel(documentation="This resource reflects an instance of a biologically derived product. A material substance originating from a biological entity intended to be transplanted or infused
into another (possibly the same) biological entity.")
	@ExtendedMetaData(kind="element", name="BiologicallyDerivedProduct", namespace="##targetNamespace")
	volatile transient derived !resolve val BiologicallyDerivedProduct[0..?] biologicallyDerivedProduct;

	@GenModel(documentation="This resource reflects an instance of a biologically derived product dispense. The supply or dispense of a biologically derived product from the supply organization or department (e.g. hospital transfusion laboratory) to the clinical team responsible for clinical application.")
	@ExtendedMetaData(kind="element", name="BiologicallyDerivedProductDispense", namespace="##targetNamespace")
	volatile transient derived !resolve val BiologicallyDerivedProductDispense[0..?] biologicallyDerivedProductDispense;

	@GenModel(documentation="Record details about an anatomical structure.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case.")
	@ExtendedMetaData(kind="element", name="BodyStructure", namespace="##targetNamespace")
	volatile transient derived !resolve val BodyStructure[0..?] bodyStructure;

	@GenModel(documentation="A container for a collection of resources.")
	@ExtendedMetaData(kind="element", name="Bundle", namespace="##targetNamespace")
	volatile transient derived !resolve val Bundle[0..?] bundle;

	@GenModel(documentation="A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server or Client for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.")
	@ExtendedMetaData(kind="element", name="CapabilityStatement", namespace="##targetNamespace")
	volatile transient derived !resolve val CapabilityStatement[0..?] capabilityStatement;

	@GenModel(documentation="Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.")
	@ExtendedMetaData(kind="element", name="CarePlan", namespace="##targetNamespace")
	volatile transient derived !resolve val CarePlan[0..?] carePlan;

	@GenModel(documentation="The Care Team includes all the people and organizations who plan to participate in the coordination and delivery of care.")
	@ExtendedMetaData(kind="element", name="CareTeam", namespace="##targetNamespace")
	volatile transient derived !resolve val CareTeam[0..?] careTeam;

	@GenModel(documentation="The resource ChargeItem describes the provision of healthcare provider products for a certain patient, therefore referring not only to the product, but containing in addition details of the provision, like date, time, amounts and participating organizations and persons. Main Usage of the ChargeItem is to enable the billing process and internal cost allocation.")
	@ExtendedMetaData(kind="element", name="ChargeItem", namespace="##targetNamespace")
	volatile transient derived !resolve val ChargeItem[0..?] chargeItem;

	@GenModel(documentation="The ChargeItemDefinition resource provides the properties that apply to the (billing) codes necessary to calculate costs and prices. The properties may differ largely depending on type and realm, therefore this resource gives only a rough structure and requires profiling for each type of billing code system.")
	@ExtendedMetaData(kind="element", name="ChargeItemDefinition", namespace="##targetNamespace")
	volatile transient derived !resolve val ChargeItemDefinition[0..?] chargeItemDefinition;

	@GenModel(documentation="The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources.")
	@ExtendedMetaData(kind="element", name="Citation", namespace="##targetNamespace")
	volatile transient derived !resolve val Citation[0..?] citation;

	@GenModel(documentation="A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.")
	@ExtendedMetaData(kind="element", name="Claim", namespace="##targetNamespace")
	volatile transient derived !resolve val Claim[0..?] claim;

	@GenModel(documentation="This resource provides the adjudication details from the processing of a Claim resource.")
	@ExtendedMetaData(kind="element", name="ClaimResponse", namespace="##targetNamespace")
	volatile transient derived !resolve val ClaimResponse[0..?] claimResponse;

	@GenModel(documentation="A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient's condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called \"ClinicalImpression\" rather than \"ClinicalAssessment\" to avoid confusion with the recording of assessment tools such as Apgar score.")
	@ExtendedMetaData(kind="element", name="ClinicalImpression", namespace="##targetNamespace")
	volatile transient derived !resolve val ClinicalImpression[0..?] clinicalImpression;

	@GenModel(documentation="A single issue - either an indication, contraindication, interaction or an undesirable effect for a medicinal product, medication, device or procedure.")
	@ExtendedMetaData(kind="element", name="ClinicalUseDefinition", namespace="##targetNamespace")
	volatile transient derived !resolve val ClinicalUseDefinition[0..?] clinicalUseDefinition;

	@GenModel(documentation="The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.")
	@ExtendedMetaData(kind="element", name="CodeSystem", namespace="##targetNamespace")
	volatile transient derived !resolve val CodeSystem[0..?] codeSystem;

	@GenModel(documentation="A clinical or business level record of information being transmitted or shared; e.g. an alert that was sent to a responsible provider, a public health agency communication to a provider/reporter in response to a case report for a reportable condition.")
	@ExtendedMetaData(kind="element", name="Communication", namespace="##targetNamespace")
	volatile transient derived !resolve val Communication[0..?] communication;

	@GenModel(documentation="A request to convey information; e.g. the CDS system proposes that an alert be sent to a responsible provider, the CDS system proposes that the public health agency be notified about a reportable condition.")
	@ExtendedMetaData(kind="element", name="CommunicationRequest", namespace="##targetNamespace")
	volatile transient derived !resolve val CommunicationRequest[0..?] communicationRequest;

	@GenModel(documentation="A compartment definition that defines how resources are accessed on a server.")
	@ExtendedMetaData(kind="element", name="CompartmentDefinition", namespace="##targetNamespace")
	volatile transient derived !resolve val CompartmentDefinition[0..?] compartmentDefinition;

	@GenModel(documentation="A set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. A Composition defines the structure and narrative content necessary for a document. However, a Composition alone does not constitute a document. Rather, the Composition must be the first entry in a Bundle where Bundle.type=document, and any other resources referenced from Composition must be included as subsequent entries in the Bundle (for example Patient, Practitioner, Encounter, etc.).")
	@ExtendedMetaData(kind="element", name="Composition", namespace="##targetNamespace")
	volatile transient derived !resolve val Composition[0..?] composition;

	@GenModel(documentation="A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models.")
	@ExtendedMetaData(kind="element", name="ConceptMap", namespace="##targetNamespace")
	volatile transient derived !resolve val ConceptMap[0..?] conceptMap;

	@GenModel(documentation="A clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept that has risen to a level of concern.")
	@ExtendedMetaData(kind="element", name="Condition", namespace="##targetNamespace")
	volatile transient derived !resolve val Condition[0..?] condition;

	@GenModel(documentation="A definition of a condition and information relevant to managing it.")
	@ExtendedMetaData(kind="element", name="ConditionDefinition", namespace="##targetNamespace")
	volatile transient derived !resolve val ConditionDefinition[0..?] conditionDefinition;

	@GenModel(documentation="A record of a healthcare consumer’s  choices  or choices made on their behalf by a third party, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time.")
	@ExtendedMetaData(kind="element", name="Consent", namespace="##targetNamespace")
	volatile transient derived !resolve val Consent[0..?] consent;

	@GenModel(documentation="Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.")
	@ExtendedMetaData(kind="element", name="Contract", namespace="##targetNamespace")
	volatile transient derived !resolve val Contract[0..?] contract;

	@GenModel(documentation="Financial instrument which may be used to reimburse or pay for health care products and services. Includes both insurance and self-payment.")
	@ExtendedMetaData(kind="element", name="Coverage", namespace="##targetNamespace")
	volatile transient derived !resolve val Coverage[0..?] coverage;

	@GenModel(documentation="The CoverageEligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an CoverageEligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy.")
	@ExtendedMetaData(kind="element", name="CoverageEligibilityRequest", namespace="##targetNamespace")
	volatile transient derived !resolve val CoverageEligibilityRequest[0..?] coverageEligibilityRequest;

	@GenModel(documentation="This resource provides eligibility and plan details from the processing of an CoverageEligibilityRequest resource.")
	@ExtendedMetaData(kind="element", name="CoverageEligibilityResponse", namespace="##targetNamespace")
	volatile transient derived !resolve val CoverageEligibilityResponse[0..?] coverageEligibilityResponse;

	@GenModel(documentation="Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, gaps in care, etc.")
	@ExtendedMetaData(kind="element", name="DetectedIssue", namespace="##targetNamespace")
	volatile transient derived !resolve val DetectedIssue[0..?] detectedIssue;

	@GenModel(documentation="A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.")
	@ExtendedMetaData(kind="element", name="Device", namespace="##targetNamespace")
	volatile transient derived !resolve val Device[0..?] device;

	@GenModel(documentation="A record of association or dissociation of a device with a patient.")
	@ExtendedMetaData(kind="element", name="DeviceAssociation", namespace="##targetNamespace")
	volatile transient derived !resolve val DeviceAssociation[0..?] deviceAssociation;

	@GenModel(documentation="The characteristics, operational status and capabilities of a medical-related component of a medical device.")
	@ExtendedMetaData(kind="element", name="DeviceDefinition", namespace="##targetNamespace")
	volatile transient derived !resolve val DeviceDefinition[0..?] deviceDefinition;

	@GenModel(documentation="A record of dispensation of a device - i.e., assigning a device to a patient, or to a professional for their use.")
	@ExtendedMetaData(kind="element", name="DeviceDispense", namespace="##targetNamespace")
	volatile transient derived !resolve val DeviceDispense[0..?] deviceDispense;

	@GenModel(documentation="Describes a measurement, calculation or setting capability of a device.")
	@ExtendedMetaData(kind="element", name="DeviceMetric", namespace="##targetNamespace")
	volatile transient derived !resolve val DeviceMetric[0..?] deviceMetric;

	@GenModel(documentation="Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker.")
	@ExtendedMetaData(kind="element", name="DeviceRequest", namespace="##targetNamespace")
	volatile transient derived !resolve val DeviceRequest[0..?] deviceRequest;

	@GenModel(documentation="A record of a device being used by a patient where the record is the result of a report from the patient or a clinician.")
	@ExtendedMetaData(kind="element", name="DeviceUsage", namespace="##targetNamespace")
	volatile transient derived !resolve val DeviceUsage[0..?] deviceUsage;

	@GenModel(documentation="The findings and interpretation of diagnostic tests performed on patients, groups of patients, products, substances, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports. The report also includes non-clinical context such as batch analysis and stability reporting of products and substances.")
	@ExtendedMetaData(kind="element", name="DiagnosticReport", namespace="##targetNamespace")
	volatile transient derived !resolve val DiagnosticReport[0..?] diagnosticReport;

	@GenModel(documentation="A reference to a document of any kind for any purpose. While the term “document” implies a more narrow focus, for this resource this \"document\" encompasses *any* serialized object with a mime-type, it includes formal patient-centric documents (CDA), clinical notes, scanned paper, non-patient specific documents like policy text, as well as a photo, video, or audio recording acquired or used in healthcare.  The DocumentReference resource provides metadata about the document so that the document can be discovered and managed.  The actual content may be inline base64 encoded data or provided by direct reference.")
	@ExtendedMetaData(kind="element", name="DocumentReference", namespace="##targetNamespace")
	volatile transient derived !resolve val DocumentReference[0..?] documentReference;

	@GenModel(documentation="An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.  Encounter is primarily used to record information about the actual activities that occurred, where Appointment is used to record planned activities.")
	@ExtendedMetaData(kind="element", name="Encounter", namespace="##targetNamespace")
	volatile transient derived !resolve val Encounter[0..?] encounter;

	@GenModel(documentation="A record of significant events/milestones key data throughout the history of an Encounter, often tracked for specific purposes such as billing.")
	@ExtendedMetaData(kind="element", name="EncounterHistory", namespace="##targetNamespace")
	volatile transient derived !resolve val EncounterHistory[0..?] encounterHistory;

	@GenModel(documentation="The technical details of an endpoint that can be used for electronic services, such as for web services providing XDS.b, a REST endpoint for another FHIR server, or a s/Mime email address. This may include any security context information.")
	@ExtendedMetaData(kind="element", name="Endpoint", namespace="##targetNamespace")
	volatile transient derived !resolve val Endpoint[0..?] endpoint;

	@GenModel(documentation="This resource provides the insurance enrollment details to the insurer regarding a specified coverage.")
	@ExtendedMetaData(kind="element", name="EnrollmentRequest", namespace="##targetNamespace")
	volatile transient derived !resolve val EnrollmentRequest[0..?] enrollmentRequest;

	@GenModel(documentation="This resource provides enrollment and plan details from the processing of an EnrollmentRequest resource.")
	@ExtendedMetaData(kind="element", name="EnrollmentResponse", namespace="##targetNamespace")
	volatile transient derived !resolve val EnrollmentResponse[0..?] enrollmentResponse;

	@GenModel(documentation="An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time.")
	@ExtendedMetaData(kind="element", name="EpisodeOfCare", namespace="##targetNamespace")
	volatile transient derived !resolve val EpisodeOfCare[0..?] episodeOfCare;

	@GenModel(documentation="The EventDefinition resource provides a reusable description of when a particular event can occur.")
	@ExtendedMetaData(kind="element", name="EventDefinition", namespace="##targetNamespace")
	volatile transient derived !resolve val EventDefinition[0..?] eventDefinition;

	@GenModel(documentation="The Evidence Resource provides a machine-interpretable expression of an evidence concept including the evidence variables (e.g., population, exposures/interventions, comparators, outcomes, measured variables, confounding variables), the statistics, and the certainty of this evidence.")
	@ExtendedMetaData(kind="element", name="Evidence", namespace="##targetNamespace")
	volatile transient derived !resolve val Evidence[0..?] evidence;

	@GenModel(documentation="The EvidenceReport Resource is a specialized container for a collection of resources and codeable concepts, adapted to support compositions of Evidence, EvidenceVariable, and Citation resources and related concepts.")
	@ExtendedMetaData(kind="element", name="EvidenceReport", namespace="##targetNamespace")
	volatile transient derived !resolve val EvidenceReport[0..?] evidenceReport;

	@GenModel(documentation="The EvidenceVariable resource describes an element that knowledge (Evidence) is about.")
	@ExtendedMetaData(kind="element", name="EvidenceVariable", namespace="##targetNamespace")
	volatile transient derived !resolve val EvidenceVariable[0..?] evidenceVariable;

	@GenModel(documentation="Example of workflow instance.")
	@ExtendedMetaData(kind="element", name="ExampleScenario", namespace="##targetNamespace")
	volatile transient derived !resolve val ExampleScenario[0..?] exampleScenario;

	@GenModel(documentation="This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.")
	@ExtendedMetaData(kind="element", name="ExplanationOfBenefit", namespace="##targetNamespace")
	volatile transient derived !resolve val ExplanationOfBenefit[0..?] explanationOfBenefit;

	@GenModel(documentation="Significant health conditions for a person related to the patient relevant in the context of care for the patient.")
	@ExtendedMetaData(kind="element", name="FamilyMemberHistory", namespace="##targetNamespace")
	volatile transient derived !resolve val FamilyMemberHistory[0..?] familyMemberHistory;

	@GenModel(documentation="Prospective warnings of potential issues when providing care to the patient.")
	@ExtendedMetaData(kind="element", name="Flag", namespace="##targetNamespace")
	volatile transient derived !resolve val Flag[0..?] flag;

	@GenModel(documentation="This resource describes a product or service that is available through a program and includes the conditions and constraints of availability.  All of the information in this resource is specific to the inclusion of the item in the formulary and is not inherent to the item itself.")
	@ExtendedMetaData(kind="element", name="FormularyItem", namespace="##targetNamespace")
	volatile transient derived !resolve val FormularyItem[0..?] formularyItem;

	@GenModel(documentation="A GenomicStudy is a set of analyses performed to analyze and generate genomic data.")
	@ExtendedMetaData(kind="element", name="GenomicStudy", namespace="##targetNamespace")
	volatile transient derived !resolve val GenomicStudy[0..?] genomicStudy;

	@GenModel(documentation="Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.")
	@ExtendedMetaData(kind="element", name="Goal", namespace="##targetNamespace")
	volatile transient derived !resolve val Goal[0..?] goal;

	@GenModel(documentation="A formal computable definition of a graph of resources - that is, a coherent set of resources that form a graph by following references. The Graph Definition resource defines a set and makes rules about the set.")
	@ExtendedMetaData(kind="element", name="GraphDefinition", namespace="##targetNamespace")
	volatile transient derived !resolve val GraphDefinition[0..?] graphDefinition;

	@GenModel(documentation="Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively, and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization.")
	@ExtendedMetaData(kind="element", name="Group", namespace="##targetNamespace")
	volatile transient derived !resolve val Group[0..?] group;

	@GenModel(documentation="A guidance response is the formal response to a guidance request, including any output parameters returned by the evaluation, as well as the description of any proposed actions to be taken.")
	@ExtendedMetaData(kind="element", name="GuidanceResponse", namespace="##targetNamespace")
	volatile transient derived !resolve val GuidanceResponse[0..?] guidanceResponse;

	@GenModel(documentation="The details of a healthcare service available at a location.")
	@ExtendedMetaData(kind="element", name="HealthcareService", namespace="##targetNamespace")
	volatile transient derived !resolve val HealthcareService[0..?] healthcareService;

	@GenModel(documentation="A selection of DICOM SOP instances and/or frames within a single Study and Series. This might include additional specifics such as an image region, an Observation UID or a Segmentation Number, allowing linkage to an Observation Resource or transferring this information along with the ImagingStudy Resource.")
	@ExtendedMetaData(kind="element", name="ImagingSelection", namespace="##targetNamespace")
	volatile transient derived !resolve val ImagingSelection[0..?] imagingSelection;

	@GenModel(documentation="Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.")
	@ExtendedMetaData(kind="element", name="ImagingStudy", namespace="##targetNamespace")
	volatile transient derived !resolve val ImagingStudy[0..?] imagingStudy;

	@GenModel(documentation="Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party.")
	@ExtendedMetaData(kind="element", name="Immunization", namespace="##targetNamespace")
	volatile transient derived !resolve val Immunization[0..?] immunization;

	@GenModel(documentation="Describes a comparison of an immunization event against published recommendations to determine if the administration is \"valid\" in relation to those  recommendations.")
	@ExtendedMetaData(kind="element", name="ImmunizationEvaluation", namespace="##targetNamespace")
	volatile transient derived !resolve val ImmunizationEvaluation[0..?] immunizationEvaluation;

	@GenModel(documentation="A patient's point-in-time set of recommendations (i.e. forecasting) according to a published schedule with optional supporting justification.")
	@ExtendedMetaData(kind="element", name="ImmunizationRecommendation", namespace="##targetNamespace")
	volatile transient derived !resolve val ImmunizationRecommendation[0..?] immunizationRecommendation;

	@GenModel(documentation="A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.")
	@ExtendedMetaData(kind="element", name="ImplementationGuide", namespace="##targetNamespace")
	volatile transient derived !resolve val ImplementationGuide[0..?] implementationGuide;

	@GenModel(documentation="An ingredient of a manufactured item or pharmaceutical product.")
	@ExtendedMetaData(kind="element", name="Ingredient", namespace="##targetNamespace")
	volatile transient derived !resolve val Ingredient[0..?] ingredient;

	@GenModel(documentation="Details of a Health Insurance product/plan provided by an organization.")
	@ExtendedMetaData(kind="element", name="InsurancePlan", namespace="##targetNamespace")
	volatile transient derived !resolve val InsurancePlan[0..?] insurancePlan;

	@GenModel(documentation="A functional description of an inventory item used in inventory and supply-related workflows.")
	@ExtendedMetaData(kind="element", name="InventoryItem", namespace="##targetNamespace")
	volatile transient derived !resolve val InventoryItem[0..?] inventoryItem;

	@GenModel(documentation="A report of inventory or stock items.")
	@ExtendedMetaData(kind="element", name="InventoryReport", namespace="##targetNamespace")
	volatile transient derived !resolve val InventoryReport[0..?] inventoryReport;

	@GenModel(documentation="Invoice containing collected ChargeItems from an Account with calculated individual and total price for Billing purpose.")
	@ExtendedMetaData(kind="element", name="Invoice", namespace="##targetNamespace")
	volatile transient derived !resolve val Invoice[0..?] invoice;

	@GenModel(documentation="The Library resource is a general-purpose container for knowledge asset definitions. It can be used to describe and expose existing knowledge assets such as logic libraries and information model descriptions, as well as to describe a collection of knowledge assets.")
	@ExtendedMetaData(kind="element", name="Library", namespace="##targetNamespace")
	volatile transient derived !resolve val Library[0..?] library;

	@GenModel(documentation="Identifies two or more records (resource instances) that refer to the same real-world \"occurrence\".")
	@ExtendedMetaData(kind="element", name="Linkage", namespace="##targetNamespace")
	volatile transient derived !resolve val Linkage[0..?] linkage;

	@GenModel(documentation="A List is a curated collection of resources, for things such as problem lists, allergy lists, facility list, organization list, etc.")
	@ExtendedMetaData(kind="element", name="List", namespace="##targetNamespace")
	volatile transient derived !resolve val List[0..?] list;

	@GenModel(documentation="Details and position information for a place where services are provided and resources and participants may be stored, found, contained, or accommodated.")
	@ExtendedMetaData(kind="element", name="Location", namespace="##targetNamespace")
	volatile transient derived !resolve val Location[0..?] location;

	@GenModel(documentation="The definition and characteristics of a medicinal manufactured item, such as a tablet or capsule, as contained in a packaged medicinal product.")
	@ExtendedMetaData(kind="element", name="ManufacturedItemDefinition", namespace="##targetNamespace")
	volatile transient derived !resolve val ManufacturedItemDefinition[0..?] manufacturedItemDefinition;

	@GenModel(documentation="The Measure resource provides the definition of a quality measure.")
	@ExtendedMetaData(kind="element", name="Measure", namespace="##targetNamespace")
	volatile transient derived !resolve val Measure[0..?] measure;

	@GenModel(documentation="The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation.")
	@ExtendedMetaData(kind="element", name="MeasureReport", namespace="##targetNamespace")
	volatile transient derived !resolve val MeasureReport[0..?] measureReport;

	@GenModel(documentation="This resource is primarily used for the identification and definition of a medication, including ingredients, for the purposes of prescribing, dispensing, and administering a medication as well as for making statements about medication use.")
	@ExtendedMetaData(kind="element", name="Medication", namespace="##targetNamespace")
	volatile transient derived !resolve val Medication[0..?] medication;

	@GenModel(documentation="Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner.")
	@ExtendedMetaData(kind="element", name="MedicationAdministration", namespace="##targetNamespace")
	volatile transient derived !resolve val MedicationAdministration[0..?] medicationAdministration;

	@GenModel(documentation="Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.")
	@ExtendedMetaData(kind="element", name="MedicationDispense", namespace="##targetNamespace")
	volatile transient derived !resolve val MedicationDispense[0..?] medicationDispense;

	@GenModel(documentation="Information about a medication that is used to support knowledge.")
	@ExtendedMetaData(kind="element", name="MedicationKnowledge", namespace="##targetNamespace")
	volatile transient derived !resolve val MedicationKnowledge[0..?] medicationKnowledge;

	@GenModel(documentation="An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called \"MedicationRequest\" rather than \"MedicationPrescription\" or \"MedicationOrder\" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.")
	@ExtendedMetaData(kind="element", name="MedicationRequest", namespace="##targetNamespace")
	volatile transient derived !resolve val MedicationRequest[0..?] medicationRequest;

	@GenModel(documentation="A record of a medication that is being consumed by a patient.   A MedicationStatement may indicate that the patient may be taking the medication now or has taken the medication in the past or will be taking the medication in the future.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay.   The medication information may come from sources such as the patient's memory, from a prescription bottle,  or from a list of medications the patient, clinician or other party maintains. 

The primary difference between a medicationstatement and a medicationadministration is that the medication administration has complete administration information and is based on actual administration information from the person who administered the medication.  A medicationstatement is often, if not always, less specific.  There is no required date/time when the medication was administered, in fact we only know that a source has reported the patient is taking this medication, where details such as time, quantity, or rate or even medication product may be incomplete or missing or less precise.  As stated earlier, the Medication Statement information may come from the patient's memory, from a prescription bottle or from a list of medications the patient, clinician or other party maintains.  Medication administration is more formal and is not missing detailed information.

The MedicationStatement resource was previously called MedicationStatement.")
	@ExtendedMetaData(kind="element", name="MedicationStatement", namespace="##targetNamespace")
	volatile transient derived !resolve val MedicationStatement[0..?] medicationStatement;

	@GenModel(documentation="A medicinal product, being a substance or combination of substances that is intended to treat, prevent or diagnose a disease, or to restore, correct or modify physiological functions by exerting a pharmacological, immunological or metabolic action. This resource is intended to define and detail such products and their properties, for uses other than direct patient care (e.g. regulatory use, or drug catalogs).")
	@ExtendedMetaData(kind="element", name="MedicinalProductDefinition", namespace="##targetNamespace")
	volatile transient derived !resolve val MedicinalProductDefinition[0..?] medicinalProductDefinition;

	@GenModel(documentation="Defines the characteristics of a message that can be shared between systems, including the type of event that initiates the message, the content to be transmitted and what response(s), if any, are permitted.")
	@ExtendedMetaData(kind="element", name="MessageDefinition", namespace="##targetNamespace")
	volatile transient derived !resolve val MessageDefinition[0..?] messageDefinition;

	@GenModel(documentation="The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.")
	@ExtendedMetaData(kind="element", name="MessageHeader", namespace="##targetNamespace")
	volatile transient derived !resolve val MessageHeader[0..?] messageHeader;

	@GenModel(documentation="Representation of a molecular sequence.")
	@ExtendedMetaData(kind="element", name="MolecularSequence", namespace="##targetNamespace")
	volatile transient derived !resolve val MolecularSequence[0..?] molecularSequence;

	@GenModel(documentation="A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a \"System\" used within the Identifier and Coding data types.")
	@ExtendedMetaData(kind="element", name="NamingSystem", namespace="##targetNamespace")
	volatile transient derived !resolve val NamingSystem[0..?] namingSystem;

	@GenModel(documentation="A record of food or fluid that is being consumed by a patient.   A NutritionIntake may indicate that the patient may be consuming the food or fluid now or has consumed the food or fluid in the past.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay or through an app that tracks food or fluids consumed.   The consumption information may come from sources such as the patient's memory, from a nutrition label,  or from a clinician documenting observed intake.")
	@ExtendedMetaData(kind="element", name="NutritionIntake", namespace="##targetNamespace")
	volatile transient derived !resolve val NutritionIntake[0..?] nutritionIntake;

	@GenModel(documentation="A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.")
	@ExtendedMetaData(kind="element", name="NutritionOrder", namespace="##targetNamespace")
	volatile transient derived !resolve val NutritionOrder[0..?] nutritionOrder;

	@GenModel(documentation="A food or supplement that is consumed by patients.")
	@ExtendedMetaData(kind="element", name="NutritionProduct", namespace="##targetNamespace")
	volatile transient derived !resolve val NutritionProduct[0..?] nutritionProduct;

	@GenModel(documentation="Measurements and simple assertions made about a patient, device or other subject.")
	@ExtendedMetaData(kind="element", name="Observation", namespace="##targetNamespace")
	volatile transient derived !resolve val Observation[0..?] observation;

	@GenModel(documentation="Set of definitional characteristics for a kind of observation or measurement produced or consumed by an orderable health care service.")
	@ExtendedMetaData(kind="element", name="ObservationDefinition", namespace="##targetNamespace")
	volatile transient derived !resolve val ObservationDefinition[0..?] observationDefinition;

	@GenModel(documentation="A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).")
	@ExtendedMetaData(kind="element", name="OperationDefinition", namespace="##targetNamespace")
	volatile transient derived !resolve val OperationDefinition[0..?] operationDefinition;

	@GenModel(documentation="A collection of error, warning, or information messages that result from a system action.")
	@ExtendedMetaData(kind="element", name="OperationOutcome", namespace="##targetNamespace")
	volatile transient derived !resolve val OperationOutcome[0..?] operationOutcome;

	@GenModel(documentation="A formally or informally recognized grouping of people or organizations formed for the purpose of achieving some form of collective action.  Includes companies, institutions, corporations, departments, community groups, healthcare practice groups, payer/insurer, etc.")
	@ExtendedMetaData(kind="element", name="Organization", namespace="##targetNamespace")
	volatile transient derived !resolve val Organization[0..?] organization;

	@GenModel(documentation="Defines an affiliation/association/relationship between 2 distinct organizations, that is not a part-of relationship/sub-division relationship.")
	@ExtendedMetaData(kind="element", name="OrganizationAffiliation", namespace="##targetNamespace")
	volatile transient derived !resolve val OrganizationAffiliation[0..?] organizationAffiliation;

	@GenModel(documentation="A medically related item or items, in a container or package.")
	@ExtendedMetaData(kind="element", name="PackagedProductDefinition", namespace="##targetNamespace")
	volatile transient derived !resolve val PackagedProductDefinition[0..?] packagedProductDefinition;

	@GenModel(documentation="This resource is used to pass information into and back from an operation (whether invoked directly from REST or within a messaging environment).  It is not persisted or allowed to be referenced by other resources.")
	@ExtendedMetaData(kind="element", name="Parameters", namespace="##targetNamespace")
	volatile transient derived !resolve val Parameters[0..?] parameters;

	@GenModel(documentation="Demographics and other administrative information about an individual or animal receiving care or other health-related services.")
	@ExtendedMetaData(kind="element", name="Patient", namespace="##targetNamespace")
	volatile transient derived !resolve val Patient[0..?] patient;

	@GenModel(documentation="This resource provides the status of the payment for goods and services rendered, and the request and response resource references.")
	@ExtendedMetaData(kind="element", name="PaymentNotice", namespace="##targetNamespace")
	volatile transient derived !resolve val PaymentNotice[0..?] paymentNotice;

	@GenModel(documentation="This resource provides the details including amount of a payment and allocates the payment items being paid.")
	@ExtendedMetaData(kind="element", name="PaymentReconciliation", namespace="##targetNamespace")
	volatile transient derived !resolve val PaymentReconciliation[0..?] paymentReconciliation;

	@GenModel(documentation="Permission resource holds access rules for a given data and context.")
	@ExtendedMetaData(kind="element", name="Permission", namespace="##targetNamespace")
	volatile transient derived !resolve val Permission[0..?] permission;

	@GenModel(documentation="Demographics and administrative information about a person independent of a specific health-related context.")
	@ExtendedMetaData(kind="element", name="Person", namespace="##targetNamespace")
	volatile transient derived !resolve val Person[0..?] person;

	@GenModel(documentation="This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical and non-clinical artifacts such as clinical decision support rules, order sets, protocols, and drug quality specifications.")
	@ExtendedMetaData(kind="element", name="PlanDefinition", namespace="##targetNamespace")
	volatile transient derived !resolve val PlanDefinition[0..?] planDefinition;

	@GenModel(documentation="A person who is directly or indirectly involved in the provisioning of healthcare or related services.")
	@ExtendedMetaData(kind="element", name="Practitioner", namespace="##targetNamespace")
	volatile transient derived !resolve val Practitioner[0..?] practitioner;

	@GenModel(documentation="A specific set of Roles/Locations/specialties/services that a practitioner may perform at an organization for a period of time.")
	@ExtendedMetaData(kind="element", name="PractitionerRole", namespace="##targetNamespace")
	volatile transient derived !resolve val PractitionerRole[0..?] practitionerRole;

	@GenModel(documentation="An action that is or was performed on or for a patient, practitioner, device, organization, or location. For example, this can be a physical intervention on a patient like an operation, or less invasive like long term services, counseling, or hypnotherapy.  This can be a quality or safety inspection for a location, organization, or device.  This can be an accreditation procedure on a practitioner for licensing.")
	@ExtendedMetaData(kind="element", name="Procedure", namespace="##targetNamespace")
	volatile transient derived !resolve val Procedure[0..?] procedure;

	@GenModel(documentation="Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.")
	@ExtendedMetaData(kind="element", name="Provenance", namespace="##targetNamespace")
	volatile transient derived !resolve val Provenance[0..?] provenance;

	@GenModel(documentation="A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection.")
	@ExtendedMetaData(kind="element", name="Questionnaire", namespace="##targetNamespace")
	volatile transient derived !resolve val Questionnaire[0..?] questionnaire;

	@GenModel(documentation="A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the questionnaire being responded to.")
	@ExtendedMetaData(kind="element", name="QuestionnaireResponse", namespace="##targetNamespace")
	volatile transient derived !resolve val QuestionnaireResponse[0..?] questionnaireResponse;

	@GenModel(documentation="Regulatory approval, clearance or licencing related to a regulated product, treatment, facility or activity that is cited in a guidance, regulation, rule or legislative act. An example is Market Authorization relating to a Medicinal Product.")
	@ExtendedMetaData(kind="element", name="RegulatedAuthorization", namespace="##targetNamespace")
	volatile transient derived !resolve val RegulatedAuthorization[0..?] regulatedAuthorization;

	@GenModel(documentation="Information about a person that is involved in a patient's health or the care for a patient, but who is not the target of healthcare, nor has a formal responsibility in the care process.")
	@ExtendedMetaData(kind="element", name="RelatedPerson", namespace="##targetNamespace")
	volatile transient derived !resolve val RelatedPerson[0..?] relatedPerson;

	@GenModel(documentation="A set of related requests that can be used to capture intended activities that have inter-dependencies such as \"give this medication after that one\".")
	@ExtendedMetaData(kind="element", name="RequestOrchestration", namespace="##targetNamespace")
	volatile transient derived !resolve val RequestOrchestration[0..?] requestOrchestration;

	@GenModel(documentation="A set of requirements - a list of features or behaviors of designed systems that are necessary to achieve organizational or regulatory goals.")
	@ExtendedMetaData(kind="element", name="Requirements", namespace="##targetNamespace")
	volatile transient derived !resolve val Requirements[0..?] requirements;

	@GenModel(documentation="A scientific study of nature that sometimes includes processes involved in health and disease. For example, clinical trials are research studies that involve people. These studies may be related to new ways to screen, prevent, diagnose, and treat disease. They may also study certain outcomes and certain groups of people by looking at data collected in the past or future.")
	@ExtendedMetaData(kind="element", name="ResearchStudy", namespace="##targetNamespace")
	volatile transient derived !resolve val ResearchStudy[0..?] researchStudy;

	@GenModel(documentation="A ResearchSubject is a participant or object which is the recipient of investigative activities in a research study.")
	@ExtendedMetaData(kind="element", name="ResearchSubject", namespace="##targetNamespace")
	volatile transient derived !resolve val ResearchSubject[0..?] researchSubject;

	@GenModel(documentation="An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome.")
	@ExtendedMetaData(kind="element", name="RiskAssessment", namespace="##targetNamespace")
	volatile transient derived !resolve val RiskAssessment[0..?] riskAssessment;

	@GenModel(documentation="A container for slots of time that may be available for booking appointments.")
	@ExtendedMetaData(kind="element", name="Schedule", namespace="##targetNamespace")
	volatile transient derived !resolve val Schedule[0..?] schedule;

	@GenModel(documentation="A search parameter that defines a named search item that can be used to search/filter on a resource.")
	@ExtendedMetaData(kind="element", name="SearchParameter", namespace="##targetNamespace")
	volatile transient derived !resolve val SearchParameter[0..?] searchParameter;

	@GenModel(documentation="A record of a request for service such as diagnostic investigations, treatments, or operations to be performed.")
	@ExtendedMetaData(kind="element", name="ServiceRequest", namespace="##targetNamespace")
	volatile transient derived !resolve val ServiceRequest[0..?] serviceRequest;

	@GenModel(documentation="A slot of time on a schedule that may be available for booking appointments.")
	@ExtendedMetaData(kind="element", name="Slot", namespace="##targetNamespace")
	volatile transient derived !resolve val Slot[0..?] slot;

	@GenModel(documentation="A sample to be used for analysis.")
	@ExtendedMetaData(kind="element", name="Specimen", namespace="##targetNamespace")
	volatile transient derived !resolve val Specimen[0..?] specimen;

	@GenModel(documentation="A kind of specimen with associated set of requirements.")
	@ExtendedMetaData(kind="element", name="SpecimenDefinition", namespace="##targetNamespace")
	volatile transient derived !resolve val SpecimenDefinition[0..?] specimenDefinition;

	@GenModel(documentation="A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.")
	@ExtendedMetaData(kind="element", name="StructureDefinition", namespace="##targetNamespace")
	volatile transient derived !resolve val StructureDefinition[0..?] structureDefinition;

	@GenModel(documentation="A Map of relationships between 2 structures that can be used to transform data.")
	@ExtendedMetaData(kind="element", name="StructureMap", namespace="##targetNamespace")
	volatile transient derived !resolve val StructureMap[0..?] structureMap;

	@GenModel(documentation="The subscription resource describes a particular client's request to be notified about a SubscriptionTopic.")
	@ExtendedMetaData(kind="element", name="Subscription", namespace="##targetNamespace")
	volatile transient derived !resolve val Subscription[0..?] subscription;

	@GenModel(documentation="The SubscriptionStatus resource describes the state of a Subscription during notifications.")
	@ExtendedMetaData(kind="element", name="SubscriptionStatus", namespace="##targetNamespace")
	volatile transient derived !resolve val SubscriptionStatus[0..?] subscriptionStatus;

	@GenModel(documentation="Describes a stream of resource state changes or events and annotated with labels useful to filter projections from this topic.")
	@ExtendedMetaData(kind="element", name="SubscriptionTopic", namespace="##targetNamespace")
	volatile transient derived !resolve val SubscriptionTopic[0..?] subscriptionTopic;

	@GenModel(documentation="A homogeneous material with a definite composition.")
	@ExtendedMetaData(kind="element", name="Substance", namespace="##targetNamespace")
	volatile transient derived !resolve val Substance[0..?] substance;

	@GenModel(documentation="The detailed description of a substance, typically at a level beyond what is used for prescribing.")
	@ExtendedMetaData(kind="element", name="SubstanceDefinition", namespace="##targetNamespace")
	volatile transient derived !resolve val SubstanceDefinition[0..?] substanceDefinition;

	@GenModel(documentation="Nucleic acids are defined by three distinct elements: the base, sugar and linkage. Individual substance/moiety IDs will be created for each of these elements. The nucleotide sequence will be always entered in the 5’-3’ direction.")
	@ExtendedMetaData(kind="element", name="SubstanceNucleicAcid", namespace="##targetNamespace")
	volatile transient derived !resolve val SubstanceNucleicAcid[0..?] substanceNucleicAcid;

	@GenModel(documentation="Properties of a substance specific to it being a polymer.")
	@ExtendedMetaData(kind="element", name="SubstancePolymer", namespace="##targetNamespace")
	volatile transient derived !resolve val SubstancePolymer[0..?] substancePolymer;

	@GenModel(documentation="A SubstanceProtein is defined as a single unit of a linear amino acid sequence, or a combination of subunits that are either covalently linked or have a defined invariant stoichiometric relationship. This includes all synthetic, recombinant and purified SubstanceProteins of defined sequence, whether the use is therapeutic or prophylactic. This set of elements will be used to describe albumins, coagulation factors, cytokines, growth factors, peptide/SubstanceProtein hormones, enzymes, toxins, toxoids, recombinant vaccines, and immunomodulators.")
	@ExtendedMetaData(kind="element", name="SubstanceProtein", namespace="##targetNamespace")
	volatile transient derived !resolve val SubstanceProtein[0..?] substanceProtein;

	@GenModel(documentation="Todo.")
	@ExtendedMetaData(kind="element", name="SubstanceReferenceInformation", namespace="##targetNamespace")
	volatile transient derived !resolve val SubstanceReferenceInformation[0..?] substanceReferenceInformation;

	@GenModel(documentation="Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex.")
	@ExtendedMetaData(kind="element", name="SubstanceSourceMaterial", namespace="##targetNamespace")
	volatile transient derived !resolve val SubstanceSourceMaterial[0..?] substanceSourceMaterial;

	@GenModel(documentation="Record of delivery of what is supplied.")
	@ExtendedMetaData(kind="element", name="SupplyDelivery", namespace="##targetNamespace")
	volatile transient derived !resolve val SupplyDelivery[0..?] supplyDelivery;

	@GenModel(documentation="A record of a request to deliver a medication, substance or device used in the healthcare setting to a particular destination for a particular person or organization.")
	@ExtendedMetaData(kind="element", name="SupplyRequest", namespace="##targetNamespace")
	volatile transient derived !resolve val SupplyRequest[0..?] supplyRequest;

	@GenModel(documentation="A task to be performed.")
	@ExtendedMetaData(kind="element", name="Task", namespace="##targetNamespace")
	volatile transient derived !resolve val Task[0..?] task;

	@GenModel(documentation="A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.")
	@ExtendedMetaData(kind="element", name="TerminologyCapabilities", namespace="##targetNamespace")
	volatile transient derived !resolve val TerminologyCapabilities[0..?] terminologyCapabilities;

	@GenModel(documentation="A plan for executing testing on an artifact or specifications.")
	@ExtendedMetaData(kind="element", name="TestPlan", namespace="##targetNamespace")
	volatile transient derived !resolve val TestPlan[0..?] testPlan;

	@GenModel(documentation="A summary of information based on the results of executing a TestScript.")
	@ExtendedMetaData(kind="element", name="TestReport", namespace="##targetNamespace")
	volatile transient derived !resolve val TestReport[0..?] testReport;

	@GenModel(documentation="A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.")
	@ExtendedMetaData(kind="element", name="TestScript", namespace="##targetNamespace")
	volatile transient derived !resolve val TestScript[0..?] testScript;

	@GenModel(documentation="Record of transport of item.")
	@ExtendedMetaData(kind="element", name="Transport", namespace="##targetNamespace")
	volatile transient derived !resolve val Transport[0..?] transport;

	@GenModel(documentation="A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) definitions and their use in [coded elements](terminologies.html).")
	@ExtendedMetaData(kind="element", name="ValueSet", namespace="##targetNamespace")
	volatile transient derived !resolve val ValueSet[0..?] valueSet;

	@GenModel(documentation="Describes validation requirements, source(s), status and dates for one or more elements.")
	@ExtendedMetaData(kind="element", name="VerificationResult", namespace="##targetNamespace")
	volatile transient derived !resolve val VerificationResult[0..?] verificationResult;

	@GenModel(documentation="An authorization for the provision of glasses and/or contact lenses to a patient.")
	@ExtendedMetaData(kind="element", name="VisionPrescription", namespace="##targetNamespace")
	volatile transient derived !resolve val VisionPrescription[0..?] visionPrescription;
}

@GenModel(documentation="A resource that includes narrative, extensions, and contained resources.")
@ExtendedMetaData(name="DomainResource", kind="elementOnly")
class DomainResource extends Resource {

	@GenModel(documentation="A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.")
	@ExtendedMetaData(kind="element", name="text", namespace="##targetNamespace")
	!resolve val Narrative text;

	@GenModel(documentation="These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, nor can they have their own independent transaction scope. This is allowed to be a Parameters resource if and only if it is referenced by a resource that provides context/meaning.")
	@ExtendedMetaData(kind="element", name="contained", namespace="##targetNamespace")
	!resolve val ResourceContainer[*] contained;

	@GenModel(documentation="May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.")
	@ExtendedMetaData(kind="element", name="extension", namespace="##targetNamespace")
	!resolve val Extension[*] extension;

	@GenModel(documentation="May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).")
	@ExtendedMetaData(kind="element", name="modifierExtension", namespace="##targetNamespace")
	!resolve val Extension[*] modifierExtension;
}

@GenModel(documentation="Indicates how the medication is/was taken or should be taken by the patient.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="Dosage", kind="elementOnly")
class Dosage extends BackboneType {

	@GenModel(documentation="Indicates the order in which the dosage instructions should be applied or interpreted.")
	@ExtendedMetaData(kind="element", name="sequence", namespace="##targetNamespace")
	!resolve val Integer sequence;

	@GenModel(documentation="Free text dosage instructions e.g. SIG.")
	@ExtendedMetaData(kind="element", name="text", namespace="##targetNamespace")
	!resolve val String text;

	@GenModel(documentation="Supplemental instructions to the patient on how to take the medication  (e.g. \"with meals\" or\"take half to one hour before food\") or warnings for the patient about the medication (e.g. \"may cause drowsiness\" or \"avoid exposure of skin to direct sunlight or sunlamps\").")
	@ExtendedMetaData(kind="element", name="additionalInstruction", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] additionalInstruction;

	@GenModel(documentation="Instructions in terms that are understood by the patient or consumer.")
	@ExtendedMetaData(kind="element", name="patientInstruction", namespace="##targetNamespace")
	!resolve val String patientInstruction;

	@GenModel(documentation="When medication should be administered.")
	@ExtendedMetaData(kind="element", name="timing", namespace="##targetNamespace")
	!resolve val Timing timing;

	@GenModel(documentation="Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option).")
	@ExtendedMetaData(kind="element", name="asNeeded", namespace="##targetNamespace")
	!resolve val Boolean asNeeded;

	@GenModel(documentation="Indicates whether the Medication is only taken based on a precondition for taking the Medication (CodeableConcept).")
	@ExtendedMetaData(kind="element", name="asNeededFor", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] asNeededFor;

	@GenModel(documentation="Body site to administer to.")
	@ExtendedMetaData(kind="element", name="site", namespace="##targetNamespace")
	!resolve val CodeableConcept site;

	@GenModel(documentation="How drug should enter body.")
	@ExtendedMetaData(kind="element", name="route", namespace="##targetNamespace")
	!resolve val CodeableConcept route;

	@GenModel(documentation="Technique for administering medication.")
	@ExtendedMetaData(kind="element", name="method", namespace="##targetNamespace")
	!resolve val CodeableConcept method;

	@GenModel(documentation="Depending on the resource,this is the amount of medication administered, to  be administered or typical amount to be administered.")
	@ExtendedMetaData(kind="element", name="doseAndRate", namespace="##targetNamespace")
	!resolve val DosageDoseAndRate[*] doseAndRate;

	@GenModel(documentation="Upper limit on medication per unit of time.")
	@ExtendedMetaData(kind="element", name="maxDosePerPeriod", namespace="##targetNamespace")
	!resolve val Ratio[*] maxDosePerPeriod;

	@GenModel(documentation="Upper limit on medication per administration.")
	@ExtendedMetaData(kind="element", name="maxDosePerAdministration", namespace="##targetNamespace")
	!resolve val Quantity maxDosePerAdministration;

	@GenModel(documentation="Upper limit on medication per lifetime of the patient.")
	@ExtendedMetaData(kind="element", name="maxDosePerLifetime", namespace="##targetNamespace")
	!resolve val Quantity maxDosePerLifetime;
}

@GenModel(documentation="Indicates how the medication is/was taken or should be taken by the patient.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="Dosage.DoseAndRate", kind="elementOnly")
class DosageDoseAndRate extends BackboneType {

	@GenModel(documentation="The kind of dose or rate specified, for example, ordered or calculated.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@ExtendedMetaData(kind="element", name="doseRange", namespace="##targetNamespace")
	!resolve val Range doseRange;

	@ExtendedMetaData(kind="element", name="doseQuantity", namespace="##targetNamespace")
	!resolve val Quantity doseQuantity;

	@ExtendedMetaData(kind="element", name="rateRatio", namespace="##targetNamespace")
	!resolve val Ratio rateRatio;

	@ExtendedMetaData(kind="element", name="rateRange", namespace="##targetNamespace")
	!resolve val Range rateRange;

	@ExtendedMetaData(kind="element", name="rateQuantity", namespace="##targetNamespace")
	!resolve val Quantity rateQuantity;
}

@GenModel(documentation="A length of time.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="Duration", kind="elementOnly")
class Duration extends Quantity {
}

@GenModel(documentation="Base definition for all elements in a resource.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="Element", kind="elementOnly")
class Element extends Base {

	@GenModel(documentation="May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and managable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.")
	@ExtendedMetaData(kind="element", name="extension", namespace="##targetNamespace")
	!resolve val Extension[*] extension;

	@ExtendedMetaData(kind="attribute", name="id")
	attr StringPrimitive ~id;
}

@GenModel(documentation="Captures constraints on each element within the resource, profile, or extension.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="ElementDefinition", kind="elementOnly")
class ElementDefinition extends BackboneType {

	@GenModel(documentation="The path identifies the element and is expressed as a \".\"-separated list of ancestor elements, beginning with the name of the resource or extension.")
	@ExtendedMetaData(kind="element", name="path", namespace="##targetNamespace")
	!resolve val String[1] path;

	@GenModel(documentation="Codes that define how this element is represented in instances, when the deviation varies from the normal case. No extensions are allowed on elements with a representation of 'xmlAttr', no matter what FHIR serialization format is used.")
	@ExtendedMetaData(kind="element", name="representation", namespace="##targetNamespace")
	!resolve val PropertyRepresentation[*] representation;

	@GenModel(documentation="The name of this element definition slice, when slicing is working. The name must be a token with no dots or spaces. This is a unique name referring to a specific set of constraints applied to this element, used to provide a name to different slices of the same element.")
	@ExtendedMetaData(kind="element", name="sliceName", namespace="##targetNamespace")
	!resolve val String sliceName;

	@GenModel(documentation="If true, indicates that this slice definition is constraining a slice definition with the same name in an inherited profile. If false, the slice is not overriding any slice in an inherited profile. If missing, the slice might or might not be overriding a slice in an inherited profile, depending on the sliceName.")
	@ExtendedMetaData(kind="element", name="sliceIsConstraining", namespace="##targetNamespace")
	!resolve val Boolean sliceIsConstraining;

	@GenModel(documentation="A single preferred label which is the text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form.")
	@ExtendedMetaData(kind="element", name="label", namespace="##targetNamespace")
	!resolve val String label;

	@GenModel(documentation="A code that has the same meaning as the element in a particular terminology.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val Coding[*] code;

	@GenModel(documentation="Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).")
	@ExtendedMetaData(kind="element", name="slicing", namespace="##targetNamespace")
	!resolve val ElementDefinitionSlicing slicing;

	@GenModel(documentation="A concise description of what this element means (e.g. for use in autogenerated summaries).")
	@ExtendedMetaData(kind="element", name="short", namespace="##targetNamespace")
	!resolve val String short;

	@GenModel(documentation="Provides a complete explanation of the meaning of the data element for human readability.  For the case of elements derived from existing elements (e.g. constraints), the definition SHALL be consistent with the base definition, but convey the meaning of the element in the particular context of use of the resource. (Note: The text you are reading is specified in ElementDefinition.definition).")
	@ExtendedMetaData(kind="element", name="definition", namespace="##targetNamespace")
	!resolve val Markdown definition;

	@GenModel(documentation="Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc. (Note: The text you are reading is specified in ElementDefinition.comment).")
	@ExtendedMetaData(kind="element", name="comment", namespace="##targetNamespace")
	!resolve val Markdown comment;

	@GenModel(documentation="This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element.")
	@ExtendedMetaData(kind="element", name="requirements", namespace="##targetNamespace")
	!resolve val Markdown requirements;

	@GenModel(documentation="Identifies additional names by which this element might also be known.")
	@ExtendedMetaData(kind="element", name="alias", namespace="##targetNamespace")
	!resolve val String[*] alias;

	@GenModel(documentation="The minimum number of times this element SHALL appear in the instance.")
	@ExtendedMetaData(kind="element", name="min", namespace="##targetNamespace")
	!resolve val UnsignedInt min;

	@GenModel(documentation="The maximum number of times this element is permitted to appear in the instance.")
	@ExtendedMetaData(kind="element", name="max", namespace="##targetNamespace")
	!resolve val String max;

	@GenModel(documentation="Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. When the element definition is not the original definition of an element - e.g. either in a constraint on another type, or for elements from a super type in a snap shot - then the information in provided in the element definition may be different to the base definition. On the original definition of the element, it will be same.")
	@ExtendedMetaData(kind="element", name="base", namespace="##targetNamespace")
	!resolve val ElementDefinitionBase base;

	@GenModel(documentation="Identifies an element defined elsewhere in the definition whose content rules should be applied to the current element. ContentReferences bring across all the rules that are in the ElementDefinition for the element, including definitions, cardinality constraints, bindings, invariants etc.")
	@ExtendedMetaData(kind="element", name="contentReference", namespace="##targetNamespace")
	!resolve val Uri contentReference;

	@GenModel(documentation="The data type or resource that the value of this element is permitted to be.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val ElementDefinitionType[*] type;

	@ExtendedMetaData(kind="element", name="defaultValueBase64Binary", namespace="##targetNamespace")
	!resolve val Base64Binary defaultValueBase64Binary;

	@ExtendedMetaData(kind="element", name="defaultValueBoolean", namespace="##targetNamespace")
	!resolve val Boolean defaultValueBoolean;

	@ExtendedMetaData(kind="element", name="defaultValueCanonical", namespace="##targetNamespace")
	!resolve val Canonical defaultValueCanonical;

	@ExtendedMetaData(kind="element", name="defaultValueCode", namespace="##targetNamespace")
	!resolve val Code defaultValueCode;

	@ExtendedMetaData(kind="element", name="defaultValueDate", namespace="##targetNamespace")
	!resolve val Date defaultValueDate;

	@ExtendedMetaData(kind="element", name="defaultValueDateTime", namespace="##targetNamespace")
	!resolve val DateTime defaultValueDateTime;

	@ExtendedMetaData(kind="element", name="defaultValueDecimal", namespace="##targetNamespace")
	!resolve val Decimal defaultValueDecimal;

	@ExtendedMetaData(kind="element", name="defaultValueId", namespace="##targetNamespace")
	!resolve val Id defaultValueId;

	@ExtendedMetaData(kind="element", name="defaultValueInstant", namespace="##targetNamespace")
	!resolve val Instant defaultValueInstant;

	@ExtendedMetaData(kind="element", name="defaultValueInteger", namespace="##targetNamespace")
	!resolve val Integer defaultValueInteger;

	@ExtendedMetaData(kind="element", name="defaultValueInteger64", namespace="##targetNamespace")
	!resolve val Integer64 defaultValueInteger64;

	@ExtendedMetaData(kind="element", name="defaultValueMarkdown", namespace="##targetNamespace")
	!resolve val Markdown defaultValueMarkdown;

	@ExtendedMetaData(kind="element", name="defaultValueOid", namespace="##targetNamespace")
	!resolve val Oid defaultValueOid;

	@ExtendedMetaData(kind="element", name="defaultValuePositiveInt", namespace="##targetNamespace")
	!resolve val PositiveInt defaultValuePositiveInt;

	@ExtendedMetaData(kind="element", name="defaultValueString", namespace="##targetNamespace")
	!resolve val String defaultValueString;

	@ExtendedMetaData(kind="element", name="defaultValueTime", namespace="##targetNamespace")
	!resolve val Time defaultValueTime;

	@ExtendedMetaData(kind="element", name="defaultValueUnsignedInt", namespace="##targetNamespace")
	!resolve val UnsignedInt defaultValueUnsignedInt;

	@ExtendedMetaData(kind="element", name="defaultValueUri", namespace="##targetNamespace")
	!resolve val Uri defaultValueUri;

	@ExtendedMetaData(kind="element", name="defaultValueUrl", namespace="##targetNamespace")
	!resolve val Url defaultValueUrl;

	@ExtendedMetaData(kind="element", name="defaultValueUuid", namespace="##targetNamespace")
	!resolve val Uuid defaultValueUuid;

	@ExtendedMetaData(kind="element", name="defaultValueAddress", namespace="##targetNamespace")
	!resolve val Address defaultValueAddress;

	@ExtendedMetaData(kind="element", name="defaultValueAge", namespace="##targetNamespace")
	!resolve val Age defaultValueAge;

	@ExtendedMetaData(kind="element", name="defaultValueAnnotation", namespace="##targetNamespace")
	!resolve val Annotation defaultValueAnnotation;

	@ExtendedMetaData(kind="element", name="defaultValueAttachment", namespace="##targetNamespace")
	!resolve val Attachment defaultValueAttachment;

	@ExtendedMetaData(kind="element", name="defaultValueCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept defaultValueCodeableConcept;

	@ExtendedMetaData(kind="element", name="defaultValueCodeableReference", namespace="##targetNamespace")
	!resolve val CodeableReference defaultValueCodeableReference;

	@ExtendedMetaData(kind="element", name="defaultValueCoding", namespace="##targetNamespace")
	!resolve val Coding defaultValueCoding;

	@ExtendedMetaData(kind="element", name="defaultValueContactPoint", namespace="##targetNamespace")
	!resolve val ContactPoint defaultValueContactPoint;

	@ExtendedMetaData(kind="element", name="defaultValueCount", namespace="##targetNamespace")
	!resolve val Count defaultValueCount;

	@ExtendedMetaData(kind="element", name="defaultValueDistance", namespace="##targetNamespace")
	!resolve val Distance defaultValueDistance;

	@ExtendedMetaData(kind="element", name="defaultValueDuration", namespace="##targetNamespace")
	!resolve val Duration defaultValueDuration;

	@ExtendedMetaData(kind="element", name="defaultValueHumanName", namespace="##targetNamespace")
	!resolve val HumanName defaultValueHumanName;

	@ExtendedMetaData(kind="element", name="defaultValueIdentifier", namespace="##targetNamespace")
	!resolve val Identifier defaultValueIdentifier;

	@ExtendedMetaData(kind="element", name="defaultValueMoney", namespace="##targetNamespace")
	!resolve val Money defaultValueMoney;

	@ExtendedMetaData(kind="element", name="defaultValuePeriod", namespace="##targetNamespace")
	!resolve val Period defaultValuePeriod;

	@ExtendedMetaData(kind="element", name="defaultValueQuantity", namespace="##targetNamespace")
	!resolve val Quantity defaultValueQuantity;

	@ExtendedMetaData(kind="element", name="defaultValueRange", namespace="##targetNamespace")
	!resolve val Range defaultValueRange;

	@ExtendedMetaData(kind="element", name="defaultValueRatio", namespace="##targetNamespace")
	!resolve val Ratio defaultValueRatio;

	@ExtendedMetaData(kind="element", name="defaultValueRatioRange", namespace="##targetNamespace")
	!resolve val RatioRange defaultValueRatioRange;

	@ExtendedMetaData(kind="element", name="defaultValueReference", namespace="##targetNamespace")
	!resolve val Reference defaultValueReference;

	@ExtendedMetaData(kind="element", name="defaultValueSampledData", namespace="##targetNamespace")
	!resolve val SampledData defaultValueSampledData;

	@ExtendedMetaData(kind="element", name="defaultValueSignature", namespace="##targetNamespace")
	!resolve val Signature defaultValueSignature;

	@ExtendedMetaData(kind="element", name="defaultValueTiming", namespace="##targetNamespace")
	!resolve val Timing defaultValueTiming;

	@ExtendedMetaData(kind="element", name="defaultValueContactDetail", namespace="##targetNamespace")
	!resolve val ContactDetail defaultValueContactDetail;

	@ExtendedMetaData(kind="element", name="defaultValueDataRequirement", namespace="##targetNamespace")
	!resolve val DataRequirement defaultValueDataRequirement;

	@ExtendedMetaData(kind="element", name="defaultValueExpression", namespace="##targetNamespace")
	!resolve val Expression defaultValueExpression;

	@ExtendedMetaData(kind="element", name="defaultValueParameterDefinition", namespace="##targetNamespace")
	!resolve val ParameterDefinition defaultValueParameterDefinition;

	@ExtendedMetaData(kind="element", name="defaultValueRelatedArtifact", namespace="##targetNamespace")
	!resolve val RelatedArtifact defaultValueRelatedArtifact;

	@ExtendedMetaData(kind="element", name="defaultValueTriggerDefinition", namespace="##targetNamespace")
	!resolve val TriggerDefinition defaultValueTriggerDefinition;

	@ExtendedMetaData(kind="element", name="defaultValueUsageContext", namespace="##targetNamespace")
	!resolve val UsageContext defaultValueUsageContext;

	@ExtendedMetaData(kind="element", name="defaultValueAvailability", namespace="##targetNamespace")
	!resolve val Availability defaultValueAvailability;

	@ExtendedMetaData(kind="element", name="defaultValueExtendedContactDetail", namespace="##targetNamespace")
	!resolve val ExtendedContactDetail defaultValueExtendedContactDetail;

	@ExtendedMetaData(kind="element", name="defaultValueDosage", namespace="##targetNamespace")
	!resolve val Dosage defaultValueDosage;

	@ExtendedMetaData(kind="element", name="defaultValueMeta", namespace="##targetNamespace")
	!resolve val Meta defaultValueMeta;

	@GenModel(documentation="The Implicit meaning that is to be understood when this element is missing (e.g. 'when this element is missing, the period is ongoing').")
	@ExtendedMetaData(kind="element", name="meaningWhenMissing", namespace="##targetNamespace")
	!resolve val Markdown meaningWhenMissing;

	@GenModel(documentation="If present, indicates that the order of the repeating element has meaning and describes what that meaning is.  If absent, it means that the order of the element has no meaning.")
	@ExtendedMetaData(kind="element", name="orderMeaning", namespace="##targetNamespace")
	!resolve val String orderMeaning;

	@ExtendedMetaData(kind="element", name="fixedBase64Binary", namespace="##targetNamespace")
	!resolve val Base64Binary fixedBase64Binary;

	@ExtendedMetaData(kind="element", name="fixedBoolean", namespace="##targetNamespace")
	!resolve val Boolean fixedBoolean;

	@ExtendedMetaData(kind="element", name="fixedCanonical", namespace="##targetNamespace")
	!resolve val Canonical fixedCanonical;

	@ExtendedMetaData(kind="element", name="fixedCode", namespace="##targetNamespace")
	!resolve val Code fixedCode;

	@ExtendedMetaData(kind="element", name="fixedDate", namespace="##targetNamespace")
	!resolve val Date fixedDate;

	@ExtendedMetaData(kind="element", name="fixedDateTime", namespace="##targetNamespace")
	!resolve val DateTime fixedDateTime;

	@ExtendedMetaData(kind="element", name="fixedDecimal", namespace="##targetNamespace")
	!resolve val Decimal fixedDecimal;

	@ExtendedMetaData(kind="element", name="fixedId", namespace="##targetNamespace")
	!resolve val Id fixedId;

	@ExtendedMetaData(kind="element", name="fixedInstant", namespace="##targetNamespace")
	!resolve val Instant fixedInstant;

	@ExtendedMetaData(kind="element", name="fixedInteger", namespace="##targetNamespace")
	!resolve val Integer fixedInteger;

	@ExtendedMetaData(kind="element", name="fixedInteger64", namespace="##targetNamespace")
	!resolve val Integer64 fixedInteger64;

	@ExtendedMetaData(kind="element", name="fixedMarkdown", namespace="##targetNamespace")
	!resolve val Markdown fixedMarkdown;

	@ExtendedMetaData(kind="element", name="fixedOid", namespace="##targetNamespace")
	!resolve val Oid fixedOid;

	@ExtendedMetaData(kind="element", name="fixedPositiveInt", namespace="##targetNamespace")
	!resolve val PositiveInt fixedPositiveInt;

	@ExtendedMetaData(kind="element", name="fixedString", namespace="##targetNamespace")
	!resolve val String fixedString;

	@ExtendedMetaData(kind="element", name="fixedTime", namespace="##targetNamespace")
	!resolve val Time fixedTime;

	@ExtendedMetaData(kind="element", name="fixedUnsignedInt", namespace="##targetNamespace")
	!resolve val UnsignedInt fixedUnsignedInt;

	@ExtendedMetaData(kind="element", name="fixedUri", namespace="##targetNamespace")
	!resolve val Uri fixedUri;

	@ExtendedMetaData(kind="element", name="fixedUrl", namespace="##targetNamespace")
	!resolve val Url fixedUrl;

	@ExtendedMetaData(kind="element", name="fixedUuid", namespace="##targetNamespace")
	!resolve val Uuid fixedUuid;

	@ExtendedMetaData(kind="element", name="fixedAddress", namespace="##targetNamespace")
	!resolve val Address fixedAddress;

	@ExtendedMetaData(kind="element", name="fixedAge", namespace="##targetNamespace")
	!resolve val Age fixedAge;

	@ExtendedMetaData(kind="element", name="fixedAnnotation", namespace="##targetNamespace")
	!resolve val Annotation fixedAnnotation;

	@ExtendedMetaData(kind="element", name="fixedAttachment", namespace="##targetNamespace")
	!resolve val Attachment fixedAttachment;

	@ExtendedMetaData(kind="element", name="fixedCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept fixedCodeableConcept;

	@ExtendedMetaData(kind="element", name="fixedCodeableReference", namespace="##targetNamespace")
	!resolve val CodeableReference fixedCodeableReference;

	@ExtendedMetaData(kind="element", name="fixedCoding", namespace="##targetNamespace")
	!resolve val Coding fixedCoding;

	@ExtendedMetaData(kind="element", name="fixedContactPoint", namespace="##targetNamespace")
	!resolve val ContactPoint fixedContactPoint;

	@ExtendedMetaData(kind="element", name="fixedCount", namespace="##targetNamespace")
	!resolve val Count fixedCount;

	@ExtendedMetaData(kind="element", name="fixedDistance", namespace="##targetNamespace")
	!resolve val Distance fixedDistance;

	@ExtendedMetaData(kind="element", name="fixedDuration", namespace="##targetNamespace")
	!resolve val Duration fixedDuration;

	@ExtendedMetaData(kind="element", name="fixedHumanName", namespace="##targetNamespace")
	!resolve val HumanName fixedHumanName;

	@ExtendedMetaData(kind="element", name="fixedIdentifier", namespace="##targetNamespace")
	!resolve val Identifier fixedIdentifier;

	@ExtendedMetaData(kind="element", name="fixedMoney", namespace="##targetNamespace")
	!resolve val Money fixedMoney;

	@ExtendedMetaData(kind="element", name="fixedPeriod", namespace="##targetNamespace")
	!resolve val Period fixedPeriod;

	@ExtendedMetaData(kind="element", name="fixedQuantity", namespace="##targetNamespace")
	!resolve val Quantity fixedQuantity;

	@ExtendedMetaData(kind="element", name="fixedRange", namespace="##targetNamespace")
	!resolve val Range fixedRange;

	@ExtendedMetaData(kind="element", name="fixedRatio", namespace="##targetNamespace")
	!resolve val Ratio fixedRatio;

	@ExtendedMetaData(kind="element", name="fixedRatioRange", namespace="##targetNamespace")
	!resolve val RatioRange fixedRatioRange;

	@ExtendedMetaData(kind="element", name="fixedReference", namespace="##targetNamespace")
	!resolve val Reference fixedReference;

	@ExtendedMetaData(kind="element", name="fixedSampledData", namespace="##targetNamespace")
	!resolve val SampledData fixedSampledData;

	@ExtendedMetaData(kind="element", name="fixedSignature", namespace="##targetNamespace")
	!resolve val Signature fixedSignature;

	@ExtendedMetaData(kind="element", name="fixedTiming", namespace="##targetNamespace")
	!resolve val Timing fixedTiming;

	@ExtendedMetaData(kind="element", name="fixedContactDetail", namespace="##targetNamespace")
	!resolve val ContactDetail fixedContactDetail;

	@ExtendedMetaData(kind="element", name="fixedDataRequirement", namespace="##targetNamespace")
	!resolve val DataRequirement fixedDataRequirement;

	@ExtendedMetaData(kind="element", name="fixedExpression", namespace="##targetNamespace")
	!resolve val Expression fixedExpression;

	@ExtendedMetaData(kind="element", name="fixedParameterDefinition", namespace="##targetNamespace")
	!resolve val ParameterDefinition fixedParameterDefinition;

	@ExtendedMetaData(kind="element", name="fixedRelatedArtifact", namespace="##targetNamespace")
	!resolve val RelatedArtifact fixedRelatedArtifact;

	@ExtendedMetaData(kind="element", name="fixedTriggerDefinition", namespace="##targetNamespace")
	!resolve val TriggerDefinition fixedTriggerDefinition;

	@ExtendedMetaData(kind="element", name="fixedUsageContext", namespace="##targetNamespace")
	!resolve val UsageContext fixedUsageContext;

	@ExtendedMetaData(kind="element", name="fixedAvailability", namespace="##targetNamespace")
	!resolve val Availability fixedAvailability;

	@ExtendedMetaData(kind="element", name="fixedExtendedContactDetail", namespace="##targetNamespace")
	!resolve val ExtendedContactDetail fixedExtendedContactDetail;

	@ExtendedMetaData(kind="element", name="fixedDosage", namespace="##targetNamespace")
	!resolve val Dosage fixedDosage;

	@ExtendedMetaData(kind="element", name="fixedMeta", namespace="##targetNamespace")
	!resolve val Meta fixedMeta;

	@ExtendedMetaData(kind="element", name="patternBase64Binary", namespace="##targetNamespace")
	!resolve val Base64Binary patternBase64Binary;

	@ExtendedMetaData(kind="element", name="patternBoolean", namespace="##targetNamespace")
	!resolve val Boolean patternBoolean;

	@ExtendedMetaData(kind="element", name="patternCanonical", namespace="##targetNamespace")
	!resolve val Canonical patternCanonical;

	@ExtendedMetaData(kind="element", name="patternCode", namespace="##targetNamespace")
	!resolve val Code patternCode;

	@ExtendedMetaData(kind="element", name="patternDate", namespace="##targetNamespace")
	!resolve val Date patternDate;

	@ExtendedMetaData(kind="element", name="patternDateTime", namespace="##targetNamespace")
	!resolve val DateTime patternDateTime;

	@ExtendedMetaData(kind="element", name="patternDecimal", namespace="##targetNamespace")
	!resolve val Decimal patternDecimal;

	@ExtendedMetaData(kind="element", name="patternId", namespace="##targetNamespace")
	!resolve val Id patternId;

	@ExtendedMetaData(kind="element", name="patternInstant", namespace="##targetNamespace")
	!resolve val Instant patternInstant;

	@ExtendedMetaData(kind="element", name="patternInteger", namespace="##targetNamespace")
	!resolve val Integer patternInteger;

	@ExtendedMetaData(kind="element", name="patternInteger64", namespace="##targetNamespace")
	!resolve val Integer64 patternInteger64;

	@ExtendedMetaData(kind="element", name="patternMarkdown", namespace="##targetNamespace")
	!resolve val Markdown patternMarkdown;

	@ExtendedMetaData(kind="element", name="patternOid", namespace="##targetNamespace")
	!resolve val Oid patternOid;

	@ExtendedMetaData(kind="element", name="patternPositiveInt", namespace="##targetNamespace")
	!resolve val PositiveInt patternPositiveInt;

	@ExtendedMetaData(kind="element", name="patternString", namespace="##targetNamespace")
	!resolve val String patternString;

	@ExtendedMetaData(kind="element", name="patternTime", namespace="##targetNamespace")
	!resolve val Time patternTime;

	@ExtendedMetaData(kind="element", name="patternUnsignedInt", namespace="##targetNamespace")
	!resolve val UnsignedInt patternUnsignedInt;

	@ExtendedMetaData(kind="element", name="patternUri", namespace="##targetNamespace")
	!resolve val Uri patternUri;

	@ExtendedMetaData(kind="element", name="patternUrl", namespace="##targetNamespace")
	!resolve val Url patternUrl;

	@ExtendedMetaData(kind="element", name="patternUuid", namespace="##targetNamespace")
	!resolve val Uuid patternUuid;

	@ExtendedMetaData(kind="element", name="patternAddress", namespace="##targetNamespace")
	!resolve val Address patternAddress;

	@ExtendedMetaData(kind="element", name="patternAge", namespace="##targetNamespace")
	!resolve val Age patternAge;

	@ExtendedMetaData(kind="element", name="patternAnnotation", namespace="##targetNamespace")
	!resolve val Annotation patternAnnotation;

	@ExtendedMetaData(kind="element", name="patternAttachment", namespace="##targetNamespace")
	!resolve val Attachment patternAttachment;

	@ExtendedMetaData(kind="element", name="patternCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept patternCodeableConcept;

	@ExtendedMetaData(kind="element", name="patternCodeableReference", namespace="##targetNamespace")
	!resolve val CodeableReference patternCodeableReference;

	@ExtendedMetaData(kind="element", name="patternCoding", namespace="##targetNamespace")
	!resolve val Coding patternCoding;

	@ExtendedMetaData(kind="element", name="patternContactPoint", namespace="##targetNamespace")
	!resolve val ContactPoint patternContactPoint;

	@ExtendedMetaData(kind="element", name="patternCount", namespace="##targetNamespace")
	!resolve val Count patternCount;

	@ExtendedMetaData(kind="element", name="patternDistance", namespace="##targetNamespace")
	!resolve val Distance patternDistance;

	@ExtendedMetaData(kind="element", name="patternDuration", namespace="##targetNamespace")
	!resolve val Duration patternDuration;

	@ExtendedMetaData(kind="element", name="patternHumanName", namespace="##targetNamespace")
	!resolve val HumanName patternHumanName;

	@ExtendedMetaData(kind="element", name="patternIdentifier", namespace="##targetNamespace")
	!resolve val Identifier patternIdentifier;

	@ExtendedMetaData(kind="element", name="patternMoney", namespace="##targetNamespace")
	!resolve val Money patternMoney;

	@ExtendedMetaData(kind="element", name="patternPeriod", namespace="##targetNamespace")
	!resolve val Period patternPeriod;

	@ExtendedMetaData(kind="element", name="patternQuantity", namespace="##targetNamespace")
	!resolve val Quantity patternQuantity;

	@ExtendedMetaData(kind="element", name="patternRange", namespace="##targetNamespace")
	!resolve val Range patternRange;

	@ExtendedMetaData(kind="element", name="patternRatio", namespace="##targetNamespace")
	!resolve val Ratio patternRatio;

	@ExtendedMetaData(kind="element", name="patternRatioRange", namespace="##targetNamespace")
	!resolve val RatioRange patternRatioRange;

	@ExtendedMetaData(kind="element", name="patternReference", namespace="##targetNamespace")
	!resolve val Reference patternReference;

	@ExtendedMetaData(kind="element", name="patternSampledData", namespace="##targetNamespace")
	!resolve val SampledData patternSampledData;

	@ExtendedMetaData(kind="element", name="patternSignature", namespace="##targetNamespace")
	!resolve val Signature patternSignature;

	@ExtendedMetaData(kind="element", name="patternTiming", namespace="##targetNamespace")
	!resolve val Timing patternTiming;

	@ExtendedMetaData(kind="element", name="patternContactDetail", namespace="##targetNamespace")
	!resolve val ContactDetail patternContactDetail;

	@ExtendedMetaData(kind="element", name="patternDataRequirement", namespace="##targetNamespace")
	!resolve val DataRequirement patternDataRequirement;

	@ExtendedMetaData(kind="element", name="patternExpression", namespace="##targetNamespace")
	!resolve val Expression patternExpression;

	@ExtendedMetaData(kind="element", name="patternParameterDefinition", namespace="##targetNamespace")
	!resolve val ParameterDefinition patternParameterDefinition;

	@ExtendedMetaData(kind="element", name="patternRelatedArtifact", namespace="##targetNamespace")
	!resolve val RelatedArtifact patternRelatedArtifact;

	@ExtendedMetaData(kind="element", name="patternTriggerDefinition", namespace="##targetNamespace")
	!resolve val TriggerDefinition patternTriggerDefinition;

	@ExtendedMetaData(kind="element", name="patternUsageContext", namespace="##targetNamespace")
	!resolve val UsageContext patternUsageContext;

	@ExtendedMetaData(kind="element", name="patternAvailability", namespace="##targetNamespace")
	!resolve val Availability patternAvailability;

	@ExtendedMetaData(kind="element", name="patternExtendedContactDetail", namespace="##targetNamespace")
	!resolve val ExtendedContactDetail patternExtendedContactDetail;

	@ExtendedMetaData(kind="element", name="patternDosage", namespace="##targetNamespace")
	!resolve val Dosage patternDosage;

	@ExtendedMetaData(kind="element", name="patternMeta", namespace="##targetNamespace")
	!resolve val Meta patternMeta;

	@GenModel(documentation="A sample value for this element demonstrating the type of information that would typically be found in the element.")
	@ExtendedMetaData(kind="element", name="example", namespace="##targetNamespace")
	!resolve val ElementDefinitionExample[*] example;

	@ExtendedMetaData(kind="element", name="minValueDate", namespace="##targetNamespace")
	!resolve val Date minValueDate;

	@ExtendedMetaData(kind="element", name="minValueDateTime", namespace="##targetNamespace")
	!resolve val DateTime minValueDateTime;

	@ExtendedMetaData(kind="element", name="minValueInstant", namespace="##targetNamespace")
	!resolve val Instant minValueInstant;

	@ExtendedMetaData(kind="element", name="minValueTime", namespace="##targetNamespace")
	!resolve val Time minValueTime;

	@ExtendedMetaData(kind="element", name="minValueDecimal", namespace="##targetNamespace")
	!resolve val Decimal minValueDecimal;

	@ExtendedMetaData(kind="element", name="minValueInteger", namespace="##targetNamespace")
	!resolve val Integer minValueInteger;

	@ExtendedMetaData(kind="element", name="minValueInteger64", namespace="##targetNamespace")
	!resolve val Integer64 minValueInteger64;

	@ExtendedMetaData(kind="element", name="minValuePositiveInt", namespace="##targetNamespace")
	!resolve val PositiveInt minValuePositiveInt;

	@ExtendedMetaData(kind="element", name="minValueUnsignedInt", namespace="##targetNamespace")
	!resolve val UnsignedInt minValueUnsignedInt;

	@ExtendedMetaData(kind="element", name="minValueQuantity", namespace="##targetNamespace")
	!resolve val Quantity minValueQuantity;

	@ExtendedMetaData(kind="element", name="maxValueDate", namespace="##targetNamespace")
	!resolve val Date maxValueDate;

	@ExtendedMetaData(kind="element", name="maxValueDateTime", namespace="##targetNamespace")
	!resolve val DateTime maxValueDateTime;

	@ExtendedMetaData(kind="element", name="maxValueInstant", namespace="##targetNamespace")
	!resolve val Instant maxValueInstant;

	@ExtendedMetaData(kind="element", name="maxValueTime", namespace="##targetNamespace")
	!resolve val Time maxValueTime;

	@ExtendedMetaData(kind="element", name="maxValueDecimal", namespace="##targetNamespace")
	!resolve val Decimal maxValueDecimal;

	@ExtendedMetaData(kind="element", name="maxValueInteger", namespace="##targetNamespace")
	!resolve val Integer maxValueInteger;

	@ExtendedMetaData(kind="element", name="maxValueInteger64", namespace="##targetNamespace")
	!resolve val Integer64 maxValueInteger64;

	@ExtendedMetaData(kind="element", name="maxValuePositiveInt", namespace="##targetNamespace")
	!resolve val PositiveInt maxValuePositiveInt;

	@ExtendedMetaData(kind="element", name="maxValueUnsignedInt", namespace="##targetNamespace")
	!resolve val UnsignedInt maxValueUnsignedInt;

	@ExtendedMetaData(kind="element", name="maxValueQuantity", namespace="##targetNamespace")
	!resolve val Quantity maxValueQuantity;

	@GenModel(documentation="Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element. ```maxLength``` SHOULD only be used on primitive data types that have a string representation (see [[[http://hl7.org/fhir/StructureDefinition/structuredefinition-type-characteristics]]]).")
	@ExtendedMetaData(kind="element", name="maxLength", namespace="##targetNamespace")
	!resolve val Integer maxLength;

	@GenModel(documentation="A reference to an invariant that may make additional statements about the cardinality or value in the instance.")
	@ExtendedMetaData(kind="element", name="condition", namespace="##targetNamespace")
	!resolve val Id[*] condition;

	@GenModel(documentation="Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.")
	@ExtendedMetaData(kind="element", name="constraint", namespace="##targetNamespace")
	!resolve val ElementDefinitionConstraint[*] constraint;

	@GenModel(documentation="Specifies for a primitive data type that the value of the data type cannot be replaced by an extension.")
	@ExtendedMetaData(kind="element", name="mustHaveValue", namespace="##targetNamespace")
	!resolve val Boolean mustHaveValue;

	@GenModel(documentation="Specifies a list of extensions that can appear in place of a primitive value.")
	@ExtendedMetaData(kind="element", name="valueAlternatives", namespace="##targetNamespace")
	!resolve val Canonical[*] valueAlternatives;

	@GenModel(documentation="If true, implementations that produce or consume resources SHALL provide \"support\" for the element in some meaningful way. Note that this is being phased out and replaced by obligations (see below).  If false, the element may be ignored and not supported. If false, whether to populate or use the data element in any way is at the discretion of the implementation.")
	@ExtendedMetaData(kind="element", name="mustSupport", namespace="##targetNamespace")
	!resolve val Boolean mustSupport;

	@GenModel(documentation="If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the element cannot be ignored by systems: they SHALL either recognize the element and process it, and/or a pre-determination has been made that it is not relevant to their particular system. When used on the root element in an extension definition, this indicates whether or not the extension is a modifier extension.")
	@ExtendedMetaData(kind="element", name="isModifier", namespace="##targetNamespace")
	!resolve val Boolean isModifier;

	@GenModel(documentation="Explains how that element affects the interpretation of the resource or element that contains it.")
	@ExtendedMetaData(kind="element", name="isModifierReason", namespace="##targetNamespace")
	!resolve val String isModifierReason;

	@GenModel(documentation="Whether the element should be included if a client requests a search with the parameter _summary=true.")
	@ExtendedMetaData(kind="element", name="isSummary", namespace="##targetNamespace")
	!resolve val Boolean isSummary;

	@GenModel(documentation="Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri).")
	@ExtendedMetaData(kind="element", name="binding", namespace="##targetNamespace")
	!resolve val ElementDefinitionBinding binding;

	@GenModel(documentation="Identifies a concept from an external specification that roughly corresponds to this element.")
	@ExtendedMetaData(kind="element", name="mapping", namespace="##targetNamespace")
	!resolve val ElementDefinitionMapping[*] mapping;
}

@GenModel(documentation="Captures constraints on each element within the resource, profile, or extension.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="ElementDefinition.Additional", kind="elementOnly")
class ElementDefinitionAdditional extends BackboneType {

	@GenModel(documentation="The use of this additional binding.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val Code[1] purpose;

	@GenModel(documentation="The valueSet that is being bound for the purpose.")
	@ExtendedMetaData(kind="element", name="valueSet", namespace="##targetNamespace")
	!resolve val Canonical[1] valueSet;

	@GenModel(documentation="Documentation of the purpose of use of the bindingproviding additional information about how it is intended to be used.")
	@ExtendedMetaData(kind="element", name="documentation", namespace="##targetNamespace")
	!resolve val Markdown documentation;

	@GenModel(documentation="Concise documentation - for summary tables.")
	@ExtendedMetaData(kind="element", name="shortDoco", namespace="##targetNamespace")
	!resolve val String shortDoco;

	@GenModel(documentation="Qualifies the usage of the binding. Typically bindings are qualified by jurisdiction, but they may also be qualified by gender, workflow status, clinical domain etc. The information to decide whether a usege context applies is usually outside the resource, determined by context, and this might present challenges for validation tooling.")
	@ExtendedMetaData(kind="element", name="usage", namespace="##targetNamespace")
	!resolve val UsageContext[*] usage;

	@GenModel(documentation="Whether the binding applies to all repeats, or just to any one of them. This is only relevant for elements that can repeat.")
	@ExtendedMetaData(kind="element", name="any", namespace="##targetNamespace")
	!resolve val Boolean any;
}

@GenModel(documentation="Captures constraints on each element within the resource, profile, or extension.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="ElementDefinition.Base", kind="elementOnly")
class ElementDefinitionBase extends BackboneType {

	@GenModel(documentation="The Path that identifies the base element - this matches the ElementDefinition.path for that element. Across FHIR, there is only one base definition of any element - that is, an element definition on a [[[StructureDefinition]]] without a StructureDefinition.base.")
	@ExtendedMetaData(kind="element", name="path", namespace="##targetNamespace")
	!resolve val String[1] path;

	@GenModel(documentation="Minimum cardinality of the base element identified by the path.")
	@ExtendedMetaData(kind="element", name="min", namespace="##targetNamespace")
	!resolve val UnsignedInt[1] min;

	@GenModel(documentation="Maximum cardinality of the base element identified by the path.")
	@ExtendedMetaData(kind="element", name="max", namespace="##targetNamespace")
	!resolve val String[1] max;
}

@GenModel(documentation="Captures constraints on each element within the resource, profile, or extension.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="ElementDefinition.Binding", kind="elementOnly")
class ElementDefinitionBinding extends BackboneType {

	@GenModel(documentation="Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.")
	@ExtendedMetaData(kind="element", name="strength", namespace="##targetNamespace")
	!resolve val BindingStrength[1] strength;

	@GenModel(documentation="Describes the intended use of this particular set of codes.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="Refers to the value set that identifies the set of codes the binding refers to.")
	@ExtendedMetaData(kind="element", name="valueSet", namespace="##targetNamespace")
	!resolve val Canonical valueSet;

	@GenModel(documentation="Additional bindings that help applications implementing this element. Additional bindings do not replace the main binding but provide more information and/or context.")
	@ExtendedMetaData(kind="element", name="additional", namespace="##targetNamespace")
	!resolve val ElementDefinitionAdditional[*] additional;
}

@GenModel(documentation="Captures constraints on each element within the resource, profile, or extension.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="ElementDefinition.Constraint", kind="elementOnly")
class ElementDefinitionConstraint extends BackboneType {

	@GenModel(documentation="Allows identification of which elements have their cardinalities impacted by the constraint.  Will not be referenced for constraints that do not affect cardinality.")
	@ExtendedMetaData(kind="element", name="key", namespace="##targetNamespace")
	!resolve val Id[1] key;

	@GenModel(documentation="Description of why this constraint is necessary or appropriate.")
	@ExtendedMetaData(kind="element", name="requirements", namespace="##targetNamespace")
	!resolve val Markdown requirements;

	@GenModel(documentation="Identifies the impact constraint violation has on the conformance of the instance.")
	@ExtendedMetaData(kind="element", name="severity", namespace="##targetNamespace")
	!resolve val ConstraintSeverity[1] severity;

	@GenModel(documentation="If true, indicates that the warning or best practice guideline should be suppressed.")
	@ExtendedMetaData(kind="element", name="suppress", namespace="##targetNamespace")
	!resolve val Boolean suppress;

	@GenModel(documentation="Text that can be used to describe the constraint in messages identifying that the constraint has been violated.")
	@ExtendedMetaData(kind="element", name="human", namespace="##targetNamespace")
	!resolve val String[1] human;

	@GenModel(documentation="A [FHIRPath](fhirpath.html) expression of constraint that can be executed to see if this constraint is met.")
	@ExtendedMetaData(kind="element", name="expression", namespace="##targetNamespace")
	!resolve val String expression;

	@GenModel(documentation="A reference to the original source of the constraint, for traceability purposes.")
	@ExtendedMetaData(kind="element", name="source", namespace="##targetNamespace")
	!resolve val Canonical source;
}

@GenModel(documentation="Captures constraints on each element within the resource, profile, or extension.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="ElementDefinition.Discriminator", kind="elementOnly")
class ElementDefinitionDiscriminator extends BackboneType {

	@GenModel(documentation="How the element value is interpreted when discrimination is evaluated.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val DiscriminatorType[1] type;

	@GenModel(documentation="A FHIRPath expression, using [the simple subset of FHIRPath](fhirpath.html#simple), that is used to identify the element on which discrimination is based.")
	@ExtendedMetaData(kind="element", name="path", namespace="##targetNamespace")
	!resolve val String[1] path;
}

@GenModel(documentation="Captures constraints on each element within the resource, profile, or extension.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="ElementDefinition.Example", kind="elementOnly")
class ElementDefinitionExample extends BackboneType {

	@GenModel(documentation="Describes the purpose of this example among the set of examples.")
	@ExtendedMetaData(kind="element", name="label", namespace="##targetNamespace")
	!resolve val String[1] label;

	@ExtendedMetaData(kind="element", name="valueBase64Binary", namespace="##targetNamespace")
	!resolve val Base64Binary valueBase64Binary;

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;

	@ExtendedMetaData(kind="element", name="valueCanonical", namespace="##targetNamespace")
	!resolve val Canonical valueCanonical;

	@ExtendedMetaData(kind="element", name="valueCode", namespace="##targetNamespace")
	!resolve val Code valueCode;

	@ExtendedMetaData(kind="element", name="valueDate", namespace="##targetNamespace")
	!resolve val Date valueDate;

	@ExtendedMetaData(kind="element", name="valueDateTime", namespace="##targetNamespace")
	!resolve val DateTime valueDateTime;

	@ExtendedMetaData(kind="element", name="valueDecimal", namespace="##targetNamespace")
	!resolve val Decimal valueDecimal;

	@ExtendedMetaData(kind="element", name="valueId", namespace="##targetNamespace")
	!resolve val Id valueId;

	@ExtendedMetaData(kind="element", name="valueInstant", namespace="##targetNamespace")
	!resolve val Instant valueInstant;

	@ExtendedMetaData(kind="element", name="valueInteger", namespace="##targetNamespace")
	!resolve val Integer valueInteger;

	@ExtendedMetaData(kind="element", name="valueInteger64", namespace="##targetNamespace")
	!resolve val Integer64 valueInteger64;

	@ExtendedMetaData(kind="element", name="valueMarkdown", namespace="##targetNamespace")
	!resolve val Markdown valueMarkdown;

	@ExtendedMetaData(kind="element", name="valueOid", namespace="##targetNamespace")
	!resolve val Oid valueOid;

	@ExtendedMetaData(kind="element", name="valuePositiveInt", namespace="##targetNamespace")
	!resolve val PositiveInt valuePositiveInt;

	@ExtendedMetaData(kind="element", name="valueString", namespace="##targetNamespace")
	!resolve val String valueString;

	@ExtendedMetaData(kind="element", name="valueTime", namespace="##targetNamespace")
	!resolve val Time valueTime;

	@ExtendedMetaData(kind="element", name="valueUnsignedInt", namespace="##targetNamespace")
	!resolve val UnsignedInt valueUnsignedInt;

	@ExtendedMetaData(kind="element", name="valueUri", namespace="##targetNamespace")
	!resolve val Uri valueUri;

	@ExtendedMetaData(kind="element", name="valueUrl", namespace="##targetNamespace")
	!resolve val Url valueUrl;

	@ExtendedMetaData(kind="element", name="valueUuid", namespace="##targetNamespace")
	!resolve val Uuid valueUuid;

	@ExtendedMetaData(kind="element", name="valueAddress", namespace="##targetNamespace")
	!resolve val Address valueAddress;

	@ExtendedMetaData(kind="element", name="valueAge", namespace="##targetNamespace")
	!resolve val Age valueAge;

	@ExtendedMetaData(kind="element", name="valueAnnotation", namespace="##targetNamespace")
	!resolve val Annotation valueAnnotation;

	@ExtendedMetaData(kind="element", name="valueAttachment", namespace="##targetNamespace")
	!resolve val Attachment valueAttachment;

	@ExtendedMetaData(kind="element", name="valueCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept valueCodeableConcept;

	@ExtendedMetaData(kind="element", name="valueCodeableReference", namespace="##targetNamespace")
	!resolve val CodeableReference valueCodeableReference;

	@ExtendedMetaData(kind="element", name="valueCoding", namespace="##targetNamespace")
	!resolve val Coding valueCoding;

	@ExtendedMetaData(kind="element", name="valueContactPoint", namespace="##targetNamespace")
	!resolve val ContactPoint valueContactPoint;

	@ExtendedMetaData(kind="element", name="valueCount", namespace="##targetNamespace")
	!resolve val Count valueCount;

	@ExtendedMetaData(kind="element", name="valueDistance", namespace="##targetNamespace")
	!resolve val Distance valueDistance;

	@ExtendedMetaData(kind="element", name="valueDuration", namespace="##targetNamespace")
	!resolve val Duration valueDuration;

	@ExtendedMetaData(kind="element", name="valueHumanName", namespace="##targetNamespace")
	!resolve val HumanName valueHumanName;

	@ExtendedMetaData(kind="element", name="valueIdentifier", namespace="##targetNamespace")
	!resolve val Identifier valueIdentifier;

	@ExtendedMetaData(kind="element", name="valueMoney", namespace="##targetNamespace")
	!resolve val Money valueMoney;

	@ExtendedMetaData(kind="element", name="valuePeriod", namespace="##targetNamespace")
	!resolve val Period valuePeriod;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueRange", namespace="##targetNamespace")
	!resolve val Range valueRange;

	@ExtendedMetaData(kind="element", name="valueRatio", namespace="##targetNamespace")
	!resolve val Ratio valueRatio;

	@ExtendedMetaData(kind="element", name="valueRatioRange", namespace="##targetNamespace")
	!resolve val RatioRange valueRatioRange;

	@ExtendedMetaData(kind="element", name="valueReference", namespace="##targetNamespace")
	!resolve val Reference valueReference;

	@ExtendedMetaData(kind="element", name="valueSampledData", namespace="##targetNamespace")
	!resolve val SampledData valueSampledData;

	@ExtendedMetaData(kind="element", name="valueSignature", namespace="##targetNamespace")
	!resolve val Signature valueSignature;

	@ExtendedMetaData(kind="element", name="valueTiming", namespace="##targetNamespace")
	!resolve val Timing valueTiming;

	@ExtendedMetaData(kind="element", name="valueContactDetail", namespace="##targetNamespace")
	!resolve val ContactDetail valueContactDetail;

	@ExtendedMetaData(kind="element", name="valueDataRequirement", namespace="##targetNamespace")
	!resolve val DataRequirement valueDataRequirement;

	@ExtendedMetaData(kind="element", name="valueExpression", namespace="##targetNamespace")
	!resolve val Expression valueExpression;

	@ExtendedMetaData(kind="element", name="valueParameterDefinition", namespace="##targetNamespace")
	!resolve val ParameterDefinition valueParameterDefinition;

	@ExtendedMetaData(kind="element", name="valueRelatedArtifact", namespace="##targetNamespace")
	!resolve val RelatedArtifact valueRelatedArtifact;

	@ExtendedMetaData(kind="element", name="valueTriggerDefinition", namespace="##targetNamespace")
	!resolve val TriggerDefinition valueTriggerDefinition;

	@ExtendedMetaData(kind="element", name="valueUsageContext", namespace="##targetNamespace")
	!resolve val UsageContext valueUsageContext;

	@ExtendedMetaData(kind="element", name="valueAvailability", namespace="##targetNamespace")
	!resolve val Availability valueAvailability;

	@ExtendedMetaData(kind="element", name="valueExtendedContactDetail", namespace="##targetNamespace")
	!resolve val ExtendedContactDetail valueExtendedContactDetail;

	@ExtendedMetaData(kind="element", name="valueDosage", namespace="##targetNamespace")
	!resolve val Dosage valueDosage;

	@ExtendedMetaData(kind="element", name="valueMeta", namespace="##targetNamespace")
	!resolve val Meta valueMeta;
}

@GenModel(documentation="Captures constraints on each element within the resource, profile, or extension.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="ElementDefinition.Mapping", kind="elementOnly")
class ElementDefinitionMapping extends BackboneType {

	@GenModel(documentation="An internal reference to the definition of a mapping.")
	@ExtendedMetaData(kind="element", name="identity", namespace="##targetNamespace")
	!resolve val Id[1] identity;

	@GenModel(documentation="Identifies the computable language in which mapping.map is expressed.")
	@ExtendedMetaData(kind="element", name="language", namespace="##targetNamespace")
	!resolve val Code language;

	@GenModel(documentation="Expresses what part of the target specification corresponds to this element.")
	@ExtendedMetaData(kind="element", name="map", namespace="##targetNamespace")
	!resolve val String[1] map;

	@GenModel(documentation="Comments that provide information about the mapping or its use.")
	@ExtendedMetaData(kind="element", name="comment", namespace="##targetNamespace")
	!resolve val Markdown comment;
}

@GenModel(documentation="Captures constraints on each element within the resource, profile, or extension.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="ElementDefinition.Slicing", kind="elementOnly")
class ElementDefinitionSlicing extends BackboneType {

	@GenModel(documentation="Designates which child elements are used to discriminate between the slices when processing an instance. If one or more discriminators are provided, the value of the child elements in the instance data SHALL completely distinguish which slice the element in the resource matches based on the allowed values for those elements in each of the slices.")
	@ExtendedMetaData(kind="element", name="discriminator", namespace="##targetNamespace")
	!resolve val ElementDefinitionDiscriminator[*] discriminator;

	@GenModel(documentation="A human-readable text description of how the slicing works. If there is no discriminator, this is required to be present to provide whatever information is possible about how the slices can be differentiated.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val String description;

	@GenModel(documentation="If the matching elements have to occur in the same order as defined in the profile.")
	@ExtendedMetaData(kind="element", name="ordered", namespace="##targetNamespace")
	!resolve val Boolean ~ordered;

	@GenModel(documentation="Whether additional slices are allowed or not. When the slices are ordered, profile authors can also say that additional slices are only allowed at the end.")
	@ExtendedMetaData(kind="element", name="rules", namespace="##targetNamespace")
	!resolve val SlicingRules[1] rules;
}

@GenModel(documentation="Captures constraints on each element within the resource, profile, or extension.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="ElementDefinition.Type", kind="elementOnly")
class ElementDefinitionType extends BackboneType {

	@GenModel(documentation="URL of Data type or Resource that is a(or the) type used for this element. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition e.g. \"string\" is a reference to http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed in logical models.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val Uri[1] code;

	@GenModel(documentation="Identifies a profile structure or implementation Guide that applies to the datatype this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the type SHALL conform to at least one profile defined in the implementation guide.")
	@ExtendedMetaData(kind="element", name="profile", namespace="##targetNamespace")
	!resolve val Canonical[*] profile;

	@GenModel(documentation="Used when the type is \"Reference\" or \"canonical\", and identifies a profile structure or implementation Guide that applies to the target of the reference this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the target resource SHALL conform to at least one profile defined in the implementation guide.")
	@ExtendedMetaData(kind="element", name="targetProfile", namespace="##targetNamespace")
	!resolve val Canonical[*] targetProfile;

	@GenModel(documentation="If the type is a reference to another resource, how the resource is or can be aggregated - is it a contained resource, or a reference, and if the context is a bundle, is it included in the bundle.")
	@ExtendedMetaData(kind="element", name="aggregation", namespace="##targetNamespace")
	!resolve val AggregationMode[*] aggregation;

	@GenModel(documentation="Whether this reference needs to be version specific or version independent, or whether either can be used.")
	@ExtendedMetaData(kind="element", name="versioning", namespace="##targetNamespace")
	!resolve val ReferenceVersionRules versioning;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="EligibilityOutcome", kind="elementOnly")
class EligibilityOutcome extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr EligibilityOutcomeEnum value;
}

@ExtendedMetaData(name="EligibilityOutcomeEnum")
enum EligibilityOutcomeEnum {

	@GenModel(documentation="Queued")
	queued = 0;

	@GenModel(documentation="Processing Complete")
	complete = 1;

	@GenModel(documentation="Error")
	error = 2;

	@GenModel(documentation="Partial Processing")
	partial = 3;
}

@ExtendedMetaData(name="EligibilityOutcomeEnum:Object", baseType="EligibilityOutcomeEnum")
datatype EligibilityOutcomeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="EligibilityRequestPurpose", kind="elementOnly")
class EligibilityRequestPurpose extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr EligibilityRequestPurposeEnum value;
}

@ExtendedMetaData(name="EligibilityRequestPurposeEnum")
enum EligibilityRequestPurposeEnum {

	@GenModel(documentation="Coverage auth-requirements")
	authRequirements = 0;

	@GenModel(documentation="Coverage benefits")
	benefits = 1;

	@GenModel(documentation="Coverage Discovery")
	discovery = 2;

	@GenModel(documentation="Coverage Validation")
	validation = 3;
}

@ExtendedMetaData(name="EligibilityRequestPurposeEnum:Object", baseType="EligibilityRequestPurposeEnum")
datatype EligibilityRequestPurposeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="EligibilityResponsePurpose", kind="elementOnly")
class EligibilityResponsePurpose extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr EligibilityResponsePurposeEnum value;
}

@ExtendedMetaData(name="EligibilityResponsePurposeEnum")
enum EligibilityResponsePurposeEnum {

	@GenModel(documentation="Coverage auth-requirements")
	authRequirements = 0;

	@GenModel(documentation="Coverage benefits")
	benefits = 1;

	@GenModel(documentation="Coverage Discovery")
	discovery = 2;

	@GenModel(documentation="Coverage Validation")
	validation = 3;
}

@ExtendedMetaData(name="EligibilityResponsePurposeEnum:Object", baseType="EligibilityResponsePurposeEnum")
datatype EligibilityResponsePurposeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="EnableWhenBehavior", kind="elementOnly")
class EnableWhenBehavior extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr EnableWhenBehaviorEnum value;
}

@ExtendedMetaData(name="EnableWhenBehaviorEnum")
enum EnableWhenBehaviorEnum {

	@GenModel(documentation="All")
	all = 0;

	@GenModel(documentation="Any")
	any = 1;
}

@ExtendedMetaData(name="EnableWhenBehaviorEnum:Object", baseType="EnableWhenBehaviorEnum")
datatype EnableWhenBehaviorEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.  Encounter is primarily used to record information about the actual activities that occurred, where Appointment is used to record planned activities.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Encounter", kind="elementOnly")
class Encounter extends DomainResource {

	@GenModel(documentation="Identifier(s) by which this encounter is known.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The current state of the encounter (not the state of the patient within the encounter - that is subjectState).")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val EncounterStatus[1] status;

	@GenModel(documentation="Concepts representing classification of patient encounter such as ambulatory (outpatient), inpatient, emergency, home health or others due to local variations.")
	@ExtendedMetaData(kind="element", name="class", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] ~class;

	@GenModel(documentation="Indicates the urgency of the encounter.")
	@ExtendedMetaData(kind="element", name="priority", namespace="##targetNamespace")
	!resolve val CodeableConcept priority;

	@GenModel(documentation="Specific type of encounter (e.g. e-mail consultation, surgical day-care, skilled nursing, rehabilitation).")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] type;

	@GenModel(documentation="Broad categorization of the service that is to be provided (e.g. cardiology).")
	@ExtendedMetaData(kind="element", name="serviceType", namespace="##targetNamespace")
	!resolve val CodeableReference[*] serviceType;

	@GenModel(documentation="The patient or group related to this encounter. In some use-cases the patient MAY not be present, such as a case meeting about a patient between several practitioners or a careteam.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference subject;

	@GenModel(documentation="The subjectStatus value can be used to track the patient's status within the encounter. It details whether the patient has arrived or departed, has been triaged or is currently in a waiting status.")
	@ExtendedMetaData(kind="element", name="subjectStatus", namespace="##targetNamespace")
	!resolve val CodeableConcept subjectStatus;

	@GenModel(documentation="Where a specific encounter should be classified as a part of a specific episode(s) of care this field should be used. This association can facilitate grouping of related encounters together for a specific purpose, such as government reporting, issue tracking, association via a common problem.  The association is recorded on the encounter as these are typically created after the episode of care and grouped on entry rather than editing the episode of care to append another encounter to it (the episode of care could span years).")
	@ExtendedMetaData(kind="element", name="episodeOfCare", namespace="##targetNamespace")
	!resolve val Reference[*] episodeOfCare;

	@GenModel(documentation="The request this encounter satisfies (e.g. incoming referral or procedure request).")
	@ExtendedMetaData(kind="element", name="basedOn", namespace="##targetNamespace")
	!resolve val Reference[*] basedOn;

	@GenModel(documentation="The group(s) of individuals, organizations that are allocated to participate in this encounter. The participants backbone will record the actuals of when these individuals participated during the encounter.")
	@ExtendedMetaData(kind="element", name="careTeam", namespace="##targetNamespace")
	!resolve val Reference[*] careTeam;

	@GenModel(documentation="Another Encounter of which this encounter is a part of (administratively or in time).")
	@ExtendedMetaData(kind="element", name="partOf", namespace="##targetNamespace")
	!resolve val Reference partOf;

	@GenModel(documentation="The organization that is primarily responsible for this Encounter's services. This MAY be the same as the organization on the Patient record, however it could be different, such as if the actor performing the services was from an external organization (which may be billed seperately) for an external consultation.  Refer to the colonoscopy example on the Encounter examples tab.")
	@ExtendedMetaData(kind="element", name="serviceProvider", namespace="##targetNamespace")
	!resolve val Reference serviceProvider;

	@GenModel(documentation="The list of people responsible for providing the service.")
	@ExtendedMetaData(kind="element", name="participant", namespace="##targetNamespace")
	!resolve val EncounterParticipant[*] participant;

	@GenModel(documentation="The appointment that scheduled this encounter.")
	@ExtendedMetaData(kind="element", name="appointment", namespace="##targetNamespace")
	!resolve val Reference[*] appointment;

	@GenModel(documentation="Connection details of a virtual service (e.g. conference call).")
	@ExtendedMetaData(kind="element", name="virtualService", namespace="##targetNamespace")
	!resolve val VirtualServiceDetail[*] virtualService;

	@GenModel(documentation="The actual start and end time of the encounter.")
	@ExtendedMetaData(kind="element", name="actualPeriod", namespace="##targetNamespace")
	!resolve val Period actualPeriod;

	@GenModel(documentation="The planned start date/time (or admission date) of the encounter.")
	@ExtendedMetaData(kind="element", name="plannedStartDate", namespace="##targetNamespace")
	!resolve val DateTime plannedStartDate;

	@GenModel(documentation="The planned end date/time (or discharge date) of the encounter.")
	@ExtendedMetaData(kind="element", name="plannedEndDate", namespace="##targetNamespace")
	!resolve val DateTime plannedEndDate;

	@GenModel(documentation="Actual quantity of time the encounter lasted. This excludes the time during leaves of absence.

When missing it is the time in between the start and end values.")
	@ExtendedMetaData(kind="element", name="length", namespace="##targetNamespace")
	!resolve val Duration length;

	@GenModel(documentation="The list of medical reasons that are expected to be addressed during the episode of care.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val EncounterReason[*] reason;

	@GenModel(documentation="The list of diagnosis relevant to this encounter.")
	@ExtendedMetaData(kind="element", name="diagnosis", namespace="##targetNamespace")
	!resolve val EncounterDiagnosis[*] diagnosis;

	@GenModel(documentation="The set of accounts that may be used for billing for this Encounter.")
	@ExtendedMetaData(kind="element", name="account", namespace="##targetNamespace")
	!resolve val Reference[*] account;

	@GenModel(documentation="Diet preferences reported by the patient.")
	@ExtendedMetaData(kind="element", name="dietPreference", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] dietPreference;

	@GenModel(documentation="Any special requests that have been made for this encounter, such as the provision of specific equipment or other things.")
	@ExtendedMetaData(kind="element", name="specialArrangement", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] specialArrangement;

	@GenModel(documentation="Special courtesies that may be provided to the patient during the encounter (VIP, board member, professional courtesy).")
	@ExtendedMetaData(kind="element", name="specialCourtesy", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] specialCourtesy;

	@GenModel(documentation="Details about the stay during which a healthcare service is provided.

This does not describe the event of admitting the patient, but rather any information that is relevant from the time of admittance until the time of discharge.")
	@ExtendedMetaData(kind="element", name="admission", namespace="##targetNamespace")
	!resolve val EncounterAdmission admission;

	@GenModel(documentation="List of locations where  the patient has been during this encounter.")
	@ExtendedMetaData(kind="element", name="location", namespace="##targetNamespace")
	!resolve val EncounterLocation[*] location;
}

@GenModel(documentation="An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.  Encounter is primarily used to record information about the actual activities that occurred, where Appointment is used to record planned activities.")
@ExtendedMetaData(name="Encounter.Admission", kind="elementOnly")
class EncounterAdmission extends BackboneElement {

	@GenModel(documentation="Pre-admission identifier.")
	@ExtendedMetaData(kind="element", name="preAdmissionIdentifier", namespace="##targetNamespace")
	!resolve val Identifier preAdmissionIdentifier;

	@GenModel(documentation="The location/organization from which the patient came before admission.")
	@ExtendedMetaData(kind="element", name="origin", namespace="##targetNamespace")
	!resolve val Reference origin;

	@GenModel(documentation="From where patient was admitted (physician referral, transfer).")
	@ExtendedMetaData(kind="element", name="admitSource", namespace="##targetNamespace")
	!resolve val CodeableConcept admitSource;

	@GenModel(documentation="Indicates that this encounter is directly related to a prior admission, often because the conditions addressed in the prior admission were not fully addressed.")
	@ExtendedMetaData(kind="element", name="reAdmission", namespace="##targetNamespace")
	!resolve val CodeableConcept reAdmission;

	@GenModel(documentation="Location/organization to which the patient is discharged.")
	@ExtendedMetaData(kind="element", name="destination", namespace="##targetNamespace")
	!resolve val Reference destination;

	@GenModel(documentation="Category or kind of location after discharge.")
	@ExtendedMetaData(kind="element", name="dischargeDisposition", namespace="##targetNamespace")
	!resolve val CodeableConcept dischargeDisposition;
}

@GenModel(documentation="An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.  Encounter is primarily used to record information about the actual activities that occurred, where Appointment is used to record planned activities.")
@ExtendedMetaData(name="Encounter.Diagnosis", kind="elementOnly")
class EncounterDiagnosis extends BackboneElement {

	@GenModel(documentation="The coded diagnosis or a reference to a Condition (with other resources referenced in the evidence.detail), the use property will indicate the purpose of this specific diagnosis.")
	@ExtendedMetaData(kind="element", name="condition", namespace="##targetNamespace")
	!resolve val CodeableReference[*] condition;

	@GenModel(documentation="Role that this diagnosis has within the encounter (e.g. admission, billing, discharge …).")
	@ExtendedMetaData(kind="element", name="use", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] use;
}

@GenModel(documentation="A record of significant events/milestones key data throughout the history of an Encounter, often tracked for specific purposes such as billing.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="EncounterHistory", kind="elementOnly")
class EncounterHistory extends DomainResource {

	@GenModel(documentation="The Encounter associated with this set of historic values.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@GenModel(documentation="Identifier(s) by which this encounter is known.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="planned | in-progress | on-hold | discharged | completed | cancelled | discontinued | entered-in-error | unknown.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val EncounterStatus[1] status;

	@GenModel(documentation="Concepts representing classification of patient encounter such as ambulatory (outpatient), inpatient, emergency, home health or others due to local variations.")
	@ExtendedMetaData(kind="element", name="class", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] ~class;

	@GenModel(documentation="Specific type of encounter (e.g. e-mail consultation, surgical day-care, skilled nursing, rehabilitation).")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] type;

	@GenModel(documentation="Broad categorization of the service that is to be provided (e.g. cardiology).")
	@ExtendedMetaData(kind="element", name="serviceType", namespace="##targetNamespace")
	!resolve val CodeableReference[*] serviceType;

	@GenModel(documentation="The patient or group related to this encounter. In some use-cases the patient MAY not be present, such as a case meeting about a patient between several practitioners or a careteam.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference subject;

	@GenModel(documentation="The subjectStatus value can be used to track the patient's status within the encounter. It details whether the patient has arrived or departed, has been triaged or is currently in a waiting status.")
	@ExtendedMetaData(kind="element", name="subjectStatus", namespace="##targetNamespace")
	!resolve val CodeableConcept subjectStatus;

	@GenModel(documentation="The start and end time associated with this set of values associated with the encounter, may be different to the planned times for various reasons.")
	@ExtendedMetaData(kind="element", name="actualPeriod", namespace="##targetNamespace")
	!resolve val Period actualPeriod;

	@GenModel(documentation="The planned start date/time (or admission date) of the encounter.")
	@ExtendedMetaData(kind="element", name="plannedStartDate", namespace="##targetNamespace")
	!resolve val DateTime plannedStartDate;

	@GenModel(documentation="The planned end date/time (or discharge date) of the encounter.")
	@ExtendedMetaData(kind="element", name="plannedEndDate", namespace="##targetNamespace")
	!resolve val DateTime plannedEndDate;

	@GenModel(documentation="Actual quantity of time the encounter lasted. This excludes the time during leaves of absence.

When missing it is the time in between the start and end values.")
	@ExtendedMetaData(kind="element", name="length", namespace="##targetNamespace")
	!resolve val Duration length;

	@GenModel(documentation="The location of the patient at this point in the encounter, the multiple cardinality permits de-normalizing the levels of the location hierarchy, such as site/ward/room/bed.")
	@ExtendedMetaData(kind="element", name="location", namespace="##targetNamespace")
	!resolve val EncounterHistoryLocation[*] location;
}

@GenModel(documentation="A record of significant events/milestones key data throughout the history of an Encounter, often tracked for specific purposes such as billing.")
@ExtendedMetaData(name="EncounterHistory.Location", kind="elementOnly")
class EncounterHistoryLocation extends BackboneElement {

	@GenModel(documentation="The location where the encounter takes place.")
	@ExtendedMetaData(kind="element", name="location", namespace="##targetNamespace")
	!resolve val Reference[1] location;

	@GenModel(documentation="This will be used to specify the required levels (bed/ward/room/etc.) desired to be recorded to simplify either messaging or query.")
	@ExtendedMetaData(kind="element", name="form", namespace="##targetNamespace")
	!resolve val CodeableConcept form;
}

@GenModel(documentation="An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.  Encounter is primarily used to record information about the actual activities that occurred, where Appointment is used to record planned activities.")
@ExtendedMetaData(name="Encounter.Location", kind="elementOnly")
class EncounterLocation extends BackboneElement {

	@GenModel(documentation="The location where the encounter takes place.")
	@ExtendedMetaData(kind="element", name="location", namespace="##targetNamespace")
	!resolve val Reference[1] location;

	@GenModel(documentation="The status of the participants' presence at the specified location during the period specified. If the participant is no longer at the location, then the period will have an end date/time.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val EncounterLocationStatus status;

	@GenModel(documentation="This will be used to specify the required levels (bed/ward/room/etc.) desired to be recorded to simplify either messaging or query.")
	@ExtendedMetaData(kind="element", name="form", namespace="##targetNamespace")
	!resolve val CodeableConcept form;

	@GenModel(documentation="Time period during which the patient was present at the location.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="EncounterLocationStatus", kind="elementOnly")
class EncounterLocationStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr EncounterLocationStatusEnum value;
}

@ExtendedMetaData(name="EncounterLocationStatusEnum")
enum EncounterLocationStatusEnum {

	@GenModel(documentation="Planned")
	planned = 0;

	@GenModel(documentation="Active")
	active = 1;

	@GenModel(documentation="Reserved")
	reserved = 2;

	@GenModel(documentation="Completed")
	completed = 3;
}

@ExtendedMetaData(name="EncounterLocationStatusEnum:Object", baseType="EncounterLocationStatusEnum")
datatype EncounterLocationStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.  Encounter is primarily used to record information about the actual activities that occurred, where Appointment is used to record planned activities.")
@ExtendedMetaData(name="Encounter.Participant", kind="elementOnly")
class EncounterParticipant extends BackboneElement {

	@GenModel(documentation="Role of participant in encounter.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] type;

	@GenModel(documentation="The period of time that the specified participant participated in the encounter. These can overlap or be sub-sets of the overall encounter's period.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;

	@GenModel(documentation="Person involved in the encounter, the patient/group is also included here to indicate that the patient was actually participating in the encounter. Not including the patient here covers use cases such as a case meeting between practitioners about a patient - non contact times.")
	@ExtendedMetaData(kind="element", name="actor", namespace="##targetNamespace")
	!resolve val Reference actor;
}

@GenModel(documentation="An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.  Encounter is primarily used to record information about the actual activities that occurred, where Appointment is used to record planned activities.")
@ExtendedMetaData(name="Encounter.Reason", kind="elementOnly")
class EncounterReason extends BackboneElement {

	@GenModel(documentation="What the reason value should be used as e.g. Chief Complaint, Health Concern, Health Maintenance (including screening).")
	@ExtendedMetaData(kind="element", name="use", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] use;

	@GenModel(documentation="Reason the encounter takes place, expressed as a code or a reference to another resource. For admissions, this can be used for a coded admission diagnosis.")
	@ExtendedMetaData(kind="element", name="value", namespace="##targetNamespace")
	!resolve val CodeableReference[*] value;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="EncounterStatus", kind="elementOnly")
class EncounterStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr EncounterStatusEnum value;
}

@ExtendedMetaData(name="EncounterStatusEnum")
enum EncounterStatusEnum {

	@GenModel(documentation="Planned")
	planned = 0;

	@GenModel(documentation="In Progress")
	inProgress = 1;

	@GenModel(documentation="On Hold")
	onHold = 2;

	@GenModel(documentation="Discharged")
	discharged = 3;

	@GenModel(documentation="Completed")
	completed = 4;

	@GenModel(documentation="Cancelled")
	cancelled = 5;

	@GenModel(documentation="Discontinued")
	discontinued = 6;

	@GenModel(documentation="Entered in Error")
	enteredInError = 7;

	@GenModel(documentation="Unknown")
	unknown = 8;
}

@ExtendedMetaData(name="EncounterStatusEnum:Object", baseType="EncounterStatusEnum")
datatype EncounterStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="The technical details of an endpoint that can be used for electronic services, such as for web services providing XDS.b, a REST endpoint for another FHIR server, or a s/Mime email address. This may include any security context information.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Endpoint", kind="elementOnly")
class Endpoint extends DomainResource {

	@GenModel(documentation="Identifier for the organization that is used to identify the endpoint across multiple disparate systems.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The endpoint status represents the general expected availability of an endpoint.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val EndpointStatus[1] status;

	@GenModel(documentation="A coded value that represents the technical details of the usage of this endpoint, such as what WSDLs should be used in what way. (e.g. XDS.b/DICOM/cds-hook).")
	@ExtendedMetaData(kind="element", name="connectionType", namespace="##targetNamespace")
	!resolve val CodeableConcept[+] connectionType;

	@GenModel(documentation="A friendly name that this endpoint can be referred to with.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="The description of the endpoint and what it is for (typically used as supplemental information in an endpoint directory describing its usage/purpose).")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val String description;

	@GenModel(documentation="The type of environment(s) exposed at this endpoint (dev, prod, test, etc.).")
	@ExtendedMetaData(kind="element", name="environmentType", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] environmentType;

	@GenModel(documentation="The organization that manages this endpoint (even if technically another organization is hosting this in the cloud, it is the organization associated with the data).")
	@ExtendedMetaData(kind="element", name="managingOrganization", namespace="##targetNamespace")
	!resolve val Reference managingOrganization;

	@GenModel(documentation="Contact details for a human to contact about the endpoint. The primary use of this for system administrator troubleshooting.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactPoint[*] contact;

	@GenModel(documentation="The interval during which the endpoint is expected to be operational.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;

	@GenModel(documentation="The set of payloads that are provided/available at this endpoint.")
	@ExtendedMetaData(kind="element", name="payload", namespace="##targetNamespace")
	!resolve val EndpointPayload[*] payload;

	@GenModel(documentation="The uri that describes the actual end-point to connect to.")
	@ExtendedMetaData(kind="element", name="address", namespace="##targetNamespace")
	!resolve val Url[1] address;

	@GenModel(documentation="Additional headers / information to send as part of the notification.")
	@ExtendedMetaData(kind="element", name="header", namespace="##targetNamespace")
	!resolve val String[*] header;
}

@GenModel(documentation="The technical details of an endpoint that can be used for electronic services, such as for web services providing XDS.b, a REST endpoint for another FHIR server, or a s/Mime email address. This may include any security context information.")
@ExtendedMetaData(name="Endpoint.Payload", kind="elementOnly")
class EndpointPayload extends BackboneElement {

	@GenModel(documentation="The payload type describes the acceptable content that can be communicated on the endpoint.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] type;

	@GenModel(documentation="The mime type to send the payload in - e.g. application/fhir+xml, application/fhir+json. If the mime type is not specified, then the sender could send any content (including no content depending on the connectionType).")
	@ExtendedMetaData(kind="element", name="mimeType", namespace="##targetNamespace")
	!resolve val Code[*] mimeType;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="EndpointStatus", kind="elementOnly")
class EndpointStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr EndpointStatusEnum value;
}

@ExtendedMetaData(name="EndpointStatusEnum")
enum EndpointStatusEnum {

	@GenModel(documentation="Active")
	active = 0;

	@GenModel(documentation="Suspended")
	suspended = 1;

	@GenModel(documentation="Error")
	error = 2;

	@GenModel(documentation="Off")
	off = 3;

	@GenModel(documentation="Entered in error")
	enteredInError = 4;
}

@ExtendedMetaData(name="EndpointStatusEnum:Object", baseType="EndpointStatusEnum")
datatype EndpointStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="EnrollmentOutcome", kind="elementOnly")
class EnrollmentOutcome extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr EnrollmentOutcomeEnum value;
}

@ExtendedMetaData(name="EnrollmentOutcomeEnum")
enum EnrollmentOutcomeEnum {

	@GenModel(documentation="Queued")
	queued = 0;

	@GenModel(documentation="Processing Complete")
	complete = 1;

	@GenModel(documentation="Error")
	error = 2;

	@GenModel(documentation="Partial Processing")
	partial = 3;
}

@ExtendedMetaData(name="EnrollmentOutcomeEnum:Object", baseType="EnrollmentOutcomeEnum")
datatype EnrollmentOutcomeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="This resource provides the insurance enrollment details to the insurer regarding a specified coverage.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="EnrollmentRequest", kind="elementOnly")
class EnrollmentRequest extends DomainResource {

	@GenModel(documentation="The Response business identifier.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The status of the resource instance.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val FinancialResourceStatusCodes status;

	@GenModel(documentation="The date when this resource was created.")
	@ExtendedMetaData(kind="element", name="created", namespace="##targetNamespace")
	!resolve val DateTime created;

	@GenModel(documentation="The Insurer who is target  of the request.")
	@ExtendedMetaData(kind="element", name="insurer", namespace="##targetNamespace")
	!resolve val Reference insurer;

	@GenModel(documentation="The practitioner who is responsible for the services rendered to the patient.")
	@ExtendedMetaData(kind="element", name="provider", namespace="##targetNamespace")
	!resolve val Reference provider;

	@GenModel(documentation="Patient Resource.")
	@ExtendedMetaData(kind="element", name="candidate", namespace="##targetNamespace")
	!resolve val Reference candidate;

	@GenModel(documentation="Reference to the program or plan identification, underwriter or payor.")
	@ExtendedMetaData(kind="element", name="coverage", namespace="##targetNamespace")
	!resolve val Reference coverage;
}

@GenModel(documentation="This resource provides enrollment and plan details from the processing of an EnrollmentRequest resource.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="EnrollmentResponse", kind="elementOnly")
class EnrollmentResponse extends DomainResource {

	@GenModel(documentation="The Response business identifier.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The status of the resource instance.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val FinancialResourceStatusCodes status;

	@GenModel(documentation="Original request resource reference.")
	@ExtendedMetaData(kind="element", name="request", namespace="##targetNamespace")
	!resolve val Reference request;

	@GenModel(documentation="Processing status: error, complete.")
	@ExtendedMetaData(kind="element", name="outcome", namespace="##targetNamespace")
	!resolve val EnrollmentOutcome outcome;

	@GenModel(documentation="A description of the status of the adjudication.")
	@ExtendedMetaData(kind="element", name="disposition", namespace="##targetNamespace")
	!resolve val String disposition;

	@GenModel(documentation="The date when the enclosed suite of services were performed or completed.")
	@ExtendedMetaData(kind="element", name="created", namespace="##targetNamespace")
	!resolve val DateTime created;

	@GenModel(documentation="The Insurer who produced this adjudicated response.")
	@ExtendedMetaData(kind="element", name="organization", namespace="##targetNamespace")
	!resolve val Reference organization;

	@GenModel(documentation="The practitioner who is responsible for the services rendered to the patient.")
	@ExtendedMetaData(kind="element", name="requestProvider", namespace="##targetNamespace")
	!resolve val Reference requestProvider;
}

@GenModel(documentation="An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="EpisodeOfCare", kind="elementOnly")
class EpisodeOfCare extends DomainResource {

	@GenModel(documentation="The EpisodeOfCare may be known by different identifiers for different contexts of use, such as when an external agency is tracking the Episode for funding purposes.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="planned | waitlist | active | onhold | finished | cancelled.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val EpisodeOfCareStatus[1] status;

	@GenModel(documentation="The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).")
	@ExtendedMetaData(kind="element", name="statusHistory", namespace="##targetNamespace")
	!resolve val EpisodeOfCareStatusHistory[*] statusHistory;

	@GenModel(documentation="A classification of the type of episode of care; e.g. specialist referral, disease management, type of funded care.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] type;

	@GenModel(documentation="The list of medical reasons that are expected to be addressed during the episode of care.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val EpisodeOfCareReason[*] reason;

	@GenModel(documentation="The list of medical conditions that were addressed during the episode of care.")
	@ExtendedMetaData(kind="element", name="diagnosis", namespace="##targetNamespace")
	!resolve val EpisodeOfCareDiagnosis[*] diagnosis;

	@GenModel(documentation="The patient who is the focus of this episode of care.")
	@ExtendedMetaData(kind="element", name="patient", namespace="##targetNamespace")
	!resolve val Reference[1] patient;

	@GenModel(documentation="The organization that has assumed the specific responsibilities for care coordination, care delivery, or other services for the specified duration.")
	@ExtendedMetaData(kind="element", name="managingOrganization", namespace="##targetNamespace")
	!resolve val Reference managingOrganization;

	@GenModel(documentation="The interval during which the managing organization assumes the defined responsibility.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;

	@GenModel(documentation="Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming referrals.")
	@ExtendedMetaData(kind="element", name="referralRequest", namespace="##targetNamespace")
	!resolve val Reference[*] referralRequest;

	@GenModel(documentation="The practitioner that is the care manager/care coordinator for this patient.")
	@ExtendedMetaData(kind="element", name="careManager", namespace="##targetNamespace")
	!resolve val Reference careManager;

	@GenModel(documentation="The list of practitioners that may be facilitating this episode of care for specific purposes.")
	@ExtendedMetaData(kind="element", name="careTeam", namespace="##targetNamespace")
	!resolve val Reference[*] careTeam;

	@GenModel(documentation="The set of accounts that may be used for billing for this EpisodeOfCare.")
	@ExtendedMetaData(kind="element", name="account", namespace="##targetNamespace")
	!resolve val Reference[*] account;
}

@GenModel(documentation="An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time.")
@ExtendedMetaData(name="EpisodeOfCare.Diagnosis", kind="elementOnly")
class EpisodeOfCareDiagnosis extends BackboneElement {

	@GenModel(documentation="The medical condition that was addressed during the episode of care, expressed as a text, code or a reference to another resource.")
	@ExtendedMetaData(kind="element", name="condition", namespace="##targetNamespace")
	!resolve val CodeableReference[*] condition;

	@GenModel(documentation="Role that this diagnosis has within the episode of care (e.g. admission, billing, discharge …).")
	@ExtendedMetaData(kind="element", name="use", namespace="##targetNamespace")
	!resolve val CodeableConcept use;
}

@GenModel(documentation="An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time.")
@ExtendedMetaData(name="EpisodeOfCare.Reason", kind="elementOnly")
class EpisodeOfCareReason extends BackboneElement {

	@GenModel(documentation="What the reason value should be used as e.g. Chief Complaint, Health Concern, Health Maintenance (including screening).")
	@ExtendedMetaData(kind="element", name="use", namespace="##targetNamespace")
	!resolve val CodeableConcept use;

	@GenModel(documentation="The medical reason that is expected to be addressed during the episode of care, expressed as a text, code or a reference to another resource.")
	@ExtendedMetaData(kind="element", name="value", namespace="##targetNamespace")
	!resolve val CodeableReference[*] value;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="EpisodeOfCareStatus", kind="elementOnly")
class EpisodeOfCareStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr EpisodeOfCareStatusEnum value;
}

@ExtendedMetaData(name="EpisodeOfCareStatusEnum")
enum EpisodeOfCareStatusEnum {

	@GenModel(documentation="Planned")
	planned = 0;

	@GenModel(documentation="Waitlist")
	waitlist = 1;

	@GenModel(documentation="Active")
	active = 2;

	@GenModel(documentation="On Hold")
	onhold = 3;

	@GenModel(documentation="Finished")
	finished = 4;

	@GenModel(documentation="Cancelled")
	cancelled = 5;

	@GenModel(documentation="Entered in Error")
	enteredInError = 6;
}

@ExtendedMetaData(name="EpisodeOfCareStatusEnum:Object", baseType="EpisodeOfCareStatusEnum")
datatype EpisodeOfCareStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time.")
@ExtendedMetaData(name="EpisodeOfCare.StatusHistory", kind="elementOnly")
class EpisodeOfCareStatusHistory extends BackboneElement {

	@GenModel(documentation="planned | waitlist | active | onhold | finished | cancelled.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val EpisodeOfCareStatus[1] status;

	@GenModel(documentation="The period during this EpisodeOfCare that the specific status applied.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period[1] period;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="EventCapabilityMode", kind="elementOnly")
class EventCapabilityMode extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr EventCapabilityModeEnum value;
}

@ExtendedMetaData(name="EventCapabilityModeEnum")
enum EventCapabilityModeEnum {

	@GenModel(documentation="Sender")
	sender = 0;

	@GenModel(documentation="Receiver")
	receiver = 1;
}

@ExtendedMetaData(name="EventCapabilityModeEnum:Object", baseType="EventCapabilityModeEnum")
datatype EventCapabilityModeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="The EventDefinition resource provides a reusable description of when a particular event can occur.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="EventDefinition", kind="elementOnly")
class EventDefinition extends MetadataResource {

	@GenModel(documentation="An absolute URI that is used to identify this event definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this event definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the event definition is stored on different servers.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri url;

	@GenModel(documentation="A formal identifier that is used to identify this event definition when it is represented in other formats, or referenced in a specification, model, design or an instance.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The identifier that is used to identify this version of the event definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the event definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@ExtendedMetaData(kind="element", name="versionAlgorithmString", namespace="##targetNamespace")
	!resolve val String versionAlgorithmString;

	@ExtendedMetaData(kind="element", name="versionAlgorithmCoding", namespace="##targetNamespace")
	!resolve val Coding versionAlgorithmCoding;

	@GenModel(documentation="A natural language name identifying the event definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="A short, descriptive, user-friendly title for the event definition.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="An explanatory or alternate title for the event definition giving additional information about its content.")
	@ExtendedMetaData(kind="element", name="subtitle", namespace="##targetNamespace")
	!resolve val String subtitle;

	@GenModel(documentation="The status of this event definition. Enables tracking the life-cycle of the content.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="A Boolean value to indicate that this event definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.")
	@ExtendedMetaData(kind="element", name="experimental", namespace="##targetNamespace")
	!resolve val Boolean experimental;

	@ExtendedMetaData(kind="element", name="subjectCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept subjectCodeableConcept;

	@ExtendedMetaData(kind="element", name="subjectReference", namespace="##targetNamespace")
	!resolve val Reference subjectReference;

	@GenModel(documentation="The date  (and optionally time) when the event definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the event definition changes.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="The name of the organization or individual responsible for the release and ongoing maintenance of the event definition.")
	@ExtendedMetaData(kind="element", name="publisher", namespace="##targetNamespace")
	!resolve val String publisher;

	@GenModel(documentation="Contact details to assist a user in finding and communicating with the publisher.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactDetail[*] contact;

	@GenModel(documentation="A free text natural language description of the event definition from a consumer's perspective.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate event definition instances.")
	@ExtendedMetaData(kind="element", name="useContext", namespace="##targetNamespace")
	!resolve val UsageContext[*] useContext;

	@GenModel(documentation="A legal or geographic region in which the event definition is intended to be used.")
	@ExtendedMetaData(kind="element", name="jurisdiction", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] jurisdiction;

	@GenModel(documentation="Explanation of why this event definition is needed and why it has been designed as it has.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val Markdown purpose;

	@GenModel(documentation="A detailed description of how the event definition is used from a clinical perspective.")
	@ExtendedMetaData(kind="element", name="usage", namespace="##targetNamespace")
	!resolve val Markdown usage;

	@GenModel(documentation="A copyright statement relating to the event definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the event definition.")
	@ExtendedMetaData(kind="element", name="copyright", namespace="##targetNamespace")
	!resolve val Markdown copyright;

	@GenModel(documentation="A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').")
	@ExtendedMetaData(kind="element", name="copyrightLabel", namespace="##targetNamespace")
	!resolve val String copyrightLabel;

	@GenModel(documentation="The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.")
	@ExtendedMetaData(kind="element", name="approvalDate", namespace="##targetNamespace")
	!resolve val Date approvalDate;

	@GenModel(documentation="The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.")
	@ExtendedMetaData(kind="element", name="lastReviewDate", namespace="##targetNamespace")
	!resolve val Date lastReviewDate;

	@GenModel(documentation="The period during which the event definition content was or is planned to be in active use.")
	@ExtendedMetaData(kind="element", name="effectivePeriod", namespace="##targetNamespace")
	!resolve val Period effectivePeriod;

	@GenModel(documentation="Descriptive topics related to the module. Topics provide a high-level categorization of the module that can be useful for filtering and searching.")
	@ExtendedMetaData(kind="element", name="topic", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] topic;

	@GenModel(documentation="An individiual or organization primarily involved in the creation and maintenance of the content.")
	@ExtendedMetaData(kind="element", name="author", namespace="##targetNamespace")
	!resolve val ContactDetail[*] author;

	@GenModel(documentation="An individual or organization primarily responsible for internal coherence of the content.")
	@ExtendedMetaData(kind="element", name="editor", namespace="##targetNamespace")
	!resolve val ContactDetail[*] editor;

	@GenModel(documentation="An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the content.")
	@ExtendedMetaData(kind="element", name="reviewer", namespace="##targetNamespace")
	!resolve val ContactDetail[*] reviewer;

	@GenModel(documentation="An individual or organization asserted by the publisher to be responsible for officially endorsing the content for use in some setting.")
	@ExtendedMetaData(kind="element", name="endorser", namespace="##targetNamespace")
	!resolve val ContactDetail[*] endorser;

	@GenModel(documentation="Related resources such as additional documentation, justification, or bibliographic references.")
	@ExtendedMetaData(kind="element", name="relatedArtifact", namespace="##targetNamespace")
	!resolve val RelatedArtifact[*] relatedArtifact;

	@GenModel(documentation="The trigger element defines when the event occurs. If more than one trigger condition is specified, the event fires whenever any one of the trigger conditions is met.")
	@ExtendedMetaData(kind="element", name="trigger", namespace="##targetNamespace")
	!resolve val TriggerDefinition[+] trigger;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="EventResourceTypes", kind="elementOnly")
class EventResourceTypes extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr EventResourceTypesEnum value;
}

@ExtendedMetaData(name="EventResourceTypesEnum")
enum EventResourceTypesEnum {

	@GenModel(documentation="AdverseEvent")
	AdverseEvent = 0;

	@GenModel(documentation="AuditEvent")
	AuditEvent = 1;

	@GenModel(documentation="ChargeItem")
	ChargeItem = 2;

	@GenModel(documentation="ClaimResponse")
	ClaimResponse = 3;

	@GenModel(documentation="ClinicalImpression")
	ClinicalImpression = 4;

	@GenModel(documentation="Communication")
	Communication = 5;

	@GenModel(documentation="Composition")
	Composition = 6;

	@GenModel(documentation="Consent")
	Consent = 7;

	@GenModel(documentation="Contract")
	Contract = 8;

	@GenModel(documentation="Coverage")
	Coverage = 9;

	@GenModel(documentation="CoverageEligibilityResponse")
	CoverageEligibilityResponse = 10;

	@GenModel(documentation="DetectedIssue")
	DetectedIssue = 11;

	@GenModel(documentation="DeviceDispense")
	DeviceDispense = 12;

	@GenModel(documentation="DeviceUsage")
	DeviceUsage = 13;

	@GenModel(documentation="DiagnosticReport")
	DiagnosticReport = 14;

	@GenModel(documentation="DocumentReference")
	DocumentReference = 15;

	@GenModel(documentation="Encounter")
	Encounter = 16;

	@GenModel(documentation="EnrollmentResponse")
	EnrollmentResponse = 17;

	@GenModel(documentation="EpisodeOfCare")
	EpisodeOfCare = 18;

	@GenModel(documentation="ExplanationOfBenefit")
	ExplanationOfBenefit = 19;

	@GenModel(documentation="FamilyMemberHistory")
	FamilyMemberHistory = 20;

	@GenModel(documentation="GenomicStudy")
	GenomicStudy = 21;

	@GenModel(documentation="GuidanceResponse")
	GuidanceResponse = 22;

	@GenModel(documentation="ImagingSelection")
	ImagingSelection = 23;

	@GenModel(documentation="ImagingStudy")
	ImagingStudy = 24;

	@GenModel(documentation="Immunization")
	Immunization = 25;

	@GenModel(documentation="ImmunizationEvaluation")
	ImmunizationEvaluation = 26;

	@GenModel(documentation="InventoryReport")
	InventoryReport = 27;

	@GenModel(documentation="Invoice")
	Invoice = 28;

	@GenModel(documentation="MedicationAdministration")
	MedicationAdministration = 29;

	@GenModel(documentation="MedicationDispense")
	MedicationDispense = 30;

	@GenModel(documentation="MedicationStatement")
	MedicationStatement = 31;

	@GenModel(documentation="MessageHeader")
	MessageHeader = 32;

	@GenModel(documentation="NutritionIntake")
	NutritionIntake = 33;

	@GenModel(documentation="Observation")
	Observation = 34;

	@GenModel(documentation="PaymentNotice")
	PaymentNotice = 35;

	@GenModel(documentation="PaymentReconciliation")
	PaymentReconciliation = 36;

	@GenModel(documentation="Procedure")
	Procedure = 37;

	@GenModel(documentation="Provenance")
	Provenance = 38;

	@GenModel(documentation="QuestionnaireResponse")
	QuestionnaireResponse = 39;

	@GenModel(documentation="RiskAssessment")
	RiskAssessment = 40;

	@GenModel(documentation="SupplyDelivery")
	SupplyDelivery = 41;

	@GenModel(documentation="Transport")
	Transport = 42;
}

@ExtendedMetaData(name="EventResourceTypesEnum:Object", baseType="EventResourceTypesEnum")
datatype EventResourceTypesEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="EventStatus", kind="elementOnly")
class EventStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr EventStatusEnum value;
}

@ExtendedMetaData(name="EventStatusEnum")
enum EventStatusEnum {

	@GenModel(documentation="Preparation")
	preparation = 0;

	@GenModel(documentation="In Progress")
	inProgress = 1;

	@GenModel(documentation="Not Done")
	notDone = 2;

	@GenModel(documentation="On Hold")
	onHold = 3;

	@GenModel(documentation="Stopped")
	stopped = 4;

	@GenModel(documentation="Completed")
	completed = 5;

	@GenModel(documentation="Entered in Error")
	enteredInError = 6;

	@GenModel(documentation="Unknown")
	unknown = 7;
}

@ExtendedMetaData(name="EventStatusEnum:Object", baseType="EventStatusEnum")
datatype EventStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="Real-world event relating to the schedule.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="EventTiming", kind="elementOnly")
class EventTiming extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr EventTimingEnum value;
}

@ExtendedMetaData(name="EventTimingEnum")
enum EventTimingEnum {

	@GenModel(documentation="Morning")
	MORN = 0;

	@GenModel(documentation="Early Morning")
	MORNEarly = 1;

	@GenModel(documentation="Late Morning")
	MORNLate = 2;

	@GenModel(documentation="Noon")
	NOON = 3;

	@GenModel(documentation="Afternoon")
	AFT = 4;

	@GenModel(documentation="Early Afternoon")
	AFTEarly = 5;

	@GenModel(documentation="Late Afternoon")
	AFTLate = 6;

	@GenModel(documentation="Evening")
	EVE = 7;

	@GenModel(documentation="Early Evening")
	EVEEarly = 8;

	@GenModel(documentation="Late Evening")
	EVELate = 9;

	@GenModel(documentation="Night")
	NIGHT = 10;

	@GenModel(documentation="After Sleep")
	PHS = 11;

	@GenModel(documentation="Immediate")
	IMD = 12;

	@GenModel(documentation="HS")
	HS = 13;

	@GenModel(documentation="WAKE")
	WAKE = 14;

	@GenModel(documentation="C")
	C = 15;

	@GenModel(documentation="CM")
	CM = 16;

	@GenModel(documentation="CD")
	CD = 17;

	@GenModel(documentation="CV")
	CV = 18;

	@GenModel(documentation="AC")
	AC = 19;

	@GenModel(documentation="ACM")
	ACM = 20;

	@GenModel(documentation="ACD")
	ACD = 21;

	@GenModel(documentation="ACV")
	ACV = 22;

	@GenModel(documentation="PC")
	PC = 23;

	@GenModel(documentation="PCM")
	PCM = 24;

	@GenModel(documentation="PCD")
	PCD = 25;

	@GenModel(documentation="PCV")
	PCV = 26;
}

@ExtendedMetaData(name="EventTimingEnum:Object", baseType="EventTimingEnum")
datatype EventTimingEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="The Evidence Resource provides a machine-interpretable expression of an evidence concept including the evidence variables (e.g., population, exposures/interventions, comparators, outcomes, measured variables, confounding variables), the statistics, and the certainty of this evidence.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Evidence", kind="elementOnly")
class Evidence extends MetadataResource {

	@GenModel(documentation="An absolute URI that is used to identify this evidence when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this summary is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the summary is stored on different servers.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri url;

	@GenModel(documentation="A formal identifier that is used to identify this summary when it is represented in other formats, or referenced in a specification, model, design or an instance.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The identifier that is used to identify this version of the summary when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the summary author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@ExtendedMetaData(kind="element", name="versionAlgorithmString", namespace="##targetNamespace")
	!resolve val String versionAlgorithmString;

	@ExtendedMetaData(kind="element", name="versionAlgorithmCoding", namespace="##targetNamespace")
	!resolve val Coding versionAlgorithmCoding;

	@GenModel(documentation="A natural language name identifying the evidence. This name should be usable as an identifier for the module by machine processing applications such as code generation.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="A short, descriptive, user-friendly title for the summary.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@ExtendedMetaData(kind="element", name="citeAsReference", namespace="##targetNamespace")
	!resolve val Reference citeAsReference;

	@ExtendedMetaData(kind="element", name="citeAsMarkdown", namespace="##targetNamespace")
	!resolve val Markdown citeAsMarkdown;

	@GenModel(documentation="The status of this summary. Enables tracking the life-cycle of the content.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="A Boolean value to indicate that this resource is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.")
	@ExtendedMetaData(kind="element", name="experimental", namespace="##targetNamespace")
	!resolve val Boolean experimental;

	@GenModel(documentation="The date  (and optionally time) when the summary was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the summary changes.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.")
	@ExtendedMetaData(kind="element", name="approvalDate", namespace="##targetNamespace")
	!resolve val Date approvalDate;

	@GenModel(documentation="The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.")
	@ExtendedMetaData(kind="element", name="lastReviewDate", namespace="##targetNamespace")
	!resolve val Date lastReviewDate;

	@GenModel(documentation="The name of the organization or individual responsible for the release and ongoing maintenance of the evidence.")
	@ExtendedMetaData(kind="element", name="publisher", namespace="##targetNamespace")
	!resolve val String publisher;

	@GenModel(documentation="Contact details to assist a user in finding and communicating with the publisher.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactDetail[*] contact;

	@GenModel(documentation="An individiual, organization, or device primarily involved in the creation and maintenance of the content.")
	@ExtendedMetaData(kind="element", name="author", namespace="##targetNamespace")
	!resolve val ContactDetail[*] author;

	@GenModel(documentation="An individiual, organization, or device primarily responsible for internal coherence of the content.")
	@ExtendedMetaData(kind="element", name="editor", namespace="##targetNamespace")
	!resolve val ContactDetail[*] editor;

	@GenModel(documentation="An individiual, organization, or device primarily responsible for review of some aspect of the content.")
	@ExtendedMetaData(kind="element", name="reviewer", namespace="##targetNamespace")
	!resolve val ContactDetail[*] reviewer;

	@GenModel(documentation="An individiual, organization, or device responsible for officially endorsing the content for use in some setting.")
	@ExtendedMetaData(kind="element", name="endorser", namespace="##targetNamespace")
	!resolve val ContactDetail[*] endorser;

	@GenModel(documentation="The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate evidence instances.")
	@ExtendedMetaData(kind="element", name="useContext", namespace="##targetNamespace")
	!resolve val UsageContext[*] useContext;

	@GenModel(documentation="Explanation of why this Evidence is needed and why it has been designed as it has.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val Markdown purpose;

	@GenModel(documentation="A copyright statement relating to the Evidence and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the Evidence.")
	@ExtendedMetaData(kind="element", name="copyright", namespace="##targetNamespace")
	!resolve val Markdown copyright;

	@GenModel(documentation="A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').")
	@ExtendedMetaData(kind="element", name="copyrightLabel", namespace="##targetNamespace")
	!resolve val String copyrightLabel;

	@GenModel(documentation="Link or citation to artifact associated with the summary.")
	@ExtendedMetaData(kind="element", name="relatedArtifact", namespace="##targetNamespace")
	!resolve val RelatedArtifact[*] relatedArtifact;

	@GenModel(documentation="A free text natural language description of the evidence from a consumer's perspective.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="Declarative description of the Evidence.")
	@ExtendedMetaData(kind="element", name="assertion", namespace="##targetNamespace")
	!resolve val Markdown assertion;

	@GenModel(documentation="Footnotes and/or explanatory notes.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="Evidence variable such as population, exposure, or outcome.")
	@ExtendedMetaData(kind="element", name="variableDefinition", namespace="##targetNamespace")
	!resolve val EvidenceVariableDefinition[+] variableDefinition;

	@GenModel(documentation="The method to combine studies.")
	@ExtendedMetaData(kind="element", name="synthesisType", namespace="##targetNamespace")
	!resolve val CodeableConcept synthesisType;

	@GenModel(documentation="The design of the study that produced this evidence. The design is described with any number of study design characteristics.")
	@ExtendedMetaData(kind="element", name="studyDesign", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] studyDesign;

	@GenModel(documentation="Values and parameters for a single statistic.")
	@ExtendedMetaData(kind="element", name="statistic", namespace="##targetNamespace")
	!resolve val EvidenceStatistic[*] statistic;

	@GenModel(documentation="Assessment of certainty, confidence in the estimates, or quality of the evidence.")
	@ExtendedMetaData(kind="element", name="certainty", namespace="##targetNamespace")
	!resolve val EvidenceCertainty[*] certainty;
}

@GenModel(documentation="The Evidence Resource provides a machine-interpretable expression of an evidence concept including the evidence variables (e.g., population, exposures/interventions, comparators, outcomes, measured variables, confounding variables), the statistics, and the certainty of this evidence.")
@ExtendedMetaData(name="Evidence.AttributeEstimate", kind="elementOnly")
class EvidenceAttributeEstimate extends BackboneElement {

	@GenModel(documentation="Human-readable summary of the estimate.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="Footnote or explanatory note about the estimate.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="The type of attribute estimate, e.g., confidence interval or p value.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="The singular quantity of the attribute estimate, for attribute estimates represented as single values; also used to report unit of measure.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Quantity quantity;

	@GenModel(documentation="Use 95 for a 95% confidence interval.")
	@ExtendedMetaData(kind="element", name="level", namespace="##targetNamespace")
	!resolve val Decimal level;

	@GenModel(documentation="Lower bound of confidence interval.")
	@ExtendedMetaData(kind="element", name="range", namespace="##targetNamespace")
	!resolve val Range range;

	@GenModel(documentation="A nested attribute estimate; which is the attribute estimate of an attribute estimate.")
	@ExtendedMetaData(kind="element", name="attributeEstimate", namespace="##targetNamespace")
	!resolve val EvidenceAttributeEstimate[*] attributeEstimate;
}

@GenModel(documentation="The Evidence Resource provides a machine-interpretable expression of an evidence concept including the evidence variables (e.g., population, exposures/interventions, comparators, outcomes, measured variables, confounding variables), the statistics, and the certainty of this evidence.")
@ExtendedMetaData(name="Evidence.Certainty", kind="elementOnly")
class EvidenceCertainty extends BackboneElement {

	@GenModel(documentation="Textual description of certainty.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="Footnotes and/or explanatory notes.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="Aspect of certainty being rated.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="Assessment or judgement of the aspect.")
	@ExtendedMetaData(kind="element", name="rating", namespace="##targetNamespace")
	!resolve val CodeableConcept rating;

	@GenModel(documentation="Individual or group who did the rating.")
	@ExtendedMetaData(kind="element", name="rater", namespace="##targetNamespace")
	!resolve val String rater;

	@GenModel(documentation="A domain or subdomain of certainty.")
	@ExtendedMetaData(kind="element", name="subcomponent", namespace="##targetNamespace")
	!resolve val EvidenceCertainty[*] subcomponent;
}

@GenModel(documentation="The Evidence Resource provides a machine-interpretable expression of an evidence concept including the evidence variables (e.g., population, exposures/interventions, comparators, outcomes, measured variables, confounding variables), the statistics, and the certainty of this evidence.")
@ExtendedMetaData(name="Evidence.ModelCharacteristic", kind="elementOnly")
class EvidenceModelCharacteristic extends BackboneElement {

	@GenModel(documentation="Description of a component of the method to generate the statistic.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] code;

	@GenModel(documentation="Further specification of the quantified value of the component of the method to generate the statistic.")
	@ExtendedMetaData(kind="element", name="value", namespace="##targetNamespace")
	!resolve val Quantity value;

	@GenModel(documentation="A variable adjusted for in the adjusted analysis.")
	@ExtendedMetaData(kind="element", name="variable", namespace="##targetNamespace")
	!resolve val EvidenceVariable1[*] variable;

	@GenModel(documentation="An attribute of the statistic used as a model characteristic.")
	@ExtendedMetaData(kind="element", name="attributeEstimate", namespace="##targetNamespace")
	!resolve val EvidenceAttributeEstimate[*] attributeEstimate;
}

@GenModel(documentation="The EvidenceReport Resource is a specialized container for a collection of resources and codeable concepts, adapted to support compositions of Evidence, EvidenceVariable, and Citation resources and related concepts.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="EvidenceReport", kind="elementOnly")
class EvidenceReport extends MetadataResource {

	@GenModel(documentation="An absolute URI that is used to identify this EvidenceReport when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this summary is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the summary is stored on different servers.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri url;

	@GenModel(documentation="The status of this summary. Enables tracking the life-cycle of the content.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate evidence report instances.")
	@ExtendedMetaData(kind="element", name="useContext", namespace="##targetNamespace")
	!resolve val UsageContext[*] useContext;

	@GenModel(documentation="A formal identifier that is used to identify this EvidenceReport when it is represented in other formats, or referenced in a specification, model, design or an instance.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="A formal identifier that is used to identify things closely related to this EvidenceReport.")
	@ExtendedMetaData(kind="element", name="relatedIdentifier", namespace="##targetNamespace")
	!resolve val Identifier[*] relatedIdentifier;

	@ExtendedMetaData(kind="element", name="citeAsReference", namespace="##targetNamespace")
	!resolve val Reference citeAsReference;

	@ExtendedMetaData(kind="element", name="citeAsMarkdown", namespace="##targetNamespace")
	!resolve val Markdown citeAsMarkdown;

	@GenModel(documentation="Specifies the kind of report, such as grouping of classifiers, search results, or human-compiled expression.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="Used for footnotes and annotations.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="Link, description or reference to artifact associated with the report.")
	@ExtendedMetaData(kind="element", name="relatedArtifact", namespace="##targetNamespace")
	!resolve val RelatedArtifact[*] relatedArtifact;

	@GenModel(documentation="Specifies the subject or focus of the report. Answers \"What is this report about?\".")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val EvidenceReportSubject[1] subject;

	@GenModel(documentation="The name of the organization or individual responsible for the release and ongoing maintenance of the evidence report.")
	@ExtendedMetaData(kind="element", name="publisher", namespace="##targetNamespace")
	!resolve val String publisher;

	@GenModel(documentation="Contact details to assist a user in finding and communicating with the publisher.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactDetail[*] contact;

	@GenModel(documentation="An individiual, organization, or device primarily involved in the creation and maintenance of the content.")
	@ExtendedMetaData(kind="element", name="author", namespace="##targetNamespace")
	!resolve val ContactDetail[*] author;

	@GenModel(documentation="An individiual, organization, or device primarily responsible for internal coherence of the content.")
	@ExtendedMetaData(kind="element", name="editor", namespace="##targetNamespace")
	!resolve val ContactDetail[*] editor;

	@GenModel(documentation="An individiual, organization, or device primarily responsible for review of some aspect of the content.")
	@ExtendedMetaData(kind="element", name="reviewer", namespace="##targetNamespace")
	!resolve val ContactDetail[*] reviewer;

	@GenModel(documentation="An individiual, organization, or device responsible for officially endorsing the content for use in some setting.")
	@ExtendedMetaData(kind="element", name="endorser", namespace="##targetNamespace")
	!resolve val ContactDetail[*] endorser;

	@GenModel(documentation="Relationships that this composition has with other compositions or documents that already exist.")
	@ExtendedMetaData(kind="element", name="relatesTo", namespace="##targetNamespace")
	!resolve val EvidenceReportRelatesTo[*] relatesTo;

	@GenModel(documentation="The root of the sections that make up the composition.")
	@ExtendedMetaData(kind="element", name="section", namespace="##targetNamespace")
	!resolve val EvidenceReportSection[*] section;
}

@GenModel(documentation="The EvidenceReport Resource is a specialized container for a collection of resources and codeable concepts, adapted to support compositions of Evidence, EvidenceVariable, and Citation resources and related concepts.")
@ExtendedMetaData(name="EvidenceReport.Characteristic", kind="elementOnly")
class EvidenceReportCharacteristic extends BackboneElement {

	@GenModel(documentation="Characteristic code.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] code;

	@ExtendedMetaData(kind="element", name="valueReference", namespace="##targetNamespace")
	!resolve val Reference valueReference;

	@ExtendedMetaData(kind="element", name="valueCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept valueCodeableConcept;

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueRange", namespace="##targetNamespace")
	!resolve val Range valueRange;

	@GenModel(documentation="Is used to express not the characteristic.")
	@ExtendedMetaData(kind="element", name="exclude", namespace="##targetNamespace")
	!resolve val Boolean exclude;

	@GenModel(documentation="Timeframe for the characteristic.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;
}

@GenModel(documentation="The EvidenceReport Resource is a specialized container for a collection of resources and codeable concepts, adapted to support compositions of Evidence, EvidenceVariable, and Citation resources and related concepts.")
@ExtendedMetaData(name="EvidenceReport.RelatesTo", kind="elementOnly")
class EvidenceReportRelatesTo extends BackboneElement {

	@GenModel(documentation="The type of relationship that this composition has with anther composition or document.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val ReportRelationshipType[1] code;

	@GenModel(documentation="The target composition/document of this relationship.")
	@ExtendedMetaData(kind="element", name="target", namespace="##targetNamespace")
	!resolve val EvidenceReportTarget[1] target;
}

@GenModel(documentation="The EvidenceReport Resource is a specialized container for a collection of resources and codeable concepts, adapted to support compositions of Evidence, EvidenceVariable, and Citation resources and related concepts.")
@ExtendedMetaData(name="EvidenceReport.Section", kind="elementOnly")
class EvidenceReportSection extends BackboneElement {

	@GenModel(documentation="The label for this particular section.  This will be part of the rendered content for the document, and is often used to build a table of contents.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="A code identifying the kind of content contained within the section. This should be consistent with the section title.")
	@ExtendedMetaData(kind="element", name="focus", namespace="##targetNamespace")
	!resolve val CodeableConcept focus;

	@GenModel(documentation="A definitional Resource identifying the kind of content contained within the section. This should be consistent with the section title.")
	@ExtendedMetaData(kind="element", name="focusReference", namespace="##targetNamespace")
	!resolve val Reference focusReference;

	@GenModel(documentation="Identifies who is responsible for the information in this section, not necessarily who typed it in.")
	@ExtendedMetaData(kind="element", name="author", namespace="##targetNamespace")
	!resolve val Reference[*] author;

	@GenModel(documentation="A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is peferred to contain sufficient detail to make it acceptable for a human to just read the narrative.")
	@ExtendedMetaData(kind="element", name="text", namespace="##targetNamespace")
	!resolve val Narrative text;

	@GenModel(documentation="How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.")
	@ExtendedMetaData(kind="element", name="mode", namespace="##targetNamespace")
	!resolve val ListMode mode;

	@GenModel(documentation="Specifies the order applied to the items in the section entries.")
	@ExtendedMetaData(kind="element", name="orderedBy", namespace="##targetNamespace")
	!resolve val CodeableConcept orderedBy;

	@GenModel(documentation="Specifies any type of classification of the evidence report.")
	@ExtendedMetaData(kind="element", name="entryClassifier", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] entryClassifier;

	@GenModel(documentation="A reference to the actual resource from which the narrative in the section is derived.")
	@ExtendedMetaData(kind="element", name="entryReference", namespace="##targetNamespace")
	!resolve val Reference[*] entryReference;

	@GenModel(documentation="Quantity as content.")
	@ExtendedMetaData(kind="element", name="entryQuantity", namespace="##targetNamespace")
	!resolve val Quantity[*] entryQuantity;

	@GenModel(documentation="If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.")
	@ExtendedMetaData(kind="element", name="emptyReason", namespace="##targetNamespace")
	!resolve val CodeableConcept emptyReason;

	@GenModel(documentation="A nested sub-section within this section.")
	@ExtendedMetaData(kind="element", name="section", namespace="##targetNamespace")
	!resolve val EvidenceReportSection[*] section;
}

@GenModel(documentation="The EvidenceReport Resource is a specialized container for a collection of resources and codeable concepts, adapted to support compositions of Evidence, EvidenceVariable, and Citation resources and related concepts.")
@ExtendedMetaData(name="EvidenceReport.Subject", kind="elementOnly")
class EvidenceReportSubject extends BackboneElement {

	@GenModel(documentation="Characteristic.")
	@ExtendedMetaData(kind="element", name="characteristic", namespace="##targetNamespace")
	!resolve val EvidenceReportCharacteristic[*] characteristic;

	@GenModel(documentation="Used for general notes and annotations not coded elsewhere.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;
}

@GenModel(documentation="The EvidenceReport Resource is a specialized container for a collection of resources and codeable concepts, adapted to support compositions of Evidence, EvidenceVariable, and Citation resources and related concepts.")
@ExtendedMetaData(name="EvidenceReport.Target", kind="elementOnly")
class EvidenceReportTarget extends BackboneElement {

	@GenModel(documentation="Target of the relationship URL.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri url;

	@GenModel(documentation="Target of the relationship Identifier.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier identifier;

	@GenModel(documentation="Target of the relationship Display.")
	@ExtendedMetaData(kind="element", name="display", namespace="##targetNamespace")
	!resolve val Markdown display;

	@GenModel(documentation="Target of the relationship Resource reference.")
	@ExtendedMetaData(kind="element", name="resource", namespace="##targetNamespace")
	!resolve val Reference resource;
}

@GenModel(documentation="The Evidence Resource provides a machine-interpretable expression of an evidence concept including the evidence variables (e.g., population, exposures/interventions, comparators, outcomes, measured variables, confounding variables), the statistics, and the certainty of this evidence.")
@ExtendedMetaData(name="Evidence.SampleSize", kind="elementOnly")
class EvidenceSampleSize extends BackboneElement {

	@GenModel(documentation="Human-readable summary of population sample size.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="Footnote or explanatory note about the sample size.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="Number of participants in the population.")
	@ExtendedMetaData(kind="element", name="numberOfStudies", namespace="##targetNamespace")
	!resolve val UnsignedInt numberOfStudies;

	@GenModel(documentation="A human-readable string to clarify or explain concepts about the sample size.")
	@ExtendedMetaData(kind="element", name="numberOfParticipants", namespace="##targetNamespace")
	!resolve val UnsignedInt numberOfParticipants;

	@GenModel(documentation="Number of participants with known results for measured variables.")
	@ExtendedMetaData(kind="element", name="knownDataCount", namespace="##targetNamespace")
	!resolve val UnsignedInt knownDataCount;
}

@GenModel(documentation="The Evidence Resource provides a machine-interpretable expression of an evidence concept including the evidence variables (e.g., population, exposures/interventions, comparators, outcomes, measured variables, confounding variables), the statistics, and the certainty of this evidence.")
@ExtendedMetaData(name="Evidence.Statistic", kind="elementOnly")
class EvidenceStatistic extends BackboneElement {

	@GenModel(documentation="A description of the content value of the statistic.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="Footnotes and/or explanatory notes.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="Type of statistic, e.g., relative risk.")
	@ExtendedMetaData(kind="element", name="statisticType", namespace="##targetNamespace")
	!resolve val CodeableConcept statisticType;

	@GenModel(documentation="When the measured variable is handled categorically, the category element is used to define which category the statistic is reporting.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept category;

	@GenModel(documentation="Statistic value.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Quantity quantity;

	@GenModel(documentation="The number of events associated with the statistic, where the unit of analysis is different from numberAffected, sampleSize.knownDataCount and sampleSize.numberOfParticipants.")
	@ExtendedMetaData(kind="element", name="numberOfEvents", namespace="##targetNamespace")
	!resolve val UnsignedInt numberOfEvents;

	@GenModel(documentation="The number of participants affected where the unit of analysis is the same as sampleSize.knownDataCount and sampleSize.numberOfParticipants.")
	@ExtendedMetaData(kind="element", name="numberAffected", namespace="##targetNamespace")
	!resolve val UnsignedInt numberAffected;

	@GenModel(documentation="Number of samples in the statistic.")
	@ExtendedMetaData(kind="element", name="sampleSize", namespace="##targetNamespace")
	!resolve val EvidenceSampleSize sampleSize;

	@GenModel(documentation="A statistical attribute of the statistic such as a measure of heterogeneity.")
	@ExtendedMetaData(kind="element", name="attributeEstimate", namespace="##targetNamespace")
	!resolve val EvidenceAttributeEstimate[*] attributeEstimate;

	@GenModel(documentation="A component of the method to generate the statistic.")
	@ExtendedMetaData(kind="element", name="modelCharacteristic", namespace="##targetNamespace")
	!resolve val EvidenceModelCharacteristic[*] modelCharacteristic;
}

@GenModel(documentation="The EvidenceVariable resource describes an element that knowledge (Evidence) is about.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="EvidenceVariable", kind="elementOnly")
class EvidenceVariable extends MetadataResource {

	@GenModel(documentation="An absolute URI that is used to identify this evidence variable when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this evidence variable is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the evidence variable is stored on different servers.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri url;

	@GenModel(documentation="A formal identifier that is used to identify this evidence variable when it is represented in other formats, or referenced in a specification, model, design or an instance.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The identifier that is used to identify this version of the evidence variable when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the evidence variable author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@ExtendedMetaData(kind="element", name="versionAlgorithmString", namespace="##targetNamespace")
	!resolve val String versionAlgorithmString;

	@ExtendedMetaData(kind="element", name="versionAlgorithmCoding", namespace="##targetNamespace")
	!resolve val Coding versionAlgorithmCoding;

	@GenModel(documentation="A natural language name identifying the evidence variable. This name should be usable as an identifier for the module by machine processing applications such as code generation.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="A short, descriptive, user-friendly title for the evidence variable.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="The short title provides an alternate title for use in informal descriptive contexts where the full, formal title is not necessary.")
	@ExtendedMetaData(kind="element", name="shortTitle", namespace="##targetNamespace")
	!resolve val String shortTitle;

	@GenModel(documentation="The status of this evidence variable. Enables tracking the life-cycle of the content.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="A Boolean value to indicate that this resource is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.")
	@ExtendedMetaData(kind="element", name="experimental", namespace="##targetNamespace")
	!resolve val Boolean experimental;

	@GenModel(documentation="The date  (and optionally time) when the evidence variable was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the evidence variable changes.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="The name of the organization or individual responsible for the release and ongoing maintenance of the evidence variable.")
	@ExtendedMetaData(kind="element", name="publisher", namespace="##targetNamespace")
	!resolve val String publisher;

	@GenModel(documentation="Contact details to assist a user in finding and communicating with the publisher.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactDetail[*] contact;

	@GenModel(documentation="A free text natural language description of the evidence variable from a consumer's perspective.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="A human-readable string to clarify or explain concepts about the resource.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate evidence variable instances.")
	@ExtendedMetaData(kind="element", name="useContext", namespace="##targetNamespace")
	!resolve val UsageContext[*] useContext;

	@GenModel(documentation="Explanation of why this EvidenceVariable is needed and why it has been designed as it has.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val Markdown purpose;

	@GenModel(documentation="A copyright statement relating to the resource and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the resource.")
	@ExtendedMetaData(kind="element", name="copyright", namespace="##targetNamespace")
	!resolve val Markdown copyright;

	@GenModel(documentation="A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').")
	@ExtendedMetaData(kind="element", name="copyrightLabel", namespace="##targetNamespace")
	!resolve val String copyrightLabel;

	@GenModel(documentation="The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.

See guidance around (not) making local changes to elements [here](canonicalresource.html#localization).")
	@ExtendedMetaData(kind="element", name="approvalDate", namespace="##targetNamespace")
	!resolve val Date approvalDate;

	@GenModel(documentation="The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.")
	@ExtendedMetaData(kind="element", name="lastReviewDate", namespace="##targetNamespace")
	!resolve val Date lastReviewDate;

	@GenModel(documentation="The period during which the resource content was or is planned to be in active use.")
	@ExtendedMetaData(kind="element", name="effectivePeriod", namespace="##targetNamespace")
	!resolve val Period effectivePeriod;

	@GenModel(documentation="An individiual or organization primarily involved in the creation and maintenance of the content.")
	@ExtendedMetaData(kind="element", name="author", namespace="##targetNamespace")
	!resolve val ContactDetail[*] author;

	@GenModel(documentation="An individual or organization primarily responsible for internal coherence of the content.")
	@ExtendedMetaData(kind="element", name="editor", namespace="##targetNamespace")
	!resolve val ContactDetail[*] editor;

	@GenModel(documentation="An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the content.")
	@ExtendedMetaData(kind="element", name="reviewer", namespace="##targetNamespace")
	!resolve val ContactDetail[*] reviewer;

	@GenModel(documentation="An individual or organization asserted by the publisher to be responsible for officially endorsing the content for use in some setting.")
	@ExtendedMetaData(kind="element", name="endorser", namespace="##targetNamespace")
	!resolve val ContactDetail[*] endorser;

	@GenModel(documentation="Related artifacts such as additional documentation, justification, or bibliographic references.")
	@ExtendedMetaData(kind="element", name="relatedArtifact", namespace="##targetNamespace")
	!resolve val RelatedArtifact[*] relatedArtifact;

	@GenModel(documentation="True if the actual variable measured, false if a conceptual representation of the intended variable.")
	@ExtendedMetaData(kind="element", name="actual", namespace="##targetNamespace")
	!resolve val Boolean actual;

	@GenModel(documentation="A defining factor of the EvidenceVariable. Multiple characteristics are applied with \"and\" semantics.")
	@ExtendedMetaData(kind="element", name="characteristic", namespace="##targetNamespace")
	!resolve val EvidenceVariableCharacteristic[*] characteristic;

	@GenModel(documentation="The method of handling in statistical analysis.")
	@ExtendedMetaData(kind="element", name="handling", namespace="##targetNamespace")
	!resolve val EvidenceVariableHandling handling;

	@GenModel(documentation="A grouping for ordinal or polychotomous variables.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val EvidenceVariableCategory[*] category;
}

@GenModel(documentation="The Evidence Resource provides a machine-interpretable expression of an evidence concept including the evidence variables (e.g., population, exposures/interventions, comparators, outcomes, measured variables, confounding variables), the statistics, and the certainty of this evidence.")
@ExtendedMetaData(name="Evidence.Variable", kind="elementOnly")
class EvidenceVariable1 extends BackboneElement {

	@GenModel(documentation="Description of the variable.")
	@ExtendedMetaData(kind="element", name="variableDefinition", namespace="##targetNamespace")
	!resolve val Reference[1] variableDefinition;

	@GenModel(documentation="How the variable is classified for use in adjusted analysis.")
	@ExtendedMetaData(kind="element", name="handling", namespace="##targetNamespace")
	!resolve val EvidenceVariableHandling handling;

	@GenModel(documentation="Description for grouping of ordinal or polychotomous variables.")
	@ExtendedMetaData(kind="element", name="valueCategory", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] valueCategory;

	@GenModel(documentation="Discrete value for grouping of ordinal or polychotomous variables.")
	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity[*] valueQuantity;

	@GenModel(documentation="Range of values for grouping of ordinal or polychotomous variables.")
	@ExtendedMetaData(kind="element", name="valueRange", namespace="##targetNamespace")
	!resolve val Range[*] valueRange;
}

@GenModel(documentation="The EvidenceVariable resource describes an element that knowledge (Evidence) is about.")
@ExtendedMetaData(name="EvidenceVariable.Category", kind="elementOnly")
class EvidenceVariableCategory extends BackboneElement {

	@GenModel(documentation="Description of the grouping.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@ExtendedMetaData(kind="element", name="valueCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept valueCodeableConcept;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueRange", namespace="##targetNamespace")
	!resolve val Range valueRange;
}

@GenModel(documentation="The EvidenceVariable resource describes an element that knowledge (Evidence) is about.")
@ExtendedMetaData(name="EvidenceVariable.Characteristic", kind="elementOnly")
class EvidenceVariableCharacteristic extends BackboneElement {

	@GenModel(documentation="Label used for when a characteristic refers to another characteristic.")
	@ExtendedMetaData(kind="element", name="linkId", namespace="##targetNamespace")
	!resolve val Id linkId;

	@GenModel(documentation="A short, natural language description of the characteristic that could be used to communicate the criteria to an end-user.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="A human-readable string to clarify or explain concepts about the characteristic.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="When true, this characteristic is an exclusion criterion. In other words, not matching this characteristic definition is equivalent to meeting this criterion.")
	@ExtendedMetaData(kind="element", name="exclude", namespace="##targetNamespace")
	!resolve val Boolean exclude;

	@GenModel(documentation="Defines the characteristic using a Reference.")
	@ExtendedMetaData(kind="element", name="definitionReference", namespace="##targetNamespace")
	!resolve val Reference definitionReference;

	@GenModel(documentation="Defines the characteristic using Canonical.")
	@ExtendedMetaData(kind="element", name="definitionCanonical", namespace="##targetNamespace")
	!resolve val Canonical definitionCanonical;

	@GenModel(documentation="Defines the characteristic using CodeableConcept.")
	@ExtendedMetaData(kind="element", name="definitionCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept definitionCodeableConcept;

	@GenModel(documentation="Defines the characteristic using Expression.")
	@ExtendedMetaData(kind="element", name="definitionExpression", namespace="##targetNamespace")
	!resolve val Expression definitionExpression;

	@GenModel(documentation="Defines the characteristic using id.")
	@ExtendedMetaData(kind="element", name="definitionId", namespace="##targetNamespace")
	!resolve val Id definitionId;

	@GenModel(documentation="Defines the characteristic using both a type and value[x] elements.")
	@ExtendedMetaData(kind="element", name="definitionByTypeAndValue", namespace="##targetNamespace")
	!resolve val EvidenceVariableDefinitionByTypeAndValue definitionByTypeAndValue;

	@GenModel(documentation="Defines the characteristic as a combination of two or more characteristics.")
	@ExtendedMetaData(kind="element", name="definitionByCombination", namespace="##targetNamespace")
	!resolve val EvidenceVariableDefinitionByCombination definitionByCombination;

	@ExtendedMetaData(kind="element", name="instancesQuantity", namespace="##targetNamespace")
	!resolve val Quantity instancesQuantity;

	@ExtendedMetaData(kind="element", name="instancesRange", namespace="##targetNamespace")
	!resolve val Range instancesRange;

	@ExtendedMetaData(kind="element", name="durationQuantity", namespace="##targetNamespace")
	!resolve val Quantity durationQuantity;

	@ExtendedMetaData(kind="element", name="durationRange", namespace="##targetNamespace")
	!resolve val Range durationRange;

	@GenModel(documentation="Timing in which the characteristic is determined.")
	@ExtendedMetaData(kind="element", name="timeFromEvent", namespace="##targetNamespace")
	!resolve val EvidenceVariableTimeFromEvent[*] timeFromEvent;
}

@GenModel(documentation="The Evidence Resource provides a machine-interpretable expression of an evidence concept including the evidence variables (e.g., population, exposures/interventions, comparators, outcomes, measured variables, confounding variables), the statistics, and the certainty of this evidence.")
@ExtendedMetaData(name="Evidence.VariableDefinition", kind="elementOnly")
class EvidenceVariableDefinition extends BackboneElement {

	@GenModel(documentation="A text description or summary of the variable.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="Footnotes and/or explanatory notes.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="population | subpopulation | exposure | referenceExposure | measuredVariable | confounder.")
	@ExtendedMetaData(kind="element", name="variableRole", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] variableRole;

	@GenModel(documentation="Definition of the actual variable related to the statistic(s).")
	@ExtendedMetaData(kind="element", name="observed", namespace="##targetNamespace")
	!resolve val Reference observed;

	@GenModel(documentation="Definition of the intended variable related to the Evidence.")
	@ExtendedMetaData(kind="element", name="intended", namespace="##targetNamespace")
	!resolve val Reference intended;

	@GenModel(documentation="Indication of quality of match between intended variable to actual variable.")
	@ExtendedMetaData(kind="element", name="directnessMatch", namespace="##targetNamespace")
	!resolve val CodeableConcept directnessMatch;
}

@GenModel(documentation="The EvidenceVariable resource describes an element that knowledge (Evidence) is about.")
@ExtendedMetaData(name="EvidenceVariable.DefinitionByCombination", kind="elementOnly")
class EvidenceVariableDefinitionByCombination extends BackboneElement {

	@GenModel(documentation="Used to specify if two or more characteristics are combined with OR or AND.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CharacteristicCombination[1] code;

	@GenModel(documentation="Provides the value of \"n\" when \"at-least\" or \"at-most\" codes are used.")
	@ExtendedMetaData(kind="element", name="threshold", namespace="##targetNamespace")
	!resolve val PositiveInt threshold;

	@GenModel(documentation="A defining factor of the characteristic.")
	@ExtendedMetaData(kind="element", name="characteristic", namespace="##targetNamespace")
	!resolve val EvidenceVariableCharacteristic[+] characteristic;
}

@GenModel(documentation="The EvidenceVariable resource describes an element that knowledge (Evidence) is about.")
@ExtendedMetaData(name="EvidenceVariable.DefinitionByTypeAndValue", kind="elementOnly")
class EvidenceVariableDefinitionByTypeAndValue extends BackboneElement {

	@GenModel(documentation="Used to express the type of characteristic.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@GenModel(documentation="Method for how the characteristic value was determined.")
	@ExtendedMetaData(kind="element", name="method", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] method;

	@GenModel(documentation="Device used for determining characteristic.")
	@ExtendedMetaData(kind="element", name="device", namespace="##targetNamespace")
	!resolve val Reference device;

	@ExtendedMetaData(kind="element", name="valueCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept valueCodeableConcept;

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueRange", namespace="##targetNamespace")
	!resolve val Range valueRange;

	@ExtendedMetaData(kind="element", name="valueReference", namespace="##targetNamespace")
	!resolve val Reference valueReference;

	@ExtendedMetaData(kind="element", name="valueId", namespace="##targetNamespace")
	!resolve val Id valueId;

	@GenModel(documentation="Defines the reference point for comparison when valueQuantity or valueRange is not compared to zero.")
	@ExtendedMetaData(kind="element", name="offset", namespace="##targetNamespace")
	!resolve val CodeableConcept offset;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="EvidenceVariableHandling", kind="elementOnly")
class EvidenceVariableHandling extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr EvidenceVariableHandlingEnum value;
}

@ExtendedMetaData(name="EvidenceVariableHandlingEnum")
enum EvidenceVariableHandlingEnum {

	@GenModel(documentation="continuous variable")
	continuous = 0;

	@GenModel(documentation="dichotomous variable")
	dichotomous = 1;

	@GenModel(documentation="ordinal variable")
	ordinal = 2;

	@GenModel(documentation="polychotomous variable")
	polychotomous = 3;
}

@ExtendedMetaData(name="EvidenceVariableHandlingEnum:Object", baseType="EvidenceVariableHandlingEnum")
datatype EvidenceVariableHandlingEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="The EvidenceVariable resource describes an element that knowledge (Evidence) is about.")
@ExtendedMetaData(name="EvidenceVariable.TimeFromEvent", kind="elementOnly")
class EvidenceVariableTimeFromEvent extends BackboneElement {

	@GenModel(documentation="Human readable description.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="A human-readable string to clarify or explain concepts about the timeFromEvent.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@ExtendedMetaData(kind="element", name="eventCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept eventCodeableConcept;

	@ExtendedMetaData(kind="element", name="eventReference", namespace="##targetNamespace")
	!resolve val Reference eventReference;

	@ExtendedMetaData(kind="element", name="eventDateTime", namespace="##targetNamespace")
	!resolve val DateTime eventDateTime;

	@ExtendedMetaData(kind="element", name="eventId", namespace="##targetNamespace")
	!resolve val Id eventId;

	@GenModel(documentation="Used to express the observation at a defined amount of time before or after the event.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Quantity quantity;

	@GenModel(documentation="Used to express the observation within a period before and/or after the event.")
	@ExtendedMetaData(kind="element", name="range", namespace="##targetNamespace")
	!resolve val Range range;
}

@GenModel(documentation="Example of workflow instance.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ExampleScenario", kind="elementOnly")
class ExampleScenario extends CanonicalResource {

	@GenModel(documentation="An absolute URI that is used to identify this example scenario when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this example scenario is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the example scenario is stored on different servers.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri url;

	@GenModel(documentation="A formal identifier that is used to identify this example scenario when it is represented in other formats, or referenced in a specification, model, design or an instance.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The identifier that is used to identify this version of the example scenario when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the example scenario author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@ExtendedMetaData(kind="element", name="versionAlgorithmString", namespace="##targetNamespace")
	!resolve val String versionAlgorithmString;

	@ExtendedMetaData(kind="element", name="versionAlgorithmCoding", namespace="##targetNamespace")
	!resolve val Coding versionAlgorithmCoding;

	@GenModel(documentation="Temporarily retained for tooling purposes.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="A short, descriptive, user-friendly title for the ExampleScenario.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="The status of this example scenario. Enables tracking the life-cycle of the content.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="A Boolean value to indicate that this example scenario is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.")
	@ExtendedMetaData(kind="element", name="experimental", namespace="##targetNamespace")
	!resolve val Boolean experimental;

	@GenModel(documentation="The date  (and optionally time) when the example scenario was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the example scenario changes. (e.g. the 'content logical definition').")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="The name of the organization or individual responsible for the release and ongoing maintenance of the example scenario.")
	@ExtendedMetaData(kind="element", name="publisher", namespace="##targetNamespace")
	!resolve val String publisher;

	@GenModel(documentation="Contact details to assist a user in finding and communicating with the publisher.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactDetail[*] contact;

	@GenModel(documentation="A free text natural language description of the ExampleScenario from a consumer's perspective.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate example scenario instances.")
	@ExtendedMetaData(kind="element", name="useContext", namespace="##targetNamespace")
	!resolve val UsageContext[*] useContext;

	@GenModel(documentation="A legal or geographic region in which the example scenario is intended to be used.")
	@ExtendedMetaData(kind="element", name="jurisdiction", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] jurisdiction;

	@GenModel(documentation="What the example scenario resource is created for. This should not be used to show the business purpose of the scenario itself, but the purpose of documenting a scenario.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val Markdown purpose;

	@GenModel(documentation="A copyright statement relating to the example scenario and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the example scenario.")
	@ExtendedMetaData(kind="element", name="copyright", namespace="##targetNamespace")
	!resolve val Markdown copyright;

	@GenModel(documentation="A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').")
	@ExtendedMetaData(kind="element", name="copyrightLabel", namespace="##targetNamespace")
	!resolve val String copyrightLabel;

	@GenModel(documentation="A system or person who shares or receives an instance within the scenario.")
	@ExtendedMetaData(kind="element", name="actor", namespace="##targetNamespace")
	!resolve val ExampleScenarioActor[*] actor;

	@GenModel(documentation="A single data collection that is shared as part of the scenario.")
	@ExtendedMetaData(kind="element", name="instance", namespace="##targetNamespace")
	!resolve val ExampleScenarioInstance[*] instance;

	@GenModel(documentation="A group of operations that represents a significant step within a scenario.")
	@ExtendedMetaData(kind="element", name="process", namespace="##targetNamespace")
	!resolve val ExampleScenarioProcess[*] process;
}

@GenModel(documentation="Example of workflow instance.")
@ExtendedMetaData(name="ExampleScenario.Actor", kind="elementOnly")
class ExampleScenarioActor extends BackboneElement {

	@GenModel(documentation="A unique string within the scenario that is used to reference the actor.")
	@ExtendedMetaData(kind="element", name="key", namespace="##targetNamespace")
	!resolve val String[1] key;

	@GenModel(documentation="The category of actor - person or system.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val ExampleScenarioActorType[1] type;

	@GenModel(documentation="The human-readable name for the actor used when rendering the scenario.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String[1] title;

	@GenModel(documentation="An explanation of who/what the actor is and its role in the scenario.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ExampleScenarioActorType", kind="elementOnly")
class ExampleScenarioActorType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ExampleScenarioActorTypeEnum value;
}

@ExtendedMetaData(name="ExampleScenarioActorTypeEnum")
enum ExampleScenarioActorTypeEnum {

	@GenModel(documentation="Person")
	person = 0;

	@GenModel(documentation="System")
	system = 1;
}

@ExtendedMetaData(name="ExampleScenarioActorTypeEnum:Object", baseType="ExampleScenarioActorTypeEnum")
datatype ExampleScenarioActorTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="Example of workflow instance.")
@ExtendedMetaData(name="ExampleScenario.Alternative", kind="elementOnly")
class ExampleScenarioAlternative extends BackboneElement {

	@GenModel(documentation="The label to display for the alternative that gives a sense of the circumstance in which the alternative should be invoked.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String[1] title;

	@GenModel(documentation="A human-readable description of the alternative explaining when the alternative should occur rather than the base step.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="Indicates the operation, sub-process or scenario that happens if the alternative option is selected.")
	@ExtendedMetaData(kind="element", name="step", namespace="##targetNamespace")
	!resolve val ExampleScenarioStep[*] step;
}

@GenModel(documentation="Example of workflow instance.")
@ExtendedMetaData(name="ExampleScenario.ContainedInstance", kind="elementOnly")
class ExampleScenarioContainedInstance extends BackboneElement {

	@GenModel(documentation="A reference to the key of an instance found within this one.")
	@ExtendedMetaData(kind="element", name="instanceReference", namespace="##targetNamespace")
	!resolve val String[1] instanceReference;

	@GenModel(documentation="A reference to the key of a specific version of an instance in this instance.")
	@ExtendedMetaData(kind="element", name="versionReference", namespace="##targetNamespace")
	!resolve val String versionReference;
}

@GenModel(documentation="Example of workflow instance.")
@ExtendedMetaData(name="ExampleScenario.Instance", kind="elementOnly")
class ExampleScenarioInstance extends BackboneElement {

	@GenModel(documentation="A unique string within the scenario that is used to reference the instance.")
	@ExtendedMetaData(kind="element", name="key", namespace="##targetNamespace")
	!resolve val String[1] key;

	@GenModel(documentation="A code indicating the kind of data structure (FHIR resource or some other standard) this is an instance of.")
	@ExtendedMetaData(kind="element", name="structureType", namespace="##targetNamespace")
	!resolve val Coding[1] structureType;

	@GenModel(documentation="Conveys the version of the data structure instantiated.  I.e. what release of FHIR, X12, OpenEHR, etc. is instance compliant with.")
	@ExtendedMetaData(kind="element", name="structureVersion", namespace="##targetNamespace")
	!resolve val String structureVersion;

	@ExtendedMetaData(kind="element", name="structureProfileCanonical", namespace="##targetNamespace")
	!resolve val Canonical structureProfileCanonical;

	@ExtendedMetaData(kind="element", name="structureProfileUri", namespace="##targetNamespace")
	!resolve val Uri structureProfileUri;

	@GenModel(documentation="A short descriptive label the instance to be used in tables or diagrams.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String[1] title;

	@GenModel(documentation="An explanation of what the instance contains and what it's for.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="Points to an instance (typically an example) that shows the data that would corespond to this instance.")
	@ExtendedMetaData(kind="element", name="content", namespace="##targetNamespace")
	!resolve val Reference content;

	@GenModel(documentation="Represents the instance as it was at a specific time-point.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val ExampleScenarioVersion[*] version;

	@GenModel(documentation="References to other instances that can be found within this instance (e.g. the observations contained in a bundle).")
	@ExtendedMetaData(kind="element", name="containedInstance", namespace="##targetNamespace")
	!resolve val ExampleScenarioContainedInstance[*] containedInstance;
}

@GenModel(documentation="Example of workflow instance.")
@ExtendedMetaData(name="ExampleScenario.Operation", kind="elementOnly")
class ExampleScenarioOperation extends BackboneElement {

	@GenModel(documentation="The standardized type of action (FHIR or otherwise).")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val Coding type;

	@GenModel(documentation="A short descriptive label the step to be used in tables or diagrams.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String[1] title;

	@GenModel(documentation="The system that invokes the action/transmits the data.")
	@ExtendedMetaData(kind="element", name="initiator", namespace="##targetNamespace")
	!resolve val String initiator;

	@GenModel(documentation="The system on which the action is invoked/receives the data.")
	@ExtendedMetaData(kind="element", name="receiver", namespace="##targetNamespace")
	!resolve val String receiver;

	@GenModel(documentation="An explanation of what the operation represents and what it does.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="If false, the initiator is deactivated right after the operation.")
	@ExtendedMetaData(kind="element", name="initiatorActive", namespace="##targetNamespace")
	!resolve val Boolean initiatorActive;

	@GenModel(documentation="If false, the receiver is deactivated right after the operation.")
	@ExtendedMetaData(kind="element", name="receiverActive", namespace="##targetNamespace")
	!resolve val Boolean receiverActive;

	@GenModel(documentation="A reference to the instance that is transmitted from requester to receiver as part of the invocation of the operation.")
	@ExtendedMetaData(kind="element", name="request", namespace="##targetNamespace")
	!resolve val ExampleScenarioContainedInstance request;

	@GenModel(documentation="A reference to the instance that is transmitted from receiver to requester as part of the operation's synchronous response (if any).")
	@ExtendedMetaData(kind="element", name="response", namespace="##targetNamespace")
	!resolve val ExampleScenarioContainedInstance response;
}

@GenModel(documentation="Example of workflow instance.")
@ExtendedMetaData(name="ExampleScenario.Process", kind="elementOnly")
class ExampleScenarioProcess extends BackboneElement {

	@GenModel(documentation="A short descriptive label the process to be used in tables or diagrams.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String[1] title;

	@GenModel(documentation="An explanation of what the process represents and what it does.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="Description of the initial state of the actors, environment and data before the process starts.")
	@ExtendedMetaData(kind="element", name="preConditions", namespace="##targetNamespace")
	!resolve val Markdown preConditions;

	@GenModel(documentation="Description of the final state of the actors, environment and data after the process has been successfully completed.")
	@ExtendedMetaData(kind="element", name="postConditions", namespace="##targetNamespace")
	!resolve val Markdown postConditions;

	@GenModel(documentation="A significant action that occurs as part of the process.")
	@ExtendedMetaData(kind="element", name="step", namespace="##targetNamespace")
	!resolve val ExampleScenarioStep[*] step;
}

@GenModel(documentation="Example of workflow instance.")
@ExtendedMetaData(name="ExampleScenario.Step", kind="elementOnly")
class ExampleScenarioStep extends BackboneElement {

	@GenModel(documentation="The sequential number of the step, e.g. 1.2.5.")
	@ExtendedMetaData(kind="element", name="number", namespace="##targetNamespace")
	!resolve val String number;

	@GenModel(documentation="Indicates that the step is a complex sub-process with its own steps.")
	@ExtendedMetaData(kind="element", name="process", namespace="##targetNamespace")
	!resolve val ExampleScenarioProcess process;

	@GenModel(documentation="Indicates that the step is defined by a seaparate scenario instance.")
	@ExtendedMetaData(kind="element", name="workflow", namespace="##targetNamespace")
	!resolve val Canonical workflow;

	@GenModel(documentation="The step represents a single operation invoked on receiver by sender.")
	@ExtendedMetaData(kind="element", name="operation", namespace="##targetNamespace")
	!resolve val ExampleScenarioOperation operation;

	@GenModel(documentation="Indicates an alternative step that can be taken instead of the sub-process, scenario or operation.  E.g. to represent non-happy-path/exceptional/atypical circumstances.")
	@ExtendedMetaData(kind="element", name="alternative", namespace="##targetNamespace")
	!resolve val ExampleScenarioAlternative[*] alternative;

	@GenModel(documentation="If true, indicates that, following this step, there is a pause in the flow and the subsequent step will occur at some later time (triggered by some event).")
	@ExtendedMetaData(kind="element", name="pause", namespace="##targetNamespace")
	!resolve val Boolean pause;
}

@GenModel(documentation="Example of workflow instance.")
@ExtendedMetaData(name="ExampleScenario.Version", kind="elementOnly")
class ExampleScenarioVersion extends BackboneElement {

	@GenModel(documentation="A unique string within the instance that is used to reference the version of the instance.")
	@ExtendedMetaData(kind="element", name="key", namespace="##targetNamespace")
	!resolve val String[1] key;

	@GenModel(documentation="A short descriptive label the version to be used in tables or diagrams.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String[1] title;

	@GenModel(documentation="An explanation of what this specific version of the instance contains and represents.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="Points to an instance (typically an example) that shows the data that would flow at this point in the scenario.")
	@ExtendedMetaData(kind="element", name="content", namespace="##targetNamespace")
	!resolve val Reference content;
}

@GenModel(documentation="This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ExplanationOfBenefit", kind="elementOnly")
class ExplanationOfBenefit extends DomainResource {

	@GenModel(documentation="A unique identifier assigned to this explanation of benefit.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.")
	@ExtendedMetaData(kind="element", name="traceNumber", namespace="##targetNamespace")
	!resolve val Identifier[*] traceNumber;

	@GenModel(documentation="The status of the resource instance.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val ExplanationOfBenefitStatus[1] status;

	@GenModel(documentation="The category of claim, e.g. oral, pharmacy, vision, institutional, professional.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@GenModel(documentation="A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service.")
	@ExtendedMetaData(kind="element", name="subType", namespace="##targetNamespace")
	!resolve val CodeableConcept subType;

	@GenModel(documentation="A code to indicate whether the nature of the request is: Claim - A request to an Insurer to adjudicate the supplied charges for health care goods and services under the identified policy and to pay the determined Benefit amount, if any; Preauthorization - A request to an Insurer to adjudicate the supplied proposed future charges for health care goods and services under the identified policy and to approve the services and provide the expected benefit amounts and potentially to reserve funds to pay the benefits when Claims for the indicated services are later submitted; or, Pre-determination - A request to an Insurer to adjudicate the supplied 'what if' charges for health care goods and services under the identified policy and report back what the Benefit payable would be had the services actually been provided.")
	@ExtendedMetaData(kind="element", name="use", namespace="##targetNamespace")
	!resolve val Use[1] use;

	@GenModel(documentation="The party to whom the professional services and/or products have been supplied or are being considered and for whom actual for forecast reimbursement is sought.")
	@ExtendedMetaData(kind="element", name="patient", namespace="##targetNamespace")
	!resolve val Reference[1] patient;

	@GenModel(documentation="The period for which charges are being submitted.")
	@ExtendedMetaData(kind="element", name="billablePeriod", namespace="##targetNamespace")
	!resolve val Period billablePeriod;

	@GenModel(documentation="The date this resource was created.")
	@ExtendedMetaData(kind="element", name="created", namespace="##targetNamespace")
	!resolve val DateTime[1] created;

	@GenModel(documentation="Individual who created the claim, predetermination or preauthorization.")
	@ExtendedMetaData(kind="element", name="enterer", namespace="##targetNamespace")
	!resolve val Reference enterer;

	@GenModel(documentation="The party responsible for authorization, adjudication and reimbursement.")
	@ExtendedMetaData(kind="element", name="insurer", namespace="##targetNamespace")
	!resolve val Reference insurer;

	@GenModel(documentation="The provider which is responsible for the claim, predetermination or preauthorization.")
	@ExtendedMetaData(kind="element", name="provider", namespace="##targetNamespace")
	!resolve val Reference provider;

	@GenModel(documentation="The provider-required urgency of processing the request. Typical values include: stat, normal deferred.")
	@ExtendedMetaData(kind="element", name="priority", namespace="##targetNamespace")
	!resolve val CodeableConcept priority;

	@GenModel(documentation="A code to indicate whether and for whom funds are to be reserved for future claims.")
	@ExtendedMetaData(kind="element", name="fundsReserveRequested", namespace="##targetNamespace")
	!resolve val CodeableConcept fundsReserveRequested;

	@GenModel(documentation="A code, used only on a response to a preauthorization, to indicate whether the benefits payable have been reserved and for whom.")
	@ExtendedMetaData(kind="element", name="fundsReserve", namespace="##targetNamespace")
	!resolve val CodeableConcept fundsReserve;

	@GenModel(documentation="Other claims which are related to this claim such as prior submissions or claims for related services or for the same event.")
	@ExtendedMetaData(kind="element", name="related", namespace="##targetNamespace")
	!resolve val ExplanationOfBenefitRelated[*] related;

	@GenModel(documentation="Prescription is the document/authorization given to the claim author for them to provide products and services for which consideration (reimbursement) is sought. Could be a RX for medications, an 'order' for oxygen or wheelchair or physiotherapy treatments.")
	@ExtendedMetaData(kind="element", name="prescription", namespace="##targetNamespace")
	!resolve val Reference prescription;

	@GenModel(documentation="Original prescription which has been superseded by this prescription to support the dispensing of pharmacy services, medications or products.")
	@ExtendedMetaData(kind="element", name="originalPrescription", namespace="##targetNamespace")
	!resolve val Reference originalPrescription;

	@GenModel(documentation="Information code for an event with a corresponding date or period.")
	@ExtendedMetaData(kind="element", name="event", namespace="##targetNamespace")
	!resolve val ExplanationOfBenefitEvent[*] event;

	@GenModel(documentation="The party to be reimbursed for cost of the products and services according to the terms of the policy.")
	@ExtendedMetaData(kind="element", name="payee", namespace="##targetNamespace")
	!resolve val ExplanationOfBenefitPayee payee;

	@GenModel(documentation="The referral information received by the claim author, it is not to be used when the author generates a referral for a patient. A copy of that referral may be provided as supporting information. Some insurers require proof of referral to pay for services or to pay specialist rates for services.")
	@ExtendedMetaData(kind="element", name="referral", namespace="##targetNamespace")
	!resolve val Reference referral;

	@GenModel(documentation="Healthcare encounters related to this claim.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference[*] encounter;

	@GenModel(documentation="Facility where the services were provided.")
	@ExtendedMetaData(kind="element", name="facility", namespace="##targetNamespace")
	!resolve val Reference facility;

	@GenModel(documentation="The business identifier for the instance of the adjudication request: claim predetermination or preauthorization.")
	@ExtendedMetaData(kind="element", name="claim", namespace="##targetNamespace")
	!resolve val Reference claim;

	@GenModel(documentation="The business identifier for the instance of the adjudication response: claim, predetermination or preauthorization response.")
	@ExtendedMetaData(kind="element", name="claimResponse", namespace="##targetNamespace")
	!resolve val Reference claimResponse;

	@GenModel(documentation="The outcome of the claim, predetermination, or preauthorization processing.")
	@ExtendedMetaData(kind="element", name="outcome", namespace="##targetNamespace")
	!resolve val ClaimProcessingCodes[1] outcome;

	@GenModel(documentation="The result of the claim, predetermination, or preauthorization adjudication.")
	@ExtendedMetaData(kind="element", name="decision", namespace="##targetNamespace")
	!resolve val CodeableConcept decision;

	@GenModel(documentation="A human readable description of the status of the adjudication.")
	@ExtendedMetaData(kind="element", name="disposition", namespace="##targetNamespace")
	!resolve val String disposition;

	@GenModel(documentation="Reference from the Insurer which is used in later communications which refers to this adjudication.")
	@ExtendedMetaData(kind="element", name="preAuthRef", namespace="##targetNamespace")
	!resolve val String[*] preAuthRef;

	@GenModel(documentation="The timeframe during which the supplied preauthorization reference may be quoted on claims to obtain the adjudication as provided.")
	@ExtendedMetaData(kind="element", name="preAuthRefPeriod", namespace="##targetNamespace")
	!resolve val Period[*] preAuthRefPeriod;

	@GenModel(documentation="A package billing code or bundle code used to group products and services to a particular health condition (such as heart attack) which is based on a predetermined grouping code system.")
	@ExtendedMetaData(kind="element", name="diagnosisRelatedGroup", namespace="##targetNamespace")
	!resolve val CodeableConcept diagnosisRelatedGroup;

	@GenModel(documentation="The members of the team who provided the products and services.")
	@ExtendedMetaData(kind="element", name="careTeam", namespace="##targetNamespace")
	!resolve val ExplanationOfBenefitCareTeam[*] careTeam;

	@GenModel(documentation="Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues.")
	@ExtendedMetaData(kind="element", name="supportingInfo", namespace="##targetNamespace")
	!resolve val ExplanationOfBenefitSupportingInfo[*] supportingInfo;

	@GenModel(documentation="Information about diagnoses relevant to the claim items.")
	@ExtendedMetaData(kind="element", name="diagnosis", namespace="##targetNamespace")
	!resolve val ExplanationOfBenefitDiagnosis[*] diagnosis;

	@GenModel(documentation="Procedures performed on the patient relevant to the billing items with the claim.")
	@ExtendedMetaData(kind="element", name="procedure", namespace="##targetNamespace")
	!resolve val ExplanationOfBenefitProcedure[*] procedure;

	@GenModel(documentation="This indicates the relative order of a series of EOBs related to different coverages for the same suite of services.")
	@ExtendedMetaData(kind="element", name="precedence", namespace="##targetNamespace")
	!resolve val PositiveInt precedence;

	@GenModel(documentation="Financial instruments for reimbursement for the health care products and services specified on the claim.")
	@ExtendedMetaData(kind="element", name="insurance", namespace="##targetNamespace")
	!resolve val ExplanationOfBenefitInsurance[*] insurance;

	@GenModel(documentation="Details of a accident which resulted in injuries which required the products and services listed in the claim.")
	@ExtendedMetaData(kind="element", name="accident", namespace="##targetNamespace")
	!resolve val ExplanationOfBenefitAccident accident;

	@GenModel(documentation="The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.")
	@ExtendedMetaData(kind="element", name="patientPaid", namespace="##targetNamespace")
	!resolve val Money patientPaid;

	@GenModel(documentation="A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.")
	@ExtendedMetaData(kind="element", name="item", namespace="##targetNamespace")
	!resolve val ExplanationOfBenefitItem[*] item;

	@GenModel(documentation="The first-tier service adjudications for payor added product or service lines.")
	@ExtendedMetaData(kind="element", name="addItem", namespace="##targetNamespace")
	!resolve val ExplanationOfBenefitAddItem[*] addItem;

	@GenModel(documentation="The adjudication results which are presented at the header level rather than at the line-item or add-item levels.")
	@ExtendedMetaData(kind="element", name="adjudication", namespace="##targetNamespace")
	!resolve val ExplanationOfBenefitAdjudication[*] adjudication;

	@GenModel(documentation="Categorized monetary totals for the adjudication.")
	@ExtendedMetaData(kind="element", name="total", namespace="##targetNamespace")
	!resolve val ExplanationOfBenefitTotal[*] total;

	@GenModel(documentation="Payment details for the adjudication of the claim.")
	@ExtendedMetaData(kind="element", name="payment", namespace="##targetNamespace")
	!resolve val ExplanationOfBenefitPayment payment;

	@GenModel(documentation="A code for the form to be used for printing the content.")
	@ExtendedMetaData(kind="element", name="formCode", namespace="##targetNamespace")
	!resolve val CodeableConcept formCode;

	@GenModel(documentation="The actual form, by reference or inclusion, for printing the content or an EOB.")
	@ExtendedMetaData(kind="element", name="form", namespace="##targetNamespace")
	!resolve val Attachment form;

	@GenModel(documentation="A note that describes or explains adjudication results in a human readable form.")
	@ExtendedMetaData(kind="element", name="processNote", namespace="##targetNamespace")
	!resolve val ExplanationOfBenefitProcessNote[*] processNote;

	@GenModel(documentation="The term of the benefits documented in this response.")
	@ExtendedMetaData(kind="element", name="benefitPeriod", namespace="##targetNamespace")
	!resolve val Period benefitPeriod;

	@GenModel(documentation="Balance by Benefit Category.")
	@ExtendedMetaData(kind="element", name="benefitBalance", namespace="##targetNamespace")
	!resolve val ExplanationOfBenefitBenefitBalance[*] benefitBalance;
}

@GenModel(documentation="This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.")
@ExtendedMetaData(name="ExplanationOfBenefit.Accident", kind="elementOnly")
class ExplanationOfBenefitAccident extends BackboneElement {

	@GenModel(documentation="Date of an accident event  related to the products and services contained in the claim.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val Date date;

	@GenModel(documentation="The type or context of the accident event for the purposes of selection of potential insurance coverages and determination of coordination between insurers.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@ExtendedMetaData(kind="element", name="locationAddress", namespace="##targetNamespace")
	!resolve val Address locationAddress;

	@ExtendedMetaData(kind="element", name="locationReference", namespace="##targetNamespace")
	!resolve val Reference locationReference;
}

@GenModel(documentation="This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.")
@ExtendedMetaData(name="ExplanationOfBenefit.AddItem", kind="elementOnly")
class ExplanationOfBenefitAddItem extends BackboneElement {

	@GenModel(documentation="Claim items which this service line is intended to replace.")
	@ExtendedMetaData(kind="element", name="itemSequence", namespace="##targetNamespace")
	!resolve val PositiveInt[*] itemSequence;

	@GenModel(documentation="The sequence number of the details within the claim item which this line is intended to replace.")
	@ExtendedMetaData(kind="element", name="detailSequence", namespace="##targetNamespace")
	!resolve val PositiveInt[*] detailSequence;

	@GenModel(documentation="The sequence number of the sub-details woithin the details within the claim item which this line is intended to replace.")
	@ExtendedMetaData(kind="element", name="subDetailSequence", namespace="##targetNamespace")
	!resolve val PositiveInt[*] subDetailSequence;

	@GenModel(documentation="Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.")
	@ExtendedMetaData(kind="element", name="traceNumber", namespace="##targetNamespace")
	!resolve val Identifier[*] traceNumber;

	@GenModel(documentation="The providers who are authorized for the services rendered to the patient.")
	@ExtendedMetaData(kind="element", name="provider", namespace="##targetNamespace")
	!resolve val Reference[*] provider;

	@GenModel(documentation="The type of revenue or cost center providing the product and/or service.")
	@ExtendedMetaData(kind="element", name="revenue", namespace="##targetNamespace")
	!resolve val CodeableConcept revenue;

	@GenModel(documentation="When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.")
	@ExtendedMetaData(kind="element", name="productOrService", namespace="##targetNamespace")
	!resolve val CodeableConcept productOrService;

	@GenModel(documentation="This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.")
	@ExtendedMetaData(kind="element", name="productOrServiceEnd", namespace="##targetNamespace")
	!resolve val CodeableConcept productOrServiceEnd;

	@GenModel(documentation="Request or Referral for Goods or Service to be rendered.")
	@ExtendedMetaData(kind="element", name="request", namespace="##targetNamespace")
	!resolve val Reference[*] request;

	@GenModel(documentation="Item typification or modifiers codes to convey additional context for the product or service.")
	@ExtendedMetaData(kind="element", name="modifier", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] modifier;

	@GenModel(documentation="Identifies the program under which this may be recovered.")
	@ExtendedMetaData(kind="element", name="programCode", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] programCode;

	@ExtendedMetaData(kind="element", name="servicedDate", namespace="##targetNamespace")
	!resolve val Date servicedDate;

	@ExtendedMetaData(kind="element", name="servicedPeriod", namespace="##targetNamespace")
	!resolve val Period servicedPeriod;

	@ExtendedMetaData(kind="element", name="locationCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept locationCodeableConcept;

	@ExtendedMetaData(kind="element", name="locationAddress", namespace="##targetNamespace")
	!resolve val Address locationAddress;

	@ExtendedMetaData(kind="element", name="locationReference", namespace="##targetNamespace")
	!resolve val Reference locationReference;

	@GenModel(documentation="The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.")
	@ExtendedMetaData(kind="element", name="patientPaid", namespace="##targetNamespace")
	!resolve val Money patientPaid;

	@GenModel(documentation="The number of repetitions of a service or product.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Quantity quantity;

	@GenModel(documentation="If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.")
	@ExtendedMetaData(kind="element", name="unitPrice", namespace="##targetNamespace")
	!resolve val Money unitPrice;

	@GenModel(documentation="A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.")
	@ExtendedMetaData(kind="element", name="factor", namespace="##targetNamespace")
	!resolve val Decimal factor;

	@GenModel(documentation="The total of taxes applicable for this product or service.")
	@ExtendedMetaData(kind="element", name="tax", namespace="##targetNamespace")
	!resolve val Money tax;

	@GenModel(documentation="The total amount claimed for the group (if a grouper) or the addItem. Net = unit price * quantity * factor.")
	@ExtendedMetaData(kind="element", name="net", namespace="##targetNamespace")
	!resolve val Money net;

	@GenModel(documentation="Physical location where the service is performed or applies.")
	@ExtendedMetaData(kind="element", name="bodySite", namespace="##targetNamespace")
	!resolve val ExplanationOfBenefitBodySite1[*] bodySite;

	@GenModel(documentation="The numbers associated with notes below which apply to the adjudication of this item.")
	@ExtendedMetaData(kind="element", name="noteNumber", namespace="##targetNamespace")
	!resolve val PositiveInt[*] noteNumber;

	@GenModel(documentation="The high-level results of the adjudication if adjudication has been performed.")
	@ExtendedMetaData(kind="element", name="reviewOutcome", namespace="##targetNamespace")
	!resolve val ExplanationOfBenefitReviewOutcome reviewOutcome;

	@GenModel(documentation="The adjudication results.")
	@ExtendedMetaData(kind="element", name="adjudication", namespace="##targetNamespace")
	!resolve val ExplanationOfBenefitAdjudication[*] adjudication;

	@GenModel(documentation="The second-tier service adjudications for payor added services.")
	@ExtendedMetaData(kind="element", name="detail", namespace="##targetNamespace")
	!resolve val ExplanationOfBenefitDetail1[*] detail;
}

@GenModel(documentation="This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.")
@ExtendedMetaData(name="ExplanationOfBenefit.Adjudication", kind="elementOnly")
class ExplanationOfBenefitAdjudication extends BackboneElement {

	@GenModel(documentation="A code to indicate the information type of this adjudication record. Information types may include: the value submitted, maximum values or percentages allowed or payable under the plan, amounts that the patient is responsible for in-aggregate or pertaining to this item, amounts paid by other coverages, and the benefit payable for this item.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] category;

	@GenModel(documentation="A code supporting the understanding of the adjudication result and explaining variance from expected amount.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val CodeableConcept reason;

	@GenModel(documentation="Monetary amount associated with the category.")
	@ExtendedMetaData(kind="element", name="amount", namespace="##targetNamespace")
	!resolve val Money amount;

	@GenModel(documentation="A non-monetary value associated with the category. Mutually exclusive to the amount element above.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Quantity quantity;
}

@GenModel(documentation="This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.")
@ExtendedMetaData(name="ExplanationOfBenefit.BenefitBalance", kind="elementOnly")
class ExplanationOfBenefitBenefitBalance extends BackboneElement {

	@GenModel(documentation="Code to identify the general type of benefits under which products and services are provided.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] category;

	@GenModel(documentation="True if the indicated class of service is excluded from the plan, missing or False indicates the product or service is included in the coverage.")
	@ExtendedMetaData(kind="element", name="excluded", namespace="##targetNamespace")
	!resolve val Boolean excluded;

	@GenModel(documentation="A short name or tag for the benefit.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="A richer description of the benefit or services covered.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val String description;

	@GenModel(documentation="Is a flag to indicate whether the benefits refer to in-network providers or out-of-network providers.")
	@ExtendedMetaData(kind="element", name="network", namespace="##targetNamespace")
	!resolve val CodeableConcept network;

	@GenModel(documentation="Indicates if the benefits apply to an individual or to the family.")
	@ExtendedMetaData(kind="element", name="unit", namespace="##targetNamespace")
	!resolve val CodeableConcept unit;

	@GenModel(documentation="The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual visits'.")
	@ExtendedMetaData(kind="element", name="term", namespace="##targetNamespace")
	!resolve val CodeableConcept term;

	@GenModel(documentation="Benefits Used to date.")
	@ExtendedMetaData(kind="element", name="financial", namespace="##targetNamespace")
	!resolve val ExplanationOfBenefitFinancial[*] financial;
}

@GenModel(documentation="This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.")
@ExtendedMetaData(name="ExplanationOfBenefit.BodySite", kind="elementOnly")
class ExplanationOfBenefitBodySite extends BackboneElement {

	@GenModel(documentation="Physical service site on the patient (limb, tooth, etc.).")
	@ExtendedMetaData(kind="element", name="site", namespace="##targetNamespace")
	!resolve val CodeableReference[+] site;

	@GenModel(documentation="A region or surface of the bodySite, e.g. limb region or tooth surface(s).")
	@ExtendedMetaData(kind="element", name="subSite", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] subSite;
}

@GenModel(documentation="This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.")
@ExtendedMetaData(name="ExplanationOfBenefit.BodySite1", kind="elementOnly")
class ExplanationOfBenefitBodySite1 extends BackboneElement {

	@GenModel(documentation="Physical service site on the patient (limb, tooth, etc.).")
	@ExtendedMetaData(kind="element", name="site", namespace="##targetNamespace")
	!resolve val CodeableReference[+] site;

	@GenModel(documentation="A region or surface of the bodySite, e.g. limb region or tooth surface(s).")
	@ExtendedMetaData(kind="element", name="subSite", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] subSite;
}

@GenModel(documentation="This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.")
@ExtendedMetaData(name="ExplanationOfBenefit.CareTeam", kind="elementOnly")
class ExplanationOfBenefitCareTeam extends BackboneElement {

	@GenModel(documentation="A number to uniquely identify care team entries.")
	@ExtendedMetaData(kind="element", name="sequence", namespace="##targetNamespace")
	!resolve val PositiveInt[1] sequence;

	@GenModel(documentation="Member of the team who provided the product or service.")
	@ExtendedMetaData(kind="element", name="provider", namespace="##targetNamespace")
	!resolve val Reference[1] provider;

	@GenModel(documentation="The party who is billing and/or responsible for the claimed products or services.")
	@ExtendedMetaData(kind="element", name="responsible", namespace="##targetNamespace")
	!resolve val Boolean responsible;

	@GenModel(documentation="The lead, assisting or supervising practitioner and their discipline if a multidisciplinary team.")
	@ExtendedMetaData(kind="element", name="role", namespace="##targetNamespace")
	!resolve val CodeableConcept role;

	@GenModel(documentation="The specialization of the practitioner or provider which is applicable for this service.")
	@ExtendedMetaData(kind="element", name="specialty", namespace="##targetNamespace")
	!resolve val CodeableConcept specialty;
}

@GenModel(documentation="This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.")
@ExtendedMetaData(name="ExplanationOfBenefit.Detail", kind="elementOnly")
class ExplanationOfBenefitDetail extends BackboneElement {

	@GenModel(documentation="A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.")
	@ExtendedMetaData(kind="element", name="sequence", namespace="##targetNamespace")
	!resolve val PositiveInt[1] sequence;

	@GenModel(documentation="Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.")
	@ExtendedMetaData(kind="element", name="traceNumber", namespace="##targetNamespace")
	!resolve val Identifier[*] traceNumber;

	@GenModel(documentation="The type of revenue or cost center providing the product and/or service.")
	@ExtendedMetaData(kind="element", name="revenue", namespace="##targetNamespace")
	!resolve val CodeableConcept revenue;

	@GenModel(documentation="Code to identify the general type of benefits under which products and services are provided.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept category;

	@GenModel(documentation="When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.")
	@ExtendedMetaData(kind="element", name="productOrService", namespace="##targetNamespace")
	!resolve val CodeableConcept productOrService;

	@GenModel(documentation="This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.")
	@ExtendedMetaData(kind="element", name="productOrServiceEnd", namespace="##targetNamespace")
	!resolve val CodeableConcept productOrServiceEnd;

	@GenModel(documentation="Item typification or modifiers codes to convey additional context for the product or service.")
	@ExtendedMetaData(kind="element", name="modifier", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] modifier;

	@GenModel(documentation="Identifies the program under which this may be recovered.")
	@ExtendedMetaData(kind="element", name="programCode", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] programCode;

	@GenModel(documentation="The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.")
	@ExtendedMetaData(kind="element", name="patientPaid", namespace="##targetNamespace")
	!resolve val Money patientPaid;

	@GenModel(documentation="The number of repetitions of a service or product.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Quantity quantity;

	@GenModel(documentation="If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.")
	@ExtendedMetaData(kind="element", name="unitPrice", namespace="##targetNamespace")
	!resolve val Money unitPrice;

	@GenModel(documentation="A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.")
	@ExtendedMetaData(kind="element", name="factor", namespace="##targetNamespace")
	!resolve val Decimal factor;

	@GenModel(documentation="The total of taxes applicable for this product or service.")
	@ExtendedMetaData(kind="element", name="tax", namespace="##targetNamespace")
	!resolve val Money tax;

	@GenModel(documentation="The total amount claimed for the group (if a grouper) or the line item.detail. Net = unit price * quantity * factor.")
	@ExtendedMetaData(kind="element", name="net", namespace="##targetNamespace")
	!resolve val Money net;

	@GenModel(documentation="Unique Device Identifiers associated with this line item.")
	@ExtendedMetaData(kind="element", name="udi", namespace="##targetNamespace")
	!resolve val Reference[*] udi;

	@GenModel(documentation="The numbers associated with notes below which apply to the adjudication of this item.")
	@ExtendedMetaData(kind="element", name="noteNumber", namespace="##targetNamespace")
	!resolve val PositiveInt[*] noteNumber;

	@GenModel(documentation="The high-level results of the adjudication if adjudication has been performed.")
	@ExtendedMetaData(kind="element", name="reviewOutcome", namespace="##targetNamespace")
	!resolve val ExplanationOfBenefitReviewOutcome reviewOutcome;

	@GenModel(documentation="The adjudication results.")
	@ExtendedMetaData(kind="element", name="adjudication", namespace="##targetNamespace")
	!resolve val ExplanationOfBenefitAdjudication[*] adjudication;

	@GenModel(documentation="Third-tier of goods and services.")
	@ExtendedMetaData(kind="element", name="subDetail", namespace="##targetNamespace")
	!resolve val ExplanationOfBenefitSubDetail[*] subDetail;
}

@GenModel(documentation="This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.")
@ExtendedMetaData(name="ExplanationOfBenefit.Detail1", kind="elementOnly")
class ExplanationOfBenefitDetail1 extends BackboneElement {

	@GenModel(documentation="Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.")
	@ExtendedMetaData(kind="element", name="traceNumber", namespace="##targetNamespace")
	!resolve val Identifier[*] traceNumber;

	@GenModel(documentation="The type of revenue or cost center providing the product and/or service.")
	@ExtendedMetaData(kind="element", name="revenue", namespace="##targetNamespace")
	!resolve val CodeableConcept revenue;

	@GenModel(documentation="When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.")
	@ExtendedMetaData(kind="element", name="productOrService", namespace="##targetNamespace")
	!resolve val CodeableConcept productOrService;

	@GenModel(documentation="This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.")
	@ExtendedMetaData(kind="element", name="productOrServiceEnd", namespace="##targetNamespace")
	!resolve val CodeableConcept productOrServiceEnd;

	@GenModel(documentation="Item typification or modifiers codes to convey additional context for the product or service.")
	@ExtendedMetaData(kind="element", name="modifier", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] modifier;

	@GenModel(documentation="The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.")
	@ExtendedMetaData(kind="element", name="patientPaid", namespace="##targetNamespace")
	!resolve val Money patientPaid;

	@GenModel(documentation="The number of repetitions of a service or product.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Quantity quantity;

	@GenModel(documentation="If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.")
	@ExtendedMetaData(kind="element", name="unitPrice", namespace="##targetNamespace")
	!resolve val Money unitPrice;

	@GenModel(documentation="A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.")
	@ExtendedMetaData(kind="element", name="factor", namespace="##targetNamespace")
	!resolve val Decimal factor;

	@GenModel(documentation="The total of taxes applicable for this product or service.")
	@ExtendedMetaData(kind="element", name="tax", namespace="##targetNamespace")
	!resolve val Money tax;

	@GenModel(documentation="The total amount claimed for the group (if a grouper) or the addItem.detail. Net = unit price * quantity * factor.")
	@ExtendedMetaData(kind="element", name="net", namespace="##targetNamespace")
	!resolve val Money net;

	@GenModel(documentation="The numbers associated with notes below which apply to the adjudication of this item.")
	@ExtendedMetaData(kind="element", name="noteNumber", namespace="##targetNamespace")
	!resolve val PositiveInt[*] noteNumber;

	@GenModel(documentation="The high-level results of the adjudication if adjudication has been performed.")
	@ExtendedMetaData(kind="element", name="reviewOutcome", namespace="##targetNamespace")
	!resolve val ExplanationOfBenefitReviewOutcome reviewOutcome;

	@GenModel(documentation="The adjudication results.")
	@ExtendedMetaData(kind="element", name="adjudication", namespace="##targetNamespace")
	!resolve val ExplanationOfBenefitAdjudication[*] adjudication;

	@GenModel(documentation="The third-tier service adjudications for payor added services.")
	@ExtendedMetaData(kind="element", name="subDetail", namespace="##targetNamespace")
	!resolve val ExplanationOfBenefitSubDetail1[*] subDetail;
}

@GenModel(documentation="This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.")
@ExtendedMetaData(name="ExplanationOfBenefit.Diagnosis", kind="elementOnly")
class ExplanationOfBenefitDiagnosis extends BackboneElement {

	@GenModel(documentation="A number to uniquely identify diagnosis entries.")
	@ExtendedMetaData(kind="element", name="sequence", namespace="##targetNamespace")
	!resolve val PositiveInt[1] sequence;

	@ExtendedMetaData(kind="element", name="diagnosisCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept diagnosisCodeableConcept;

	@ExtendedMetaData(kind="element", name="diagnosisReference", namespace="##targetNamespace")
	!resolve val Reference diagnosisReference;

	@GenModel(documentation="When the condition was observed or the relative ranking.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] type;

	@GenModel(documentation="Indication of whether the diagnosis was present on admission to a facility.")
	@ExtendedMetaData(kind="element", name="onAdmission", namespace="##targetNamespace")
	!resolve val CodeableConcept onAdmission;
}

@GenModel(documentation="This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.")
@ExtendedMetaData(name="ExplanationOfBenefit.Event", kind="elementOnly")
class ExplanationOfBenefitEvent extends BackboneElement {

	@GenModel(documentation="A coded event such as when a service is expected or a card printed.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@ExtendedMetaData(kind="element", name="whenDateTime", namespace="##targetNamespace")
	!resolve val DateTime whenDateTime;

	@ExtendedMetaData(kind="element", name="whenPeriod", namespace="##targetNamespace")
	!resolve val Period whenPeriod;
}

@GenModel(documentation="This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.")
@ExtendedMetaData(name="ExplanationOfBenefit.Financial", kind="elementOnly")
class ExplanationOfBenefitFinancial extends BackboneElement {

	@GenModel(documentation="Classification of benefit being provided.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@ExtendedMetaData(kind="element", name="allowedUnsignedInt", namespace="##targetNamespace")
	!resolve val UnsignedInt allowedUnsignedInt;

	@ExtendedMetaData(kind="element", name="allowedString", namespace="##targetNamespace")
	!resolve val String allowedString;

	@ExtendedMetaData(kind="element", name="allowedMoney", namespace="##targetNamespace")
	!resolve val Money allowedMoney;

	@ExtendedMetaData(kind="element", name="usedUnsignedInt", namespace="##targetNamespace")
	!resolve val UnsignedInt usedUnsignedInt;

	@ExtendedMetaData(kind="element", name="usedMoney", namespace="##targetNamespace")
	!resolve val Money usedMoney;
}

@GenModel(documentation="This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.")
@ExtendedMetaData(name="ExplanationOfBenefit.Insurance", kind="elementOnly")
class ExplanationOfBenefitInsurance extends BackboneElement {

	@GenModel(documentation="A flag to indicate that this Coverage is to be used for adjudication of this claim when set to true.")
	@ExtendedMetaData(kind="element", name="focal", namespace="##targetNamespace")
	!resolve val Boolean[1] focal;

	@GenModel(documentation="Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.")
	@ExtendedMetaData(kind="element", name="coverage", namespace="##targetNamespace")
	!resolve val Reference[1] coverage;

	@GenModel(documentation="Reference numbers previously provided by the insurer to the provider to be quoted on subsequent claims containing services or products related to the prior authorization.")
	@ExtendedMetaData(kind="element", name="preAuthRef", namespace="##targetNamespace")
	!resolve val String[*] preAuthRef;
}

@GenModel(documentation="This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.")
@ExtendedMetaData(name="ExplanationOfBenefit.Item", kind="elementOnly")
class ExplanationOfBenefitItem extends BackboneElement {

	@GenModel(documentation="A number to uniquely identify item entries.")
	@ExtendedMetaData(kind="element", name="sequence", namespace="##targetNamespace")
	!resolve val PositiveInt[1] sequence;

	@GenModel(documentation="Care team members related to this service or product.")
	@ExtendedMetaData(kind="element", name="careTeamSequence", namespace="##targetNamespace")
	!resolve val PositiveInt[*] careTeamSequence;

	@GenModel(documentation="Diagnoses applicable for this service or product.")
	@ExtendedMetaData(kind="element", name="diagnosisSequence", namespace="##targetNamespace")
	!resolve val PositiveInt[*] diagnosisSequence;

	@GenModel(documentation="Procedures applicable for this service or product.")
	@ExtendedMetaData(kind="element", name="procedureSequence", namespace="##targetNamespace")
	!resolve val PositiveInt[*] procedureSequence;

	@GenModel(documentation="Exceptions, special conditions and supporting information applicable for this service or product.")
	@ExtendedMetaData(kind="element", name="informationSequence", namespace="##targetNamespace")
	!resolve val PositiveInt[*] informationSequence;

	@GenModel(documentation="Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.")
	@ExtendedMetaData(kind="element", name="traceNumber", namespace="##targetNamespace")
	!resolve val Identifier[*] traceNumber;

	@GenModel(documentation="The type of revenue or cost center providing the product and/or service.")
	@ExtendedMetaData(kind="element", name="revenue", namespace="##targetNamespace")
	!resolve val CodeableConcept revenue;

	@GenModel(documentation="Code to identify the general type of benefits under which products and services are provided.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept category;

	@GenModel(documentation="When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.")
	@ExtendedMetaData(kind="element", name="productOrService", namespace="##targetNamespace")
	!resolve val CodeableConcept productOrService;

	@GenModel(documentation="This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.")
	@ExtendedMetaData(kind="element", name="productOrServiceEnd", namespace="##targetNamespace")
	!resolve val CodeableConcept productOrServiceEnd;

	@GenModel(documentation="Request or Referral for Goods or Service to be rendered.")
	@ExtendedMetaData(kind="element", name="request", namespace="##targetNamespace")
	!resolve val Reference[*] request;

	@GenModel(documentation="Item typification or modifiers codes to convey additional context for the product or service.")
	@ExtendedMetaData(kind="element", name="modifier", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] modifier;

	@GenModel(documentation="Identifies the program under which this may be recovered.")
	@ExtendedMetaData(kind="element", name="programCode", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] programCode;

	@ExtendedMetaData(kind="element", name="servicedDate", namespace="##targetNamespace")
	!resolve val Date servicedDate;

	@ExtendedMetaData(kind="element", name="servicedPeriod", namespace="##targetNamespace")
	!resolve val Period servicedPeriod;

	@ExtendedMetaData(kind="element", name="locationCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept locationCodeableConcept;

	@ExtendedMetaData(kind="element", name="locationAddress", namespace="##targetNamespace")
	!resolve val Address locationAddress;

	@ExtendedMetaData(kind="element", name="locationReference", namespace="##targetNamespace")
	!resolve val Reference locationReference;

	@GenModel(documentation="The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.")
	@ExtendedMetaData(kind="element", name="patientPaid", namespace="##targetNamespace")
	!resolve val Money patientPaid;

	@GenModel(documentation="The number of repetitions of a service or product.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Quantity quantity;

	@GenModel(documentation="If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.")
	@ExtendedMetaData(kind="element", name="unitPrice", namespace="##targetNamespace")
	!resolve val Money unitPrice;

	@GenModel(documentation="A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.")
	@ExtendedMetaData(kind="element", name="factor", namespace="##targetNamespace")
	!resolve val Decimal factor;

	@GenModel(documentation="The total of taxes applicable for this product or service.")
	@ExtendedMetaData(kind="element", name="tax", namespace="##targetNamespace")
	!resolve val Money tax;

	@GenModel(documentation="The total amount claimed for the group (if a grouper) or the line item. Net = unit price * quantity * factor.")
	@ExtendedMetaData(kind="element", name="net", namespace="##targetNamespace")
	!resolve val Money net;

	@GenModel(documentation="Unique Device Identifiers associated with this line item.")
	@ExtendedMetaData(kind="element", name="udi", namespace="##targetNamespace")
	!resolve val Reference[*] udi;

	@GenModel(documentation="Physical location where the service is performed or applies.")
	@ExtendedMetaData(kind="element", name="bodySite", namespace="##targetNamespace")
	!resolve val ExplanationOfBenefitBodySite[*] bodySite;

	@GenModel(documentation="Healthcare encounters related to this claim.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference[*] encounter;

	@GenModel(documentation="The numbers associated with notes below which apply to the adjudication of this item.")
	@ExtendedMetaData(kind="element", name="noteNumber", namespace="##targetNamespace")
	!resolve val PositiveInt[*] noteNumber;

	@GenModel(documentation="The high-level results of the adjudication if adjudication has been performed.")
	@ExtendedMetaData(kind="element", name="reviewOutcome", namespace="##targetNamespace")
	!resolve val ExplanationOfBenefitReviewOutcome reviewOutcome;

	@GenModel(documentation="If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.")
	@ExtendedMetaData(kind="element", name="adjudication", namespace="##targetNamespace")
	!resolve val ExplanationOfBenefitAdjudication[*] adjudication;

	@GenModel(documentation="Second-tier of goods and services.")
	@ExtendedMetaData(kind="element", name="detail", namespace="##targetNamespace")
	!resolve val ExplanationOfBenefitDetail[*] detail;
}

@GenModel(documentation="This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.")
@ExtendedMetaData(name="ExplanationOfBenefit.Payee", kind="elementOnly")
class ExplanationOfBenefitPayee extends BackboneElement {

	@GenModel(documentation="Type of Party to be reimbursed: Subscriber, provider, other.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="Reference to the individual or organization to whom any payment will be made.")
	@ExtendedMetaData(kind="element", name="party", namespace="##targetNamespace")
	!resolve val Reference party;
}

@GenModel(documentation="This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.")
@ExtendedMetaData(name="ExplanationOfBenefit.Payment", kind="elementOnly")
class ExplanationOfBenefitPayment extends BackboneElement {

	@GenModel(documentation="Whether this represents partial or complete payment of the benefits payable.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="Total amount of all adjustments to this payment included in this transaction which are not related to this claim's adjudication.")
	@ExtendedMetaData(kind="element", name="adjustment", namespace="##targetNamespace")
	!resolve val Money adjustment;

	@GenModel(documentation="Reason for the payment adjustment.")
	@ExtendedMetaData(kind="element", name="adjustmentReason", namespace="##targetNamespace")
	!resolve val CodeableConcept adjustmentReason;

	@GenModel(documentation="Estimated date the payment will be issued or the actual issue date of payment.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val Date date;

	@GenModel(documentation="Benefits payable less any payment adjustment.")
	@ExtendedMetaData(kind="element", name="amount", namespace="##targetNamespace")
	!resolve val Money amount;

	@GenModel(documentation="Issuer's unique identifier for the payment instrument.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier identifier;
}

@GenModel(documentation="This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.")
@ExtendedMetaData(name="ExplanationOfBenefit.Procedure", kind="elementOnly")
class ExplanationOfBenefitProcedure extends BackboneElement {

	@GenModel(documentation="A number to uniquely identify procedure entries.")
	@ExtendedMetaData(kind="element", name="sequence", namespace="##targetNamespace")
	!resolve val PositiveInt[1] sequence;

	@GenModel(documentation="When the condition was observed or the relative ranking.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] type;

	@GenModel(documentation="Date and optionally time the procedure was performed.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@ExtendedMetaData(kind="element", name="procedureCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept procedureCodeableConcept;

	@ExtendedMetaData(kind="element", name="procedureReference", namespace="##targetNamespace")
	!resolve val Reference procedureReference;

	@GenModel(documentation="Unique Device Identifiers associated with this line item.")
	@ExtendedMetaData(kind="element", name="udi", namespace="##targetNamespace")
	!resolve val Reference[*] udi;
}

@GenModel(documentation="This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.")
@ExtendedMetaData(name="ExplanationOfBenefit.ProcessNote", kind="elementOnly")
class ExplanationOfBenefitProcessNote extends BackboneElement {

	@GenModel(documentation="A number to uniquely identify a note entry.")
	@ExtendedMetaData(kind="element", name="number", namespace="##targetNamespace")
	!resolve val PositiveInt number;

	@GenModel(documentation="The business purpose of the note text.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="The explanation or description associated with the processing.")
	@ExtendedMetaData(kind="element", name="text", namespace="##targetNamespace")
	!resolve val String text;

	@GenModel(documentation="A code to define the language used in the text of the note.")
	@ExtendedMetaData(kind="element", name="language", namespace="##targetNamespace")
	!resolve val CodeableConcept language;
}

@GenModel(documentation="This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.")
@ExtendedMetaData(name="ExplanationOfBenefit.Related", kind="elementOnly")
class ExplanationOfBenefitRelated extends BackboneElement {

	@GenModel(documentation="Reference to a related claim.")
	@ExtendedMetaData(kind="element", name="claim", namespace="##targetNamespace")
	!resolve val Reference claim;

	@GenModel(documentation="A code to convey how the claims are related.")
	@ExtendedMetaData(kind="element", name="relationship", namespace="##targetNamespace")
	!resolve val CodeableConcept relationship;

	@GenModel(documentation="An alternate organizational reference to the case or file to which this particular claim pertains.")
	@ExtendedMetaData(kind="element", name="reference", namespace="##targetNamespace")
	!resolve val Identifier reference;
}

@GenModel(documentation="This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.")
@ExtendedMetaData(name="ExplanationOfBenefit.ReviewOutcome", kind="elementOnly")
class ExplanationOfBenefitReviewOutcome extends BackboneElement {

	@GenModel(documentation="The result of the claim, predetermination, or preauthorization adjudication.")
	@ExtendedMetaData(kind="element", name="decision", namespace="##targetNamespace")
	!resolve val CodeableConcept decision;

	@GenModel(documentation="The reasons for the result of the claim, predetermination, or preauthorization adjudication.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] reason;

	@GenModel(documentation="Reference from the Insurer which is used in later communications which refers to this adjudication.")
	@ExtendedMetaData(kind="element", name="preAuthRef", namespace="##targetNamespace")
	!resolve val String preAuthRef;

	@GenModel(documentation="The time frame during which this authorization is effective.")
	@ExtendedMetaData(kind="element", name="preAuthPeriod", namespace="##targetNamespace")
	!resolve val Period preAuthPeriod;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ExplanationOfBenefitStatus", kind="elementOnly")
class ExplanationOfBenefitStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ExplanationOfBenefitStatusEnum value;
}

@ExtendedMetaData(name="ExplanationOfBenefitStatusEnum")
enum ExplanationOfBenefitStatusEnum {

	@GenModel(documentation="Active")
	active = 0;

	@GenModel(documentation="Cancelled")
	cancelled = 1;

	@GenModel(documentation="Draft")
	draft = 2;

	@GenModel(documentation="Entered In Error")
	enteredInError = 3;
}

@ExtendedMetaData(name="ExplanationOfBenefitStatusEnum:Object", baseType="ExplanationOfBenefitStatusEnum")
datatype ExplanationOfBenefitStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.")
@ExtendedMetaData(name="ExplanationOfBenefit.SubDetail", kind="elementOnly")
class ExplanationOfBenefitSubDetail extends BackboneElement {

	@GenModel(documentation="A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.")
	@ExtendedMetaData(kind="element", name="sequence", namespace="##targetNamespace")
	!resolve val PositiveInt[1] sequence;

	@GenModel(documentation="Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.")
	@ExtendedMetaData(kind="element", name="traceNumber", namespace="##targetNamespace")
	!resolve val Identifier[*] traceNumber;

	@GenModel(documentation="The type of revenue or cost center providing the product and/or service.")
	@ExtendedMetaData(kind="element", name="revenue", namespace="##targetNamespace")
	!resolve val CodeableConcept revenue;

	@GenModel(documentation="Code to identify the general type of benefits under which products and services are provided.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept category;

	@GenModel(documentation="When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.")
	@ExtendedMetaData(kind="element", name="productOrService", namespace="##targetNamespace")
	!resolve val CodeableConcept productOrService;

	@GenModel(documentation="This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.")
	@ExtendedMetaData(kind="element", name="productOrServiceEnd", namespace="##targetNamespace")
	!resolve val CodeableConcept productOrServiceEnd;

	@GenModel(documentation="Item typification or modifiers codes to convey additional context for the product or service.")
	@ExtendedMetaData(kind="element", name="modifier", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] modifier;

	@GenModel(documentation="Identifies the program under which this may be recovered.")
	@ExtendedMetaData(kind="element", name="programCode", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] programCode;

	@GenModel(documentation="The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.")
	@ExtendedMetaData(kind="element", name="patientPaid", namespace="##targetNamespace")
	!resolve val Money patientPaid;

	@GenModel(documentation="The number of repetitions of a service or product.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Quantity quantity;

	@GenModel(documentation="If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.")
	@ExtendedMetaData(kind="element", name="unitPrice", namespace="##targetNamespace")
	!resolve val Money unitPrice;

	@GenModel(documentation="A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.")
	@ExtendedMetaData(kind="element", name="factor", namespace="##targetNamespace")
	!resolve val Decimal factor;

	@GenModel(documentation="The total of taxes applicable for this product or service.")
	@ExtendedMetaData(kind="element", name="tax", namespace="##targetNamespace")
	!resolve val Money tax;

	@GenModel(documentation="The total amount claimed for the line item.detail.subDetail. Net = unit price * quantity * factor.")
	@ExtendedMetaData(kind="element", name="net", namespace="##targetNamespace")
	!resolve val Money net;

	@GenModel(documentation="Unique Device Identifiers associated with this line item.")
	@ExtendedMetaData(kind="element", name="udi", namespace="##targetNamespace")
	!resolve val Reference[*] udi;

	@GenModel(documentation="The numbers associated with notes below which apply to the adjudication of this item.")
	@ExtendedMetaData(kind="element", name="noteNumber", namespace="##targetNamespace")
	!resolve val PositiveInt[*] noteNumber;

	@GenModel(documentation="The high-level results of the adjudication if adjudication has been performed.")
	@ExtendedMetaData(kind="element", name="reviewOutcome", namespace="##targetNamespace")
	!resolve val ExplanationOfBenefitReviewOutcome reviewOutcome;

	@GenModel(documentation="The adjudication results.")
	@ExtendedMetaData(kind="element", name="adjudication", namespace="##targetNamespace")
	!resolve val ExplanationOfBenefitAdjudication[*] adjudication;
}

@GenModel(documentation="This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.")
@ExtendedMetaData(name="ExplanationOfBenefit.SubDetail1", kind="elementOnly")
class ExplanationOfBenefitSubDetail1 extends BackboneElement {

	@GenModel(documentation="Trace number for tracking purposes. May be defined at the jurisdiction level or between trading partners.")
	@ExtendedMetaData(kind="element", name="traceNumber", namespace="##targetNamespace")
	!resolve val Identifier[*] traceNumber;

	@GenModel(documentation="The type of revenue or cost center providing the product and/or service.")
	@ExtendedMetaData(kind="element", name="revenue", namespace="##targetNamespace")
	!resolve val CodeableConcept revenue;

	@GenModel(documentation="When the value is a group code then this item collects a set of related item details, otherwise this contains the product, service, drug or other billing code for the item. This element may be the start of a range of .productOrService codes used in conjunction with .productOrServiceEnd or it may be a solo element where .productOrServiceEnd is not used.")
	@ExtendedMetaData(kind="element", name="productOrService", namespace="##targetNamespace")
	!resolve val CodeableConcept productOrService;

	@GenModel(documentation="This contains the end of a range of product, service, drug or other billing codes for the item. This element is not used when the .productOrService is a group code. This value may only be present when a .productOfService code has been provided to convey the start of the range. Typically this value may be used only with preauthorizations and not with claims.")
	@ExtendedMetaData(kind="element", name="productOrServiceEnd", namespace="##targetNamespace")
	!resolve val CodeableConcept productOrServiceEnd;

	@GenModel(documentation="Item typification or modifiers codes to convey additional context for the product or service.")
	@ExtendedMetaData(kind="element", name="modifier", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] modifier;

	@GenModel(documentation="The amount paid by the patient, in total at the claim claim level or specifically for the item and detail level, to the provider for goods and services.")
	@ExtendedMetaData(kind="element", name="patientPaid", namespace="##targetNamespace")
	!resolve val Money patientPaid;

	@GenModel(documentation="The number of repetitions of a service or product.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Quantity quantity;

	@GenModel(documentation="If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.")
	@ExtendedMetaData(kind="element", name="unitPrice", namespace="##targetNamespace")
	!resolve val Money unitPrice;

	@GenModel(documentation="A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.")
	@ExtendedMetaData(kind="element", name="factor", namespace="##targetNamespace")
	!resolve val Decimal factor;

	@GenModel(documentation="The total of taxes applicable for this product or service.")
	@ExtendedMetaData(kind="element", name="tax", namespace="##targetNamespace")
	!resolve val Money tax;

	@GenModel(documentation="The total amount claimed for the addItem.detail.subDetail. Net = unit price * quantity * factor.")
	@ExtendedMetaData(kind="element", name="net", namespace="##targetNamespace")
	!resolve val Money net;

	@GenModel(documentation="The numbers associated with notes below which apply to the adjudication of this item.")
	@ExtendedMetaData(kind="element", name="noteNumber", namespace="##targetNamespace")
	!resolve val PositiveInt[*] noteNumber;

	@GenModel(documentation="The high-level results of the adjudication if adjudication has been performed.")
	@ExtendedMetaData(kind="element", name="reviewOutcome", namespace="##targetNamespace")
	!resolve val ExplanationOfBenefitReviewOutcome reviewOutcome;

	@GenModel(documentation="The adjudication results.")
	@ExtendedMetaData(kind="element", name="adjudication", namespace="##targetNamespace")
	!resolve val ExplanationOfBenefitAdjudication[*] adjudication;
}

@GenModel(documentation="This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.")
@ExtendedMetaData(name="ExplanationOfBenefit.SupportingInfo", kind="elementOnly")
class ExplanationOfBenefitSupportingInfo extends BackboneElement {

	@GenModel(documentation="A number to uniquely identify supporting information entries.")
	@ExtendedMetaData(kind="element", name="sequence", namespace="##targetNamespace")
	!resolve val PositiveInt[1] sequence;

	@GenModel(documentation="The general class of the information supplied: information; exception; accident, employment; onset, etc.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] category;

	@GenModel(documentation="System and code pertaining to the specific information regarding special conditions relating to the setting, treatment or patient  for which care is sought.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@ExtendedMetaData(kind="element", name="timingDate", namespace="##targetNamespace")
	!resolve val Date timingDate;

	@ExtendedMetaData(kind="element", name="timingPeriod", namespace="##targetNamespace")
	!resolve val Period timingPeriod;

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;

	@ExtendedMetaData(kind="element", name="valueString", namespace="##targetNamespace")
	!resolve val String valueString;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueAttachment", namespace="##targetNamespace")
	!resolve val Attachment valueAttachment;

	@ExtendedMetaData(kind="element", name="valueReference", namespace="##targetNamespace")
	!resolve val Reference valueReference;

	@ExtendedMetaData(kind="element", name="valueIdentifier", namespace="##targetNamespace")
	!resolve val Identifier valueIdentifier;

	@GenModel(documentation="Provides the reason in the situation where a reason code is required in addition to the content.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val Coding reason;
}

@GenModel(documentation="This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.")
@ExtendedMetaData(name="ExplanationOfBenefit.Total", kind="elementOnly")
class ExplanationOfBenefitTotal extends BackboneElement {

	@GenModel(documentation="A code to indicate the information type of this adjudication record. Information types may include: the value submitted, maximum values or percentages allowed or payable under the plan, amounts that the patient is responsible for in aggregate or pertaining to this item, amounts paid by other coverages, and the benefit payable for this item.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] category;

	@GenModel(documentation="Monetary total amount associated with the category.")
	@ExtendedMetaData(kind="element", name="amount", namespace="##targetNamespace")
	!resolve val Money[1] amount;
}

@GenModel(documentation="A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="Expression", kind="elementOnly")
class Expression extends DataType {

	@GenModel(documentation="A brief, natural language description of the condition that effectively communicates the intended semantics.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val String description;

	@GenModel(documentation="A short name assigned to the expression to allow for multiple reuse of the expression in the context where it is defined.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val Code name;

	@GenModel(documentation="The media type of the language for the expression.")
	@ExtendedMetaData(kind="element", name="language", namespace="##targetNamespace")
	!resolve val Code language;

	@GenModel(documentation="An expression in the specified language that returns a value.")
	@ExtendedMetaData(kind="element", name="expression", namespace="##targetNamespace")
	!resolve val String expression;

	@GenModel(documentation="A URI that defines where the expression is found.")
	@ExtendedMetaData(kind="element", name="reference", namespace="##targetNamespace")
	!resolve val Uri reference;
}

@GenModel(documentation="Specifies contact information for a specific purpose over a period of time, might be handled/monitored by a specific named person or organization.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="ExtendedContactDetail", kind="elementOnly")
class ExtendedContactDetail extends DataType {

	@GenModel(documentation="The purpose/type of contact.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val CodeableConcept purpose;

	@GenModel(documentation="The name of an individual to contact, some types of contact detail are usually blank.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val HumanName[*] name;

	@GenModel(documentation="The contact details application for the purpose defined.")
	@ExtendedMetaData(kind="element", name="telecom", namespace="##targetNamespace")
	!resolve val ContactPoint[*] telecom;

	@GenModel(documentation="Address for the contact.")
	@ExtendedMetaData(kind="element", name="address", namespace="##targetNamespace")
	!resolve val Address address;

	@GenModel(documentation="This contact detail is handled/monitored by a specific organization. If the name is provided in the contact, then it is referring to the named individual within this organization.")
	@ExtendedMetaData(kind="element", name="organization", namespace="##targetNamespace")
	!resolve val Reference organization;

	@GenModel(documentation="Period that this contact was valid for usage.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;
}

@GenModel(documentation="Optional Extension Element - found in all resources.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="Extension", kind="elementOnly")
class Extension extends DataType {

	@ExtendedMetaData(kind="element", name="valueBase64Binary", namespace="##targetNamespace")
	!resolve val Base64Binary valueBase64Binary;

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;

	@ExtendedMetaData(kind="element", name="valueCanonical", namespace="##targetNamespace")
	!resolve val Canonical valueCanonical;

	@ExtendedMetaData(kind="element", name="valueCode", namespace="##targetNamespace")
	!resolve val Code valueCode;

	@ExtendedMetaData(kind="element", name="valueDate", namespace="##targetNamespace")
	!resolve val Date valueDate;

	@ExtendedMetaData(kind="element", name="valueDateTime", namespace="##targetNamespace")
	!resolve val DateTime valueDateTime;

	@ExtendedMetaData(kind="element", name="valueDecimal", namespace="##targetNamespace")
	!resolve val Decimal valueDecimal;

	@ExtendedMetaData(kind="element", name="valueId", namespace="##targetNamespace")
	!resolve val Id valueId;

	@ExtendedMetaData(kind="element", name="valueInstant", namespace="##targetNamespace")
	!resolve val Instant valueInstant;

	@ExtendedMetaData(kind="element", name="valueInteger", namespace="##targetNamespace")
	!resolve val Integer valueInteger;

	@ExtendedMetaData(kind="element", name="valueInteger64", namespace="##targetNamespace")
	!resolve val Integer64 valueInteger64;

	@ExtendedMetaData(kind="element", name="valueMarkdown", namespace="##targetNamespace")
	!resolve val Markdown valueMarkdown;

	@ExtendedMetaData(kind="element", name="valueOid", namespace="##targetNamespace")
	!resolve val Oid valueOid;

	@ExtendedMetaData(kind="element", name="valuePositiveInt", namespace="##targetNamespace")
	!resolve val PositiveInt valuePositiveInt;

	@ExtendedMetaData(kind="element", name="valueString", namespace="##targetNamespace")
	!resolve val String valueString;

	@ExtendedMetaData(kind="element", name="valueTime", namespace="##targetNamespace")
	!resolve val Time valueTime;

	@ExtendedMetaData(kind="element", name="valueUnsignedInt", namespace="##targetNamespace")
	!resolve val UnsignedInt valueUnsignedInt;

	@ExtendedMetaData(kind="element", name="valueUri", namespace="##targetNamespace")
	!resolve val Uri valueUri;

	@ExtendedMetaData(kind="element", name="valueUrl", namespace="##targetNamespace")
	!resolve val Url valueUrl;

	@ExtendedMetaData(kind="element", name="valueUuid", namespace="##targetNamespace")
	!resolve val Uuid valueUuid;

	@ExtendedMetaData(kind="element", name="valueAddress", namespace="##targetNamespace")
	!resolve val Address valueAddress;

	@ExtendedMetaData(kind="element", name="valueAge", namespace="##targetNamespace")
	!resolve val Age valueAge;

	@ExtendedMetaData(kind="element", name="valueAnnotation", namespace="##targetNamespace")
	!resolve val Annotation valueAnnotation;

	@ExtendedMetaData(kind="element", name="valueAttachment", namespace="##targetNamespace")
	!resolve val Attachment valueAttachment;

	@ExtendedMetaData(kind="element", name="valueCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept valueCodeableConcept;

	@ExtendedMetaData(kind="element", name="valueCodeableReference", namespace="##targetNamespace")
	!resolve val CodeableReference valueCodeableReference;

	@ExtendedMetaData(kind="element", name="valueCoding", namespace="##targetNamespace")
	!resolve val Coding valueCoding;

	@ExtendedMetaData(kind="element", name="valueContactPoint", namespace="##targetNamespace")
	!resolve val ContactPoint valueContactPoint;

	@ExtendedMetaData(kind="element", name="valueCount", namespace="##targetNamespace")
	!resolve val Count valueCount;

	@ExtendedMetaData(kind="element", name="valueDistance", namespace="##targetNamespace")
	!resolve val Distance valueDistance;

	@ExtendedMetaData(kind="element", name="valueDuration", namespace="##targetNamespace")
	!resolve val Duration valueDuration;

	@ExtendedMetaData(kind="element", name="valueHumanName", namespace="##targetNamespace")
	!resolve val HumanName valueHumanName;

	@ExtendedMetaData(kind="element", name="valueIdentifier", namespace="##targetNamespace")
	!resolve val Identifier valueIdentifier;

	@ExtendedMetaData(kind="element", name="valueMoney", namespace="##targetNamespace")
	!resolve val Money valueMoney;

	@ExtendedMetaData(kind="element", name="valuePeriod", namespace="##targetNamespace")
	!resolve val Period valuePeriod;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueRange", namespace="##targetNamespace")
	!resolve val Range valueRange;

	@ExtendedMetaData(kind="element", name="valueRatio", namespace="##targetNamespace")
	!resolve val Ratio valueRatio;

	@ExtendedMetaData(kind="element", name="valueRatioRange", namespace="##targetNamespace")
	!resolve val RatioRange valueRatioRange;

	@ExtendedMetaData(kind="element", name="valueReference", namespace="##targetNamespace")
	!resolve val Reference valueReference;

	@ExtendedMetaData(kind="element", name="valueSampledData", namespace="##targetNamespace")
	!resolve val SampledData valueSampledData;

	@ExtendedMetaData(kind="element", name="valueSignature", namespace="##targetNamespace")
	!resolve val Signature valueSignature;

	@ExtendedMetaData(kind="element", name="valueTiming", namespace="##targetNamespace")
	!resolve val Timing valueTiming;

	@ExtendedMetaData(kind="element", name="valueContactDetail", namespace="##targetNamespace")
	!resolve val ContactDetail valueContactDetail;

	@ExtendedMetaData(kind="element", name="valueDataRequirement", namespace="##targetNamespace")
	!resolve val DataRequirement valueDataRequirement;

	@ExtendedMetaData(kind="element", name="valueExpression", namespace="##targetNamespace")
	!resolve val Expression valueExpression;

	@ExtendedMetaData(kind="element", name="valueParameterDefinition", namespace="##targetNamespace")
	!resolve val ParameterDefinition valueParameterDefinition;

	@ExtendedMetaData(kind="element", name="valueRelatedArtifact", namespace="##targetNamespace")
	!resolve val RelatedArtifact valueRelatedArtifact;

	@ExtendedMetaData(kind="element", name="valueTriggerDefinition", namespace="##targetNamespace")
	!resolve val TriggerDefinition valueTriggerDefinition;

	@ExtendedMetaData(kind="element", name="valueUsageContext", namespace="##targetNamespace")
	!resolve val UsageContext valueUsageContext;

	@ExtendedMetaData(kind="element", name="valueAvailability", namespace="##targetNamespace")
	!resolve val Availability valueAvailability;

	@ExtendedMetaData(kind="element", name="valueExtendedContactDetail", namespace="##targetNamespace")
	!resolve val ExtendedContactDetail valueExtendedContactDetail;

	@ExtendedMetaData(kind="element", name="valueDosage", namespace="##targetNamespace")
	!resolve val Dosage valueDosage;

	@ExtendedMetaData(kind="element", name="valueMeta", namespace="##targetNamespace")
	!resolve val Meta valueMeta;

	@ExtendedMetaData(kind="attribute", name="url")
	attr UriPrimitive[1] url;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ExtensionContextType", kind="elementOnly")
class ExtensionContextType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ExtensionContextTypeEnum value;
}

@ExtendedMetaData(name="ExtensionContextTypeEnum")
enum ExtensionContextTypeEnum {

	@GenModel(documentation="FHIRPath")
	fhirpath = 0;

	@GenModel(documentation="Element ID")
	element = 1;

	@GenModel(documentation="Extension URL")
	extension = 2;
}

@ExtendedMetaData(name="ExtensionContextTypeEnum:Object", baseType="ExtensionContextTypeEnum")
datatype ExtensionContextTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="FamilyHistoryStatus", kind="elementOnly")
class FamilyHistoryStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr FamilyHistoryStatusEnum value;
}

@ExtendedMetaData(name="FamilyHistoryStatusEnum")
enum FamilyHistoryStatusEnum {

	@GenModel(documentation="Partial")
	partial = 0;

	@GenModel(documentation="Completed")
	completed = 1;

	@GenModel(documentation="Entered in Error")
	enteredInError = 2;

	@GenModel(documentation="Health Unknown")
	healthUnknown = 3;
}

@ExtendedMetaData(name="FamilyHistoryStatusEnum:Object", baseType="FamilyHistoryStatusEnum")
datatype FamilyHistoryStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="Significant health conditions for a person related to the patient relevant in the context of care for the patient.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="FamilyMemberHistory", kind="elementOnly")
class FamilyMemberHistory extends DomainResource {

	@GenModel(documentation="Business identifiers assigned to this family member history by the performer or other systems which remain constant as the resource is updated and propagates from server to server.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this FamilyMemberHistory.")
	@ExtendedMetaData(kind="element", name="instantiatesCanonical", namespace="##targetNamespace")
	!resolve val Canonical[*] instantiatesCanonical;

	@GenModel(documentation="The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this FamilyMemberHistory.")
	@ExtendedMetaData(kind="element", name="instantiatesUri", namespace="##targetNamespace")
	!resolve val Uri[*] instantiatesUri;

	@GenModel(documentation="A code specifying the status of the record of the family history of a specific family member.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val FamilyHistoryStatus[1] status;

	@GenModel(documentation="Describes why the family member's history is not available.")
	@ExtendedMetaData(kind="element", name="dataAbsentReason", namespace="##targetNamespace")
	!resolve val CodeableConcept dataAbsentReason;

	@GenModel(documentation="The person who this history concerns.")
	@ExtendedMetaData(kind="element", name="patient", namespace="##targetNamespace")
	!resolve val Reference[1] patient;

	@GenModel(documentation="The date (and possibly time) when the family member history was recorded or last updated.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="Indicates who or what participated in the activities related to the family member history and how they were involved.")
	@ExtendedMetaData(kind="element", name="participant", namespace="##targetNamespace")
	!resolve val FamilyMemberHistoryParticipant[*] participant;

	@GenModel(documentation="This will either be a name or a description; e.g. \"Aunt Susan\", \"my cousin with the red hair\".")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="The type of relationship this person has to the patient (father, mother, brother etc.).")
	@ExtendedMetaData(kind="element", name="relationship", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] relationship;

	@GenModel(documentation="The birth sex of the family member.")
	@ExtendedMetaData(kind="element", name="sex", namespace="##targetNamespace")
	!resolve val CodeableConcept sex;

	@ExtendedMetaData(kind="element", name="bornPeriod", namespace="##targetNamespace")
	!resolve val Period bornPeriod;

	@ExtendedMetaData(kind="element", name="bornDate", namespace="##targetNamespace")
	!resolve val Date bornDate;

	@ExtendedMetaData(kind="element", name="bornString", namespace="##targetNamespace")
	!resolve val String bornString;

	@ExtendedMetaData(kind="element", name="ageAge", namespace="##targetNamespace")
	!resolve val Age ageAge;

	@ExtendedMetaData(kind="element", name="ageRange", namespace="##targetNamespace")
	!resolve val Range ageRange;

	@ExtendedMetaData(kind="element", name="ageString", namespace="##targetNamespace")
	!resolve val String ageString;

	@GenModel(documentation="If true, indicates that the age value specified is an estimated value.")
	@ExtendedMetaData(kind="element", name="estimatedAge", namespace="##targetNamespace")
	!resolve val Boolean estimatedAge;

	@ExtendedMetaData(kind="element", name="deceasedBoolean", namespace="##targetNamespace")
	!resolve val Boolean deceasedBoolean;

	@ExtendedMetaData(kind="element", name="deceasedAge", namespace="##targetNamespace")
	!resolve val Age deceasedAge;

	@ExtendedMetaData(kind="element", name="deceasedRange", namespace="##targetNamespace")
	!resolve val Range deceasedRange;

	@ExtendedMetaData(kind="element", name="deceasedDate", namespace="##targetNamespace")
	!resolve val Date deceasedDate;

	@ExtendedMetaData(kind="element", name="deceasedString", namespace="##targetNamespace")
	!resolve val String deceasedString;

	@GenModel(documentation="Describes why the family member history occurred in coded or textual form, or Indicates a Condition, Observation, AllergyIntolerance, or QuestionnaireResponse that justifies this family member history event.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val CodeableReference[*] reason;

	@GenModel(documentation="This property allows a non condition-specific note to the made about the related person. Ideally, the note would be in the condition property, but this is not always possible.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition.")
	@ExtendedMetaData(kind="element", name="condition", namespace="##targetNamespace")
	!resolve val FamilyMemberHistoryCondition[*] condition;

	@GenModel(documentation="The significant Procedures (or procedure) that the family member had. This is a repeating section to allow a system to represent more than one procedure per resource, though there is nothing stopping multiple resources - one per procedure.")
	@ExtendedMetaData(kind="element", name="procedure", namespace="##targetNamespace")
	!resolve val FamilyMemberHistoryProcedure[*] procedure;
}

@GenModel(documentation="Significant health conditions for a person related to the patient relevant in the context of care for the patient.")
@ExtendedMetaData(name="FamilyMemberHistory.Condition", kind="elementOnly")
class FamilyMemberHistoryCondition extends BackboneElement {

	@GenModel(documentation="The actual condition specified. Could be a coded condition (like MI or Diabetes) or a less specific string like 'cancer' depending on how much is known about the condition and the capabilities of the creating system.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] code;

	@GenModel(documentation="Indicates what happened following the condition.  If the condition resulted in death, deceased date is captured on the relation.")
	@ExtendedMetaData(kind="element", name="outcome", namespace="##targetNamespace")
	!resolve val CodeableConcept outcome;

	@GenModel(documentation="This condition contributed to the cause of death of the related person. If contributedToDeath is not populated, then it is unknown.")
	@ExtendedMetaData(kind="element", name="contributedToDeath", namespace="##targetNamespace")
	!resolve val Boolean contributedToDeath;

	@ExtendedMetaData(kind="element", name="onsetAge", namespace="##targetNamespace")
	!resolve val Age onsetAge;

	@ExtendedMetaData(kind="element", name="onsetRange", namespace="##targetNamespace")
	!resolve val Range onsetRange;

	@ExtendedMetaData(kind="element", name="onsetPeriod", namespace="##targetNamespace")
	!resolve val Period onsetPeriod;

	@ExtendedMetaData(kind="element", name="onsetString", namespace="##targetNamespace")
	!resolve val String onsetString;

	@GenModel(documentation="An area where general notes can be placed about this specific condition.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;
}

@GenModel(documentation="Significant health conditions for a person related to the patient relevant in the context of care for the patient.")
@ExtendedMetaData(name="FamilyMemberHistory.Participant", kind="elementOnly")
class FamilyMemberHistoryParticipant extends BackboneElement {

	@GenModel(documentation="Distinguishes the type of involvement of the actor in the activities related to the family member history.")
	@ExtendedMetaData(kind="element", name="function", namespace="##targetNamespace")
	!resolve val CodeableConcept function;

	@GenModel(documentation="Indicates who or what participated in the activities related to the family member history.")
	@ExtendedMetaData(kind="element", name="actor", namespace="##targetNamespace")
	!resolve val Reference[1] actor;
}

@GenModel(documentation="Significant health conditions for a person related to the patient relevant in the context of care for the patient.")
@ExtendedMetaData(name="FamilyMemberHistory.Procedure", kind="elementOnly")
class FamilyMemberHistoryProcedure extends BackboneElement {

	@GenModel(documentation="The actual procedure specified. Could be a coded procedure or a less specific string depending on how much is known about the procedure and the capabilities of the creating system.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] code;

	@GenModel(documentation="Indicates what happened following the procedure. If the procedure resulted in death, deceased date is captured on the relation.")
	@ExtendedMetaData(kind="element", name="outcome", namespace="##targetNamespace")
	!resolve val CodeableConcept outcome;

	@GenModel(documentation="This procedure contributed to the cause of death of the related person. If contributedToDeath is not populated, then it is unknown.")
	@ExtendedMetaData(kind="element", name="contributedToDeath", namespace="##targetNamespace")
	!resolve val Boolean contributedToDeath;

	@ExtendedMetaData(kind="element", name="performedAge", namespace="##targetNamespace")
	!resolve val Age performedAge;

	@ExtendedMetaData(kind="element", name="performedRange", namespace="##targetNamespace")
	!resolve val Range performedRange;

	@ExtendedMetaData(kind="element", name="performedPeriod", namespace="##targetNamespace")
	!resolve val Period performedPeriod;

	@ExtendedMetaData(kind="element", name="performedString", namespace="##targetNamespace")
	!resolve val String performedString;

	@ExtendedMetaData(kind="element", name="performedDateTime", namespace="##targetNamespace")
	!resolve val DateTime performedDateTime;

	@GenModel(documentation="An area where general notes can be placed about this specific procedure.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="FHIRDeviceStatus", kind="elementOnly")
class FHIRDeviceStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr FHIRDeviceStatusEnum value;
}

@ExtendedMetaData(name="FHIRDeviceStatusEnum")
enum FHIRDeviceStatusEnum {

	@GenModel(documentation="Active")
	active = 0;

	@GenModel(documentation="Inactive")
	inactive = 1;

	@GenModel(documentation="Entered in Error")
	enteredInError = 2;
}

@ExtendedMetaData(name="FHIRDeviceStatusEnum:Object", baseType="FHIRDeviceStatusEnum")
datatype FHIRDeviceStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="FHIRPathTypes", kind="elementOnly")
class FHIRPathTypes extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr FHIRPathTypesEnum value;
}

@ExtendedMetaData(name="FHIRPathTypesEnum")
enum FHIRPathTypesEnum {

	@GenModel(documentation="String")
	httpHl7OrgFhirpathSystemString = 0;

	@GenModel(documentation="Boolean")
	httpHl7OrgFhirpathSystemBoolean = 1;

	@GenModel(documentation="Date")
	httpHl7OrgFhirpathSystemDate = 2;

	@GenModel(documentation="DateTime")
	httpHl7OrgFhirpathSystemDateTime = 3;

	@GenModel(documentation="Decimal")
	httpHl7OrgFhirpathSystemDecimal = 4;

	@GenModel(documentation="Integer")
	httpHl7OrgFhirpathSystemInteger = 5;

	@GenModel(documentation="Time")
	httpHl7OrgFhirpathSystemTime = 6;
}

@ExtendedMetaData(name="FHIRPathTypesEnum:Object", baseType="FHIRPathTypesEnum")
datatype FHIRPathTypesEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="FHIRSubstanceStatus", kind="elementOnly")
class FHIRSubstanceStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr FHIRSubstanceStatusEnum value;
}

@ExtendedMetaData(name="FHIRSubstanceStatusEnum")
enum FHIRSubstanceStatusEnum {

	@GenModel(documentation="Active")
	active = 0;

	@GenModel(documentation="Inactive")
	inactive = 1;

	@GenModel(documentation="Entered in Error")
	enteredInError = 2;
}

@ExtendedMetaData(name="FHIRSubstanceStatusEnum:Object", baseType="FHIRSubstanceStatusEnum")
datatype FHIRSubstanceStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="FHIRTypes", kind="elementOnly")
class FHIRTypes extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr FHIRTypesEnum value;
}

@ExtendedMetaData(name="FHIRTypesEnum")
enum FHIRTypesEnum {

	@GenModel(documentation="Base")
	Base = 0;

	@GenModel(documentation="Element")
	Element = 1;

	@GenModel(documentation="BackboneElement")
	BackboneElement = 2;

	@GenModel(documentation="DataType")
	DataType = 3;

	@GenModel(documentation="Address")
	Address = 4;

	@GenModel(documentation="Annotation")
	Annotation = 5;

	@GenModel(documentation="Attachment")
	Attachment = 6;

	@GenModel(documentation="Availability")
	Availability = 7;

	@GenModel(documentation="BackboneType")
	BackboneType = 8;

	@GenModel(documentation="Dosage")
	Dosage = 9;

	@GenModel(documentation="ElementDefinition")
	ElementDefinition = 10;

	@GenModel(documentation="MarketingStatus")
	MarketingStatus = 11;

	@GenModel(documentation="ProductShelfLife")
	ProductShelfLife = 12;

	@GenModel(documentation="Timing")
	Timing = 13;

	@GenModel(documentation="CodeableConcept")
	CodeableConcept = 14;

	@GenModel(documentation="CodeableReference")
	CodeableReference = 15;

	@GenModel(documentation="Coding")
	Coding = 16;

	@GenModel(documentation="ContactDetail")
	ContactDetail = 17;

	@GenModel(documentation="ContactPoint")
	ContactPoint = 18;

	@GenModel(documentation="Contributor")
	Contributor = 19;

	@GenModel(documentation="DataRequirement")
	DataRequirement = 20;

	@GenModel(documentation="Expression")
	Expression = 21;

	@GenModel(documentation="ExtendedContactDetail")
	ExtendedContactDetail = 22;

	@GenModel(documentation="Extension")
	Extension = 23;

	@GenModel(documentation="HumanName")
	HumanName = 24;

	@GenModel(documentation="Identifier")
	Identifier = 25;

	@GenModel(documentation="Meta")
	Meta = 26;

	@GenModel(documentation="MonetaryComponent")
	MonetaryComponent = 27;

	@GenModel(documentation="Money")
	Money = 28;

	@GenModel(documentation="Narrative")
	Narrative = 29;

	@GenModel(documentation="ParameterDefinition")
	ParameterDefinition = 30;

	@GenModel(documentation="Period")
	Period = 31;

	@GenModel(documentation="PrimitiveType")
	PrimitiveType = 32;

	@GenModel(documentation="base64Binary")
	base64Binary = 33;

	@GenModel(documentation="boolean")
	boolean = 34;

	@GenModel(documentation="date")
	date = 35;

	@GenModel(documentation="dateTime")
	dateTime = 36;

	@GenModel(documentation="decimal")
	decimal = 37;

	@GenModel(documentation="instant")
	instant = 38;

	@GenModel(documentation="integer")
	integer = 39;

	@GenModel(documentation="positiveInt")
	positiveInt = 40;

	@GenModel(documentation="unsignedInt")
	unsignedInt = 41;

	@GenModel(documentation="integer64")
	integer64 = 42;

	@GenModel(documentation="string")
	string = 43;

	@GenModel(documentation="code")
	code = 44;

	@GenModel(documentation="id")
	~id = 45;

	@GenModel(documentation="markdown")
	markdown = 46;

	@GenModel(documentation="time")
	time = 47;

	@GenModel(documentation="uri")
	uri = 48;

	@GenModel(documentation="canonical")
	canonical = 49;

	@GenModel(documentation="oid")
	oid = 50;

	@GenModel(documentation="url")
	url = 51;

	@GenModel(documentation="uuid")
	uuid = 52;

	@GenModel(documentation="Quantity")
	Quantity = 53;

	@GenModel(documentation="Age")
	Age = 54;

	@GenModel(documentation="Count")
	Count = 55;

	@GenModel(documentation="Distance")
	Distance = 56;

	@GenModel(documentation="Duration")
	Duration = 57;

	@GenModel(documentation="Range")
	Range = 58;

	@GenModel(documentation="Ratio")
	Ratio = 59;

	@GenModel(documentation="RatioRange")
	RatioRange = 60;

	@GenModel(documentation="Reference")
	Reference = 61;

	@GenModel(documentation="RelatedArtifact")
	RelatedArtifact = 62;

	@GenModel(documentation="SampledData")
	SampledData = 63;

	@GenModel(documentation="Signature")
	Signature = 64;

	@GenModel(documentation="TriggerDefinition")
	TriggerDefinition = 65;

	@GenModel(documentation="UsageContext")
	UsageContext = 66;

	@GenModel(documentation="VirtualServiceDetail")
	VirtualServiceDetail = 67;

	@GenModel(documentation="xhtml")
	xhtml = 68;

	@GenModel(documentation="Resource")
	Resource = 69;

	@GenModel(documentation="Binary")
	Binary = 70;

	@GenModel(documentation="Bundle")
	Bundle = 71;

	@GenModel(documentation="DomainResource")
	DomainResource = 72;

	@GenModel(documentation="Account")
	Account = 73;

	@GenModel(documentation="ActivityDefinition")
	ActivityDefinition = 74;

	@GenModel(documentation="ActorDefinition")
	ActorDefinition = 75;

	@GenModel(documentation="AdministrableProductDefinition")
	AdministrableProductDefinition = 76;

	@GenModel(documentation="AdverseEvent")
	AdverseEvent = 77;

	@GenModel(documentation="AllergyIntolerance")
	AllergyIntolerance = 78;

	@GenModel(documentation="Appointment")
	Appointment = 79;

	@GenModel(documentation="AppointmentResponse")
	AppointmentResponse = 80;

	@GenModel(documentation="ArtifactAssessment")
	ArtifactAssessment = 81;

	@GenModel(documentation="AuditEvent")
	AuditEvent = 82;

	@GenModel(documentation="Basic")
	Basic = 83;

	@GenModel(documentation="BiologicallyDerivedProduct")
	BiologicallyDerivedProduct = 84;

	@GenModel(documentation="BiologicallyDerivedProductDispense")
	BiologicallyDerivedProductDispense = 85;

	@GenModel(documentation="BodyStructure")
	BodyStructure = 86;

	@GenModel(documentation="CanonicalResource")
	CanonicalResource = 87;

	@GenModel(documentation="CapabilityStatement")
	CapabilityStatement = 88;

	@GenModel(documentation="CarePlan")
	CarePlan = 89;

	@GenModel(documentation="CareTeam")
	CareTeam = 90;

	@GenModel(documentation="ChargeItem")
	ChargeItem = 91;

	@GenModel(documentation="ChargeItemDefinition")
	ChargeItemDefinition = 92;

	@GenModel(documentation="Citation")
	Citation = 93;

	@GenModel(documentation="Claim")
	Claim = 94;

	@GenModel(documentation="ClaimResponse")
	ClaimResponse = 95;

	@GenModel(documentation="ClinicalImpression")
	ClinicalImpression = 96;

	@GenModel(documentation="ClinicalUseDefinition")
	ClinicalUseDefinition = 97;

	@GenModel(documentation="CodeSystem")
	CodeSystem = 98;

	@GenModel(documentation="Communication")
	Communication = 99;

	@GenModel(documentation="CommunicationRequest")
	CommunicationRequest = 100;

	@GenModel(documentation="CompartmentDefinition")
	CompartmentDefinition = 101;

	@GenModel(documentation="Composition")
	Composition = 102;

	@GenModel(documentation="ConceptMap")
	ConceptMap = 103;

	@GenModel(documentation="Condition")
	Condition = 104;

	@GenModel(documentation="ConditionDefinition")
	ConditionDefinition = 105;

	@GenModel(documentation="Consent")
	Consent = 106;

	@GenModel(documentation="Contract")
	Contract = 107;

	@GenModel(documentation="Coverage")
	Coverage = 108;

	@GenModel(documentation="CoverageEligibilityRequest")
	CoverageEligibilityRequest = 109;

	@GenModel(documentation="CoverageEligibilityResponse")
	CoverageEligibilityResponse = 110;

	@GenModel(documentation="DetectedIssue")
	DetectedIssue = 111;

	@GenModel(documentation="Device")
	Device = 112;

	@GenModel(documentation="DeviceAssociation")
	DeviceAssociation = 113;

	@GenModel(documentation="DeviceDefinition")
	DeviceDefinition = 114;

	@GenModel(documentation="DeviceDispense")
	DeviceDispense = 115;

	@GenModel(documentation="DeviceMetric")
	DeviceMetric = 116;

	@GenModel(documentation="DeviceRequest")
	DeviceRequest = 117;

	@GenModel(documentation="DeviceUsage")
	DeviceUsage = 118;

	@GenModel(documentation="DiagnosticReport")
	DiagnosticReport = 119;

	@GenModel(documentation="DocumentReference")
	DocumentReference = 120;

	@GenModel(documentation="Encounter")
	Encounter = 121;

	@GenModel(documentation="EncounterHistory")
	EncounterHistory = 122;

	@GenModel(documentation="Endpoint")
	Endpoint = 123;

	@GenModel(documentation="EnrollmentRequest")
	EnrollmentRequest = 124;

	@GenModel(documentation="EnrollmentResponse")
	EnrollmentResponse = 125;

	@GenModel(documentation="EpisodeOfCare")
	EpisodeOfCare = 126;

	@GenModel(documentation="EventDefinition")
	EventDefinition = 127;

	@GenModel(documentation="Evidence")
	Evidence = 128;

	@GenModel(documentation="EvidenceReport")
	EvidenceReport = 129;

	@GenModel(documentation="EvidenceVariable")
	EvidenceVariable = 130;

	@GenModel(documentation="ExampleScenario")
	ExampleScenario = 131;

	@GenModel(documentation="ExplanationOfBenefit")
	ExplanationOfBenefit = 132;

	@GenModel(documentation="FamilyMemberHistory")
	FamilyMemberHistory = 133;

	@GenModel(documentation="Flag")
	Flag = 134;

	@GenModel(documentation="FormularyItem")
	FormularyItem = 135;

	@GenModel(documentation="GenomicStudy")
	GenomicStudy = 136;

	@GenModel(documentation="Goal")
	Goal = 137;

	@GenModel(documentation="GraphDefinition")
	GraphDefinition = 138;

	@GenModel(documentation="Group")
	Group = 139;

	@GenModel(documentation="GuidanceResponse")
	GuidanceResponse = 140;

	@GenModel(documentation="HealthcareService")
	HealthcareService = 141;

	@GenModel(documentation="ImagingSelection")
	ImagingSelection = 142;

	@GenModel(documentation="ImagingStudy")
	ImagingStudy = 143;

	@GenModel(documentation="Immunization")
	Immunization = 144;

	@GenModel(documentation="ImmunizationEvaluation")
	ImmunizationEvaluation = 145;

	@GenModel(documentation="ImmunizationRecommendation")
	ImmunizationRecommendation = 146;

	@GenModel(documentation="ImplementationGuide")
	ImplementationGuide = 147;

	@GenModel(documentation="Ingredient")
	Ingredient = 148;

	@GenModel(documentation="InsurancePlan")
	InsurancePlan = 149;

	@GenModel(documentation="InventoryItem")
	InventoryItem = 150;

	@GenModel(documentation="InventoryReport")
	InventoryReport = 151;

	@GenModel(documentation="Invoice")
	Invoice = 152;

	@GenModel(documentation="Library")
	Library = 153;

	@GenModel(documentation="Linkage")
	Linkage = 154;

	@GenModel(documentation="List")
	List = 155;

	@GenModel(documentation="Location")
	Location = 156;

	@GenModel(documentation="ManufacturedItemDefinition")
	ManufacturedItemDefinition = 157;

	@GenModel(documentation="Measure")
	Measure = 158;

	@GenModel(documentation="MeasureReport")
	MeasureReport = 159;

	@GenModel(documentation="Medication")
	Medication = 160;

	@GenModel(documentation="MedicationAdministration")
	MedicationAdministration = 161;

	@GenModel(documentation="MedicationDispense")
	MedicationDispense = 162;

	@GenModel(documentation="MedicationKnowledge")
	MedicationKnowledge = 163;

	@GenModel(documentation="MedicationRequest")
	MedicationRequest = 164;

	@GenModel(documentation="MedicationStatement")
	MedicationStatement = 165;

	@GenModel(documentation="MedicinalProductDefinition")
	MedicinalProductDefinition = 166;

	@GenModel(documentation="MessageDefinition")
	MessageDefinition = 167;

	@GenModel(documentation="MessageHeader")
	MessageHeader = 168;

	@GenModel(documentation="MetadataResource")
	MetadataResource = 169;

	@GenModel(documentation="MolecularSequence")
	MolecularSequence = 170;

	@GenModel(documentation="NamingSystem")
	NamingSystem = 171;

	@GenModel(documentation="NutritionIntake")
	NutritionIntake = 172;

	@GenModel(documentation="NutritionOrder")
	NutritionOrder = 173;

	@GenModel(documentation="NutritionProduct")
	NutritionProduct = 174;

	@GenModel(documentation="Observation")
	Observation = 175;

	@GenModel(documentation="ObservationDefinition")
	ObservationDefinition = 176;

	@GenModel(documentation="OperationDefinition")
	OperationDefinition = 177;

	@GenModel(documentation="OperationOutcome")
	OperationOutcome = 178;

	@GenModel(documentation="Organization")
	Organization = 179;

	@GenModel(documentation="OrganizationAffiliation")
	OrganizationAffiliation = 180;

	@GenModel(documentation="PackagedProductDefinition")
	PackagedProductDefinition = 181;

	@GenModel(documentation="Patient")
	Patient = 182;

	@GenModel(documentation="PaymentNotice")
	PaymentNotice = 183;

	@GenModel(documentation="PaymentReconciliation")
	PaymentReconciliation = 184;

	@GenModel(documentation="Permission")
	Permission = 185;

	@GenModel(documentation="Person")
	Person = 186;

	@GenModel(documentation="PlanDefinition")
	PlanDefinition = 187;

	@GenModel(documentation="Practitioner")
	Practitioner = 188;

	@GenModel(documentation="PractitionerRole")
	PractitionerRole = 189;

	@GenModel(documentation="Procedure")
	Procedure = 190;

	@GenModel(documentation="Provenance")
	Provenance = 191;

	@GenModel(documentation="Questionnaire")
	Questionnaire = 192;

	@GenModel(documentation="QuestionnaireResponse")
	QuestionnaireResponse = 193;

	@GenModel(documentation="RegulatedAuthorization")
	RegulatedAuthorization = 194;

	@GenModel(documentation="RelatedPerson")
	RelatedPerson = 195;

	@GenModel(documentation="RequestOrchestration")
	RequestOrchestration = 196;

	@GenModel(documentation="Requirements")
	Requirements = 197;

	@GenModel(documentation="ResearchStudy")
	ResearchStudy = 198;

	@GenModel(documentation="ResearchSubject")
	ResearchSubject = 199;

	@GenModel(documentation="RiskAssessment")
	RiskAssessment = 200;

	@GenModel(documentation="Schedule")
	Schedule = 201;

	@GenModel(documentation="SearchParameter")
	SearchParameter = 202;

	@GenModel(documentation="ServiceRequest")
	ServiceRequest = 203;

	@GenModel(documentation="Slot")
	Slot = 204;

	@GenModel(documentation="Specimen")
	Specimen = 205;

	@GenModel(documentation="SpecimenDefinition")
	SpecimenDefinition = 206;

	@GenModel(documentation="StructureDefinition")
	StructureDefinition = 207;

	@GenModel(documentation="StructureMap")
	StructureMap = 208;

	@GenModel(documentation="Subscription")
	Subscription = 209;

	@GenModel(documentation="SubscriptionStatus")
	SubscriptionStatus = 210;

	@GenModel(documentation="SubscriptionTopic")
	SubscriptionTopic = 211;

	@GenModel(documentation="Substance")
	Substance = 212;

	@GenModel(documentation="SubstanceDefinition")
	SubstanceDefinition = 213;

	@GenModel(documentation="SubstanceNucleicAcid")
	SubstanceNucleicAcid = 214;

	@GenModel(documentation="SubstancePolymer")
	SubstancePolymer = 215;

	@GenModel(documentation="SubstanceProtein")
	SubstanceProtein = 216;

	@GenModel(documentation="SubstanceReferenceInformation")
	SubstanceReferenceInformation = 217;

	@GenModel(documentation="SubstanceSourceMaterial")
	SubstanceSourceMaterial = 218;

	@GenModel(documentation="SupplyDelivery")
	SupplyDelivery = 219;

	@GenModel(documentation="SupplyRequest")
	SupplyRequest = 220;

	@GenModel(documentation="Task")
	Task = 221;

	@GenModel(documentation="TerminologyCapabilities")
	TerminologyCapabilities = 222;

	@GenModel(documentation="TestPlan")
	TestPlan = 223;

	@GenModel(documentation="TestReport")
	TestReport = 224;

	@GenModel(documentation="TestScript")
	TestScript = 225;

	@GenModel(documentation="Transport")
	Transport = 226;

	@GenModel(documentation="ValueSet")
	ValueSet = 227;

	@GenModel(documentation="VerificationResult")
	VerificationResult = 228;

	@GenModel(documentation="VisionPrescription")
	VisionPrescription = 229;

	@GenModel(documentation="Parameters")
	Parameters = 230;
}

@ExtendedMetaData(name="FHIRTypesEnum:Object", baseType="FHIRTypesEnum")
datatype FHIRTypesEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="FHIRVersion", kind="elementOnly")
class FHIRVersion extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr FHIRVersionEnum value;
}

@ExtendedMetaData(name="FHIRVersionEnum")
enum FHIRVersionEnum {

	@GenModel(documentation="0.01")
	_001 = 0;

	@GenModel(documentation="0.05")
	_005 = 1;

	@GenModel(documentation="0.06")
	_006 = 2;

	@GenModel(documentation="0.11")
	_011 = 3;

	@GenModel(documentation="0.0")
	_00 = 4;

	@GenModel(documentation="0.0.80")
	_0080 = 5;

	@GenModel(documentation="0.0.81")
	_0081 = 6;

	@GenModel(documentation="0.0.82")
	_0082 = 7;

	@GenModel(documentation="0.4")
	_04 = 8;

	@GenModel(documentation="0.4.0")
	_040 = 9;

	@GenModel(documentation="0.5")
	_05 = 10;

	@GenModel(documentation="0.5.0")
	_050 = 11;

	@GenModel(documentation="1.0")
	_10 = 12;

	@GenModel(documentation="1.0.0")
	_100 = 13;

	@GenModel(documentation="1.0.1")
	_101 = 14;

	@GenModel(documentation="1.0.2")
	_102 = 15;

	@GenModel(documentation="1.1")
	_11 = 16;

	@GenModel(documentation="1.1.0")
	_110 = 17;

	@GenModel(documentation="1.4")
	_14 = 18;

	@GenModel(documentation="1.4.0")
	_140 = 19;

	@GenModel(documentation="1.6")
	_16 = 20;

	@GenModel(documentation="1.6.0")
	_160 = 21;

	@GenModel(documentation="1.8")
	_18 = 22;

	@GenModel(documentation="1.8.0")
	_180 = 23;

	@GenModel(documentation="3.0")
	_30 = 24;

	@GenModel(documentation="3.0.0")
	_300 = 25;

	@GenModel(documentation="3.0.1")
	_301 = 26;

	@GenModel(documentation="3.0.2")
	_302 = 27;

	@GenModel(documentation="3.3")
	_33 = 28;

	@GenModel(documentation="3.3.0")
	_330 = 29;

	@GenModel(documentation="3.5")
	_35 = 30;

	@GenModel(documentation="3.5.0")
	_350 = 31;

	@GenModel(documentation="4.0")
	_40 = 32;

	@GenModel(documentation="4.0.0")
	_400 = 33;

	@GenModel(documentation="4.0.1")
	_401 = 34;

	@GenModel(documentation="4.1")
	_41 = 35;

	@GenModel(documentation="4.1.0")
	_410 = 36;

	@GenModel(documentation="4.2")
	_42 = 37;

	@GenModel(documentation="4.2.0")
	_420 = 38;

	@GenModel(documentation="4.3")
	_43 = 39;

	@GenModel(documentation="4.3.0")
	_430 = 40;

	@GenModel(documentation="4.3.0-cibuild")
	_430Cibuild = 41;

	@GenModel(documentation="4.3.0-snapshot1")
	_430Snapshot1 = 42;

	@GenModel(documentation="4.4")
	_44 = 43;

	@GenModel(documentation="4.4.0")
	_440 = 44;

	@GenModel(documentation="4.5")
	_45 = 45;

	@GenModel(documentation="4.5.0")
	_450 = 46;

	@GenModel(documentation="4.6")
	_46 = 47;

	@GenModel(documentation="4.6.0")
	_460 = 48;

	@GenModel(documentation="5.0")
	_50 = 49;

	@GenModel(documentation="5.0.0")
	_500 = 50;

	@GenModel(documentation="5.0.0-cibuild")
	_500Cibuild = 51;

	@GenModel(documentation="5.0.0-snapshot1")
	_500Snapshot1 = 52;

	@GenModel(documentation="5.0.0-snapshot2")
	_500Snapshot2 = 53;

	@GenModel(documentation="5.0.0-ballot")
	_500Ballot = 54;

	@GenModel(documentation="5.0.0-snapshot3")
	_500Snapshot3 = 55;

	@GenModel(documentation="5.0.0-draft-final")
	_500DraftFinal = 56;
}

@ExtendedMetaData(name="FHIRVersionEnum:Object", baseType="FHIRVersionEnum")
datatype FHIRVersionEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="FilterOperator", kind="elementOnly")
class FilterOperator extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr FilterOperatorEnum value;
}

@ExtendedMetaData(name="FilterOperatorEnum")
enum FilterOperatorEnum {

	@GenModel(documentation="Equals")
	_ = 0;

	@GenModel(documentation="Is A (by subsumption)")
	isA = 1;

	@GenModel(documentation="Descendent Of (by subsumption)")
	descendentOf = 2;

	@GenModel(documentation="Not (Is A) (by subsumption)")
	isNotA = 3;

	@GenModel(documentation="Regular Expression")
	regex = 4;

	@GenModel(documentation="In Set")
	in = 5;

	@GenModel(documentation="Not in Set")
	notIn = 6;

	@GenModel(documentation="Generalizes (by Subsumption)")
	generalizes = 7;

	@GenModel(documentation="Child Of")
	childOf = 8;

	@GenModel(documentation="Descendent Leaf")
	descendentLeaf = 9;

	@GenModel(documentation="Exists")
	exists = 10;
}

@ExtendedMetaData(name="FilterOperatorEnum:Object", baseType="FilterOperatorEnum")
datatype FilterOperatorEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="FinancialResourceStatusCodes", kind="elementOnly")
class FinancialResourceStatusCodes extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr FinancialResourceStatusCodesEnum value;
}

@ExtendedMetaData(name="FinancialResourceStatusCodesEnum")
enum FinancialResourceStatusCodesEnum {

	@GenModel(documentation="Active")
	active = 0;

	@GenModel(documentation="Cancelled")
	cancelled = 1;

	@GenModel(documentation="Draft")
	draft = 2;

	@GenModel(documentation="Entered in Error")
	enteredInError = 3;
}

@ExtendedMetaData(name="FinancialResourceStatusCodesEnum:Object", baseType="FinancialResourceStatusCodesEnum")
datatype FinancialResourceStatusCodesEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="Prospective warnings of potential issues when providing care to the patient.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Flag", kind="elementOnly")
class Flag extends DomainResource {

	@GenModel(documentation="Business identifiers assigned to this flag by the performer or other systems which remain constant as the resource is updated and propagates from server to server.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Supports basic workflow.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val FlagStatus[1] status;

	@GenModel(documentation="Allows a flag to be divided into different categories like clinical, administrative etc. Intended to be used as a means of filtering which flags are displayed to particular user or in a given context.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] category;

	@GenModel(documentation="The coded value or textual component of the flag to display to the user.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] code;

	@GenModel(documentation="The patient, related person, location, group, organization, or practitioner etc. this is about record this flag is associated with.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference[1] subject;

	@GenModel(documentation="The period of time from the activation of the flag to inactivation of the flag. If the flag is active, the end of the period should be unspecified.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;

	@GenModel(documentation="This alert is only relevant during the encounter.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@GenModel(documentation="The person, organization or device that created the flag.")
	@ExtendedMetaData(kind="element", name="author", namespace="##targetNamespace")
	!resolve val Reference author;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="FlagStatus", kind="elementOnly")
class FlagStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr FlagStatusEnum value;
}

@ExtendedMetaData(name="FlagStatusEnum")
enum FlagStatusEnum {

	@GenModel(documentation="Active")
	active = 0;

	@GenModel(documentation="Inactive")
	inactive = 1;

	@GenModel(documentation="Entered in Error")
	enteredInError = 2;
}

@ExtendedMetaData(name="FlagStatusEnum:Object", baseType="FlagStatusEnum")
datatype FlagStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="This resource describes a product or service that is available through a program and includes the conditions and constraints of availability.  All of the information in this resource is specific to the inclusion of the item in the formulary and is not inherent to the item itself.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="FormularyItem", kind="elementOnly")
class FormularyItem extends DomainResource {

	@GenModel(documentation="Business identifier for this formulary item.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="A code (or set of codes) that specify the product or service that is identified by this formulary item.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@GenModel(documentation="The validity about the information of the formulary item and not of the underlying product or service itself.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val FormularyItemStatusCodes status;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="FormularyItemStatusCodes", kind="elementOnly")
class FormularyItemStatusCodes extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr FormularyItemStatusCodesEnum value;
}

@ExtendedMetaData(name="FormularyItemStatusCodesEnum")
enum FormularyItemStatusCodesEnum {

	@GenModel(documentation="Active")
	active = 0;

	@GenModel(documentation="Entered in Error")
	enteredInError = 1;

	@GenModel(documentation="Inactive")
	inactive = 2;
}

@ExtendedMetaData(name="FormularyItemStatusCodesEnum:Object", baseType="FormularyItemStatusCodesEnum")
datatype FormularyItemStatusCodesEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A GenomicStudy is a set of analyses performed to analyze and generate genomic data.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="GenomicStudy", kind="elementOnly")
class GenomicStudy extends DomainResource {

	@GenModel(documentation="Identifiers for this genomic study.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The status of the genomic study.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val GenomicStudyStatus[1] status;

	@GenModel(documentation="The type of the study, e.g., Familial variant segregation, Functional variation detection, or Gene expression profiling.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] type;

	@GenModel(documentation="The primary subject of the genomic study.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference[1] subject;

	@GenModel(documentation="The healthcare event with which this genomics study is associated.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@GenModel(documentation="When the genomic study was started.")
	@ExtendedMetaData(kind="element", name="startDate", namespace="##targetNamespace")
	!resolve val DateTime startDate;

	@GenModel(documentation="Event resources that the genomic study is based on.")
	@ExtendedMetaData(kind="element", name="basedOn", namespace="##targetNamespace")
	!resolve val Reference[*] basedOn;

	@GenModel(documentation="Healthcare professional who requested or referred the genomic study.")
	@ExtendedMetaData(kind="element", name="referrer", namespace="##targetNamespace")
	!resolve val Reference referrer;

	@GenModel(documentation="Healthcare professionals who interpreted the genomic study.")
	@ExtendedMetaData(kind="element", name="interpreter", namespace="##targetNamespace")
	!resolve val Reference[*] interpreter;

	@GenModel(documentation="Why the genomic study was performed.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val CodeableReference[*] reason;

	@GenModel(documentation="The defined protocol that describes the study.")
	@ExtendedMetaData(kind="element", name="instantiatesCanonical", namespace="##targetNamespace")
	!resolve val Canonical instantiatesCanonical;

	@GenModel(documentation="The URL pointing to an externally maintained protocol that describes the study.")
	@ExtendedMetaData(kind="element", name="instantiatesUri", namespace="##targetNamespace")
	!resolve val Uri instantiatesUri;

	@GenModel(documentation="Comments related to the genomic study.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="Description of the genomic study.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The details about a specific analysis that was performed in this GenomicStudy.")
	@ExtendedMetaData(kind="element", name="analysis", namespace="##targetNamespace")
	!resolve val GenomicStudyAnalysis[*] analysis;
}

@GenModel(documentation="A GenomicStudy is a set of analyses performed to analyze and generate genomic data.")
@ExtendedMetaData(name="GenomicStudy.Analysis", kind="elementOnly")
class GenomicStudyAnalysis extends BackboneElement {

	@GenModel(documentation="Identifiers for the analysis event.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Type of the methods used in the analysis, e.g., Fluorescence in situ hybridization (FISH), Karyotyping, or Microsatellite instability testing (MSI).")
	@ExtendedMetaData(kind="element", name="methodType", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] methodType;

	@GenModel(documentation="Type of the genomic changes studied in the analysis, e.g., DNA, RNA, or amino acid change.")
	@ExtendedMetaData(kind="element", name="changeType", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] changeType;

	@GenModel(documentation="The reference genome build that is used in this analysis.")
	@ExtendedMetaData(kind="element", name="genomeBuild", namespace="##targetNamespace")
	!resolve val CodeableConcept genomeBuild;

	@GenModel(documentation="The defined protocol that describes the analysis.")
	@ExtendedMetaData(kind="element", name="instantiatesCanonical", namespace="##targetNamespace")
	!resolve val Canonical instantiatesCanonical;

	@GenModel(documentation="The URL pointing to an externally maintained protocol that describes the analysis.")
	@ExtendedMetaData(kind="element", name="instantiatesUri", namespace="##targetNamespace")
	!resolve val Uri instantiatesUri;

	@GenModel(documentation="Name of the analysis event (human friendly).")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="The focus of a genomic analysis when it is not the patient of record representing something or someone associated with the patient such as a spouse, parent, child, or sibling. For example, in trio testing, the GenomicStudy.subject would be the child (proband) and the GenomicStudy.analysis.focus of a specific analysis would be the parent.")
	@ExtendedMetaData(kind="element", name="focus", namespace="##targetNamespace")
	!resolve val Reference[*] focus;

	@GenModel(documentation="The specimen used in the analysis event.")
	@ExtendedMetaData(kind="element", name="specimen", namespace="##targetNamespace")
	!resolve val Reference[*] specimen;

	@GenModel(documentation="The date of the analysis event.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="Any notes capture with the analysis event.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="The protocol that was performed for the analysis event.")
	@ExtendedMetaData(kind="element", name="protocolPerformed", namespace="##targetNamespace")
	!resolve val Reference protocolPerformed;

	@GenModel(documentation="The genomic regions to be studied in the analysis (BED file).")
	@ExtendedMetaData(kind="element", name="regionsStudied", namespace="##targetNamespace")
	!resolve val Reference[*] regionsStudied;

	@GenModel(documentation="Genomic regions actually called in the analysis event (BED file).")
	@ExtendedMetaData(kind="element", name="regionsCalled", namespace="##targetNamespace")
	!resolve val Reference[*] regionsCalled;

	@GenModel(documentation="Inputs for the analysis event.")
	@ExtendedMetaData(kind="element", name="input", namespace="##targetNamespace")
	!resolve val GenomicStudyInput[*] input;

	@GenModel(documentation="Outputs for the analysis event.")
	@ExtendedMetaData(kind="element", name="output", namespace="##targetNamespace")
	!resolve val GenomicStudyOutput[*] output;

	@GenModel(documentation="Performer for the analysis event.")
	@ExtendedMetaData(kind="element", name="performer", namespace="##targetNamespace")
	!resolve val GenomicStudyPerformer[*] performer;

	@GenModel(documentation="Devices used for the analysis (e.g., instruments, software), with settings and parameters.")
	@ExtendedMetaData(kind="element", name="device", namespace="##targetNamespace")
	!resolve val GenomicStudyDevice[*] device;
}

@GenModel(documentation="A GenomicStudy is a set of analyses performed to analyze and generate genomic data.")
@ExtendedMetaData(name="GenomicStudy.Device", kind="elementOnly")
class GenomicStudyDevice extends BackboneElement {

	@GenModel(documentation="Device used for the analysis.")
	@ExtendedMetaData(kind="element", name="device", namespace="##targetNamespace")
	!resolve val Reference device;

	@GenModel(documentation="Specific function for the device used for the analysis.")
	@ExtendedMetaData(kind="element", name="function", namespace="##targetNamespace")
	!resolve val CodeableConcept function;
}

@GenModel(documentation="A GenomicStudy is a set of analyses performed to analyze and generate genomic data.")
@ExtendedMetaData(name="GenomicStudy.Input", kind="elementOnly")
class GenomicStudyInput extends BackboneElement {

	@GenModel(documentation="File containing input data.")
	@ExtendedMetaData(kind="element", name="file", namespace="##targetNamespace")
	!resolve val Reference file;

	@GenModel(documentation="Type of input data, e.g., BAM, CRAM, or FASTA.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@ExtendedMetaData(kind="element", name="generatedByIdentifier", namespace="##targetNamespace")
	!resolve val Identifier generatedByIdentifier;

	@ExtendedMetaData(kind="element", name="generatedByReference", namespace="##targetNamespace")
	!resolve val Reference generatedByReference;
}

@GenModel(documentation="A GenomicStudy is a set of analyses performed to analyze and generate genomic data.")
@ExtendedMetaData(name="GenomicStudy.Output", kind="elementOnly")
class GenomicStudyOutput extends BackboneElement {

	@GenModel(documentation="File containing output data.")
	@ExtendedMetaData(kind="element", name="file", namespace="##targetNamespace")
	!resolve val Reference file;

	@GenModel(documentation="Type of output data, e.g., VCF, MAF, or BAM.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;
}

@GenModel(documentation="A GenomicStudy is a set of analyses performed to analyze and generate genomic data.")
@ExtendedMetaData(name="GenomicStudy.Performer", kind="elementOnly")
class GenomicStudyPerformer extends BackboneElement {

	@GenModel(documentation="The organization, healthcare professional, or others who participated in performing this analysis.")
	@ExtendedMetaData(kind="element", name="actor", namespace="##targetNamespace")
	!resolve val Reference actor;

	@GenModel(documentation="Role of the actor for this analysis.")
	@ExtendedMetaData(kind="element", name="role", namespace="##targetNamespace")
	!resolve val CodeableConcept role;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="GenomicStudyStatus", kind="elementOnly")
class GenomicStudyStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr GenomicStudyStatusEnum value;
}

@ExtendedMetaData(name="GenomicStudyStatusEnum")
enum GenomicStudyStatusEnum {

	@GenModel(documentation="Registered")
	registered = 0;

	@GenModel(documentation="Available")
	available = 1;

	@GenModel(documentation="Cancelled")
	cancelled = 2;

	@GenModel(documentation="Entered in Error")
	enteredInError = 3;

	@GenModel(documentation="Unknown")
	unknown = 4;
}

@ExtendedMetaData(name="GenomicStudyStatusEnum:Object", baseType="GenomicStudyStatusEnum")
datatype GenomicStudyStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Goal", kind="elementOnly")
class Goal extends DomainResource {

	@GenModel(documentation="Business identifiers assigned to this goal by the performer or other systems which remain constant as the resource is updated and propagates from server to server.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The state of the goal throughout its lifecycle.")
	@ExtendedMetaData(kind="element", name="lifecycleStatus", namespace="##targetNamespace")
	!resolve val GoalLifecycleStatus[1] lifecycleStatus;

	@GenModel(documentation="Describes the progression, or lack thereof, towards the goal against the target.")
	@ExtendedMetaData(kind="element", name="achievementStatus", namespace="##targetNamespace")
	!resolve val CodeableConcept achievementStatus;

	@GenModel(documentation="Indicates a category the goal falls within.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] category;

	@GenModel(documentation="After meeting the goal, ongoing activity is needed to sustain the goal objective.")
	@ExtendedMetaData(kind="element", name="continuous", namespace="##targetNamespace")
	!resolve val Boolean continuous;

	@GenModel(documentation="Identifies the mutually agreed level of importance associated with reaching/sustaining the goal.")
	@ExtendedMetaData(kind="element", name="priority", namespace="##targetNamespace")
	!resolve val CodeableConcept priority;

	@GenModel(documentation="Human-readable and/or coded description of a specific desired objective of care, such as \"control blood pressure\" or \"negotiate an obstacle course\" or \"dance with child at wedding\".")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] description;

	@GenModel(documentation="Identifies the patient, group or organization for whom the goal is being established.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference[1] subject;

	@ExtendedMetaData(kind="element", name="startDate", namespace="##targetNamespace")
	!resolve val Date startDate;

	@ExtendedMetaData(kind="element", name="startCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept startCodeableConcept;

	@GenModel(documentation="Indicates what should be done by when.")
	@ExtendedMetaData(kind="element", name="target", namespace="##targetNamespace")
	!resolve val GoalTarget[*] target;

	@GenModel(documentation="Identifies when the current status.  I.e. When initially created, when achieved, when cancelled, etc.")
	@ExtendedMetaData(kind="element", name="statusDate", namespace="##targetNamespace")
	!resolve val Date statusDate;

	@GenModel(documentation="Captures the reason for the current status.")
	@ExtendedMetaData(kind="element", name="statusReason", namespace="##targetNamespace")
	!resolve val String statusReason;

	@GenModel(documentation="Indicates whose goal this is - patient goal, practitioner goal, etc.")
	@ExtendedMetaData(kind="element", name="source", namespace="##targetNamespace")
	!resolve val Reference source;

	@GenModel(documentation="The identified conditions and other health record elements that are intended to be addressed by the goal.")
	@ExtendedMetaData(kind="element", name="addresses", namespace="##targetNamespace")
	!resolve val Reference[*] addresses;

	@GenModel(documentation="Any comments related to the goal.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="Identifies the change (or lack of change) at the point when the status of the goal is assessed.")
	@ExtendedMetaData(kind="element", name="outcome", namespace="##targetNamespace")
	!resolve val CodeableReference[*] outcome;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="GoalLifecycleStatus", kind="elementOnly")
class GoalLifecycleStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr GoalLifecycleStatusEnum value;
}

@ExtendedMetaData(name="GoalLifecycleStatusEnum")
enum GoalLifecycleStatusEnum {

	@GenModel(documentation="Proposed")
	proposed = 0;

	@GenModel(documentation="Planned")
	planned = 1;

	@GenModel(documentation="Accepted")
	accepted = 2;

	@GenModel(documentation="Active")
	active = 3;

	@GenModel(documentation="On Hold")
	onHold = 4;

	@GenModel(documentation="Completed")
	completed = 5;

	@GenModel(documentation="Cancelled")
	cancelled = 6;

	@GenModel(documentation="Entered in Error")
	enteredInError = 7;

	@GenModel(documentation="Rejected")
	rejected = 8;
}

@ExtendedMetaData(name="GoalLifecycleStatusEnum:Object", baseType="GoalLifecycleStatusEnum")
datatype GoalLifecycleStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.")
@ExtendedMetaData(name="Goal.Target", kind="elementOnly")
class GoalTarget extends BackboneElement {

	@GenModel(documentation="The parameter whose value is being tracked, e.g. body weight, blood pressure, or hemoglobin A1c level.")
	@ExtendedMetaData(kind="element", name="measure", namespace="##targetNamespace")
	!resolve val CodeableConcept measure;

	@ExtendedMetaData(kind="element", name="detailQuantity", namespace="##targetNamespace")
	!resolve val Quantity detailQuantity;

	@ExtendedMetaData(kind="element", name="detailRange", namespace="##targetNamespace")
	!resolve val Range detailRange;

	@ExtendedMetaData(kind="element", name="detailCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept detailCodeableConcept;

	@ExtendedMetaData(kind="element", name="detailString", namespace="##targetNamespace")
	!resolve val String detailString;

	@ExtendedMetaData(kind="element", name="detailBoolean", namespace="##targetNamespace")
	!resolve val Boolean detailBoolean;

	@ExtendedMetaData(kind="element", name="detailInteger", namespace="##targetNamespace")
	!resolve val Integer detailInteger;

	@ExtendedMetaData(kind="element", name="detailRatio", namespace="##targetNamespace")
	!resolve val Ratio detailRatio;

	@ExtendedMetaData(kind="element", name="dueDate", namespace="##targetNamespace")
	!resolve val Date dueDate;

	@ExtendedMetaData(kind="element", name="dueDuration", namespace="##targetNamespace")
	!resolve val Duration dueDuration;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="GraphCompartmentRule", kind="elementOnly")
class GraphCompartmentRule extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr GraphCompartmentRuleEnum value;
}

@ExtendedMetaData(name="GraphCompartmentRuleEnum")
enum GraphCompartmentRuleEnum {

	@GenModel(documentation="Identical")
	identical = 0;

	@GenModel(documentation="Matching")
	matching = 1;

	@GenModel(documentation="Different")
	different = 2;

	@GenModel(documentation="Custom")
	custom = 3;
}

@ExtendedMetaData(name="GraphCompartmentRuleEnum:Object", baseType="GraphCompartmentRuleEnum")
datatype GraphCompartmentRuleEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="GraphCompartmentUse", kind="elementOnly")
class GraphCompartmentUse extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr GraphCompartmentUseEnum value;
}

@ExtendedMetaData(name="GraphCompartmentUseEnum")
enum GraphCompartmentUseEnum {

	@GenModel(documentation="Where")
	where = 0;

	@GenModel(documentation="requires")
	requires = 1;
}

@ExtendedMetaData(name="GraphCompartmentUseEnum:Object", baseType="GraphCompartmentUseEnum")
datatype GraphCompartmentUseEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A formal computable definition of a graph of resources - that is, a coherent set of resources that form a graph by following references. The Graph Definition resource defines a set and makes rules about the set.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="GraphDefinition", kind="elementOnly")
class GraphDefinition extends CanonicalResource {

	@GenModel(documentation="An absolute URI that is used to identify this graph definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this graph definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the graph definition is stored on different servers.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri url;

	@GenModel(documentation="A formal identifier that is used to identify this GraphDefinition when it is represented in other formats, or referenced in a specification, model, design or an instance.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The identifier that is used to identify this version of the graph definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the graph definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@ExtendedMetaData(kind="element", name="versionAlgorithmString", namespace="##targetNamespace")
	!resolve val String versionAlgorithmString;

	@ExtendedMetaData(kind="element", name="versionAlgorithmCoding", namespace="##targetNamespace")
	!resolve val Coding versionAlgorithmCoding;

	@GenModel(documentation="A natural language name identifying the graph definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String[1] name;

	@GenModel(documentation="A short, descriptive, user-friendly title for the capability statement.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="The status of this graph definition. Enables tracking the life-cycle of the content.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="A Boolean value to indicate that this graph definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.")
	@ExtendedMetaData(kind="element", name="experimental", namespace="##targetNamespace")
	!resolve val Boolean experimental;

	@GenModel(documentation="The date  (and optionally time) when the graph definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the graph definition changes.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="The name of the organization or individual responsible for the release and ongoing maintenance of the graph definition.")
	@ExtendedMetaData(kind="element", name="publisher", namespace="##targetNamespace")
	!resolve val String publisher;

	@GenModel(documentation="Contact details to assist a user in finding and communicating with the publisher.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactDetail[*] contact;

	@GenModel(documentation="A free text natural language description of the graph definition from a consumer's perspective.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate graph definition instances.")
	@ExtendedMetaData(kind="element", name="useContext", namespace="##targetNamespace")
	!resolve val UsageContext[*] useContext;

	@GenModel(documentation="A legal or geographic region in which the graph definition is intended to be used.")
	@ExtendedMetaData(kind="element", name="jurisdiction", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] jurisdiction;

	@GenModel(documentation="Explanation of why this graph definition is needed and why it has been designed as it has.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val Markdown purpose;

	@GenModel(documentation="A copyright statement relating to the graph definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the graph definition.")
	@ExtendedMetaData(kind="element", name="copyright", namespace="##targetNamespace")
	!resolve val Markdown copyright;

	@GenModel(documentation="A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').")
	@ExtendedMetaData(kind="element", name="copyrightLabel", namespace="##targetNamespace")
	!resolve val String copyrightLabel;

	@GenModel(documentation="The Node at which instances of this graph start. If there is no nominated start, the graph can start at any of the nodes.")
	@ExtendedMetaData(kind="element", name="start", namespace="##targetNamespace")
	!resolve val Id start;

	@GenModel(documentation="Potential target for the link.")
	@ExtendedMetaData(kind="element", name="node", namespace="##targetNamespace")
	!resolve val GraphDefinitionNode[*] node;

	@GenModel(documentation="Links this graph makes rules about.")
	@ExtendedMetaData(kind="element", name="link", namespace="##targetNamespace")
	!resolve val GraphDefinitionLink[*] link;
}

@GenModel(documentation="A formal computable definition of a graph of resources - that is, a coherent set of resources that form a graph by following references. The Graph Definition resource defines a set and makes rules about the set.")
@ExtendedMetaData(name="GraphDefinition.Compartment", kind="elementOnly")
class GraphDefinitionCompartment extends BackboneElement {

	@GenModel(documentation="Defines how the compartment rule is used - whether it it is used to test whether resources are subject to the rule, or whether it is a rule that must be followed.")
	@ExtendedMetaData(kind="element", name="use", namespace="##targetNamespace")
	!resolve val GraphCompartmentUse[1] use;

	@GenModel(documentation="identical | matching | different | no-rule | custom.")
	@ExtendedMetaData(kind="element", name="rule", namespace="##targetNamespace")
	!resolve val GraphCompartmentRule[1] rule;

	@GenModel(documentation="Identifies the compartment.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CompartmentType[1] code;

	@GenModel(documentation="Custom rule, as a FHIRPath expression.")
	@ExtendedMetaData(kind="element", name="expression", namespace="##targetNamespace")
	!resolve val String expression;

	@GenModel(documentation="Documentation for FHIRPath expression.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val String description;
}

@GenModel(documentation="A formal computable definition of a graph of resources - that is, a coherent set of resources that form a graph by following references. The Graph Definition resource defines a set and makes rules about the set.")
@ExtendedMetaData(name="GraphDefinition.Link", kind="elementOnly")
class GraphDefinitionLink extends BackboneElement {

	@GenModel(documentation="Information about why this link is of interest in this graph definition.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val String description;

	@GenModel(documentation="Minimum occurrences for this link.")
	@ExtendedMetaData(kind="element", name="min", namespace="##targetNamespace")
	!resolve val Integer min;

	@GenModel(documentation="Maximum occurrences for this link.")
	@ExtendedMetaData(kind="element", name="max", namespace="##targetNamespace")
	!resolve val String max;

	@GenModel(documentation="The source node for this link.")
	@ExtendedMetaData(kind="element", name="sourceId", namespace="##targetNamespace")
	!resolve val Id[1] sourceId;

	@GenModel(documentation="A FHIRPath expression that identifies one of FHIR References to other resources.")
	@ExtendedMetaData(kind="element", name="path", namespace="##targetNamespace")
	!resolve val String path;

	@GenModel(documentation="Which slice (if profiled).")
	@ExtendedMetaData(kind="element", name="sliceName", namespace="##targetNamespace")
	!resolve val String sliceName;

	@GenModel(documentation="The target node for this link.")
	@ExtendedMetaData(kind="element", name="targetId", namespace="##targetNamespace")
	!resolve val Id[1] targetId;

	@GenModel(documentation="A set of parameters to look up.")
	@ExtendedMetaData(kind="element", name="params", namespace="##targetNamespace")
	!resolve val String params;

	@GenModel(documentation="Compartment Consistency Rules.")
	@ExtendedMetaData(kind="element", name="compartment", namespace="##targetNamespace")
	!resolve val GraphDefinitionCompartment[*] compartment;
}

@GenModel(documentation="A formal computable definition of a graph of resources - that is, a coherent set of resources that form a graph by following references. The Graph Definition resource defines a set and makes rules about the set.")
@ExtendedMetaData(name="GraphDefinition.Node", kind="elementOnly")
class GraphDefinitionNode extends BackboneElement {

	@GenModel(documentation="Internal ID of node - target for link references.")
	@ExtendedMetaData(kind="element", name="nodeId", namespace="##targetNamespace")
	!resolve val Id[1] nodeId;

	@GenModel(documentation="Information about why this node is of interest in this graph definition.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val String description;

	@GenModel(documentation="Type of resource this link refers to.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val VersionIndependentResourceTypesAll[1] type;

	@GenModel(documentation="Profile for the target resource.")
	@ExtendedMetaData(kind="element", name="profile", namespace="##targetNamespace")
	!resolve val Canonical profile;
}

@GenModel(documentation="Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively, and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Group", kind="elementOnly")
class Group extends DomainResource {

	@GenModel(documentation="Business identifiers assigned to this participant by one of the applications involved.  These identifiers remain constant as the resource is updated and propagates from server to server.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Indicates whether the record for the group is available for use or is merely being retained for historical purposes.")
	@ExtendedMetaData(kind="element", name="active", namespace="##targetNamespace")
	!resolve val Boolean active;

	@GenModel(documentation="Identifies the broad classification of the kind of resources the group includes.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val GroupType[1] type;

	@GenModel(documentation="Basis for membership in the Group:

* 'definitional': The Group.characteristics specified are both necessary and sufficient to determine membership. All entities that meet the criteria are considered to be members of the group, whether referenced by the group or not. If members are present, they are individuals that happen to be known as meeting the Group.characteristics. The list cannot be presumed to be complete.
* 'enumerated': The Group.characteristics are necessary but not sufficient to determine membership. Membership is determined by being listed as one of the Group.member.")
	@ExtendedMetaData(kind="element", name="membership", namespace="##targetNamespace")
	!resolve val GroupMembershipBasis[1] membership;

	@GenModel(documentation="Provides a specific type of resource the group includes; e.g. \"cow\", \"syringe\", etc.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@GenModel(documentation="A label assigned to the group for human identification and communication.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="Explanation of what the group represents and how it is intended to be used.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="A count of the number of resource instances that are part of the group.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val UnsignedInt quantity;

	@GenModel(documentation="Entity responsible for defining and maintaining Group characteristics and/or registered members.")
	@ExtendedMetaData(kind="element", name="managingEntity", namespace="##targetNamespace")
	!resolve val Reference managingEntity;

	@GenModel(documentation="Identifies traits whose presence r absence is shared by members of the group.")
	@ExtendedMetaData(kind="element", name="characteristic", namespace="##targetNamespace")
	!resolve val GroupCharacteristic[*] characteristic;

	@GenModel(documentation="Identifies the resource instances that are members of the group.")
	@ExtendedMetaData(kind="element", name="member", namespace="##targetNamespace")
	!resolve val GroupMember[*] member;
}

@GenModel(documentation="Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively, and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization.")
@ExtendedMetaData(name="Group.Characteristic", kind="elementOnly")
class GroupCharacteristic extends BackboneElement {

	@GenModel(documentation="A code that identifies the kind of trait being asserted.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] code;

	@ExtendedMetaData(kind="element", name="valueCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept valueCodeableConcept;

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueRange", namespace="##targetNamespace")
	!resolve val Range valueRange;

	@ExtendedMetaData(kind="element", name="valueReference", namespace="##targetNamespace")
	!resolve val Reference valueReference;

	@GenModel(documentation="If true, indicates the characteristic is one that is NOT held by members of the group.")
	@ExtendedMetaData(kind="element", name="exclude", namespace="##targetNamespace")
	!resolve val Boolean[1] exclude;

	@GenModel(documentation="The period over which the characteristic is tested; e.g. the patient had an operation during the month of June.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;
}

@GenModel(documentation="Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively, and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization.")
@ExtendedMetaData(name="Group.Member", kind="elementOnly")
class GroupMember extends BackboneElement {

	@GenModel(documentation="A reference to the entity that is a member of the group. Must be consistent with Group.type. If the entity is another group, then the type must be the same.")
	@ExtendedMetaData(kind="element", name="entity", namespace="##targetNamespace")
	!resolve val Reference[1] entity;

	@GenModel(documentation="The period that the member was in the group, if known.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;

	@GenModel(documentation="A flag to indicate that the member is no longer in the group, but previously may have been a member.")
	@ExtendedMetaData(kind="element", name="inactive", namespace="##targetNamespace")
	!resolve val Boolean inactive;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="GroupMembershipBasis", kind="elementOnly")
class GroupMembershipBasis extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr GroupMembershipBasisEnum value;
}

@ExtendedMetaData(name="GroupMembershipBasisEnum")
enum GroupMembershipBasisEnum {

	@GenModel(documentation="Definitional")
	definitional = 0;

	@GenModel(documentation="Enumerated")
	enumerated = 1;
}

@ExtendedMetaData(name="GroupMembershipBasisEnum:Object", baseType="GroupMembershipBasisEnum")
datatype GroupMembershipBasisEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="GroupType", kind="elementOnly")
class GroupType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr GroupTypeEnum value;
}

@ExtendedMetaData(name="GroupTypeEnum")
enum GroupTypeEnum {

	@GenModel(documentation="Person")
	person = 0;

	@GenModel(documentation="Animal")
	animal = 1;

	@GenModel(documentation="Practitioner")
	practitioner = 2;

	@GenModel(documentation="Device")
	device = 3;

	@GenModel(documentation="CareTeam")
	careteam = 4;

	@GenModel(documentation="HealthcareService")
	healthcareservice = 5;

	@GenModel(documentation="Location")
	location = 6;

	@GenModel(documentation="Organization")
	organization = 7;

	@GenModel(documentation="RelatedPerson")
	relatedperson = 8;

	@GenModel(documentation="Specimen")
	specimen = 9;
}

@ExtendedMetaData(name="GroupTypeEnum:Object", baseType="GroupTypeEnum")
datatype GroupTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A guidance response is the formal response to a guidance request, including any output parameters returned by the evaluation, as well as the description of any proposed actions to be taken.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="GuidanceResponse", kind="elementOnly")
class GuidanceResponse extends DomainResource {

	@GenModel(documentation="The identifier of the request associated with this response. If an identifier was given as part of the request, it will be reproduced here to enable the requester to more easily identify the response in a multi-request scenario.")
	@ExtendedMetaData(kind="element", name="requestIdentifier", namespace="##targetNamespace")
	!resolve val Identifier requestIdentifier;

	@GenModel(documentation="Allows a service to provide  unique, business identifiers for the response.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@ExtendedMetaData(kind="element", name="moduleUri", namespace="##targetNamespace")
	!resolve val Uri moduleUri;

	@ExtendedMetaData(kind="element", name="moduleCanonical", namespace="##targetNamespace")
	!resolve val Canonical moduleCanonical;

	@ExtendedMetaData(kind="element", name="moduleCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept moduleCodeableConcept;

	@GenModel(documentation="The status of the response. If the evaluation is completed successfully, the status will indicate success. However, in order to complete the evaluation, the engine may require more information. In this case, the status will be data-required, and the response will contain a description of the additional required information. If the evaluation completed successfully, but the engine determines that a potentially more accurate response could be provided if more data was available, the status will be data-requested, and the response will contain a description of the additional requested information.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val GuidanceResponseStatus[1] status;

	@GenModel(documentation="The patient for which the request was processed.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference subject;

	@GenModel(documentation="The encounter during which this response was created or to which the creation of this record is tightly associated.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@GenModel(documentation="Indicates when the guidance response was processed.")
	@ExtendedMetaData(kind="element", name="occurrenceDateTime", namespace="##targetNamespace")
	!resolve val DateTime occurrenceDateTime;

	@GenModel(documentation="Provides a reference to the device that performed the guidance.")
	@ExtendedMetaData(kind="element", name="performer", namespace="##targetNamespace")
	!resolve val Reference performer;

	@GenModel(documentation="Describes the reason for the guidance response in coded or textual form, or Indicates the reason the request was initiated. This is typically provided as a parameter to the evaluation and echoed by the service, although for some use cases, such as subscription- or event-based scenarios, it may provide an indication of the cause for the response.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val CodeableReference[*] reason;

	@GenModel(documentation="Provides a mechanism to communicate additional information about the response.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="Messages resulting from the evaluation of the artifact or artifacts. As part of evaluating the request, the engine may produce informational or warning messages. These messages will be provided by this element.")
	@ExtendedMetaData(kind="element", name="evaluationMessage", namespace="##targetNamespace")
	!resolve val Reference evaluationMessage;

	@GenModel(documentation="The output parameters of the evaluation, if any. Many modules will result in the return of specific resources such as procedure or communication requests that are returned as part of the operation result. However, modules may define specific outputs that would be returned as the result of the evaluation, and these would be returned in this element.")
	@ExtendedMetaData(kind="element", name="outputParameters", namespace="##targetNamespace")
	!resolve val Reference outputParameters;

	@GenModel(documentation="The actions, if any, produced by the evaluation of the artifact.")
	@ExtendedMetaData(kind="element", name="result", namespace="##targetNamespace")
	!resolve val Reference[*] result;

	@GenModel(documentation="If the evaluation could not be completed due to lack of information, or additional information would potentially result in a more accurate response, this element will a description of the data required in order to proceed with the evaluation. A subsequent request to the service should include this data.")
	@ExtendedMetaData(kind="element", name="dataRequirement", namespace="##targetNamespace")
	!resolve val DataRequirement[*] dataRequirement;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="GuidanceResponseStatus", kind="elementOnly")
class GuidanceResponseStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr GuidanceResponseStatusEnum value;
}

@ExtendedMetaData(name="GuidanceResponseStatusEnum")
enum GuidanceResponseStatusEnum {

	@GenModel(documentation="Success")
	success = 0;

	@GenModel(documentation="Data Requested")
	dataRequested = 1;

	@GenModel(documentation="Data Required")
	dataRequired = 2;

	@GenModel(documentation="In Progress")
	inProgress = 3;

	@GenModel(documentation="Failure")
	failure = 4;

	@GenModel(documentation="Entered In Error")
	enteredInError = 5;
}

@ExtendedMetaData(name="GuidanceResponseStatusEnum:Object", baseType="GuidanceResponseStatusEnum")
datatype GuidanceResponseStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="GuidePageGeneration", kind="elementOnly")
class GuidePageGeneration extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr GuidePageGenerationEnum value;
}

@ExtendedMetaData(name="GuidePageGenerationEnum")
enum GuidePageGenerationEnum {

	@GenModel(documentation="HTML")
	html = 0;

	@GenModel(documentation="Markdown")
	markdown = 1;

	@GenModel(documentation="XML")
	xml = 2;

	@GenModel(documentation="Generated")
	generated = 3;
}

@ExtendedMetaData(name="GuidePageGenerationEnum:Object", baseType="GuidePageGenerationEnum")
datatype GuidePageGenerationEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="The details of a healthcare service available at a location.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="HealthcareService", kind="elementOnly")
class HealthcareService extends DomainResource {

	@GenModel(documentation="External identifiers for this item.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="This flag is used to mark the record to not be used. This is not used when a center is closed for maintenance, or for holidays, the notAvailable period is to be used for this.")
	@ExtendedMetaData(kind="element", name="active", namespace="##targetNamespace")
	!resolve val Boolean active;

	@GenModel(documentation="The organization that provides this healthcare service.")
	@ExtendedMetaData(kind="element", name="providedBy", namespace="##targetNamespace")
	!resolve val Reference providedBy;

	@GenModel(documentation="When the HealthcareService is representing a specific, schedulable service, the availableIn property can refer to a generic service.")
	@ExtendedMetaData(kind="element", name="offeredIn", namespace="##targetNamespace")
	!resolve val Reference[*] offeredIn;

	@GenModel(documentation="Identifies the broad category of service being performed or delivered.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] category;

	@GenModel(documentation="The specific type of service that may be delivered or performed.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] type;

	@GenModel(documentation="Collection of specialties handled by the Healthcare service. This is more of a medical term.")
	@ExtendedMetaData(kind="element", name="specialty", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] specialty;

	@GenModel(documentation="The location(s) where this healthcare service may be provided.")
	@ExtendedMetaData(kind="element", name="location", namespace="##targetNamespace")
	!resolve val Reference[*] location;

	@GenModel(documentation="Further description of the service as it would be presented to a consumer while searching.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="Any additional description of the service and/or any specific issues not covered by the other attributes, which can be displayed as further detail under the serviceName.")
	@ExtendedMetaData(kind="element", name="comment", namespace="##targetNamespace")
	!resolve val Markdown comment;

	@GenModel(documentation="Extra details about the service that can't be placed in the other fields.")
	@ExtendedMetaData(kind="element", name="extraDetails", namespace="##targetNamespace")
	!resolve val Markdown extraDetails;

	@GenModel(documentation="If there is a photo/symbol associated with this HealthcareService, it may be included here to facilitate quick identification of the service in a list.")
	@ExtendedMetaData(kind="element", name="photo", namespace="##targetNamespace")
	!resolve val Attachment photo;

	@GenModel(documentation="The contact details of communication devices available relevant to the specific HealthcareService. This can include addresses, phone numbers, fax numbers, mobile numbers, email addresses and web sites.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ExtendedContactDetail[*] contact;

	@GenModel(documentation="The location(s) that this service is available to (not where the service is provided).")
	@ExtendedMetaData(kind="element", name="coverageArea", namespace="##targetNamespace")
	!resolve val Reference[*] coverageArea;

	@GenModel(documentation="The code(s) that detail the conditions under which the healthcare service is available/offered.")
	@ExtendedMetaData(kind="element", name="serviceProvisionCode", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] serviceProvisionCode;

	@GenModel(documentation="Does this service have specific eligibility requirements that need to be met in order to use the service?")
	@ExtendedMetaData(kind="element", name="eligibility", namespace="##targetNamespace")
	!resolve val HealthcareServiceEligibility[*] eligibility;

	@GenModel(documentation="Programs that this service is applicable to.")
	@ExtendedMetaData(kind="element", name="program", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] program;

	@GenModel(documentation="Collection of characteristics (attributes).")
	@ExtendedMetaData(kind="element", name="characteristic", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] characteristic;

	@GenModel(documentation="Some services are specifically made available in multiple languages, this property permits a directory to declare the languages this is offered in. Typically this is only provided where a service operates in communities with mixed languages used.")
	@ExtendedMetaData(kind="element", name="communication", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] communication;

	@GenModel(documentation="Ways that the service accepts referrals, if this is not provided then it is implied that no referral is required.")
	@ExtendedMetaData(kind="element", name="referralMethod", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] referralMethod;

	@GenModel(documentation="Indicates whether or not a prospective consumer will require an appointment for a particular service at a site to be provided by the Organization. Indicates if an appointment is required for access to this service.")
	@ExtendedMetaData(kind="element", name="appointmentRequired", namespace="##targetNamespace")
	!resolve val Boolean appointmentRequired;

	@GenModel(documentation="A collection of times that the healthcare service is available.")
	@ExtendedMetaData(kind="element", name="availability", namespace="##targetNamespace")
	!resolve val Availability[*] availability;

	@GenModel(documentation="Technical endpoints providing access to services operated for the specific healthcare services defined at this resource.")
	@ExtendedMetaData(kind="element", name="endpoint", namespace="##targetNamespace")
	!resolve val Reference[*] endpoint;
}

@GenModel(documentation="The details of a healthcare service available at a location.")
@ExtendedMetaData(name="HealthcareService.Eligibility", kind="elementOnly")
class HealthcareServiceEligibility extends BackboneElement {

	@GenModel(documentation="Coded value for the eligibility.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@GenModel(documentation="Describes the eligibility conditions for the service.")
	@ExtendedMetaData(kind="element", name="comment", namespace="##targetNamespace")
	!resolve val Markdown comment;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="HTTPVerb", kind="elementOnly")
class HTTPVerb extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr HTTPVerbEnum value;
}

@ExtendedMetaData(name="HTTPVerbEnum")
enum HTTPVerbEnum {

	@GenModel(documentation="GET")
	GET = 0;

	@GenModel(documentation="HEAD")
	HEAD = 1;

	@GenModel(documentation="POST")
	POST = 2;

	@GenModel(documentation="PUT")
	PUT = 3;

	@GenModel(documentation="DELETE")
	DELETE = 4;

	@GenModel(documentation="PATCH")
	PATCH = 5;
}

@ExtendedMetaData(name="HTTPVerbEnum:Object", baseType="HTTPVerbEnum")
datatype HTTPVerbEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A name, normally of a human, that can be used for other living entities (e.g. animals but not organizations) that have been assigned names by a human and may need the use of name parts or the need for usage information.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="HumanName", kind="elementOnly")
class HumanName extends DataType {

	@GenModel(documentation="Identifies the purpose for this name.")
	@ExtendedMetaData(kind="element", name="use", namespace="##targetNamespace")
	!resolve val NameUse use;

	@GenModel(documentation="Specifies the entire name as it should be displayed e.g. on an application UI. This may be provided instead of or as well as the specific parts.")
	@ExtendedMetaData(kind="element", name="text", namespace="##targetNamespace")
	!resolve val String text;

	@GenModel(documentation="The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father.")
	@ExtendedMetaData(kind="element", name="family", namespace="##targetNamespace")
	!resolve val String family;

	@GenModel(documentation="Given name.")
	@ExtendedMetaData(kind="element", name="given", namespace="##targetNamespace")
	!resolve val String[*] given;

	@GenModel(documentation="Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.")
	@ExtendedMetaData(kind="element", name="prefix", namespace="##targetNamespace")
	!resolve val String[*] prefix;

	@GenModel(documentation="Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.")
	@ExtendedMetaData(kind="element", name="suffix", namespace="##targetNamespace")
	!resolve val String[*] suffix;

	@GenModel(documentation="Indicates the period of time when this name was valid for the named person.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;
}

@GenModel(documentation="Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive.
RFC 4122
If the element is present, it must have either a @value, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="id", kind="elementOnly")
class Id extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	attr IdPrimitive value;
}

@GenModel(documentation="An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="Identifier", kind="elementOnly")
class Identifier extends DataType {

	@GenModel(documentation="The purpose of this identifier.")
	@ExtendedMetaData(kind="element", name="use", namespace="##targetNamespace")
	!resolve val IdentifierUse use;

	@GenModel(documentation="A coded type for the identifier that can be used to determine which identifier to use for a specific purpose.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="Establishes the namespace for the value - that is, an absolute URL that describes a set values that are unique.")
	@ExtendedMetaData(kind="element", name="system", namespace="##targetNamespace")
	!resolve val Uri system;

	@GenModel(documentation="The portion of the identifier typically relevant to the user and which is unique within the context of the system.")
	@ExtendedMetaData(kind="element", name="value", namespace="##targetNamespace")
	!resolve val String value;

	@GenModel(documentation="Time period during which identifier is/was valid for use.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;

	@GenModel(documentation="Organization that issued/manages the identifier.")
	@ExtendedMetaData(kind="element", name="assigner", namespace="##targetNamespace")
	!resolve val Reference assigner;
}

@GenModel(documentation="Identifies the purpose for this identifier, if known .
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="IdentifierUse", kind="elementOnly")
class IdentifierUse extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr IdentifierUseEnum value;
}

@ExtendedMetaData(name="IdentifierUseEnum")
enum IdentifierUseEnum {

	@GenModel(documentation="Usual")
	usual = 0;

	@GenModel(documentation="Official")
	official = 1;

	@GenModel(documentation="Temp")
	temp = 2;

	@GenModel(documentation="Secondary")
	secondary = 3;

	@GenModel(documentation="Old")
	old = 4;
}

@ExtendedMetaData(name="IdentifierUseEnum:Object", baseType="IdentifierUseEnum")
datatype IdentifierUseEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="IdentityAssuranceLevel", kind="elementOnly")
class IdentityAssuranceLevel extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr IdentityAssuranceLevelEnum value;
}

@ExtendedMetaData(name="IdentityAssuranceLevelEnum")
enum IdentityAssuranceLevelEnum {

	@GenModel(documentation="Level 1")
	level1 = 0;

	@GenModel(documentation="Level 2")
	level2 = 1;

	@GenModel(documentation="Level 3")
	level3 = 2;

	@GenModel(documentation="Level 4")
	level4 = 3;
}

@ExtendedMetaData(name="IdentityAssuranceLevelEnum:Object", baseType="IdentityAssuranceLevelEnum")
datatype IdentityAssuranceLevelEnumObject : org.eclipse.emf.common.util.Enumerator;

@ExtendedMetaData(name="id-primitive", baseType="http://www.eclipse.org/emf/2003/XMLType#string", minLength="1", maxLength="64", pattern="[A-Za-z0-9\-\.]{1,64}")
datatype IdPrimitive : java.lang.String;

@GenModel(documentation="A selection of DICOM SOP instances and/or frames within a single Study and Series. This might include additional specifics such as an image region, an Observation UID or a Segmentation Number, allowing linkage to an Observation Resource or transferring this information along with the ImagingStudy Resource.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ImagingSelection", kind="elementOnly")
class ImagingSelection extends DomainResource {

	@GenModel(documentation="A unique identifier assigned to this imaging selection.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The current state of the ImagingSelection resource. This is not the status of any ImagingStudy, ServiceRequest, or Task resources associated with the ImagingSelection.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val ImagingSelectionStatus[1] status;

	@GenModel(documentation="The patient, or group of patients, location, device, organization, procedure or practitioner this imaging selection is about and into whose or what record the imaging selection is placed.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference subject;

	@GenModel(documentation="The date and time this imaging selection was created.")
	@ExtendedMetaData(kind="element", name="issued", namespace="##targetNamespace")
	!resolve val Instant issued;

	@GenModel(documentation="Selector of the instances – human or machine.")
	@ExtendedMetaData(kind="element", name="performer", namespace="##targetNamespace")
	!resolve val ImagingSelectionPerformer[*] performer;

	@GenModel(documentation="A list of the diagnostic requests that resulted in this imaging selection being performed.")
	@ExtendedMetaData(kind="element", name="basedOn", namespace="##targetNamespace")
	!resolve val Reference[*] basedOn;

	@GenModel(documentation="Classifies the imaging selection.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] category;

	@GenModel(documentation="Reason for referencing the selected content.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] code;

	@GenModel(documentation="The Study Instance UID for the DICOM Study from which the images were selected.")
	@ExtendedMetaData(kind="element", name="studyUid", namespace="##targetNamespace")
	!resolve val Id studyUid;

	@GenModel(documentation="The imaging study from which the imaging selection is made.")
	@ExtendedMetaData(kind="element", name="derivedFrom", namespace="##targetNamespace")
	!resolve val Reference[*] derivedFrom;

	@GenModel(documentation="The network service providing retrieval access to the selected images, frames, etc. See implementation notes for information about using DICOM endpoints.")
	@ExtendedMetaData(kind="element", name="endpoint", namespace="##targetNamespace")
	!resolve val Reference[*] endpoint;

	@GenModel(documentation="The Series Instance UID for the DICOM Series from which the images were selected.")
	@ExtendedMetaData(kind="element", name="seriesUid", namespace="##targetNamespace")
	!resolve val Id seriesUid;

	@GenModel(documentation="The Series Number for the DICOM Series from which the images were selected.")
	@ExtendedMetaData(kind="element", name="seriesNumber", namespace="##targetNamespace")
	!resolve val UnsignedInt seriesNumber;

	@GenModel(documentation="The Frame of Reference UID identifying the coordinate system that conveys spatial and/or temporal information for the selected images or frames.")
	@ExtendedMetaData(kind="element", name="frameOfReferenceUid", namespace="##targetNamespace")
	!resolve val Id frameOfReferenceUid;

	@GenModel(documentation="The anatomic structures examined. See DICOM Part 16 Annex L (http://dicom.nema.org/medical/dicom/current/output/chtml/part16/chapter_L.html) for DICOM to SNOMED-CT mappings.")
	@ExtendedMetaData(kind="element", name="bodySite", namespace="##targetNamespace")
	!resolve val CodeableReference bodySite;

	@GenModel(documentation="The actual focus of an observation when it is not the patient of record representing something or someone associated with the patient such as a spouse, parent, fetus, or donor. For example, fetus observations in a mother's record.  The focus of an observation could also be an existing condition,  an intervention, the subject's diet,  another observation of the subject,  or a body structure such as tumor or implanted device.   An example use case would be using the Observation resource to capture whether the mother is trained to change her child's tracheostomy tube. In this example, the child is the patient of record and the mother is the focus.")
	@ExtendedMetaData(kind="element", name="focus", namespace="##targetNamespace")
	!resolve val Reference[*] focus;

	@GenModel(documentation="Each imaging selection includes one or more selected DICOM SOP instances.")
	@ExtendedMetaData(kind="element", name="instance", namespace="##targetNamespace")
	!resolve val ImagingSelectionInstance[*] instance;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ImagingSelectionDGraphicType", kind="elementOnly")
class ImagingSelectionDGraphicType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ImagingSelectionDGraphicTypeEnum value;
}

@ExtendedMetaData(name="ImagingSelectionDGraphicTypeEnum")
enum ImagingSelectionDGraphicTypeEnum {

	@GenModel(documentation="POINT")
	point = 0;

	@GenModel(documentation="MULTIPOINT")
	multipoint = 1;

	@GenModel(documentation="POLYLINE")
	polyline = 2;

	@GenModel(documentation="POLYGON")
	polygon = 3;

	@GenModel(documentation="ELLIPSE")
	ellipse = 4;

	@GenModel(documentation="ELLIPSOID")
	ellipsoid = 5;
}

@ExtendedMetaData(name="ImagingSelectionDGraphicTypeEnum:Object", baseType="ImagingSelectionDGraphicTypeEnum")
datatype ImagingSelectionDGraphicTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A selection of DICOM SOP instances and/or frames within a single Study and Series. This might include additional specifics such as an image region, an Observation UID or a Segmentation Number, allowing linkage to an Observation Resource or transferring this information along with the ImagingStudy Resource.")
@ExtendedMetaData(name="ImagingSelection.ImageRegion2D", kind="elementOnly")
class ImagingSelectionImageRegion2D extends BackboneElement {

	@GenModel(documentation="Specifies the type of image region.")
	@ExtendedMetaData(kind="element", name="regionType", namespace="##targetNamespace")
	!resolve val ImagingSelectionDGraphicType[1] regionType;

	@GenModel(documentation="The coordinates describing the image region. Encoded as a set of (column, row) pairs that denote positions in the selected image / frames specified with sub-pixel resolution.
       The origin at the TLHC of the TLHC pixel is 0.0\0.0, the BRHC of the TLHC pixel is 1.0\1.0, and the BRHC of the BRHC pixel is the number of columns\rows in the image / frames. The values must be within the range 0\0 to the number of columns\rows in the image / frames.")
	@ExtendedMetaData(kind="element", name="coordinate", namespace="##targetNamespace")
	!resolve val Decimal[+] coordinate;
}

@GenModel(documentation="A selection of DICOM SOP instances and/or frames within a single Study and Series. This might include additional specifics such as an image region, an Observation UID or a Segmentation Number, allowing linkage to an Observation Resource or transferring this information along with the ImagingStudy Resource.")
@ExtendedMetaData(name="ImagingSelection.ImageRegion3D", kind="elementOnly")
class ImagingSelectionImageRegion3D extends BackboneElement {

	@GenModel(documentation="Specifies the type of image region.")
	@ExtendedMetaData(kind="element", name="regionType", namespace="##targetNamespace")
	!resolve val ImagingSelectionDGraphicType[1] regionType;

	@GenModel(documentation="The coordinates describing the image region. Encoded as an ordered set of (x,y,z) triplets (in mm and may be negative) that define a region of interest in the patient-relative Reference Coordinate System defined by ImagingSelection.frameOfReferenceUid element.")
	@ExtendedMetaData(kind="element", name="coordinate", namespace="##targetNamespace")
	!resolve val Decimal[+] coordinate;
}

@GenModel(documentation="A selection of DICOM SOP instances and/or frames within a single Study and Series. This might include additional specifics such as an image region, an Observation UID or a Segmentation Number, allowing linkage to an Observation Resource or transferring this information along with the ImagingStudy Resource.")
@ExtendedMetaData(name="ImagingSelection.Instance", kind="elementOnly")
class ImagingSelectionInstance extends BackboneElement {

	@GenModel(documentation="The SOP Instance UID for the selected DICOM instance.")
	@ExtendedMetaData(kind="element", name="uid", namespace="##targetNamespace")
	!resolve val Id[1] uid;

	@GenModel(documentation="The Instance Number for the selected DICOM instance.")
	@ExtendedMetaData(kind="element", name="number", namespace="##targetNamespace")
	!resolve val UnsignedInt number;

	@GenModel(documentation="The SOP Class UID for the selected DICOM instance.")
	@ExtendedMetaData(kind="element", name="sopClass", namespace="##targetNamespace")
	!resolve val Coding sopClass;

	@GenModel(documentation="Selected subset of the SOP Instance. The content and format of the subset item is determined by the SOP Class of the selected instance.
       May be one of:
       - A list of frame numbers selected from a multiframe SOP Instance.
       - A list of Content Item Observation UID values selected from a DICOM SR or other structured document SOP Instance.
       - A list of segment numbers selected from a segmentation SOP Instance.
       - A list of Region of Interest (ROI) numbers selected from a radiotherapy structure set SOP Instance.")
	@ExtendedMetaData(kind="element", name="subset", namespace="##targetNamespace")
	!resolve val String[*] subset;

	@GenModel(documentation="Each imaging selection instance or frame list might includes an image region, specified by a region type and a set of 2D coordinates.
       If the parent imagingSelection.instance contains a subset element of type frame, the image region applies to all frames in the subset list.")
	@ExtendedMetaData(kind="element", name="imageRegion2D", namespace="##targetNamespace")
	!resolve val ImagingSelectionImageRegion2D[*] imageRegion2D;

	@GenModel(documentation="Each imaging selection might includes a 3D image region, specified by a region type and a set of 3D coordinates.")
	@ExtendedMetaData(kind="element", name="imageRegion3D", namespace="##targetNamespace")
	!resolve val ImagingSelectionImageRegion3D[*] imageRegion3D;
}

@GenModel(documentation="A selection of DICOM SOP instances and/or frames within a single Study and Series. This might include additional specifics such as an image region, an Observation UID or a Segmentation Number, allowing linkage to an Observation Resource or transferring this information along with the ImagingStudy Resource.")
@ExtendedMetaData(name="ImagingSelection.Performer", kind="elementOnly")
class ImagingSelectionPerformer extends BackboneElement {

	@GenModel(documentation="Distinguishes the type of involvement of the performer.")
	@ExtendedMetaData(kind="element", name="function", namespace="##targetNamespace")
	!resolve val CodeableConcept function;

	@GenModel(documentation="Author – human or machine.")
	@ExtendedMetaData(kind="element", name="actor", namespace="##targetNamespace")
	!resolve val Reference actor;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ImagingSelectionStatus", kind="elementOnly")
class ImagingSelectionStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ImagingSelectionStatusEnum value;
}

@ExtendedMetaData(name="ImagingSelectionStatusEnum")
enum ImagingSelectionStatusEnum {

	@GenModel(documentation="Available")
	available = 0;

	@GenModel(documentation="Entered in Error")
	enteredInError = 1;

	@GenModel(documentation="Unknown")
	unknown = 2;
}

@ExtendedMetaData(name="ImagingSelectionStatusEnum:Object", baseType="ImagingSelectionStatusEnum")
datatype ImagingSelectionStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ImagingStudy", kind="elementOnly")
class ImagingStudy extends DomainResource {

	@GenModel(documentation="Identifiers for the ImagingStudy such as DICOM Study Instance UID.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The current state of the ImagingStudy resource. This is not the status of any ServiceRequest or Task resources associated with the ImagingStudy.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val ImagingStudyStatus[1] status;

	@GenModel(documentation="A list of all the distinct values of series.modality. This may include both acquisition and non-acquisition modalities.")
	@ExtendedMetaData(kind="element", name="modality", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] modality;

	@GenModel(documentation="The subject, typically a patient, of the imaging study.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference[1] subject;

	@GenModel(documentation="The healthcare event (e.g. a patient and healthcare provider interaction) during which this ImagingStudy is made.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@GenModel(documentation="Date and time the study started.")
	@ExtendedMetaData(kind="element", name="started", namespace="##targetNamespace")
	!resolve val DateTime started;

	@GenModel(documentation="A list of the diagnostic requests that resulted in this imaging study being performed.")
	@ExtendedMetaData(kind="element", name="basedOn", namespace="##targetNamespace")
	!resolve val Reference[*] basedOn;

	@GenModel(documentation="A larger event of which this particular ImagingStudy is a component or step.  For example,  an ImagingStudy as part of a procedure.")
	@ExtendedMetaData(kind="element", name="partOf", namespace="##targetNamespace")
	!resolve val Reference[*] partOf;

	@GenModel(documentation="The requesting/referring physician.")
	@ExtendedMetaData(kind="element", name="referrer", namespace="##targetNamespace")
	!resolve val Reference referrer;

	@GenModel(documentation="The network service providing access (e.g., query, view, or retrieval) for the study. See implementation notes for information about using DICOM endpoints. A study-level endpoint applies to each series in the study, unless overridden by a series-level endpoint with the same Endpoint.connectionType.")
	@ExtendedMetaData(kind="element", name="endpoint", namespace="##targetNamespace")
	!resolve val Reference[*] endpoint;

	@GenModel(documentation="Number of Series in the Study. This value given may be larger than the number of series elements this Resource contains due to resource availability, security, or other factors. This element should be present if any series elements are present.")
	@ExtendedMetaData(kind="element", name="numberOfSeries", namespace="##targetNamespace")
	!resolve val UnsignedInt numberOfSeries;

	@GenModel(documentation="Number of SOP Instances in Study. This value given may be larger than the number of instance elements this resource contains due to resource availability, security, or other factors. This element should be present if any instance elements are present.")
	@ExtendedMetaData(kind="element", name="numberOfInstances", namespace="##targetNamespace")
	!resolve val UnsignedInt numberOfInstances;

	@GenModel(documentation="This field corresponds to the DICOM Procedure Code Sequence (0008,1032). This is different from the FHIR Procedure resource that may include the ImagingStudy.")
	@ExtendedMetaData(kind="element", name="procedure", namespace="##targetNamespace")
	!resolve val CodeableReference[*] procedure;

	@GenModel(documentation="The principal physical location where the ImagingStudy was performed.")
	@ExtendedMetaData(kind="element", name="location", namespace="##targetNamespace")
	!resolve val Reference location;

	@GenModel(documentation="Description of clinical condition indicating why the ImagingStudy was requested, and/or Indicates another resource whose existence justifies this Study.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val CodeableReference[*] reason;

	@GenModel(documentation="Per the recommended DICOM mapping, this element is derived from the Study Description attribute (0008,1030). Observations or findings about the imaging study should be recorded in another resource, e.g. Observation, and not in this element.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="The Imaging Manager description of the study. Institution-generated description or classification of the Study (component) performed.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val String description;

	@GenModel(documentation="Each study has one or more series of images or other content.")
	@ExtendedMetaData(kind="element", name="series", namespace="##targetNamespace")
	!resolve val ImagingStudySeries[*] series;
}

@GenModel(documentation="Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.")
@ExtendedMetaData(name="ImagingStudy.Instance", kind="elementOnly")
class ImagingStudyInstance extends BackboneElement {

	@GenModel(documentation="The DICOM SOP Instance UID for this image or other DICOM content.")
	@ExtendedMetaData(kind="element", name="uid", namespace="##targetNamespace")
	!resolve val Id[1] uid;

	@GenModel(documentation="DICOM instance  type.")
	@ExtendedMetaData(kind="element", name="sopClass", namespace="##targetNamespace")
	!resolve val Coding[1] sopClass;

	@GenModel(documentation="The number of instance in the series.")
	@ExtendedMetaData(kind="element", name="number", namespace="##targetNamespace")
	!resolve val UnsignedInt number;

	@GenModel(documentation="The description of the instance.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;
}

@GenModel(documentation="Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.")
@ExtendedMetaData(name="ImagingStudy.Performer", kind="elementOnly")
class ImagingStudyPerformer extends BackboneElement {

	@GenModel(documentation="Distinguishes the type of involvement of the performer in the series.")
	@ExtendedMetaData(kind="element", name="function", namespace="##targetNamespace")
	!resolve val CodeableConcept function;

	@GenModel(documentation="Indicates who or what performed the series.")
	@ExtendedMetaData(kind="element", name="actor", namespace="##targetNamespace")
	!resolve val Reference[1] actor;
}

@GenModel(documentation="Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.")
@ExtendedMetaData(name="ImagingStudy.Series", kind="elementOnly")
class ImagingStudySeries extends BackboneElement {

	@GenModel(documentation="The DICOM Series Instance UID for the series.")
	@ExtendedMetaData(kind="element", name="uid", namespace="##targetNamespace")
	!resolve val Id[1] uid;

	@GenModel(documentation="The numeric identifier of this series in the study.")
	@ExtendedMetaData(kind="element", name="number", namespace="##targetNamespace")
	!resolve val UnsignedInt number;

	@GenModel(documentation="The distinct modality for this series. This may include both acquisition and non-acquisition modalities.")
	@ExtendedMetaData(kind="element", name="modality", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] modality;

	@GenModel(documentation="A description of the series.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val String description;

	@GenModel(documentation="Number of SOP Instances in the Study. The value given may be larger than the number of instance elements this resource contains due to resource availability, security, or other factors. This element should be present if any instance elements are present.")
	@ExtendedMetaData(kind="element", name="numberOfInstances", namespace="##targetNamespace")
	!resolve val UnsignedInt numberOfInstances;

	@GenModel(documentation="The network service providing access (e.g., query, view, or retrieval) for this series. See implementation notes for information about using DICOM endpoints. A series-level endpoint, if present, has precedence over a study-level endpoint with the same Endpoint.connectionType.")
	@ExtendedMetaData(kind="element", name="endpoint", namespace="##targetNamespace")
	!resolve val Reference[*] endpoint;

	@GenModel(documentation="The anatomic structures examined. See DICOM Part 16 Annex L (http://dicom.nema.org/medical/dicom/current/output/chtml/part16/chapter_L.html) for DICOM to SNOMED-CT mappings. The bodySite may indicate the laterality of body part imaged; if so, it shall be consistent with any content of ImagingStudy.series.laterality.")
	@ExtendedMetaData(kind="element", name="bodySite", namespace="##targetNamespace")
	!resolve val CodeableReference bodySite;

	@GenModel(documentation="The laterality of the (possibly paired) anatomic structures examined. E.g., the left knee, both lungs, or unpaired abdomen. If present, shall be consistent with any laterality information indicated in ImagingStudy.series.bodySite.")
	@ExtendedMetaData(kind="element", name="laterality", namespace="##targetNamespace")
	!resolve val CodeableConcept laterality;

	@GenModel(documentation="The specimen imaged, e.g., for whole slide imaging of a biopsy.")
	@ExtendedMetaData(kind="element", name="specimen", namespace="##targetNamespace")
	!resolve val Reference[*] specimen;

	@GenModel(documentation="The date and time the series was started.")
	@ExtendedMetaData(kind="element", name="started", namespace="##targetNamespace")
	!resolve val DateTime started;

	@GenModel(documentation="Indicates who or what performed the series and how they were involved.")
	@ExtendedMetaData(kind="element", name="performer", namespace="##targetNamespace")
	!resolve val ImagingStudyPerformer[*] performer;

	@GenModel(documentation="A single SOP instance within the series, e.g. an image, or presentation state.")
	@ExtendedMetaData(kind="element", name="instance", namespace="##targetNamespace")
	!resolve val ImagingStudyInstance[*] instance;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ImagingStudyStatus", kind="elementOnly")
class ImagingStudyStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ImagingStudyStatusEnum value;
}

@ExtendedMetaData(name="ImagingStudyStatusEnum")
enum ImagingStudyStatusEnum {

	@GenModel(documentation="Registered")
	registered = 0;

	@GenModel(documentation="Available")
	available = 1;

	@GenModel(documentation="Cancelled")
	cancelled = 2;

	@GenModel(documentation="Entered in Error")
	enteredInError = 3;

	@GenModel(documentation="Unknown")
	unknown = 4;
}

@ExtendedMetaData(name="ImagingStudyStatusEnum:Object", baseType="ImagingStudyStatusEnum")
datatype ImagingStudyStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Immunization", kind="elementOnly")
class Immunization extends DomainResource {

	@GenModel(documentation="A unique identifier assigned to this immunization record.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="A plan, order or recommendation fulfilled in whole or in part by this immunization.")
	@ExtendedMetaData(kind="element", name="basedOn", namespace="##targetNamespace")
	!resolve val Reference[*] basedOn;

	@GenModel(documentation="Indicates the current status of the immunization event.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val ImmunizationStatusCodes[1] status;

	@GenModel(documentation="Indicates the reason the immunization event was not performed.")
	@ExtendedMetaData(kind="element", name="statusReason", namespace="##targetNamespace")
	!resolve val CodeableConcept statusReason;

	@GenModel(documentation="Vaccine that was administered or was to be administered.")
	@ExtendedMetaData(kind="element", name="vaccineCode", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] vaccineCode;

	@GenModel(documentation="An indication of which product was administered to the patient. This is typically a more detailed representation of the concept conveyed by the vaccineCode data element. If a Medication resource is referenced, it may be to a stand-alone resource or a contained resource within the Immunization resource.")
	@ExtendedMetaData(kind="element", name="administeredProduct", namespace="##targetNamespace")
	!resolve val CodeableReference administeredProduct;

	@GenModel(documentation="Name of vaccine manufacturer.")
	@ExtendedMetaData(kind="element", name="manufacturer", namespace="##targetNamespace")
	!resolve val CodeableReference manufacturer;

	@GenModel(documentation="Lot number of the  vaccine product.")
	@ExtendedMetaData(kind="element", name="lotNumber", namespace="##targetNamespace")
	!resolve val String lotNumber;

	@GenModel(documentation="Date vaccine batch expires.")
	@ExtendedMetaData(kind="element", name="expirationDate", namespace="##targetNamespace")
	!resolve val Date expirationDate;

	@GenModel(documentation="The patient who either received or did not receive the immunization.")
	@ExtendedMetaData(kind="element", name="patient", namespace="##targetNamespace")
	!resolve val Reference[1] patient;

	@GenModel(documentation="The visit or admission or other contact between patient and health care provider the immunization was performed as part of.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@GenModel(documentation="Additional information that is relevant to the immunization (e.g. for a vaccine recipient who is pregnant, the gestational age of the fetus). The reason why a vaccine was given (e.g. occupation, underlying medical condition) should be conveyed in Immunization.reason, not as supporting information. The reason why a vaccine was not given (e.g. contraindication) should be conveyed in Immunization.statusReason, not as supporting information.")
	@ExtendedMetaData(kind="element", name="supportingInformation", namespace="##targetNamespace")
	!resolve val Reference[*] supportingInformation;

	@ExtendedMetaData(kind="element", name="occurrenceDateTime", namespace="##targetNamespace")
	!resolve val DateTime occurrenceDateTime;

	@ExtendedMetaData(kind="element", name="occurrenceString", namespace="##targetNamespace")
	!resolve val String occurrenceString;

	@GenModel(documentation="Indicates whether the data contained in the resource was captured by the individual/organization which was responsible for the administration of the vaccine rather than as 'secondary reported' data documented by a third party. A value of 'true' means this data originated with the individual/organization which was responsible for the administration of the vaccine.")
	@ExtendedMetaData(kind="element", name="primarySource", namespace="##targetNamespace")
	!resolve val Boolean primarySource;

	@GenModel(documentation="Typically the source of the data when the report of the immunization event is not based on information from the person who administered the vaccine.")
	@ExtendedMetaData(kind="element", name="informationSource", namespace="##targetNamespace")
	!resolve val CodeableReference informationSource;

	@GenModel(documentation="The service delivery location where the vaccine administration occurred.")
	@ExtendedMetaData(kind="element", name="location", namespace="##targetNamespace")
	!resolve val Reference location;

	@GenModel(documentation="Body site where vaccine was administered.")
	@ExtendedMetaData(kind="element", name="site", namespace="##targetNamespace")
	!resolve val CodeableConcept site;

	@GenModel(documentation="The path by which the vaccine product is taken into the body.")
	@ExtendedMetaData(kind="element", name="route", namespace="##targetNamespace")
	!resolve val CodeableConcept route;

	@GenModel(documentation="The quantity of vaccine product that was administered.")
	@ExtendedMetaData(kind="element", name="doseQuantity", namespace="##targetNamespace")
	!resolve val Quantity doseQuantity;

	@GenModel(documentation="Indicates who performed the immunization event.")
	@ExtendedMetaData(kind="element", name="performer", namespace="##targetNamespace")
	!resolve val ImmunizationPerformer[*] performer;

	@GenModel(documentation="Extra information about the immunization that is not conveyed by the other attributes.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="Describes why the immunization occurred in coded or textual form, or Indicates another resource (Condition, Observation or DiagnosticReport) whose existence justifies this immunization.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val CodeableReference[*] reason;

	@GenModel(documentation="Indication if a dose is considered to be subpotent. By default, a dose should be considered to be potent.")
	@ExtendedMetaData(kind="element", name="isSubpotent", namespace="##targetNamespace")
	!resolve val Boolean isSubpotent;

	@GenModel(documentation="Reason why a dose is considered to be subpotent.")
	@ExtendedMetaData(kind="element", name="subpotentReason", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] subpotentReason;

	@GenModel(documentation="Indicates a patient's eligibility for a funding program.")
	@ExtendedMetaData(kind="element", name="programEligibility", namespace="##targetNamespace")
	!resolve val ImmunizationProgramEligibility[*] programEligibility;

	@GenModel(documentation="Indicates the source of the vaccine actually administered. This may be different than the patient eligibility (e.g. the patient may be eligible for a publically purchased vaccine but due to inventory issues, vaccine purchased with private funds was actually administered).")
	@ExtendedMetaData(kind="element", name="fundingSource", namespace="##targetNamespace")
	!resolve val CodeableConcept fundingSource;

	@GenModel(documentation="Categorical data indicating that an adverse event is associated in time to an immunization.")
	@ExtendedMetaData(kind="element", name="reaction", namespace="##targetNamespace")
	!resolve val ImmunizationReaction[*] reaction;

	@GenModel(documentation="The protocol (set of recommendations) being followed by the provider who administered the dose.")
	@ExtendedMetaData(kind="element", name="protocolApplied", namespace="##targetNamespace")
	!resolve val ImmunizationProtocolApplied[*] protocolApplied;
}

@GenModel(documentation="Describes a comparison of an immunization event against published recommendations to determine if the administration is \"valid\" in relation to those  recommendations.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ImmunizationEvaluation", kind="elementOnly")
class ImmunizationEvaluation extends DomainResource {

	@GenModel(documentation="A unique identifier assigned to this immunization evaluation record.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Indicates the current status of the evaluation of the vaccination administration event.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val ImmunizationEvaluationStatusCodes[1] status;

	@GenModel(documentation="The individual for whom the evaluation is being done.")
	@ExtendedMetaData(kind="element", name="patient", namespace="##targetNamespace")
	!resolve val Reference[1] patient;

	@GenModel(documentation="The date the evaluation of the vaccine administration event was performed.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="Indicates the authority who published the protocol (e.g. ACIP).")
	@ExtendedMetaData(kind="element", name="authority", namespace="##targetNamespace")
	!resolve val Reference authority;

	@GenModel(documentation="The vaccine preventable disease the dose is being evaluated against.")
	@ExtendedMetaData(kind="element", name="targetDisease", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] targetDisease;

	@GenModel(documentation="The vaccine administration event being evaluated.")
	@ExtendedMetaData(kind="element", name="immunizationEvent", namespace="##targetNamespace")
	!resolve val Reference[1] immunizationEvent;

	@GenModel(documentation="Indicates if the dose is valid or not valid with respect to the published recommendations.")
	@ExtendedMetaData(kind="element", name="doseStatus", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] doseStatus;

	@GenModel(documentation="Provides an explanation as to why the vaccine administration event is valid or not relative to the published recommendations.")
	@ExtendedMetaData(kind="element", name="doseStatusReason", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] doseStatusReason;

	@GenModel(documentation="Additional information about the evaluation.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="One possible path to achieve presumed immunity against a disease - within the context of an authority.")
	@ExtendedMetaData(kind="element", name="series", namespace="##targetNamespace")
	!resolve val String series;

	@GenModel(documentation="Nominal position in a series as determined by the outcome of the evaluation process.")
	@ExtendedMetaData(kind="element", name="doseNumber", namespace="##targetNamespace")
	!resolve val String doseNumber;

	@GenModel(documentation="The recommended number of doses to achieve immunity as determined by the outcome of the evaluation process.")
	@ExtendedMetaData(kind="element", name="seriesDoses", namespace="##targetNamespace")
	!resolve val String seriesDoses;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ImmunizationEvaluationStatusCodes", kind="elementOnly")
class ImmunizationEvaluationStatusCodes extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ImmunizationEvaluationStatusCodesEnum value;
}

@ExtendedMetaData(name="ImmunizationEvaluationStatusCodesEnum")
enum ImmunizationEvaluationStatusCodesEnum {

	@GenModel(documentation="Completed")
	completed = 0;

	@GenModel(documentation="Entered in Error")
	enteredInError = 1;
}

@ExtendedMetaData(name="ImmunizationEvaluationStatusCodesEnum:Object", baseType="ImmunizationEvaluationStatusCodesEnum")
datatype ImmunizationEvaluationStatusCodesEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party.")
@ExtendedMetaData(name="Immunization.Performer", kind="elementOnly")
class ImmunizationPerformer extends BackboneElement {

	@GenModel(documentation="Describes the type of performance (e.g. ordering provider, administering provider, etc.).")
	@ExtendedMetaData(kind="element", name="function", namespace="##targetNamespace")
	!resolve val CodeableConcept function;

	@GenModel(documentation="The practitioner or organization who performed the action.")
	@ExtendedMetaData(kind="element", name="actor", namespace="##targetNamespace")
	!resolve val Reference[1] actor;
}

@GenModel(documentation="Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party.")
@ExtendedMetaData(name="Immunization.ProgramEligibility", kind="elementOnly")
class ImmunizationProgramEligibility extends BackboneElement {

	@GenModel(documentation="Indicates which program the patient had their eligility evaluated for.")
	@ExtendedMetaData(kind="element", name="program", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] program;

	@GenModel(documentation="Indicates the patient's eligility status for for a specific payment program.")
	@ExtendedMetaData(kind="element", name="programStatus", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] programStatus;
}

@GenModel(documentation="Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party.")
@ExtendedMetaData(name="Immunization.ProtocolApplied", kind="elementOnly")
class ImmunizationProtocolApplied extends BackboneElement {

	@GenModel(documentation="One possible path to achieve presumed immunity against a disease - within the context of an authority.")
	@ExtendedMetaData(kind="element", name="series", namespace="##targetNamespace")
	!resolve val String series;

	@GenModel(documentation="Indicates the authority who published the protocol (e.g. ACIP) that is being followed.")
	@ExtendedMetaData(kind="element", name="authority", namespace="##targetNamespace")
	!resolve val Reference authority;

	@GenModel(documentation="The vaccine preventable disease the dose is being administered against.")
	@ExtendedMetaData(kind="element", name="targetDisease", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] targetDisease;

	@GenModel(documentation="Nominal position in a series as intended by the practitioner administering the dose.")
	@ExtendedMetaData(kind="element", name="doseNumber", namespace="##targetNamespace")
	!resolve val String[1] doseNumber;

	@GenModel(documentation="The recommended number of doses to achieve immunity as intended by the practitioner administering the dose.")
	@ExtendedMetaData(kind="element", name="seriesDoses", namespace="##targetNamespace")
	!resolve val String seriesDoses;
}

@GenModel(documentation="Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party.")
@ExtendedMetaData(name="Immunization.Reaction", kind="elementOnly")
class ImmunizationReaction extends BackboneElement {

	@GenModel(documentation="Date of reaction to the immunization.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="Details of the reaction.")
	@ExtendedMetaData(kind="element", name="manifestation", namespace="##targetNamespace")
	!resolve val CodeableReference manifestation;

	@GenModel(documentation="Self-reported indicator.")
	@ExtendedMetaData(kind="element", name="reported", namespace="##targetNamespace")
	!resolve val Boolean reported;
}

@GenModel(documentation="A patient's point-in-time set of recommendations (i.e. forecasting) according to a published schedule with optional supporting justification.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ImmunizationRecommendation", kind="elementOnly")
class ImmunizationRecommendation extends DomainResource {

	@GenModel(documentation="A unique identifier assigned to this particular recommendation record.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The patient the recommendation(s) are for.")
	@ExtendedMetaData(kind="element", name="patient", namespace="##targetNamespace")
	!resolve val Reference[1] patient;

	@GenModel(documentation="The date the immunization recommendation(s) were created.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime[1] date;

	@GenModel(documentation="Indicates the authority who published the protocol (e.g. ACIP).")
	@ExtendedMetaData(kind="element", name="authority", namespace="##targetNamespace")
	!resolve val Reference authority;

	@GenModel(documentation="Vaccine administration recommendations.")
	@ExtendedMetaData(kind="element", name="recommendation", namespace="##targetNamespace")
	!resolve val ImmunizationRecommendationRecommendation[+] recommendation;
}

@GenModel(documentation="A patient's point-in-time set of recommendations (i.e. forecasting) according to a published schedule with optional supporting justification.")
@ExtendedMetaData(name="ImmunizationRecommendation.DateCriterion", kind="elementOnly")
class ImmunizationRecommendationDateCriterion extends BackboneElement {

	@GenModel(documentation="Date classification of recommendation.  For example, earliest date to give, latest date to give, etc.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] code;

	@GenModel(documentation="The date whose meaning is specified by dateCriterion.code.")
	@ExtendedMetaData(kind="element", name="value", namespace="##targetNamespace")
	!resolve val DateTime[1] value;
}

@GenModel(documentation="A patient's point-in-time set of recommendations (i.e. forecasting) according to a published schedule with optional supporting justification.")
@ExtendedMetaData(name="ImmunizationRecommendation.Recommendation", kind="elementOnly")
class ImmunizationRecommendationRecommendation extends BackboneElement {

	@GenModel(documentation="Vaccine(s) or vaccine group that pertain to the recommendation.")
	@ExtendedMetaData(kind="element", name="vaccineCode", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] vaccineCode;

	@GenModel(documentation="The targeted disease for the recommendation.")
	@ExtendedMetaData(kind="element", name="targetDisease", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] targetDisease;

	@GenModel(documentation="Vaccine(s) which should not be used to fulfill the recommendation.")
	@ExtendedMetaData(kind="element", name="contraindicatedVaccineCode", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] contraindicatedVaccineCode;

	@GenModel(documentation="Indicates the patient status with respect to the path to immunity for the target disease.")
	@ExtendedMetaData(kind="element", name="forecastStatus", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] forecastStatus;

	@GenModel(documentation="The reason for the assigned forecast status.")
	@ExtendedMetaData(kind="element", name="forecastReason", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] forecastReason;

	@GenModel(documentation="Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.")
	@ExtendedMetaData(kind="element", name="dateCriterion", namespace="##targetNamespace")
	!resolve val ImmunizationRecommendationDateCriterion[*] dateCriterion;

	@GenModel(documentation="Contains the description about the protocol under which the vaccine was administered.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="One possible path to achieve presumed immunity against a disease - within the context of an authority.")
	@ExtendedMetaData(kind="element", name="series", namespace="##targetNamespace")
	!resolve val String series;

	@GenModel(documentation="Nominal position of the recommended dose in a series as determined by the evaluation and forecasting process (e.g. dose 2 is the next recommended dose).")
	@ExtendedMetaData(kind="element", name="doseNumber", namespace="##targetNamespace")
	!resolve val String doseNumber;

	@GenModel(documentation="The recommended number of doses to achieve immunity as determined by the evaluation and forecasting process.")
	@ExtendedMetaData(kind="element", name="seriesDoses", namespace="##targetNamespace")
	!resolve val String seriesDoses;

	@GenModel(documentation="Immunization event history and/or evaluation that supports the status and recommendation.")
	@ExtendedMetaData(kind="element", name="supportingImmunization", namespace="##targetNamespace")
	!resolve val Reference[*] supportingImmunization;

	@GenModel(documentation="Patient Information that supports the status and recommendation.  This includes patient observations, adverse reactions and allergy/intolerance information.")
	@ExtendedMetaData(kind="element", name="supportingPatientInformation", namespace="##targetNamespace")
	!resolve val Reference[*] supportingPatientInformation;
}

@GenModel(documentation="A set of codes indicating the current status of an Immunization.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ImmunizationStatusCodes", kind="elementOnly")
class ImmunizationStatusCodes extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ImmunizationStatusCodesEnum value;
}

@ExtendedMetaData(name="ImmunizationStatusCodesEnum")
enum ImmunizationStatusCodesEnum {

	@GenModel(documentation="Completed")
	completed = 0;

	@GenModel(documentation="Entered in Error")
	enteredInError = 1;

	@GenModel(documentation="Not Done")
	notDone = 2;
}

@ExtendedMetaData(name="ImmunizationStatusCodesEnum:Object", baseType="ImmunizationStatusCodesEnum")
datatype ImmunizationStatusCodesEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ImplementationGuide", kind="elementOnly")
class ImplementationGuide extends CanonicalResource {

	@GenModel(documentation="An absolute URI that is used to identify this implementation guide when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this implementation guide is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the implementation guide is stored on different servers.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri[1] url;

	@GenModel(documentation="A formal identifier that is used to identify this implementation guide when it is represented in other formats, or referenced in a specification, model, design or an instance.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The identifier that is used to identify this version of the implementation guide when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the implementation guide author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@ExtendedMetaData(kind="element", name="versionAlgorithmString", namespace="##targetNamespace")
	!resolve val String versionAlgorithmString;

	@ExtendedMetaData(kind="element", name="versionAlgorithmCoding", namespace="##targetNamespace")
	!resolve val Coding versionAlgorithmCoding;

	@GenModel(documentation="A natural language name identifying the implementation guide. This name should be usable as an identifier for the module by machine processing applications such as code generation.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String[1] name;

	@GenModel(documentation="A short, descriptive, user-friendly title for the implementation guide.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="The status of this implementation guide. Enables tracking the life-cycle of the content.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="A Boolean value to indicate that this implementation guide is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.")
	@ExtendedMetaData(kind="element", name="experimental", namespace="##targetNamespace")
	!resolve val Boolean experimental;

	@GenModel(documentation="The date  (and optionally time) when the implementation guide was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the implementation guide changes.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="The name of the organization or individual responsible for the release and ongoing maintenance of the implementation guide.")
	@ExtendedMetaData(kind="element", name="publisher", namespace="##targetNamespace")
	!resolve val String publisher;

	@GenModel(documentation="Contact details to assist a user in finding and communicating with the publisher.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactDetail[*] contact;

	@GenModel(documentation="A free text natural language description of the implementation guide from a consumer's perspective.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate implementation guide instances.")
	@ExtendedMetaData(kind="element", name="useContext", namespace="##targetNamespace")
	!resolve val UsageContext[*] useContext;

	@GenModel(documentation="A legal or geographic region in which the implementation guide is intended to be used.")
	@ExtendedMetaData(kind="element", name="jurisdiction", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] jurisdiction;

	@GenModel(documentation="Explanation of why this implementation guide is needed and why it has been designed as it has.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val Markdown purpose;

	@GenModel(documentation="A copyright statement relating to the implementation guide and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the implementation guide.")
	@ExtendedMetaData(kind="element", name="copyright", namespace="##targetNamespace")
	!resolve val Markdown copyright;

	@GenModel(documentation="A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').")
	@ExtendedMetaData(kind="element", name="copyrightLabel", namespace="##targetNamespace")
	!resolve val String copyrightLabel;

	@GenModel(documentation="The NPM package name for this Implementation Guide, used in the NPM package distribution, which is the primary mechanism by which FHIR based tooling manages IG dependencies. This value must be globally unique, and should be assigned with care.")
	@ExtendedMetaData(kind="element", name="packageId", namespace="##targetNamespace")
	!resolve val Id[1] packageId;

	@GenModel(documentation="The license that applies to this Implementation Guide, using an SPDX license code, or 'not-open-source'.")
	@ExtendedMetaData(kind="element", name="license", namespace="##targetNamespace")
	!resolve val SPDXLicense license;

	@GenModel(documentation="The version(s) of the FHIR specification that this ImplementationGuide targets - e.g. describes how to use. The value of this element is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 4.6.0. for this version.")
	@ExtendedMetaData(kind="element", name="fhirVersion", namespace="##targetNamespace")
	!resolve val FHIRVersion[+] fhirVersion;

	@GenModel(documentation="Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.")
	@ExtendedMetaData(kind="element", name="dependsOn", namespace="##targetNamespace")
	!resolve val ImplementationGuideDependsOn[*] dependsOn;

	@GenModel(documentation="A set of profiles that all resources covered by this implementation guide must conform to.")
	@ExtendedMetaData(kind="element", name="global", namespace="##targetNamespace")
	!resolve val ImplementationGuideGlobal[*] global;

	@GenModel(documentation="The information needed by an IG publisher tool to publish the whole implementation guide.")
	@ExtendedMetaData(kind="element", name="definition", namespace="##targetNamespace")
	!resolve val ImplementationGuideDefinition definition;

	@GenModel(documentation="Information about an assembled implementation guide, created by the publication tooling.")
	@ExtendedMetaData(kind="element", name="manifest", namespace="##targetNamespace")
	!resolve val ImplementationGuideManifest manifest;
}

@GenModel(documentation="A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.")
@ExtendedMetaData(name="ImplementationGuide.Definition", kind="elementOnly")
class ImplementationGuideDefinition extends BackboneElement {

	@GenModel(documentation="A logical group of resources. Logical groups can be used when building pages.")
	@ExtendedMetaData(kind="element", name="grouping", namespace="##targetNamespace")
	!resolve val ImplementationGuideGrouping[*] grouping;

	@GenModel(documentation="A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.")
	@ExtendedMetaData(kind="element", name="resource", namespace="##targetNamespace")
	!resolve val ImplementationGuideResource[*] resource;

	@GenModel(documentation="A page / section in the implementation guide. The root page is the implementation guide home page.")
	@ExtendedMetaData(kind="element", name="page", namespace="##targetNamespace")
	!resolve val ImplementationGuidePage page;

	@GenModel(documentation="A set of parameters that defines how the implementation guide is built. The parameters are defined by the relevant tools that build the implementation guides.")
	@ExtendedMetaData(kind="element", name="parameter", namespace="##targetNamespace")
	!resolve val ImplementationGuideParameter[*] parameter;

	@GenModel(documentation="A template for building resources.")
	@ExtendedMetaData(kind="element", name="template", namespace="##targetNamespace")
	!resolve val ImplementationGuideTemplate[*] template;
}

@GenModel(documentation="A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.")
@ExtendedMetaData(name="ImplementationGuide.DependsOn", kind="elementOnly")
class ImplementationGuideDependsOn extends BackboneElement {

	@GenModel(documentation="A canonical reference to the Implementation guide for the dependency.")
	@ExtendedMetaData(kind="element", name="uri", namespace="##targetNamespace")
	!resolve val Canonical[1] uri;

	@GenModel(documentation="The NPM package name for the Implementation Guide that this IG depends on.")
	@ExtendedMetaData(kind="element", name="packageId", namespace="##targetNamespace")
	!resolve val Id packageId;

	@GenModel(documentation="The version of the IG that is depended on, when the correct version is required to understand the IG correctly.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@GenModel(documentation="A description explaining the nature of the dependency on the listed IG.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val Markdown reason;
}

@GenModel(documentation="A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.")
@ExtendedMetaData(name="ImplementationGuide.Global", kind="elementOnly")
class ImplementationGuideGlobal extends BackboneElement {

	@GenModel(documentation="The type of resource that all instances must conform to.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val ResourceType[1] type;

	@GenModel(documentation="A reference to the profile that all instances must conform to.")
	@ExtendedMetaData(kind="element", name="profile", namespace="##targetNamespace")
	!resolve val Canonical[1] profile;
}

@GenModel(documentation="A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.")
@ExtendedMetaData(name="ImplementationGuide.Grouping", kind="elementOnly")
class ImplementationGuideGrouping extends BackboneElement {

	@GenModel(documentation="The human-readable title to display for the package of resources when rendering the implementation guide.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String[1] name;

	@GenModel(documentation="Human readable text describing the package.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;
}

@GenModel(documentation="A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.")
@ExtendedMetaData(name="ImplementationGuide.Manifest", kind="elementOnly")
class ImplementationGuideManifest extends BackboneElement {

	@GenModel(documentation="A pointer to official web page, PDF or other rendering of the implementation guide.")
	@ExtendedMetaData(kind="element", name="rendering", namespace="##targetNamespace")
	!resolve val Url rendering;

	@GenModel(documentation="A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.")
	@ExtendedMetaData(kind="element", name="resource", namespace="##targetNamespace")
	!resolve val ImplementationGuideResource1[+] resource;

	@GenModel(documentation="Information about a page within the IG.")
	@ExtendedMetaData(kind="element", name="page", namespace="##targetNamespace")
	!resolve val ImplementationGuidePage1[*] page;

	@GenModel(documentation="Indicates a relative path to an image that exists within the IG.")
	@ExtendedMetaData(kind="element", name="image", namespace="##targetNamespace")
	!resolve val String[*] image;

	@GenModel(documentation="Indicates the relative path of an additional non-page, non-image file that is part of the IG - e.g. zip, jar and similar files that could be the target of a hyperlink in a derived IG.")
	@ExtendedMetaData(kind="element", name="other", namespace="##targetNamespace")
	!resolve val String[*] other;
}

@GenModel(documentation="A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.")
@ExtendedMetaData(name="ImplementationGuide.Page", kind="elementOnly")
class ImplementationGuidePage extends BackboneElement {

	@ExtendedMetaData(kind="element", name="sourceUrl", namespace="##targetNamespace")
	!resolve val Url sourceUrl;

	@ExtendedMetaData(kind="element", name="sourceString", namespace="##targetNamespace")
	!resolve val String sourceString;

	@ExtendedMetaData(kind="element", name="sourceMarkdown", namespace="##targetNamespace")
	!resolve val Markdown sourceMarkdown;

	@GenModel(documentation="The url by which the page should be known when published.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val Url[1] name;

	@GenModel(documentation="A short title used to represent this page in navigational structures such as table of contents, bread crumbs, etc.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String[1] title;

	@GenModel(documentation="A code that indicates how the page is generated.")
	@ExtendedMetaData(kind="element", name="generation", namespace="##targetNamespace")
	!resolve val GuidePageGeneration[1] generation;

	@GenModel(documentation="Nested Pages/Sections under this page.")
	@ExtendedMetaData(kind="element", name="page", namespace="##targetNamespace")
	!resolve val ImplementationGuidePage[*] page;
}

@GenModel(documentation="A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.")
@ExtendedMetaData(name="ImplementationGuide.Page1", kind="elementOnly")
class ImplementationGuidePage1 extends BackboneElement {

	@GenModel(documentation="Relative path to the page.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String[1] name;

	@GenModel(documentation="Label for the page intended for human display.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="The name of an anchor available on the page.")
	@ExtendedMetaData(kind="element", name="anchor", namespace="##targetNamespace")
	!resolve val String[*] anchor;
}

@GenModel(documentation="A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.")
@ExtendedMetaData(name="ImplementationGuide.Parameter", kind="elementOnly")
class ImplementationGuideParameter extends BackboneElement {

	@GenModel(documentation="A tool-specific code that defines the parameter.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val Coding[1] code;

	@GenModel(documentation="Value for named type.")
	@ExtendedMetaData(kind="element", name="value", namespace="##targetNamespace")
	!resolve val String[1] value;
}

@GenModel(documentation="A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.")
@ExtendedMetaData(name="ImplementationGuide.Resource", kind="elementOnly")
class ImplementationGuideResource extends BackboneElement {

	@GenModel(documentation="Where this resource is found.")
	@ExtendedMetaData(kind="element", name="reference", namespace="##targetNamespace")
	!resolve val Reference[1] reference;

	@GenModel(documentation="Indicates the FHIR Version(s) this artifact is intended to apply to. If no versions are specified, the resource is assumed to apply to all the versions stated in ImplementationGuide.fhirVersion.")
	@ExtendedMetaData(kind="element", name="fhirVersion", namespace="##targetNamespace")
	!resolve val FHIRVersion[*] fhirVersion;

	@GenModel(documentation="A human assigned name for the resource. All resources SHOULD have a name, but the name may be extracted from the resource (e.g. ValueSet.name).")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="A description of the reason that a resource has been included in the implementation guide.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="If true, indicates the resource is an example instance.")
	@ExtendedMetaData(kind="element", name="isExample", namespace="##targetNamespace")
	!resolve val Boolean isExample;

	@GenModel(documentation="If present, indicates profile(s) the instance is valid against.")
	@ExtendedMetaData(kind="element", name="profile", namespace="##targetNamespace")
	!resolve val Canonical[*] profile;

	@GenModel(documentation="Reference to the id of the grouping this resource appears in.")
	@ExtendedMetaData(kind="element", name="groupingId", namespace="##targetNamespace")
	!resolve val Id groupingId;
}

@GenModel(documentation="A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.")
@ExtendedMetaData(name="ImplementationGuide.Resource1", kind="elementOnly")
class ImplementationGuideResource1 extends BackboneElement {

	@GenModel(documentation="Where this resource is found.")
	@ExtendedMetaData(kind="element", name="reference", namespace="##targetNamespace")
	!resolve val Reference[1] reference;

	@GenModel(documentation="If true, indicates the resource is an example instance.")
	@ExtendedMetaData(kind="element", name="isExample", namespace="##targetNamespace")
	!resolve val Boolean isExample;

	@GenModel(documentation="If present, indicates profile(s) the instance is valid against.")
	@ExtendedMetaData(kind="element", name="profile", namespace="##targetNamespace")
	!resolve val Canonical[*] profile;

	@GenModel(documentation="The relative path for primary page for this resource within the IG.")
	@ExtendedMetaData(kind="element", name="relativePath", namespace="##targetNamespace")
	!resolve val Url relativePath;
}

@GenModel(documentation="A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.")
@ExtendedMetaData(name="ImplementationGuide.Template", kind="elementOnly")
class ImplementationGuideTemplate extends BackboneElement {

	@GenModel(documentation="Type of template specified.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val Code[1] code;

	@GenModel(documentation="The source location for the template.")
	@ExtendedMetaData(kind="element", name="source", namespace="##targetNamespace")
	!resolve val String[1] source;

	@GenModel(documentation="The scope in which the template applies.")
	@ExtendedMetaData(kind="element", name="scope", namespace="##targetNamespace")
	!resolve val String scope;
}

@GenModel(documentation="An ingredient of a manufactured item or pharmaceutical product.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Ingredient", kind="elementOnly")
class Ingredient extends DomainResource {

	@GenModel(documentation="The identifier(s) of this Ingredient that are assigned by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier identifier;

	@GenModel(documentation="The status of this ingredient. Enables tracking the life-cycle of the content.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="The product which this ingredient is a constituent part of.")
	@ExtendedMetaData(kind="element", name="for", namespace="##targetNamespace")
	!resolve val Reference[*] for;

	@GenModel(documentation="A classification of the ingredient identifying its purpose within the product, e.g. active, inactive.")
	@ExtendedMetaData(kind="element", name="role", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] role;

	@GenModel(documentation="A classification of the ingredient identifying its precise purpose(s) in the drug product. This extends the Ingredient.role to add more detail. Example: antioxidant, alkalizing agent.")
	@ExtendedMetaData(kind="element", name="function", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] function;

	@GenModel(documentation="A classification of the ingredient according to where in the physical item it tends to be used, such the outer shell of a tablet, inner body or ink.")
	@ExtendedMetaData(kind="element", name="group", namespace="##targetNamespace")
	!resolve val CodeableConcept group;

	@GenModel(documentation="If the ingredient is a known or suspected allergen. Note that this is a property of the substance, so if a reference to a SubstanceDefinition is used to decribe that (rather than just a code), the allergen information should go there, not here.")
	@ExtendedMetaData(kind="element", name="allergenicIndicator", namespace="##targetNamespace")
	!resolve val Boolean allergenicIndicator;

	@GenModel(documentation="A place for providing any notes that are relevant to the component, e.g. removed during process, adjusted for loss on drying.")
	@ExtendedMetaData(kind="element", name="comment", namespace="##targetNamespace")
	!resolve val Markdown comment;

	@GenModel(documentation="The organization(s) that manufacture this ingredient. Can be used to indicate:         1) Organizations we are aware of that manufacture this ingredient         2) Specific Manufacturer(s) currently being used         3) Set of organisations allowed to manufacture this ingredient for this product         Users must be clear on the application of context relevant to their use case.")
	@ExtendedMetaData(kind="element", name="manufacturer", namespace="##targetNamespace")
	!resolve val IngredientManufacturer[*] manufacturer;

	@GenModel(documentation="The substance that comprises this ingredient.")
	@ExtendedMetaData(kind="element", name="substance", namespace="##targetNamespace")
	!resolve val IngredientSubstance[1] substance;
}

@GenModel(documentation="An ingredient of a manufactured item or pharmaceutical product.")
@ExtendedMetaData(name="Ingredient.Manufacturer", kind="elementOnly")
class IngredientManufacturer extends BackboneElement {

	@GenModel(documentation="The way in which this manufacturer is associated with the ingredient. For example whether it is a possible one (others allowed), or an exclusive authorized one for this ingredient. Note that this is not the manufacturing process role.")
	@ExtendedMetaData(kind="element", name="role", namespace="##targetNamespace")
	!resolve val IngredientManufacturerRole role;

	@GenModel(documentation="An organization that manufactures this ingredient.")
	@ExtendedMetaData(kind="element", name="manufacturer", namespace="##targetNamespace")
	!resolve val Reference[1] manufacturer;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="IngredientManufacturerRole", kind="elementOnly")
class IngredientManufacturerRole extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr IngredientManufacturerRoleEnum value;
}

@ExtendedMetaData(name="IngredientManufacturerRoleEnum")
enum IngredientManufacturerRoleEnum {

	@GenModel(documentation="Manufacturer is specifically allowed for this ingredient")
	allowed = 0;

	@GenModel(documentation="Manufacturer is known to make this ingredient in general")
	possible = 1;

	@GenModel(documentation="Manufacturer actually makes this particular ingredient")
	actual = 2;
}

@ExtendedMetaData(name="IngredientManufacturerRoleEnum:Object", baseType="IngredientManufacturerRoleEnum")
datatype IngredientManufacturerRoleEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="An ingredient of a manufactured item or pharmaceutical product.")
@ExtendedMetaData(name="Ingredient.ReferenceStrength", kind="elementOnly")
class IngredientReferenceStrength extends BackboneElement {

	@GenModel(documentation="Relevant reference substance.")
	@ExtendedMetaData(kind="element", name="substance", namespace="##targetNamespace")
	!resolve val CodeableReference[1] substance;

	@ExtendedMetaData(kind="element", name="strengthRatio", namespace="##targetNamespace")
	!resolve val Ratio strengthRatio;

	@ExtendedMetaData(kind="element", name="strengthRatioRange", namespace="##targetNamespace")
	!resolve val RatioRange strengthRatioRange;

	@ExtendedMetaData(kind="element", name="strengthQuantity", namespace="##targetNamespace")
	!resolve val Quantity strengthQuantity;

	@GenModel(documentation="For when strength is measured at a particular point or distance.")
	@ExtendedMetaData(kind="element", name="measurementPoint", namespace="##targetNamespace")
	!resolve val String measurementPoint;

	@GenModel(documentation="The country or countries for which the strength range applies.")
	@ExtendedMetaData(kind="element", name="country", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] country;
}

@GenModel(documentation="An ingredient of a manufactured item or pharmaceutical product.")
@ExtendedMetaData(name="Ingredient.Strength", kind="elementOnly")
class IngredientStrength extends BackboneElement {

	@ExtendedMetaData(kind="element", name="presentationRatio", namespace="##targetNamespace")
	!resolve val Ratio presentationRatio;

	@ExtendedMetaData(kind="element", name="presentationRatioRange", namespace="##targetNamespace")
	!resolve val RatioRange presentationRatioRange;

	@ExtendedMetaData(kind="element", name="presentationCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept presentationCodeableConcept;

	@ExtendedMetaData(kind="element", name="presentationQuantity", namespace="##targetNamespace")
	!resolve val Quantity presentationQuantity;

	@GenModel(documentation="A textual represention of either the whole of the presentation strength or a part of it - with the rest being in Strength.presentation as a ratio.")
	@ExtendedMetaData(kind="element", name="textPresentation", namespace="##targetNamespace")
	!resolve val String textPresentation;

	@ExtendedMetaData(kind="element", name="concentrationRatio", namespace="##targetNamespace")
	!resolve val Ratio concentrationRatio;

	@ExtendedMetaData(kind="element", name="concentrationRatioRange", namespace="##targetNamespace")
	!resolve val RatioRange concentrationRatioRange;

	@ExtendedMetaData(kind="element", name="concentrationCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept concentrationCodeableConcept;

	@ExtendedMetaData(kind="element", name="concentrationQuantity", namespace="##targetNamespace")
	!resolve val Quantity concentrationQuantity;

	@GenModel(documentation="A textual represention of either the whole of the concentration strength or a part of it - with the rest being in Strength.concentration as a ratio.")
	@ExtendedMetaData(kind="element", name="textConcentration", namespace="##targetNamespace")
	!resolve val String textConcentration;

	@GenModel(documentation="A code that indicates if the strength is, for example, based on the ingredient substance as stated or on the substance base (when the ingredient is a salt).")
	@ExtendedMetaData(kind="element", name="basis", namespace="##targetNamespace")
	!resolve val CodeableConcept basis;

	@GenModel(documentation="For when strength is measured at a particular point or distance. There are products where strength is measured at a particular point. For example, the strength of the ingredient in some inhalers is measured at a particular position relative to the point of aerosolization.")
	@ExtendedMetaData(kind="element", name="measurementPoint", namespace="##targetNamespace")
	!resolve val String measurementPoint;

	@GenModel(documentation="The country or countries for which the strength range applies.")
	@ExtendedMetaData(kind="element", name="country", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] country;

	@GenModel(documentation="Strength expressed in terms of a reference substance. For when the ingredient strength is additionally expressed as equivalent to the strength of some other closely related substance (e.g. salt vs. base). Reference strength represents the strength (quantitative composition) of the active moiety of the active substance. There are situations when the active substance and active moiety are different, therefore both a strength and a reference strength are needed.")
	@ExtendedMetaData(kind="element", name="referenceStrength", namespace="##targetNamespace")
	!resolve val IngredientReferenceStrength[*] referenceStrength;
}

@GenModel(documentation="An ingredient of a manufactured item or pharmaceutical product.")
@ExtendedMetaData(name="Ingredient.Substance", kind="elementOnly")
class IngredientSubstance extends BackboneElement {

	@GenModel(documentation="A code or full resource that represents the ingredient's substance.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableReference[1] code;

	@GenModel(documentation="The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item. The allowed repetitions do not represent different strengths, but are different representations - mathematically equivalent - of a single strength.")
	@ExtendedMetaData(kind="element", name="strength", namespace="##targetNamespace")
	!resolve val IngredientStrength[*] strength;
}

@GenModel(documentation="An instant in time - known at least to the second
Note: This is intended for where precisely observed times are required, typically system logs etc., and not human-reported times - for them, see date and dateTime (which can be as precise as instant, but is not required to be) below. UTC offset is always required
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="instant", kind="elementOnly")
class Instant extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	attr InstantPrimitive value;
}

@ExtendedMetaData(name="instant-primitive", baseType="http://www.eclipse.org/emf/2003/XMLType#dateTime", pattern="([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]{1,9})?(Z|(\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))")
datatype InstantPrimitive : javax.xml.datatype.XMLGregorianCalendar;

@GenModel(documentation="Details of a Health Insurance product/plan provided by an organization.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="InsurancePlan", kind="elementOnly")
class InsurancePlan extends DomainResource {

	@GenModel(documentation="Business identifiers assigned to this health insurance product which remain constant as the resource is updated and propagates from server to server.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The current state of the health insurance product.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus status;

	@GenModel(documentation="The kind of health insurance product.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] type;

	@GenModel(documentation="Official name of the health insurance product as designated by the owner.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="A list of alternate names that the product is known as, or was known as in the past.")
	@ExtendedMetaData(kind="element", name="alias", namespace="##targetNamespace")
	!resolve val String[*] alias;

	@GenModel(documentation="The period of time that the health insurance product is available.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;

	@GenModel(documentation="The entity that is providing  the health insurance product and underwriting the risk.  This is typically an insurance carriers, other third-party payers, or health plan sponsors comonly referred to as 'payers'.")
	@ExtendedMetaData(kind="element", name="ownedBy", namespace="##targetNamespace")
	!resolve val Reference ownedBy;

	@GenModel(documentation="An organization which administer other services such as underwriting, customer service and/or claims processing on behalf of the health insurance product owner.")
	@ExtendedMetaData(kind="element", name="administeredBy", namespace="##targetNamespace")
	!resolve val Reference administeredBy;

	@GenModel(documentation="The geographic region in which a health insurance product's benefits apply.")
	@ExtendedMetaData(kind="element", name="coverageArea", namespace="##targetNamespace")
	!resolve val Reference[*] coverageArea;

	@GenModel(documentation="The contact details of communication devices available relevant to the specific Insurance Plan/Product. This can include addresses, phone numbers, fax numbers, mobile numbers, email addresses and web sites.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ExtendedContactDetail[*] contact;

	@GenModel(documentation="The technical endpoints providing access to services operated for the health insurance product.")
	@ExtendedMetaData(kind="element", name="endpoint", namespace="##targetNamespace")
	!resolve val Reference[*] endpoint;

	@GenModel(documentation="Reference to the network included in the health insurance product.")
	@ExtendedMetaData(kind="element", name="network", namespace="##targetNamespace")
	!resolve val Reference[*] network;

	@GenModel(documentation="Details about the coverage offered by the insurance product.")
	@ExtendedMetaData(kind="element", name="coverage", namespace="##targetNamespace")
	!resolve val InsurancePlanCoverage[*] coverage;

	@GenModel(documentation="Details about an insurance plan.")
	@ExtendedMetaData(kind="element", name="plan", namespace="##targetNamespace")
	!resolve val InsurancePlanPlan[*] plan;
}

@GenModel(documentation="Details of a Health Insurance product/plan provided by an organization.")
@ExtendedMetaData(name="InsurancePlan.Benefit", kind="elementOnly")
class InsurancePlanBenefit extends BackboneElement {

	@GenModel(documentation="Type of benefit (primary care; speciality care; inpatient; outpatient).")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@GenModel(documentation="The referral requirements to have access/coverage for this benefit.")
	@ExtendedMetaData(kind="element", name="requirement", namespace="##targetNamespace")
	!resolve val String requirement;

	@GenModel(documentation="The specific limits on the benefit.")
	@ExtendedMetaData(kind="element", name="limit", namespace="##targetNamespace")
	!resolve val InsurancePlanLimit[*] limit;
}

@GenModel(documentation="Details of a Health Insurance product/plan provided by an organization.")
@ExtendedMetaData(name="InsurancePlan.Benefit1", kind="elementOnly")
class InsurancePlanBenefit1 extends BackboneElement {

	@GenModel(documentation="Type of specific benefit (preventative; primary care office visit; speciality office visit; hospitalization; emergency room; urgent care).")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@GenModel(documentation="List of the costs associated with a specific benefit.")
	@ExtendedMetaData(kind="element", name="cost", namespace="##targetNamespace")
	!resolve val InsurancePlanCost[*] cost;
}

@GenModel(documentation="Details of a Health Insurance product/plan provided by an organization.")
@ExtendedMetaData(name="InsurancePlan.Cost", kind="elementOnly")
class InsurancePlanCost extends BackboneElement {

	@GenModel(documentation="Type of cost (copay; individual cap; family cap; coinsurance; deductible).")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@GenModel(documentation="Whether the cost applies to in-network or out-of-network providers (in-network; out-of-network; other).")
	@ExtendedMetaData(kind="element", name="applicability", namespace="##targetNamespace")
	!resolve val CodeableConcept applicability;

	@GenModel(documentation="Additional information about the cost, such as information about funding sources (e.g. HSA, HRA, FSA, RRA).")
	@ExtendedMetaData(kind="element", name="qualifiers", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] qualifiers;

	@GenModel(documentation="The actual cost value. (some of the costs may be represented as percentages rather than currency, e.g. 10% coinsurance).")
	@ExtendedMetaData(kind="element", name="value", namespace="##targetNamespace")
	!resolve val Quantity value;
}

@GenModel(documentation="Details of a Health Insurance product/plan provided by an organization.")
@ExtendedMetaData(name="InsurancePlan.Coverage", kind="elementOnly")
class InsurancePlanCoverage extends BackboneElement {

	@GenModel(documentation="Type of coverage  (Medical; Dental; Mental Health; Substance Abuse; Vision; Drug; Short Term; Long Term Care; Hospice; Home Health).")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@GenModel(documentation="Reference to the network that providing the type of coverage.")
	@ExtendedMetaData(kind="element", name="network", namespace="##targetNamespace")
	!resolve val Reference[*] network;

	@GenModel(documentation="Specific benefits under this type of coverage.")
	@ExtendedMetaData(kind="element", name="benefit", namespace="##targetNamespace")
	!resolve val InsurancePlanBenefit[+] benefit;
}

@GenModel(documentation="Details of a Health Insurance product/plan provided by an organization.")
@ExtendedMetaData(name="InsurancePlan.GeneralCost", kind="elementOnly")
class InsurancePlanGeneralCost extends BackboneElement {

	@GenModel(documentation="Type of cost.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="Number of participants enrolled in the plan.")
	@ExtendedMetaData(kind="element", name="groupSize", namespace="##targetNamespace")
	!resolve val PositiveInt groupSize;

	@GenModel(documentation="Value of the cost.")
	@ExtendedMetaData(kind="element", name="cost", namespace="##targetNamespace")
	!resolve val Money cost;

	@GenModel(documentation="Additional information about the general costs associated with this plan.")
	@ExtendedMetaData(kind="element", name="comment", namespace="##targetNamespace")
	!resolve val String comment;
}

@GenModel(documentation="Details of a Health Insurance product/plan provided by an organization.")
@ExtendedMetaData(name="InsurancePlan.Limit", kind="elementOnly")
class InsurancePlanLimit extends BackboneElement {

	@GenModel(documentation="The maximum amount of a service item a plan will pay for a covered benefit.  For examples. wellness visits, or eyeglasses.")
	@ExtendedMetaData(kind="element", name="value", namespace="##targetNamespace")
	!resolve val Quantity value;

	@GenModel(documentation="The specific limit on the benefit.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;
}

@GenModel(documentation="Details of a Health Insurance product/plan provided by an organization.")
@ExtendedMetaData(name="InsurancePlan.Plan", kind="elementOnly")
class InsurancePlanPlan extends BackboneElement {

	@GenModel(documentation="Business identifiers assigned to this health insurance plan which remain constant as the resource is updated and propagates from server to server.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Type of plan. For example, \"Platinum\" or \"High Deductable\".")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="The geographic region in which a health insurance plan's benefits apply.")
	@ExtendedMetaData(kind="element", name="coverageArea", namespace="##targetNamespace")
	!resolve val Reference[*] coverageArea;

	@GenModel(documentation="Reference to the network that providing the type of coverage.")
	@ExtendedMetaData(kind="element", name="network", namespace="##targetNamespace")
	!resolve val Reference[*] network;

	@GenModel(documentation="Overall costs associated with the plan.")
	@ExtendedMetaData(kind="element", name="generalCost", namespace="##targetNamespace")
	!resolve val InsurancePlanGeneralCost[*] generalCost;

	@GenModel(documentation="Costs associated with the coverage provided by the product.")
	@ExtendedMetaData(kind="element", name="specificCost", namespace="##targetNamespace")
	!resolve val InsurancePlanSpecificCost[*] specificCost;
}

@GenModel(documentation="Details of a Health Insurance product/plan provided by an organization.")
@ExtendedMetaData(name="InsurancePlan.SpecificCost", kind="elementOnly")
class InsurancePlanSpecificCost extends BackboneElement {

	@GenModel(documentation="General category of benefit (Medical; Dental; Vision; Drug; Mental Health; Substance Abuse; Hospice, Home Health).")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] category;

	@GenModel(documentation="List of the specific benefits under this category of benefit.")
	@ExtendedMetaData(kind="element", name="benefit", namespace="##targetNamespace")
	!resolve val InsurancePlanBenefit1[*] benefit;
}

@GenModel(documentation="A whole number
32 bit number; for values larger than this, use decimal
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="integer", kind="elementOnly")
class Integer extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr IntegerPrimitive value;
}

@GenModel(documentation="A very large whole number
Typically this is used for record counters (e.g. database keys)
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="integer64", kind="elementOnly")
class Integer64 extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr Integer64Primitive value;
}

@ExtendedMetaData(name="integer64-primitive", baseType="http://www.eclipse.org/emf/2003/XMLType#long", pattern="[0]|[-+]?[1-9][0-9]*")
datatype Integer64Primitive : long;

@ExtendedMetaData(name="integer64-primitive:Object", baseType="integer64-primitive")
datatype Integer64PrimitiveObject : java.lang.Long;

@ExtendedMetaData(name="integer-primitive", baseType="http://www.eclipse.org/emf/2003/XMLType#int", pattern="[0]|[-+]?[1-9][0-9]*")
datatype IntegerPrimitive : int;

@ExtendedMetaData(name="integer-primitive:Object", baseType="integer-primitive")
datatype IntegerPrimitiveObject : java.lang.Integer;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="InteractionTrigger", kind="elementOnly")
class InteractionTrigger extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr InteractionTriggerEnum value;
}

@ExtendedMetaData(name="InteractionTriggerEnum")
enum InteractionTriggerEnum {

	@GenModel(documentation="create")
	create = 0;

	@GenModel(documentation="update")
	update = 1;

	@GenModel(documentation="delete")
	delete = 2;
}

@ExtendedMetaData(name="InteractionTriggerEnum:Object", baseType="InteractionTriggerEnum")
datatype InteractionTriggerEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="InventoryCountType", kind="elementOnly")
class InventoryCountType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr InventoryCountTypeEnum value;
}

@ExtendedMetaData(name="InventoryCountTypeEnum")
enum InventoryCountTypeEnum {

	@GenModel(documentation="Snapshot")
	snapshot = 0;

	@GenModel(documentation="Difference")
	difference = 1;
}

@ExtendedMetaData(name="InventoryCountTypeEnum:Object", baseType="InventoryCountTypeEnum")
datatype InventoryCountTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A functional description of an inventory item used in inventory and supply-related workflows.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="InventoryItem", kind="elementOnly")
class InventoryItem extends DomainResource {

	@GenModel(documentation="Business identifier for the inventory item.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Status of the item entry.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val InventoryItemStatusCodes[1] status;

	@GenModel(documentation="Category or class of the item.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] category;

	@GenModel(documentation="Code designating the specific type of item.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] code;

	@GenModel(documentation="The item name(s) - the brand name, or common name, functional name, generic name.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val InventoryItemName[*] name;

	@GenModel(documentation="Organization(s) responsible for the product.")
	@ExtendedMetaData(kind="element", name="responsibleOrganization", namespace="##targetNamespace")
	!resolve val InventoryItemResponsibleOrganization[*] responsibleOrganization;

	@GenModel(documentation="The descriptive characteristics of the inventory item.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val InventoryItemDescription description;

	@GenModel(documentation="The usage status e.g. recalled, in use, discarded... This can be used to indicate that the items have been taken out of inventory, or are in use, etc.")
	@ExtendedMetaData(kind="element", name="inventoryStatus", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] inventoryStatus;

	@GenModel(documentation="The base unit of measure - the unit in which the product is used or counted.")
	@ExtendedMetaData(kind="element", name="baseUnit", namespace="##targetNamespace")
	!resolve val CodeableConcept baseUnit;

	@GenModel(documentation="Net content or amount present in the item.")
	@ExtendedMetaData(kind="element", name="netContent", namespace="##targetNamespace")
	!resolve val Quantity netContent;

	@GenModel(documentation="Association with other items or products.")
	@ExtendedMetaData(kind="element", name="association", namespace="##targetNamespace")
	!resolve val InventoryItemAssociation[*] association;

	@GenModel(documentation="The descriptive or identifying characteristics of the item.")
	@ExtendedMetaData(kind="element", name="characteristic", namespace="##targetNamespace")
	!resolve val InventoryItemCharacteristic[*] characteristic;

	@GenModel(documentation="Instances or occurrences of the product.")
	@ExtendedMetaData(kind="element", name="instance", namespace="##targetNamespace")
	!resolve val InventoryItemInstance instance;

	@GenModel(documentation="Link to a product resource used in clinical workflows.")
	@ExtendedMetaData(kind="element", name="productReference", namespace="##targetNamespace")
	!resolve val Reference productReference;
}

@GenModel(documentation="A functional description of an inventory item used in inventory and supply-related workflows.")
@ExtendedMetaData(name="InventoryItem.Association", kind="elementOnly")
class InventoryItemAssociation extends BackboneElement {

	@GenModel(documentation="This attribute defined the type of association when establishing associations or relations between items, e.g. 'packaged within' or 'used with' or 'to be mixed with.")
	@ExtendedMetaData(kind="element", name="associationType", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] associationType;

	@GenModel(documentation="The related item or product.")
	@ExtendedMetaData(kind="element", name="relatedItem", namespace="##targetNamespace")
	!resolve val Reference[1] relatedItem;

	@GenModel(documentation="The quantity of the related product in this product - Numerator is the quantity of the related product. Denominator is the quantity of the present product. For example a value of 20 means that this product contains 20 units of the related product; a value of 1:20 means the inverse - that the contained product contains 20 units of the present product.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Ratio[1] quantity;
}

@GenModel(documentation="A functional description of an inventory item used in inventory and supply-related workflows.")
@ExtendedMetaData(name="InventoryItem.Characteristic", kind="elementOnly")
class InventoryItemCharacteristic extends BackboneElement {

	@GenModel(documentation="The type of characteristic that is being defined.")
	@ExtendedMetaData(kind="element", name="characteristicType", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] characteristicType;

	@ExtendedMetaData(kind="element", name="valueString", namespace="##targetNamespace")
	!resolve val String valueString;

	@ExtendedMetaData(kind="element", name="valueInteger", namespace="##targetNamespace")
	!resolve val Integer valueInteger;

	@ExtendedMetaData(kind="element", name="valueDecimal", namespace="##targetNamespace")
	!resolve val Decimal valueDecimal;

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;

	@ExtendedMetaData(kind="element", name="valueUrl", namespace="##targetNamespace")
	!resolve val Url valueUrl;

	@ExtendedMetaData(kind="element", name="valueDateTime", namespace="##targetNamespace")
	!resolve val DateTime valueDateTime;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueRange", namespace="##targetNamespace")
	!resolve val Range valueRange;

	@ExtendedMetaData(kind="element", name="valueRatio", namespace="##targetNamespace")
	!resolve val Ratio valueRatio;

	@ExtendedMetaData(kind="element", name="valueAnnotation", namespace="##targetNamespace")
	!resolve val Annotation valueAnnotation;

	@ExtendedMetaData(kind="element", name="valueAddress", namespace="##targetNamespace")
	!resolve val Address valueAddress;

	@ExtendedMetaData(kind="element", name="valueDuration", namespace="##targetNamespace")
	!resolve val Duration valueDuration;

	@ExtendedMetaData(kind="element", name="valueCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept valueCodeableConcept;
}

@GenModel(documentation="A functional description of an inventory item used in inventory and supply-related workflows.")
@ExtendedMetaData(name="InventoryItem.Description", kind="elementOnly")
class InventoryItemDescription extends BackboneElement {

	@GenModel(documentation="The language for the item description, when an item must be described in different languages and those languages may be authoritative and not translations of a 'main' language.")
	@ExtendedMetaData(kind="element", name="language", namespace="##targetNamespace")
	!resolve val CommonLanguages language;

	@GenModel(documentation="Textual description of the item.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val String description;
}

@GenModel(documentation="A functional description of an inventory item used in inventory and supply-related workflows.")
@ExtendedMetaData(name="InventoryItem.Instance", kind="elementOnly")
class InventoryItemInstance extends BackboneElement {

	@GenModel(documentation="The identifier for the physical instance, typically a serial number.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The lot or batch number of the item.")
	@ExtendedMetaData(kind="element", name="lotNumber", namespace="##targetNamespace")
	!resolve val String lotNumber;

	@GenModel(documentation="The expiry date or date and time for the product.")
	@ExtendedMetaData(kind="element", name="expiry", namespace="##targetNamespace")
	!resolve val DateTime expiry;

	@GenModel(documentation="The subject that the item is associated with.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference subject;

	@GenModel(documentation="The location that the item is associated with.")
	@ExtendedMetaData(kind="element", name="location", namespace="##targetNamespace")
	!resolve val Reference location;
}

@GenModel(documentation="A functional description of an inventory item used in inventory and supply-related workflows.")
@ExtendedMetaData(name="InventoryItem.Name", kind="elementOnly")
class InventoryItemName extends BackboneElement {

	@GenModel(documentation="The type of name e.g. 'brand-name', 'functional-name', 'common-name'.")
	@ExtendedMetaData(kind="element", name="nameType", namespace="##targetNamespace")
	!resolve val Coding[1] nameType;

	@GenModel(documentation="The language that the item name is expressed in.")
	@ExtendedMetaData(kind="element", name="language", namespace="##targetNamespace")
	!resolve val CommonLanguages[1] language;

	@GenModel(documentation="The name or designation that the item is given.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String[1] name;
}

@GenModel(documentation="A functional description of an inventory item used in inventory and supply-related workflows.")
@ExtendedMetaData(name="InventoryItem.ResponsibleOrganization", kind="elementOnly")
class InventoryItemResponsibleOrganization extends BackboneElement {

	@GenModel(documentation="The role of the organization e.g. manufacturer, distributor, etc.")
	@ExtendedMetaData(kind="element", name="role", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] role;

	@GenModel(documentation="An organization that has an association with the item, e.g. manufacturer, distributor, responsible, etc.")
	@ExtendedMetaData(kind="element", name="organization", namespace="##targetNamespace")
	!resolve val Reference[1] organization;
}

@GenModel(documentation="A coded concept specifying the status of the inventory item.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="InventoryItemStatusCodes", kind="elementOnly")
class InventoryItemStatusCodes extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr InventoryItemStatusCodesEnum value;
}

@ExtendedMetaData(name="InventoryItemStatusCodesEnum")
enum InventoryItemStatusCodesEnum {

	@GenModel(documentation="Active")
	active = 0;

	@GenModel(documentation="Inactive")
	inactive = 1;

	@GenModel(documentation="Entered in Error")
	enteredInError = 2;

	@GenModel(documentation="Unknown")
	unknown = 3;
}

@ExtendedMetaData(name="InventoryItemStatusCodesEnum:Object", baseType="InventoryItemStatusCodesEnum")
datatype InventoryItemStatusCodesEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A report of inventory or stock items.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="InventoryReport", kind="elementOnly")
class InventoryReport extends DomainResource {

	@GenModel(documentation="Business identifier for the InventoryReport.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The status of the inventory check or notification - whether this is draft (e.g. the report is still pending some updates) or active.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val InventoryReportStatus[1] status;

	@GenModel(documentation="Whether the report is about the current inventory count (snapshot) or a differential change in inventory (change).")
	@ExtendedMetaData(kind="element", name="countType", namespace="##targetNamespace")
	!resolve val InventoryCountType[1] countType;

	@GenModel(documentation="What type of operation is being performed - addition or subtraction.")
	@ExtendedMetaData(kind="element", name="operationType", namespace="##targetNamespace")
	!resolve val CodeableConcept operationType;

	@GenModel(documentation="The reason for this count - regular count, ad-hoc count, new arrivals, etc.")
	@ExtendedMetaData(kind="element", name="operationTypeReason", namespace="##targetNamespace")
	!resolve val CodeableConcept operationTypeReason;

	@GenModel(documentation="When the report has been submitted.")
	@ExtendedMetaData(kind="element", name="reportedDateTime", namespace="##targetNamespace")
	!resolve val DateTime[1] reportedDateTime;

	@GenModel(documentation="Who submits the report.")
	@ExtendedMetaData(kind="element", name="reporter", namespace="##targetNamespace")
	!resolve val Reference reporter;

	@GenModel(documentation="The period the report refers to.")
	@ExtendedMetaData(kind="element", name="reportingPeriod", namespace="##targetNamespace")
	!resolve val Period reportingPeriod;

	@GenModel(documentation="An inventory listing section (grouped by any of the attributes).")
	@ExtendedMetaData(kind="element", name="inventoryListing", namespace="##targetNamespace")
	!resolve val InventoryReportInventoryListing[*] inventoryListing;

	@GenModel(documentation="A note associated with the InventoryReport.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;
}

@GenModel(documentation="A report of inventory or stock items.")
@ExtendedMetaData(name="InventoryReport.InventoryListing", kind="elementOnly")
class InventoryReportInventoryListing extends BackboneElement {

	@GenModel(documentation="Location of the inventory items.")
	@ExtendedMetaData(kind="element", name="location", namespace="##targetNamespace")
	!resolve val Reference location;

	@GenModel(documentation="The status of the items.")
	@ExtendedMetaData(kind="element", name="itemStatus", namespace="##targetNamespace")
	!resolve val CodeableConcept itemStatus;

	@GenModel(documentation="The date and time when the items were counted.")
	@ExtendedMetaData(kind="element", name="countingDateTime", namespace="##targetNamespace")
	!resolve val DateTime countingDateTime;

	@GenModel(documentation="The item or items in this listing.")
	@ExtendedMetaData(kind="element", name="item", namespace="##targetNamespace")
	!resolve val InventoryReportItem[*] item;
}

@GenModel(documentation="A report of inventory or stock items.")
@ExtendedMetaData(name="InventoryReport.Item", kind="elementOnly")
class InventoryReportItem extends BackboneElement {

	@GenModel(documentation="The inventory category or classification of the items being reported. This is meant not for defining the product, but for inventory categories e.g. 'pending recount' or 'damaged'.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept category;

	@GenModel(documentation="The quantity of the item or items being reported.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Quantity[1] quantity;

	@GenModel(documentation="The code or reference to the item type.")
	@ExtendedMetaData(kind="element", name="item", namespace="##targetNamespace")
	!resolve val CodeableReference[1] item;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="InventoryReportStatus", kind="elementOnly")
class InventoryReportStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr InventoryReportStatusEnum value;
}

@ExtendedMetaData(name="InventoryReportStatusEnum")
enum InventoryReportStatusEnum {

	@GenModel(documentation="Draft")
	draft = 0;

	@GenModel(documentation="Requested")
	requested = 1;

	@GenModel(documentation="Active")
	active = 2;

	@GenModel(documentation="Entered in Error")
	enteredInError = 3;
}

@ExtendedMetaData(name="InventoryReportStatusEnum:Object", baseType="InventoryReportStatusEnum")
datatype InventoryReportStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="Invoice containing collected ChargeItems from an Account with calculated individual and total price for Billing purpose.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Invoice", kind="elementOnly")
class Invoice extends DomainResource {

	@GenModel(documentation="Identifier of this Invoice, often used for reference in correspondence about this invoice or for tracking of payments.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The current state of the Invoice.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val InvoiceStatus[1] status;

	@GenModel(documentation="In case of Invoice cancellation a reason must be given (entered in error, superseded by corrected invoice etc.).")
	@ExtendedMetaData(kind="element", name="cancelledReason", namespace="##targetNamespace")
	!resolve val String cancelledReason;

	@GenModel(documentation="Type of Invoice depending on domain, realm an usage (e.g. internal/external, dental, preliminary).")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="The individual or set of individuals receiving the goods and services billed in this invoice.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference subject;

	@GenModel(documentation="The individual or Organization responsible for balancing of this invoice.")
	@ExtendedMetaData(kind="element", name="recipient", namespace="##targetNamespace")
	!resolve val Reference recipient;

	@GenModel(documentation="Depricared by the element below.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="Date/time(s) of when this Invoice was posted.")
	@ExtendedMetaData(kind="element", name="creation", namespace="##targetNamespace")
	!resolve val DateTime creation;

	@ExtendedMetaData(kind="element", name="periodDate", namespace="##targetNamespace")
	!resolve val Date periodDate;

	@ExtendedMetaData(kind="element", name="periodPeriod", namespace="##targetNamespace")
	!resolve val Period periodPeriod;

	@GenModel(documentation="Indicates who or what performed or participated in the charged service.")
	@ExtendedMetaData(kind="element", name="participant", namespace="##targetNamespace")
	!resolve val InvoiceParticipant[*] participant;

	@GenModel(documentation="The organizationissuing the Invoice.")
	@ExtendedMetaData(kind="element", name="issuer", namespace="##targetNamespace")
	!resolve val Reference issuer;

	@GenModel(documentation="Account which is supposed to be balanced with this Invoice.")
	@ExtendedMetaData(kind="element", name="account", namespace="##targetNamespace")
	!resolve val Reference account;

	@GenModel(documentation="Each line item represents one charge for goods and services rendered. Details such.ofType(date), code and amount are found in the referenced ChargeItem resource.")
	@ExtendedMetaData(kind="element", name="lineItem", namespace="##targetNamespace")
	!resolve val InvoiceLineItem[*] lineItem;

	@GenModel(documentation="The total amount for the Invoice may be calculated as the sum of the line items with surcharges/deductions that apply in certain conditions.  The priceComponent element can be used to offer transparency to the recipient of the Invoice of how the total price was calculated.")
	@ExtendedMetaData(kind="element", name="totalPriceComponent", namespace="##targetNamespace")
	!resolve val MonetaryComponent[*] totalPriceComponent;

	@GenModel(documentation="Invoice total , taxes excluded.")
	@ExtendedMetaData(kind="element", name="totalNet", namespace="##targetNamespace")
	!resolve val Money totalNet;

	@GenModel(documentation="Invoice total, tax included.")
	@ExtendedMetaData(kind="element", name="totalGross", namespace="##targetNamespace")
	!resolve val Money totalGross;

	@GenModel(documentation="Payment details such as banking details, period of payment, deductibles, methods of payment.")
	@ExtendedMetaData(kind="element", name="paymentTerms", namespace="##targetNamespace")
	!resolve val Markdown paymentTerms;

	@GenModel(documentation="Comments made about the invoice by the issuer, subject, or other participants.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;
}

@GenModel(documentation="Invoice containing collected ChargeItems from an Account with calculated individual and total price for Billing purpose.")
@ExtendedMetaData(name="Invoice.LineItem", kind="elementOnly")
class InvoiceLineItem extends BackboneElement {

	@GenModel(documentation="Sequence in which the items appear on the invoice.")
	@ExtendedMetaData(kind="element", name="sequence", namespace="##targetNamespace")
	!resolve val PositiveInt sequence;

	@ExtendedMetaData(kind="element", name="servicedDate", namespace="##targetNamespace")
	!resolve val Date servicedDate;

	@ExtendedMetaData(kind="element", name="servicedPeriod", namespace="##targetNamespace")
	!resolve val Period servicedPeriod;

	@ExtendedMetaData(kind="element", name="chargeItemReference", namespace="##targetNamespace")
	!resolve val Reference chargeItemReference;

	@ExtendedMetaData(kind="element", name="chargeItemCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept chargeItemCodeableConcept;

	@GenModel(documentation="The price for a ChargeItem may be calculated as a base price with surcharges/deductions that apply in certain conditions. A ChargeItemDefinition resource that defines the prices, factors and conditions that apply to a billing code is currently under development. The priceComponent element can be used to offer transparency to the recipient of the Invoice as to how the prices have been calculated.")
	@ExtendedMetaData(kind="element", name="priceComponent", namespace="##targetNamespace")
	!resolve val MonetaryComponent[*] priceComponent;
}

@GenModel(documentation="Invoice containing collected ChargeItems from an Account with calculated individual and total price for Billing purpose.")
@ExtendedMetaData(name="Invoice.Participant", kind="elementOnly")
class InvoiceParticipant extends BackboneElement {

	@GenModel(documentation="Describes the type of involvement (e.g. transcriptionist, creator etc.). If the invoice has been created automatically, the Participant may be a billing engine or another kind of device.")
	@ExtendedMetaData(kind="element", name="role", namespace="##targetNamespace")
	!resolve val CodeableConcept role;

	@GenModel(documentation="The device, practitioner, etc. who performed or participated in the service.")
	@ExtendedMetaData(kind="element", name="actor", namespace="##targetNamespace")
	!resolve val Reference[1] actor;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="InvoiceStatus", kind="elementOnly")
class InvoiceStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr InvoiceStatusEnum value;
}

@ExtendedMetaData(name="InvoiceStatusEnum")
enum InvoiceStatusEnum {

	@GenModel(documentation="draft")
	draft = 0;

	@GenModel(documentation="issued")
	issued = 1;

	@GenModel(documentation="balanced")
	balanced = 2;

	@GenModel(documentation="cancelled")
	cancelled = 3;

	@GenModel(documentation="entered in error")
	enteredInError = 4;
}

@ExtendedMetaData(name="InvoiceStatusEnum:Object", baseType="InvoiceStatusEnum")
datatype InvoiceStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="IssueSeverity", kind="elementOnly")
class IssueSeverity extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr IssueSeverityEnum value;
}

@ExtendedMetaData(name="IssueSeverityEnum")
enum IssueSeverityEnum {

	@GenModel(documentation="Fatal")
	fatal = 0;

	@GenModel(documentation="Error")
	error = 1;

	@GenModel(documentation="Warning")
	warning = 2;

	@GenModel(documentation="Information")
	information = 3;

	@GenModel(documentation="Operation Successful")
	success = 4;
}

@ExtendedMetaData(name="IssueSeverityEnum:Object", baseType="IssueSeverityEnum")
datatype IssueSeverityEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="IssueType", kind="elementOnly")
class IssueType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr IssueTypeEnum value;
}

@ExtendedMetaData(name="IssueTypeEnum")
enum IssueTypeEnum {

	@GenModel(documentation="Invalid Content")
	invalid = 0;

	@GenModel(documentation="Structural Issue")
	structure = 1;

	@GenModel(documentation="Required element missing")
	required = 2;

	@GenModel(documentation="Element value invalid")
	value = 3;

	@GenModel(documentation="Validation rule failed")
	invariant = 4;

	@GenModel(documentation="Security Problem")
	security = 5;

	@GenModel(documentation="Login Required")
	login = 6;

	@GenModel(documentation="Unknown User")
	unknown = 7;

	@GenModel(documentation="Session Expired")
	expired = 8;

	@GenModel(documentation="Forbidden")
	forbidden = 9;

	@GenModel(documentation="Information  Suppressed")
	suppressed = 10;

	@GenModel(documentation="Processing Failure")
	processing = 11;

	@GenModel(documentation="Content not supported")
	notSupported = 12;

	@GenModel(documentation="Duplicate")
	duplicate = 13;

	@GenModel(documentation="Multiple Matches")
	multipleMatches = 14;

	@GenModel(documentation="Not Found")
	notFound = 15;

	@GenModel(documentation="Deleted")
	deleted = 16;

	@GenModel(documentation="Content Too Long")
	tooLong = 17;

	@GenModel(documentation="Invalid Code")
	codeInvalid = 18;

	@GenModel(documentation="Unacceptable Extension")
	extension = 19;

	@GenModel(documentation="Operation Too Costly")
	tooCostly = 20;

	@GenModel(documentation="Business Rule Violation")
	businessRule = 21;

	@GenModel(documentation="Edit Version Conflict")
	conflict = 22;

	@GenModel(documentation="Limited Filter Application")
	limitedFilter = 23;

	@GenModel(documentation="Transient Issue")
	~transient = 24;

	@GenModel(documentation="Lock Error")
	lockError = 25;

	@GenModel(documentation="No Store Available")
	noStore = 26;

	@GenModel(documentation="Exception")
	exception = 27;

	@GenModel(documentation="Timeout")
	timeout = 28;

	@GenModel(documentation="Incomplete Results")
	incomplete = 29;

	@GenModel(documentation="Throttled")
	throttled = 30;

	@GenModel(documentation="Informational Note")
	informational = 31;

	@GenModel(documentation="Operation Successful")
	success = 32;
}

@ExtendedMetaData(name="IssueTypeEnum:Object", baseType="IssueTypeEnum")
datatype IssueTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="JurisdictionValueSet", kind="elementOnly")
class JurisdictionValueSet extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	attr JurisdictionValueSetEnum value;
}

@ExtendedMetaData(name="JurisdictionValueSetEnum", baseType="code-primitive")
datatype JurisdictionValueSetEnum : java.lang.String;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Kind", kind="elementOnly")
class Kind extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr KindEnum value;
}

@ExtendedMetaData(name="KindEnum")
enum KindEnum {

	@GenModel(documentation="Insurance")
	insurance = 0;

	@GenModel(documentation="Self-pay")
	selfPay = 1;

	@GenModel(documentation="Other")
	other = 2;
}

@ExtendedMetaData(name="KindEnum:Object", baseType="KindEnum")
datatype KindEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="The Library resource is a general-purpose container for knowledge asset definitions. It can be used to describe and expose existing knowledge assets such as logic libraries and information model descriptions, as well as to describe a collection of knowledge assets.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Library", kind="elementOnly")
class Library extends MetadataResource {

	@GenModel(documentation="An absolute URI that is used to identify this library when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this library is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the library is stored on different servers.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri url;

	@GenModel(documentation="A formal identifier that is used to identify this library when it is represented in other formats, or referenced in a specification, model, design or an instance. e.g. CMS or NQF identifiers for a measure artifact. Note that at least one identifier is required for non-experimental active artifacts.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The identifier that is used to identify this version of the library when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the library author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@ExtendedMetaData(kind="element", name="versionAlgorithmString", namespace="##targetNamespace")
	!resolve val String versionAlgorithmString;

	@ExtendedMetaData(kind="element", name="versionAlgorithmCoding", namespace="##targetNamespace")
	!resolve val Coding versionAlgorithmCoding;

	@GenModel(documentation="A natural language name identifying the library. This name should be usable as an identifier for the module by machine processing applications such as code generation.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="A short, descriptive, user-friendly title for the library.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="An explanatory or alternate title for the library giving additional information about its content.")
	@ExtendedMetaData(kind="element", name="subtitle", namespace="##targetNamespace")
	!resolve val String subtitle;

	@GenModel(documentation="The status of this library. Enables tracking the life-cycle of the content.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="A Boolean value to indicate that this library is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.")
	@ExtendedMetaData(kind="element", name="experimental", namespace="##targetNamespace")
	!resolve val Boolean experimental;

	@GenModel(documentation="Identifies the type of library such as a Logic Library, Model Definition, Asset Collection, or Module Definition.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@ExtendedMetaData(kind="element", name="subjectCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept subjectCodeableConcept;

	@ExtendedMetaData(kind="element", name="subjectReference", namespace="##targetNamespace")
	!resolve val Reference subjectReference;

	@GenModel(documentation="The date  (and optionally time) when the library was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the library changes.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="The name of the organization or individual responsible for the release and ongoing maintenance of the library.")
	@ExtendedMetaData(kind="element", name="publisher", namespace="##targetNamespace")
	!resolve val String publisher;

	@GenModel(documentation="Contact details to assist a user in finding and communicating with the publisher.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactDetail[*] contact;

	@GenModel(documentation="A free text natural language description of the library from a consumer's perspective.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate library instances.")
	@ExtendedMetaData(kind="element", name="useContext", namespace="##targetNamespace")
	!resolve val UsageContext[*] useContext;

	@GenModel(documentation="A legal or geographic region in which the library is intended to be used.")
	@ExtendedMetaData(kind="element", name="jurisdiction", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] jurisdiction;

	@GenModel(documentation="Explanation of why this library is needed and why it has been designed as it has.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val Markdown purpose;

	@GenModel(documentation="A detailed description of how the library is used from a clinical perspective.")
	@ExtendedMetaData(kind="element", name="usage", namespace="##targetNamespace")
	!resolve val Markdown usage;

	@GenModel(documentation="A copyright statement relating to the library and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the library.")
	@ExtendedMetaData(kind="element", name="copyright", namespace="##targetNamespace")
	!resolve val Markdown copyright;

	@GenModel(documentation="A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').")
	@ExtendedMetaData(kind="element", name="copyrightLabel", namespace="##targetNamespace")
	!resolve val String copyrightLabel;

	@GenModel(documentation="The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.")
	@ExtendedMetaData(kind="element", name="approvalDate", namespace="##targetNamespace")
	!resolve val Date approvalDate;

	@GenModel(documentation="The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.")
	@ExtendedMetaData(kind="element", name="lastReviewDate", namespace="##targetNamespace")
	!resolve val Date lastReviewDate;

	@GenModel(documentation="The period during which the library content was or is planned to be in active use.")
	@ExtendedMetaData(kind="element", name="effectivePeriod", namespace="##targetNamespace")
	!resolve val Period effectivePeriod;

	@GenModel(documentation="Descriptive topics related to the content of the library. Topics provide a high-level categorization of the library that can be useful for filtering and searching.")
	@ExtendedMetaData(kind="element", name="topic", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] topic;

	@GenModel(documentation="An individiual or organization primarily involved in the creation and maintenance of the content.")
	@ExtendedMetaData(kind="element", name="author", namespace="##targetNamespace")
	!resolve val ContactDetail[*] author;

	@GenModel(documentation="An individual or organization primarily responsible for internal coherence of the content.")
	@ExtendedMetaData(kind="element", name="editor", namespace="##targetNamespace")
	!resolve val ContactDetail[*] editor;

	@GenModel(documentation="An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the content.")
	@ExtendedMetaData(kind="element", name="reviewer", namespace="##targetNamespace")
	!resolve val ContactDetail[*] reviewer;

	@GenModel(documentation="An individual or organization asserted by the publisher to be responsible for officially endorsing the content for use in some setting.")
	@ExtendedMetaData(kind="element", name="endorser", namespace="##targetNamespace")
	!resolve val ContactDetail[*] endorser;

	@GenModel(documentation="Related artifacts such as additional documentation, justification, or bibliographic references.")
	@ExtendedMetaData(kind="element", name="relatedArtifact", namespace="##targetNamespace")
	!resolve val RelatedArtifact[*] relatedArtifact;

	@GenModel(documentation="The parameter element defines parameters used by the library.")
	@ExtendedMetaData(kind="element", name="parameter", namespace="##targetNamespace")
	!resolve val ParameterDefinition[*] parameter;

	@GenModel(documentation="Describes a set of data that must be provided in order to be able to successfully perform the computations defined by the library.")
	@ExtendedMetaData(kind="element", name="dataRequirement", namespace="##targetNamespace")
	!resolve val DataRequirement[*] dataRequirement;

	@GenModel(documentation="The content of the library as an Attachment. The content may be a reference to a url, or may be directly embedded as a base-64 string. Either way, the contentType of the attachment determines how to interpret the content.")
	@ExtendedMetaData(kind="element", name="content", namespace="##targetNamespace")
	!resolve val Attachment[*] content;
}

@GenModel(documentation="Identifies two or more records (resource instances) that refer to the same real-world \"occurrence\".
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Linkage", kind="elementOnly")
class Linkage extends DomainResource {

	@GenModel(documentation="Indicates whether the asserted set of linkages are considered to be \"in effect\".")
	@ExtendedMetaData(kind="element", name="active", namespace="##targetNamespace")
	!resolve val Boolean active;

	@GenModel(documentation="Identifies the user or organization responsible for asserting the linkages as well as the user or organization who establishes the context in which the nature of each linkage is evaluated.")
	@ExtendedMetaData(kind="element", name="author", namespace="##targetNamespace")
	!resolve val Reference author;

	@GenModel(documentation="Identifies which record considered as the reference to the same real-world occurrence as well as how the items should be evaluated within the collection of linked items.")
	@ExtendedMetaData(kind="element", name="item", namespace="##targetNamespace")
	!resolve val LinkageItem[+] item;
}

@GenModel(documentation="Identifies two or more records (resource instances) that refer to the same real-world \"occurrence\".")
@ExtendedMetaData(name="Linkage.Item", kind="elementOnly")
class LinkageItem extends BackboneElement {

	@GenModel(documentation="Distinguishes which item is \"source of truth\" (if any) and which items are no longer considered to be current representations.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val LinkageType[1] type;

	@GenModel(documentation="The resource instance being linked as part of the group.")
	@ExtendedMetaData(kind="element", name="resource", namespace="##targetNamespace")
	!resolve val Reference[1] resource;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="LinkageType", kind="elementOnly")
class LinkageType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr LinkageTypeEnum value;
}

@ExtendedMetaData(name="LinkageTypeEnum")
enum LinkageTypeEnum {

	@GenModel(documentation="Source of Truth")
	source = 0;

	@GenModel(documentation="Alternate Record")
	alternate = 1;

	@GenModel(documentation="Historical/Obsolete Record")
	historical = 2;
}

@ExtendedMetaData(name="LinkageTypeEnum:Object", baseType="LinkageTypeEnum")
datatype LinkageTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="LinkRelationTypes", kind="elementOnly")
class LinkRelationTypes extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr LinkRelationTypesEnum value;
}

@ExtendedMetaData(name="LinkRelationTypesEnum")
enum LinkRelationTypesEnum {

	@GenModel(documentation="Refers to a resource that is the subject of the link's context.")
	about = 0;

	@GenModel(documentation="Asserts that the link target provides an access control description for the link context.")
	acl = 1;

	@GenModel(documentation="Refers to a substitute for this context")
	alternate = 2;

	@GenModel(documentation="Used to reference alternative content that uses the AMP profile of the HTML format.")
	amphtml = 3;

	@GenModel(documentation="Refers to an appendix.")
	appendix = 4;

	@GenModel(documentation="Refers to an icon for the context. Synonym for icon.")
	appleTouchIcon = 5;

	@GenModel(documentation="Refers to a launch screen for the context.")
	appleTouchStartupImage = 6;

	@GenModel(documentation="Refers to a collection of records, documents, or other
      materials of historical interest.")
	archives = 7;

	@GenModel(documentation="Refers to the context's author.")
	author = 8;

	@GenModel(documentation="Identifies the entity that blocks access to a resource
      following receipt of a legal demand.")
	blockedBy = 9;

	@GenModel(documentation="Gives a permanent link to use for bookmarking purposes.")
	bookmark = 10;

	@GenModel(documentation="Designates the preferred version of a resource (the IRI and its contents).")
	canonical = 11;

	@GenModel(documentation="Refers to a chapter in a collection of resources.")
	chapter = 12;

	@GenModel(documentation="Indicates that the link target is preferred over the link context for the purpose of permanent citation.")
	citeAs = 13;

	@GenModel(documentation="The target IRI points to a resource which represents the collection resource for the context IRI.")
	collection = 14;

	@GenModel(documentation="Refers to a table of contents.")
	contents = 15;

	@GenModel(documentation="The document linked to was later converted to the
      document that contains this link relation.  For example, an RFC can
      have a link to the Internet-Draft that became the RFC; in that case,
      the link relation would be \"convertedFrom\".")
	convertedFrom = 16;

	@GenModel(documentation="Refers to a copyright statement that applies to the
    link's context.")
	copyright = 17;

	@GenModel(documentation="The target IRI points to a resource where a submission form can be obtained.")
	createForm = 18;

	@GenModel(documentation="Refers to a resource containing the most recent
      item(s) in a collection of resources.")
	current = 19;

	@GenModel(documentation="Refers to a resource providing information about the
      link's context.")
	describedby = 20;

	@GenModel(documentation="The relationship A 'describes' B asserts that
      resource A provides a description of resource B. There are no
      constraints on the format or representation of either A or B,
      neither are there any further constraints on either resource.")
	describes = 21;

	@GenModel(documentation="Refers to a list of patent disclosures made with respect to 
      material for which 'disclosure' relation is specified.")
	disclosure = 22;

	@GenModel(documentation="Used to indicate an origin that will be used to fetch required 
      resources for the link context, and that the user agent ought to resolve 
      as early as possible.")
	dnsPrefetch = 23;

	@GenModel(documentation="Refers to a resource whose available representations
      are byte-for-byte identical with the corresponding representations of
      the context IRI.")
	duplicate = 24;

	@GenModel(documentation="Refers to a resource that can be used to edit the
      link's context.")
	edit = 25;

	@GenModel(documentation="The target IRI points to a resource where a submission form for
      editing associated resource can be obtained.")
	editForm = 26;

	@GenModel(documentation="Refers to a resource that can be used to edit media
      associated with the link's context.")
	editMedia = 27;

	@GenModel(documentation="Identifies a related resource that is potentially
      large and might require special handling.")
	enclosure = 28;

	@GenModel(documentation="Refers to a resource that is not part of the same site as the current context.")
	external = 29;

	@GenModel(documentation="An IRI that refers to the furthest preceding resource
    in a series of resources.")
	first = 30;

	@GenModel(documentation="Refers to a glossary of terms.")
	glossary = 31;

	@GenModel(documentation="Refers to context-sensitive help.")
	help = 32;

	@GenModel(documentation="Refers to a resource hosted by the server indicated by
      the link context.")
	hosts = 33;

	@GenModel(documentation="Refers to a hub that enables registration for
    notification of updates to the context.")
	hub = 34;

	@GenModel(documentation="Refers to an icon representing the link's context.")
	icon = 35;

	@GenModel(documentation="Refers to an index.")
	index = 36;

	@GenModel(documentation="refers to a resource associated with a time interval that ends before the beginning of the time interval associated with the context resource")
	intervalAfter = 37;

	@GenModel(documentation="refers to a resource associated with a time interval that begins after the end of the time interval associated with the context resource")
	intervalBefore = 38;

	@GenModel(documentation="refers to a resource associated with a time interval that begins after the beginning of the time interval associated with the context resource, and ends before the end of the time interval associated with the context resource")
	intervalContains = 39;

	@GenModel(documentation="refers to a resource associated with a time interval that begins after the end of the time interval associated with the context resource, or ends before the beginning of the time interval associated with the context resource")
	intervalDisjoint = 40;

	@GenModel(documentation="refers to a resource associated with a time interval that begins before the beginning of the time interval associated with the context resource, and ends after the end of the time interval associated with the context resource")
	intervalDuring = 41;

	@GenModel(documentation="refers to a resource associated with a time interval whose beginning coincides with the beginning of the time interval associated with the context resource, and whose end coincides with the end of the time interval associated with the context resource")
	intervalEquals = 42;

	@GenModel(documentation="refers to a resource associated with a time interval that begins after the beginning of the time interval associated with the context resource, and whose end coincides with the end of the time interval associated with the context resource")
	intervalFinishedBy = 43;

	@GenModel(documentation="refers to a resource associated with a time interval that begins before the beginning of the time interval associated with the context resource, and whose end coincides with the end of the time interval associated with the context resource")
	intervalFinishes = 44;

	@GenModel(documentation="refers to a resource associated with a time interval that begins before or is coincident with the beginning of the time interval associated with the context resource, and ends after or is coincident with the end of the time interval associated with the context resource")
	intervalIn = 45;

	@GenModel(documentation="refers to a resource associated with a time interval whose beginning coincides with the end of the time interval associated with the context resource")
	intervalMeets = 46;

	@GenModel(documentation="refers to a resource associated with a time interval whose end coincides with the beginning of the time interval associated with the context resource")
	intervalMetBy = 47;

	@GenModel(documentation="refers to a resource associated with a time interval that begins before the beginning of the time interval associated with the context resource, and ends after the beginning of the time interval associated with the context resource")
	intervalOverlappedBy = 48;

	@GenModel(documentation="refers to a resource associated with a time interval that begins before the end of the time interval associated with the context resource, and ends after the end of the time interval associated with the context resource")
	intervalOverlaps = 49;

	@GenModel(documentation="refers to a resource associated with a time interval whose beginning coincides with the beginning of the time interval associated with the context resource, and ends before the end of the time interval associated with the context resource")
	intervalStartedBy = 50;

	@GenModel(documentation="refers to a resource associated with a time interval whose beginning coincides with the beginning of the time interval associated with the context resource, and ends after the end of the time interval associated with the context resource")
	intervalStarts = 51;

	@GenModel(documentation="The target IRI points to a resource that is a member of the collection represented by the context IRI.")
	item = 52;

	@GenModel(documentation="An IRI that refers to the furthest following resource
      in a series of resources.")
	last = 53;

	@GenModel(documentation="Points to a resource containing the latest (e.g.,
      current) version of the context.")
	latestVersion = 54;

	@GenModel(documentation="Refers to a license associated with this context.")
	license = 55;

	@GenModel(documentation="The link target of a link with the \"linkset\" relation
      type provides a set of links, including links in which the link
      context of the link participates.
    ")
	linkset = 56;

	@GenModel(documentation="Refers to further information about the link's context,
      expressed as a LRDD (\"Link-based Resource Descriptor Document\")
      resource.  See  for information about
      processing this relation type in host-meta documents. When used
      elsewhere, it refers to additional links and other metadata.
      Multiple instances indicate additional LRDD resources. LRDD
      resources MUST have an \"application/xrd+xml\" representation, and
      MAY have others.")
	lrdd = 57;

	@GenModel(documentation="Links to a manifest file for the context.")
	manifest = 58;

	@GenModel(documentation="Refers to a mask that can be applied to the icon for the context.")
	maskIcon = 59;

	@GenModel(documentation="Refers to a feed of personalised media recommendations relevant to the link context.")
	mediaFeed = 60;

	@GenModel(documentation="The Target IRI points to a Memento, a fixed resource that will not change state anymore.")
	memento = 61;

	@GenModel(documentation="Links to the context's Micropub endpoint.")
	micropub = 62;

	@GenModel(documentation="Refers to a module that the user agent is to preemptively fetch and store for use in the current context.")
	modulepreload = 63;

	@GenModel(documentation="Refers to a resource that can be used to monitor changes in an HTTP resource.
    ")
	monitor = 64;

	@GenModel(documentation="Refers to a resource that can be used to monitor changes in a specified group of HTTP resources.
    ")
	monitorGroup = 65;

	@GenModel(documentation="Indicates that the link's context is a part of a series, and
      that the next in the series is the link target.
    ")
	next = 66;

	@GenModel(documentation="Refers to the immediately following archive resource.")
	nextArchive = 67;

	@GenModel(documentation="Indicates that the context’s original author or publisher does not endorse the link target.")
	nofollow = 68;

	@GenModel(documentation="Indicates that any newly created top-level browsing context which results from following the link will not be an auxiliary browsing context.")
	noopener = 69;

	@GenModel(documentation="Indicates that no referrer information is to be leaked when following the link.")
	noreferrer = 70;

	@GenModel(documentation="Indicates that any newly created top-level browsing context which results from following the link will be an auxiliary browsing context.")
	opener = 71;

	@GenModel(documentation="Refers to an OpenID Authentication server on which the context relies for an assertion that the end user controls an Identifier.")
	openid2LocalId = 72;

	@GenModel(documentation="Refers to a resource which accepts OpenID Authentication protocol messages for the context.")
	openid2Provider = 73;

	@GenModel(documentation="The Target IRI points to an Original Resource.")
	original = 74;

	@GenModel(documentation="Refers to a P3P privacy policy for the context.")
	P3Pv1 = 75;

	@GenModel(documentation="Indicates a resource where payment is accepted.")
	payment = 76;

	@GenModel(documentation="Gives the address of the pingback resource for the link context.")
	pingback = 77;

	@GenModel(documentation="Used to indicate an origin that will be used to fetch required 
      resources for the link context. Initiating an early connection, which 
      includes the DNS lookup, TCP handshake, and optional TLS negotiation, 
      allows the user agent to mask the high latency costs of establishing a 
      connection.")
	preconnect = 78;

	@GenModel(documentation="Points to a resource containing the predecessor
      version in the version history.
    ")
	predecessorVersion = 79;

	@GenModel(documentation="The prefetch link relation type is used to identify a resource 
      that might be required by the next navigation from the link context, and 
      that the user agent ought to fetch, such that the user agent can deliver a 
      faster response once the resource is requested in the future.")
	prefetch = 80;

	@GenModel(documentation="Refers to a resource that should be loaded early in the 
      processing of the link's context, without blocking rendering.")
	preload = 81;

	@GenModel(documentation="Used to identify a resource that might be required by the next 
      navigation from the link context, and that the user agent ought to fetch 
      and execute, such that the user agent can deliver a faster response once 
      the resource is requested in the future.")
	prerender = 82;

	@GenModel(documentation="Indicates that the link's context is a part of a series, and
      that the previous in the series is the link target.
    ")
	prev = 83;

	@GenModel(documentation="Refers to a resource that provides a preview of the link's context.")
	preview = 84;

	@GenModel(documentation="Refers to the previous resource in an ordered series
      of resources.  Synonym for \"prev\".")
	previous = 85;

	@GenModel(documentation="Refers to the immediately preceding archive resource.")
	prevArchive = 86;

	@GenModel(documentation="Refers to a privacy policy associated with the link's context.")
	privacyPolicy = 87;

	@GenModel(documentation="Identifying that a resource representation conforms
to a certain profile, without affecting the non-profile semantics
of the resource representation.")
	profile = 88;

	@GenModel(documentation="Links to a publication manifest. A manifest represents 
      structured information about a publication, such as informative metadata, 
      a list of resources, and a default reading order.")
	publication = 89;

	@GenModel(documentation="Identifies a related resource.")
	related = 90;

	@GenModel(documentation="Identifies the root of RESTCONF API as configured on this HTTP server.
      The \"restconf\" relation defines the root of the API defined in RFC8040.
      Subsequent revisions of RESTCONF will use alternate relation values to support 
      protocol versioning.")
	restconf = 91;

	@GenModel(documentation="Identifies a resource that is a reply to the context
      of the link.
    ")
	replies = 92;

	@GenModel(documentation="The resource identified by the link target provides an input value to an 
    instance of a rule, where the resource which represents the rule instance is 
    identified by the link context.
    ")
	ruleinput = 93;

	@GenModel(documentation="Refers to a resource that can be used to search through
      the link's context and related resources.")
	search = 94;

	@GenModel(documentation="Refers to a section in a collection of resources.")
	section = 95;

	@GenModel(documentation="Conveys an identifier for the link's context.
    ")
	self = 96;

	@GenModel(documentation="Indicates a URI that can be used to retrieve a
      service document.")
	service = 97;

	@GenModel(documentation="Identifies service description for the context that
      is primarily intended for consumption by machines.")
	serviceDesc = 98;

	@GenModel(documentation="Identifies service documentation for the context that
      is primarily intended for human consumption.")
	serviceDoc = 99;

	@GenModel(documentation="Identifies general metadata for the context that is
      primarily intended for consumption by machines.")
	serviceMeta = 100;

	@GenModel(documentation="Refers to a resource that is within a context that is 
		sponsored (such as advertising or another compensation agreement).")
	sponsored = 101;

	@GenModel(documentation="Refers to the first resource in a collection of
      resources.")
	start = 102;

	@GenModel(documentation="Identifies a resource that represents the context's
      status.")
	status = 103;

	@GenModel(documentation="Refers to a stylesheet.")
	stylesheet = 104;

	@GenModel(documentation="Refers to a resource serving as a subsection in a
      collection of resources.")
	subsection = 105;

	@GenModel(documentation="Points to a resource containing the successor version
      in the version history.
    ")
	successorVersion = 106;

	@GenModel(documentation="Identifies a resource that provides information about
      the context's retirement policy.
    ")
	sunset = 107;

	@GenModel(documentation="Gives a tag (identified by the given address) that applies to
      the current document.
    ")
	tag = 108;

	@GenModel(documentation="Refers to the terms of service associated with the link's context.")
	termsOfService = 109;

	@GenModel(documentation="The Target IRI points to a TimeGate for an Original Resource.")
	timegate = 110;

	@GenModel(documentation="The Target IRI points to a TimeMap for an Original Resource.")
	timemap = 111;

	@GenModel(documentation="Refers to a resource identifying the abstract semantic type of which the link's context is considered to be an instance.")
	type = 112;

	@GenModel(documentation="Refers to a resource that is within a context that is User Generated Content.
    ")
	ugc = 113;

	@GenModel(documentation="Refers to a parent document in a hierarchy of
      documents.
    ")
	up = 114;

	@GenModel(documentation="Points to a resource containing the version history
      for the context.
    ")
	versionHistory = 115;

	@GenModel(documentation="Identifies a resource that is the source of the
      information in the link's context.
    ")
	via = 116;

	@GenModel(documentation="Identifies a target URI that supports the Webmention protocol.
    This allows clients that mention a resource in some form of publishing process
    to contact that endpoint and inform it that this resource has been mentioned.")
	webmention = 117;

	@GenModel(documentation="Points to a working copy for this resource.")
	workingCopy = 118;

	@GenModel(documentation="Points to the versioned resource from which this
      working copy was obtained.
    ")
	workingCopyOf = 119;
}

@ExtendedMetaData(name="LinkRelationTypesEnum:Object", baseType="LinkRelationTypesEnum")
datatype LinkRelationTypesEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="LinkType", kind="elementOnly")
class LinkType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr LinkTypeEnum value;
}

@ExtendedMetaData(name="LinkTypeEnum")
enum LinkTypeEnum {

	@GenModel(documentation="Replaced-by
Vervangen door")
	replacedBy = 0;

	@GenModel(documentation="Replaces
Vervangt")
	replaces = 1;

	@GenModel(documentation="Refer
Verwijzing")
	refer = 2;

	@GenModel(documentation="See also
Zie ook")
	seealso = 3;
}

@ExtendedMetaData(name="LinkTypeEnum:Object", baseType="LinkTypeEnum")
datatype LinkTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A List is a curated collection of resources, for things such as problem lists, allergy lists, facility list, organization list, etc.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="List", kind="elementOnly")
class List extends DomainResource {

	@GenModel(documentation="Identifier for the List assigned for business purposes outside the context of FHIR.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Indicates the current state of this list.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val ListStatus[1] status;

	@GenModel(documentation="How this list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.")
	@ExtendedMetaData(kind="element", name="mode", namespace="##targetNamespace")
	!resolve val ListMode[1] mode;

	@GenModel(documentation="A label for the list assigned by the author.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="This code defines the purpose of the list - why it was created.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@GenModel(documentation="The common subject(s) (or patient(s)) of the resources that are in the list if there is one (or a set of subjects).")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference[*] subject;

	@GenModel(documentation="The encounter that is the context in which this list was created.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@GenModel(documentation="Date list was last reviewed/revised and determined to be 'current'.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="The entity responsible for deciding what the contents of the list were. Where the list was created by a human, this is the same as the author of the list.")
	@ExtendedMetaData(kind="element", name="source", namespace="##targetNamespace")
	!resolve val Reference source;

	@GenModel(documentation="What order applies to the items in the list.")
	@ExtendedMetaData(kind="element", name="orderedBy", namespace="##targetNamespace")
	!resolve val CodeableConcept orderedBy;

	@GenModel(documentation="Comments that apply to the overall list.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="Entries in this list.")
	@ExtendedMetaData(kind="element", name="entry", namespace="##targetNamespace")
	!resolve val ListEntry[*] entry;

	@GenModel(documentation="If the list is empty, why the list is empty.")
	@ExtendedMetaData(kind="element", name="emptyReason", namespace="##targetNamespace")
	!resolve val CodeableConcept emptyReason;
}

@GenModel(documentation="A List is a curated collection of resources, for things such as problem lists, allergy lists, facility list, organization list, etc.")
@ExtendedMetaData(name="List.Entry", kind="elementOnly")
class ListEntry extends BackboneElement {

	@GenModel(documentation="The flag allows the system constructing the list to indicate the role and significance of the item in the list.")
	@ExtendedMetaData(kind="element", name="flag", namespace="##targetNamespace")
	!resolve val CodeableConcept flag;

	@GenModel(documentation="True if this item is marked as deleted in the list.")
	@ExtendedMetaData(kind="element", name="deleted", namespace="##targetNamespace")
	!resolve val Boolean deleted;

	@GenModel(documentation="When this item was added to the list.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="A reference to the actual resource from which data was derived.")
	@ExtendedMetaData(kind="element", name="item", namespace="##targetNamespace")
	!resolve val Reference[1] item;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ListMode", kind="elementOnly")
class ListMode extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ListModeEnum value;
}

@ExtendedMetaData(name="ListModeEnum")
enum ListModeEnum {

	@GenModel(documentation="Working List")
	working = 0;

	@GenModel(documentation="Snapshot List")
	snapshot = 1;

	@GenModel(documentation="Change List")
	changes = 2;
}

@ExtendedMetaData(name="ListModeEnum:Object", baseType="ListModeEnum")
datatype ListModeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ListStatus", kind="elementOnly")
class ListStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ListStatusEnum value;
}

@ExtendedMetaData(name="ListStatusEnum")
enum ListStatusEnum {

	@GenModel(documentation="Current")
	current = 0;

	@GenModel(documentation="Retired")
	retired = 1;

	@GenModel(documentation="Entered In Error")
	enteredInError = 2;
}

@ExtendedMetaData(name="ListStatusEnum:Object", baseType="ListStatusEnum")
datatype ListStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="Details and position information for a place where services are provided and resources and participants may be stored, found, contained, or accommodated.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Location", kind="elementOnly")
class Location extends DomainResource {

	@GenModel(documentation="Unique code or number identifying the location to its users.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The status property covers the general availability of the resource, not the current value which may be covered by the operationStatus, or by a schedule/slots if they are configured for the location.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val LocationStatus status;

	@GenModel(documentation="The operational status covers operation values most relevant to beds (but can also apply to rooms/units/chairs/etc. such as an isolation unit/dialysis chair). This typically covers concepts such as contamination, housekeeping, and other activities like maintenance.")
	@ExtendedMetaData(kind="element", name="operationalStatus", namespace="##targetNamespace")
	!resolve val Coding operationalStatus;

	@GenModel(documentation="Name of the location as used by humans. Does not need to be unique.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="A list of alternate names that the location is known as, or was known as, in the past.")
	@ExtendedMetaData(kind="element", name="alias", namespace="##targetNamespace")
	!resolve val String[*] alias;

	@GenModel(documentation="Description of the Location, which helps in finding or referencing the place.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="Indicates whether a resource instance represents a specific location or a class of locations.")
	@ExtendedMetaData(kind="element", name="mode", namespace="##targetNamespace")
	!resolve val LocationMode mode;

	@GenModel(documentation="Indicates the type of function performed at the location.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] type;

	@GenModel(documentation="The contact details of communication devices available at the location. This can include addresses, phone numbers, fax numbers, mobile numbers, email addresses and web sites.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ExtendedContactDetail[*] contact;

	@GenModel(documentation="Physical location.")
	@ExtendedMetaData(kind="element", name="address", namespace="##targetNamespace")
	!resolve val Address address;

	@GenModel(documentation="Physical form of the location, e.g. building, room, vehicle, road, virtual.")
	@ExtendedMetaData(kind="element", name="form", namespace="##targetNamespace")
	!resolve val CodeableConcept form;

	@GenModel(documentation="The absolute geographic location of the Location, expressed using the WGS84 datum (This is the same co-ordinate system used in KML).")
	@ExtendedMetaData(kind="element", name="position", namespace="##targetNamespace")
	!resolve val LocationPosition position;

	@GenModel(documentation="The organization responsible for the provisioning and upkeep of the location.")
	@ExtendedMetaData(kind="element", name="managingOrganization", namespace="##targetNamespace")
	!resolve val Reference managingOrganization;

	@GenModel(documentation="Another Location of which this Location is physically a part of.")
	@ExtendedMetaData(kind="element", name="partOf", namespace="##targetNamespace")
	!resolve val Reference partOf;

	@GenModel(documentation="Collection of characteristics (attributes).")
	@ExtendedMetaData(kind="element", name="characteristic", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] characteristic;

	@GenModel(documentation="What days/times during a week is this location usually open, and any exceptions where the location is not available.")
	@ExtendedMetaData(kind="element", name="hoursOfOperation", namespace="##targetNamespace")
	!resolve val Availability[*] hoursOfOperation;

	@GenModel(documentation="Connection details of a virtual service (e.g. shared conference call facility with dedicated number/details).")
	@ExtendedMetaData(kind="element", name="virtualService", namespace="##targetNamespace")
	!resolve val VirtualServiceDetail[*] virtualService;

	@GenModel(documentation="Technical endpoints providing access to services operated for the location.")
	@ExtendedMetaData(kind="element", name="endpoint", namespace="##targetNamespace")
	!resolve val Reference[*] endpoint;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="LocationMode", kind="elementOnly")
class LocationMode extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr LocationModeEnum value;
}

@ExtendedMetaData(name="LocationModeEnum")
enum LocationModeEnum {

	@GenModel(documentation="Instance")
	instance = 0;

	@GenModel(documentation="Kind")
	kind = 1;
}

@ExtendedMetaData(name="LocationModeEnum:Object", baseType="LocationModeEnum")
datatype LocationModeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="Details and position information for a place where services are provided and resources and participants may be stored, found, contained, or accommodated.")
@ExtendedMetaData(name="Location.Position", kind="elementOnly")
class LocationPosition extends BackboneElement {

	@GenModel(documentation="Longitude. The value domain and the interpretation are the same as for the text of the longitude element in KML (see notes on Location main page).")
	@ExtendedMetaData(kind="element", name="longitude", namespace="##targetNamespace")
	!resolve val Decimal[1] longitude;

	@GenModel(documentation="Latitude. The value domain and the interpretation are the same as for the text of the latitude element in KML (see notes on Location main page).")
	@ExtendedMetaData(kind="element", name="latitude", namespace="##targetNamespace")
	!resolve val Decimal[1] latitude;

	@GenModel(documentation="Altitude. The value domain and the interpretation are the same as for the text of the altitude element in KML (see notes on Location main page).")
	@ExtendedMetaData(kind="element", name="altitude", namespace="##targetNamespace")
	!resolve val Decimal altitude;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="LocationStatus", kind="elementOnly")
class LocationStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr LocationStatusEnum value;
}

@ExtendedMetaData(name="LocationStatusEnum")
enum LocationStatusEnum {

	@GenModel(documentation="Active")
	active = 0;

	@GenModel(documentation="Suspended")
	suspended = 1;

	@GenModel(documentation="Inactive")
	inactive = 2;
}

@ExtendedMetaData(name="LocationStatusEnum:Object", baseType="LocationStatusEnum")
datatype LocationStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="The definition and characteristics of a medicinal manufactured item, such as a tablet or capsule, as contained in a packaged medicinal product.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ManufacturedItemDefinition", kind="elementOnly")
class ManufacturedItemDefinition extends DomainResource {

	@GenModel(documentation="Unique identifier.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The status of this item. Enables tracking the life-cycle of the content.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="A descriptive name applied to this item.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="Dose form as manufactured and before any transformation into the pharmaceutical product.")
	@ExtendedMetaData(kind="element", name="manufacturedDoseForm", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] manufacturedDoseForm;

	@GenModel(documentation="The “real-world” units in which the quantity of the manufactured item is described.")
	@ExtendedMetaData(kind="element", name="unitOfPresentation", namespace="##targetNamespace")
	!resolve val CodeableConcept unitOfPresentation;

	@GenModel(documentation="Manufacturer of the item, one of several possible.")
	@ExtendedMetaData(kind="element", name="manufacturer", namespace="##targetNamespace")
	!resolve val Reference[*] manufacturer;

	@GenModel(documentation="Allows specifying that an item is on the market for sale, or that it is not available, and the dates and locations associated.")
	@ExtendedMetaData(kind="element", name="marketingStatus", namespace="##targetNamespace")
	!resolve val MarketingStatus[*] marketingStatus;

	@GenModel(documentation="The ingredients of this manufactured item. This is only needed if the ingredients are not specified by incoming references from the Ingredient resource.")
	@ExtendedMetaData(kind="element", name="ingredient", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] ingredient;

	@GenModel(documentation="General characteristics of this item.")
	@ExtendedMetaData(kind="element", name="property", namespace="##targetNamespace")
	!resolve val ManufacturedItemDefinitionProperty[*] property;

	@GenModel(documentation="Physical parts of the manufactured item, that it is intrisically made from. This is distinct from the ingredients that are part of its chemical makeup.")
	@ExtendedMetaData(kind="element", name="component", namespace="##targetNamespace")
	!resolve val ManufacturedItemDefinitionComponent[*] component;
}

@GenModel(documentation="The definition and characteristics of a medicinal manufactured item, such as a tablet or capsule, as contained in a packaged medicinal product.")
@ExtendedMetaData(name="ManufacturedItemDefinition.Component", kind="elementOnly")
class ManufacturedItemDefinitionComponent extends BackboneElement {

	@GenModel(documentation="Defining type of the component e.g. shell, layer, ink.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@GenModel(documentation="The function of this component within the item e.g. delivers active ingredient, masks taste.")
	@ExtendedMetaData(kind="element", name="function", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] function;

	@GenModel(documentation="The measurable amount of total quantity of all substances in the component, expressable in different ways (e.g. by mass or volume).")
	@ExtendedMetaData(kind="element", name="amount", namespace="##targetNamespace")
	!resolve val Quantity[*] amount;

	@GenModel(documentation="A reference to a constituent of the manufactured item as a whole, linked here so that its component location within the item can be indicated. This not where the item's ingredient are primarily stated (for which see Ingredient.for or ManufacturedItemDefinition.ingredient).")
	@ExtendedMetaData(kind="element", name="constituent", namespace="##targetNamespace")
	!resolve val ManufacturedItemDefinitionConstituent[*] constituent;

	@GenModel(documentation="General characteristics of this component.")
	@ExtendedMetaData(kind="element", name="property", namespace="##targetNamespace")
	!resolve val ManufacturedItemDefinitionProperty[*] property;

	@GenModel(documentation="A component that this component contains or is made from.")
	@ExtendedMetaData(kind="element", name="component", namespace="##targetNamespace")
	!resolve val ManufacturedItemDefinitionComponent[*] component;
}

@GenModel(documentation="The definition and characteristics of a medicinal manufactured item, such as a tablet or capsule, as contained in a packaged medicinal product.")
@ExtendedMetaData(name="ManufacturedItemDefinition.Constituent", kind="elementOnly")
class ManufacturedItemDefinitionConstituent extends BackboneElement {

	@GenModel(documentation="The measurable amount of the substance, expressable in different ways (e.g. by mass or volume).")
	@ExtendedMetaData(kind="element", name="amount", namespace="##targetNamespace")
	!resolve val Quantity[*] amount;

	@GenModel(documentation="The physical location of the constituent/ingredient within the component. Example – if the component is the bead in the capsule, then the location would be where the ingredient resides within the product part – intragranular, extra-granular, etc.")
	@ExtendedMetaData(kind="element", name="location", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] location;

	@GenModel(documentation="The function of this constituent within the component e.g. binder.")
	@ExtendedMetaData(kind="element", name="function", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] function;

	@GenModel(documentation="The ingredient that is the constituent of the given component.")
	@ExtendedMetaData(kind="element", name="hasIngredient", namespace="##targetNamespace")
	!resolve val CodeableReference[*] hasIngredient;
}

@GenModel(documentation="The definition and characteristics of a medicinal manufactured item, such as a tablet or capsule, as contained in a packaged medicinal product.")
@ExtendedMetaData(name="ManufacturedItemDefinition.Property", kind="elementOnly")
class ManufacturedItemDefinitionProperty extends BackboneElement {

	@GenModel(documentation="A code expressing the type of characteristic.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@ExtendedMetaData(kind="element", name="valueCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept valueCodeableConcept;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueDate", namespace="##targetNamespace")
	!resolve val Date valueDate;

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;

	@ExtendedMetaData(kind="element", name="valueMarkdown", namespace="##targetNamespace")
	!resolve val Markdown valueMarkdown;

	@ExtendedMetaData(kind="element", name="valueAttachment", namespace="##targetNamespace")
	!resolve val Attachment valueAttachment;

	@ExtendedMetaData(kind="element", name="valueReference", namespace="##targetNamespace")
	!resolve val Reference valueReference;
}

@GenModel(documentation="A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine
Systems are not required to have markdown support, so the text should be readable without markdown processing. The markdown syntax is GFM - see https://github.github.com/gfm/
If the element is present, it must have either a @value, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="markdown", kind="elementOnly")
class Markdown extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	attr MarkdownPrimitive value;
}

@ExtendedMetaData(name="markdown-primitive", baseType="http://www.eclipse.org/emf/2003/XMLType#string", minLength="1", pattern="[\s\S]+")
datatype MarkdownPrimitive : java.lang.String;

@GenModel(documentation="The marketing status describes the date when a medicinal product is actually put on the market or the date as of which it is no longer available.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="MarketingStatus", kind="elementOnly")
class MarketingStatus extends BackboneType {

	@GenModel(documentation="The country in which the marketing authorization has been granted shall be specified It should be specified using the ISO 3166 ? 1 alpha-2 code elements.")
	@ExtendedMetaData(kind="element", name="country", namespace="##targetNamespace")
	!resolve val CodeableConcept country;

	@GenModel(documentation="Where a Medicines Regulatory Agency has granted a marketing authorization for which specific provisions within a jurisdiction apply, the jurisdiction can be specified using an appropriate controlled terminology The controlled term and the controlled term identifier shall be specified.")
	@ExtendedMetaData(kind="element", name="jurisdiction", namespace="##targetNamespace")
	!resolve val CodeableConcept jurisdiction;

	@GenModel(documentation="This attribute provides information on the status of the marketing of the medicinal product See ISO/TS 20443 for more information and examples.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] status;

	@GenModel(documentation="The date when the Medicinal Product is placed on the market by the Marketing Authorization Holder (or where applicable, the manufacturer/distributor) in a country and/or jurisdiction shall be provided A complete date consisting of day, month and year shall be specified using the ISO 8601 date format NOTE “Placed on the market” refers to the release of the Medicinal Product into the distribution chain.")
	@ExtendedMetaData(kind="element", name="dateRange", namespace="##targetNamespace")
	!resolve val Period dateRange;

	@GenModel(documentation="The date when the Medicinal Product is placed on the market by the Marketing Authorization Holder (or where applicable, the manufacturer/distributor) in a country and/or jurisdiction shall be provided A complete date consisting of day, month and year shall be specified using the ISO 8601 date format NOTE “Placed on the market” refers to the release of the Medicinal Product into the distribution chain.")
	@ExtendedMetaData(kind="element", name="restoreDate", namespace="##targetNamespace")
	!resolve val DateTime restoreDate;
}

@GenModel(documentation="The Measure resource provides the definition of a quality measure.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Measure", kind="elementOnly")
class Measure extends MetadataResource {

	@GenModel(documentation="An absolute URI that is used to identify this measure when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this measure is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the measure is stored on different servers.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri url;

	@GenModel(documentation="A formal identifier that is used to identify this measure when it is represented in other formats, or referenced in a specification, model, design or an instance.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The identifier that is used to identify this version of the measure when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the measure author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@ExtendedMetaData(kind="element", name="versionAlgorithmString", namespace="##targetNamespace")
	!resolve val String versionAlgorithmString;

	@ExtendedMetaData(kind="element", name="versionAlgorithmCoding", namespace="##targetNamespace")
	!resolve val Coding versionAlgorithmCoding;

	@GenModel(documentation="A natural language name identifying the measure. This name should be usable as an identifier for the module by machine processing applications such as code generation.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="A short, descriptive, user-friendly title for the measure.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="An explanatory or alternate title for the measure giving additional information about its content.")
	@ExtendedMetaData(kind="element", name="subtitle", namespace="##targetNamespace")
	!resolve val String subtitle;

	@GenModel(documentation="The status of this measure. Enables tracking the life-cycle of the content.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="A Boolean value to indicate that this measure is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.")
	@ExtendedMetaData(kind="element", name="experimental", namespace="##targetNamespace")
	!resolve val Boolean experimental;

	@ExtendedMetaData(kind="element", name="subjectCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept subjectCodeableConcept;

	@ExtendedMetaData(kind="element", name="subjectReference", namespace="##targetNamespace")
	!resolve val Reference subjectReference;

	@GenModel(documentation="The population basis specifies the type of elements in the population. For a subject-based measure, this is boolean (because the subject and the population basis are the same, and the population criteria define yes/no values for each individual in the population). For measures that have a population basis that is different than the subject, this element specifies the type of the population basis. For example, an encounter-based measure has a subject of Patient and a population basis of Encounter, and the population criteria all return lists of Encounters.")
	@ExtendedMetaData(kind="element", name="basis", namespace="##targetNamespace")
	!resolve val FHIRTypes basis;

	@GenModel(documentation="The date  (and optionally time) when the measure was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the measure changes.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="The name of the organization or individual responsible for the release and ongoing maintenance of the measure.")
	@ExtendedMetaData(kind="element", name="publisher", namespace="##targetNamespace")
	!resolve val String publisher;

	@GenModel(documentation="Contact details to assist a user in finding and communicating with the publisher.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactDetail[*] contact;

	@GenModel(documentation="A free text natural language description of the measure from a consumer's perspective.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate measure instances.")
	@ExtendedMetaData(kind="element", name="useContext", namespace="##targetNamespace")
	!resolve val UsageContext[*] useContext;

	@GenModel(documentation="A legal or geographic region in which the measure is intended to be used.")
	@ExtendedMetaData(kind="element", name="jurisdiction", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] jurisdiction;

	@GenModel(documentation="Explanation of why this measure is needed and why it has been designed as it has.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val Markdown purpose;

	@GenModel(documentation="A detailed description, from a clinical perspective, of how the measure is used.")
	@ExtendedMetaData(kind="element", name="usage", namespace="##targetNamespace")
	!resolve val Markdown usage;

	@GenModel(documentation="A copyright statement relating to the measure and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the measure.")
	@ExtendedMetaData(kind="element", name="copyright", namespace="##targetNamespace")
	!resolve val Markdown copyright;

	@GenModel(documentation="A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').")
	@ExtendedMetaData(kind="element", name="copyrightLabel", namespace="##targetNamespace")
	!resolve val String copyrightLabel;

	@GenModel(documentation="The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.")
	@ExtendedMetaData(kind="element", name="approvalDate", namespace="##targetNamespace")
	!resolve val Date approvalDate;

	@GenModel(documentation="The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.")
	@ExtendedMetaData(kind="element", name="lastReviewDate", namespace="##targetNamespace")
	!resolve val Date lastReviewDate;

	@GenModel(documentation="The period during which the measure content was or is planned to be in active use.")
	@ExtendedMetaData(kind="element", name="effectivePeriod", namespace="##targetNamespace")
	!resolve val Period effectivePeriod;

	@GenModel(documentation="Descriptive topics related to the content of the measure. Topics provide a high-level categorization grouping types of measures that can be useful for filtering and searching.")
	@ExtendedMetaData(kind="element", name="topic", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] topic;

	@GenModel(documentation="An individiual or organization primarily involved in the creation and maintenance of the content.")
	@ExtendedMetaData(kind="element", name="author", namespace="##targetNamespace")
	!resolve val ContactDetail[*] author;

	@GenModel(documentation="An individual or organization primarily responsible for internal coherence of the content.")
	@ExtendedMetaData(kind="element", name="editor", namespace="##targetNamespace")
	!resolve val ContactDetail[*] editor;

	@GenModel(documentation="An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the content.")
	@ExtendedMetaData(kind="element", name="reviewer", namespace="##targetNamespace")
	!resolve val ContactDetail[*] reviewer;

	@GenModel(documentation="An individual or organization asserted by the publisher to be responsible for officially endorsing the content for use in some setting.")
	@ExtendedMetaData(kind="element", name="endorser", namespace="##targetNamespace")
	!resolve val ContactDetail[*] endorser;

	@GenModel(documentation="Related artifacts such as additional documentation, justification, or bibliographic references.")
	@ExtendedMetaData(kind="element", name="relatedArtifact", namespace="##targetNamespace")
	!resolve val RelatedArtifact[*] relatedArtifact;

	@GenModel(documentation="A reference to a Library resource containing the formal logic used by the measure.")
	@ExtendedMetaData(kind="element", name="library", namespace="##targetNamespace")
	!resolve val Canonical[*] library;

	@GenModel(documentation="Notices and disclaimers regarding the use of the measure or related to intellectual property (such as code systems) referenced by the measure.")
	@ExtendedMetaData(kind="element", name="disclaimer", namespace="##targetNamespace")
	!resolve val Markdown disclaimer;

	@GenModel(documentation="Indicates how the calculation is performed for the measure, including proportion, ratio, continuous-variable, and cohort. The value set is extensible, allowing additional measure scoring types to be represented.")
	@ExtendedMetaData(kind="element", name="scoring", namespace="##targetNamespace")
	!resolve val CodeableConcept scoring;

	@GenModel(documentation="Defines the expected units of measure for the measure score. This element SHOULD be specified as a UCUM unit.")
	@ExtendedMetaData(kind="element", name="scoringUnit", namespace="##targetNamespace")
	!resolve val CodeableConcept scoringUnit;

	@GenModel(documentation="If this is a composite measure, the scoring method used to combine the component measures to determine the composite score.")
	@ExtendedMetaData(kind="element", name="compositeScoring", namespace="##targetNamespace")
	!resolve val CodeableConcept compositeScoring;

	@GenModel(documentation="Indicates whether the measure is used to examine a process, an outcome over time, a patient-reported outcome, or a structure measure such as utilization.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] type;

	@GenModel(documentation="A description of the risk adjustment factors that may impact the resulting score for the measure and how they may be accounted for when computing and reporting measure results.")
	@ExtendedMetaData(kind="element", name="riskAdjustment", namespace="##targetNamespace")
	!resolve val Markdown riskAdjustment;

	@GenModel(documentation="Describes how to combine the information calculated, based on logic in each of several populations, into one summarized result.")
	@ExtendedMetaData(kind="element", name="rateAggregation", namespace="##targetNamespace")
	!resolve val Markdown rateAggregation;

	@GenModel(documentation="Provides a succinct statement of the need for the measure. Usually includes statements pertaining to importance criterion: impact, gap in care, and evidence.")
	@ExtendedMetaData(kind="element", name="rationale", namespace="##targetNamespace")
	!resolve val Markdown rationale;

	@GenModel(documentation="Provides a summary of relevant clinical guidelines or other clinical recommendations supporting the measure.")
	@ExtendedMetaData(kind="element", name="clinicalRecommendationStatement", namespace="##targetNamespace")
	!resolve val Markdown clinicalRecommendationStatement;

	@GenModel(documentation="Information on whether an increase or decrease in score is the preferred result (e.g., a higher score indicates better quality OR a lower score indicates better quality OR quality is within a range).")
	@ExtendedMetaData(kind="element", name="improvementNotation", namespace="##targetNamespace")
	!resolve val CodeableConcept improvementNotation;

	@GenModel(documentation="Provides a description of an individual term used within the measure.")
	@ExtendedMetaData(kind="element", name="term", namespace="##targetNamespace")
	!resolve val MeasureTerm[*] term;

	@GenModel(documentation="Additional guidance for the measure including how it can be used in a clinical context, and the intent of the measure.")
	@ExtendedMetaData(kind="element", name="guidance", namespace="##targetNamespace")
	!resolve val Markdown guidance;

	@GenModel(documentation="A group of population criteria for the measure.")
	@ExtendedMetaData(kind="element", name="group", namespace="##targetNamespace")
	!resolve val MeasureGroup[*] group;

	@GenModel(documentation="The supplemental data criteria for the measure report, specified as either the name of a valid CQL expression within a referenced library, or a valid FHIR Resource Path.")
	@ExtendedMetaData(kind="element", name="supplementalData", namespace="##targetNamespace")
	!resolve val MeasureSupplementalData[*] supplementalData;
}

@GenModel(documentation="The Measure resource provides the definition of a quality measure.")
@ExtendedMetaData(name="Measure.Component", kind="elementOnly")
class MeasureComponent extends BackboneElement {

	@GenModel(documentation="An identifier that is unique within the Measure allowing linkage to the equivalent item in a MeasureReport resource.")
	@ExtendedMetaData(kind="element", name="linkId", namespace="##targetNamespace")
	!resolve val String linkId;

	@GenModel(documentation="Indicates a meaning for the stratifier component. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing stratifiers to be correlated across measures.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@GenModel(documentation="The human readable description of this stratifier criteria component.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="An expression that specifies the criteria for this component of the stratifier. This is typically the name of an expression defined within a referenced library, but it may also be a path to a stratifier element.")
	@ExtendedMetaData(kind="element", name="criteria", namespace="##targetNamespace")
	!resolve val Expression criteria;

	@GenModel(documentation="A Group resource that defines this population as a set of characteristics.")
	@ExtendedMetaData(kind="element", name="groupDefinition", namespace="##targetNamespace")
	!resolve val Reference groupDefinition;
}

@GenModel(documentation="The Measure resource provides the definition of a quality measure.")
@ExtendedMetaData(name="Measure.Group", kind="elementOnly")
class MeasureGroup extends BackboneElement {

	@GenModel(documentation="An identifier that is unique within the Measure allowing linkage to the equivalent item in a MeasureReport resource.")
	@ExtendedMetaData(kind="element", name="linkId", namespace="##targetNamespace")
	!resolve val String linkId;

	@GenModel(documentation="Indicates a meaning for the group. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing groups to be correlated across measures.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@GenModel(documentation="The human readable description of this population group.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="Indicates whether the measure is used to examine a process, an outcome over time, a patient-reported outcome, or a structure measure such as utilization.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] type;

	@ExtendedMetaData(kind="element", name="subjectCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept subjectCodeableConcept;

	@ExtendedMetaData(kind="element", name="subjectReference", namespace="##targetNamespace")
	!resolve val Reference subjectReference;

	@GenModel(documentation="The population basis specifies the type of elements in the population. For a subject-based measure, this is boolean (because the subject and the population basis are the same, and the population criteria define yes/no values for each individual in the population). For measures that have a population basis that is different than the subject, this element specifies the type of the population basis. For example, an encounter-based measure has a subject of Patient and a population basis of Encounter, and the population criteria all return lists of Encounters.")
	@ExtendedMetaData(kind="element", name="basis", namespace="##targetNamespace")
	!resolve val FHIRTypes basis;

	@GenModel(documentation="Indicates how the calculation is performed for the measure, including proportion, ratio, continuous-variable, and cohort. The value set is extensible, allowing additional measure scoring types to be represented.")
	@ExtendedMetaData(kind="element", name="scoring", namespace="##targetNamespace")
	!resolve val CodeableConcept scoring;

	@GenModel(documentation="Defines the expected units of measure for the measure score. This element SHOULD be specified as a UCUM unit.")
	@ExtendedMetaData(kind="element", name="scoringUnit", namespace="##targetNamespace")
	!resolve val CodeableConcept scoringUnit;

	@GenModel(documentation="Describes how to combine the information calculated, based on logic in each of several populations, into one summarized result.")
	@ExtendedMetaData(kind="element", name="rateAggregation", namespace="##targetNamespace")
	!resolve val Markdown rateAggregation;

	@GenModel(documentation="Information on whether an increase or decrease in score is the preferred result (e.g., a higher score indicates better quality OR a lower score indicates better quality OR quality is within a range).")
	@ExtendedMetaData(kind="element", name="improvementNotation", namespace="##targetNamespace")
	!resolve val CodeableConcept improvementNotation;

	@GenModel(documentation="A reference to a Library resource containing the formal logic used by the measure group.")
	@ExtendedMetaData(kind="element", name="library", namespace="##targetNamespace")
	!resolve val Canonical[*] library;

	@GenModel(documentation="A population criteria for the measure.")
	@ExtendedMetaData(kind="element", name="population", namespace="##targetNamespace")
	!resolve val MeasurePopulation[*] population;

	@GenModel(documentation="The stratifier criteria for the measure report, specified as either the name of a valid CQL expression defined within a referenced library or a valid FHIR Resource Path.")
	@ExtendedMetaData(kind="element", name="stratifier", namespace="##targetNamespace")
	!resolve val MeasureStratifier[*] stratifier;
}

@GenModel(documentation="The Measure resource provides the definition of a quality measure.")
@ExtendedMetaData(name="Measure.Population", kind="elementOnly")
class MeasurePopulation extends BackboneElement {

	@GenModel(documentation="An identifier that is unique within the Measure allowing linkage to the equivalent population in a MeasureReport resource.")
	@ExtendedMetaData(kind="element", name="linkId", namespace="##targetNamespace")
	!resolve val String linkId;

	@GenModel(documentation="The type of population criteria.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@GenModel(documentation="The human readable description of this population criteria.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="An expression that specifies the criteria for the population, typically the name of an expression in a library.")
	@ExtendedMetaData(kind="element", name="criteria", namespace="##targetNamespace")
	!resolve val Expression criteria;

	@GenModel(documentation="A Group resource that defines this population as a set of characteristics.")
	@ExtendedMetaData(kind="element", name="groupDefinition", namespace="##targetNamespace")
	!resolve val Reference groupDefinition;

	@GenModel(documentation="The id of a population element in this measure that provides the input for this population criteria. In most cases, the scoring structure of the measure implies specific relationships (e.g. the Numerator uses the Denominator as the source in a proportion scoring). In some cases, however, multiple possible choices exist and must be resolved explicitly. For example in a ratio measure with multiple initial populations, the denominator must specify which population should be used as the starting point.")
	@ExtendedMetaData(kind="element", name="inputPopulationId", namespace="##targetNamespace")
	!resolve val String inputPopulationId;

	@GenModel(documentation="Specifies which method should be used to aggregate measure observation values. For most scoring types, this is implied by scoring (e.g. a proportion measure counts members of the populations). For continuous variables, however, this information must be specified to ensure correct calculation.")
	@ExtendedMetaData(kind="element", name="aggregateMethod", namespace="##targetNamespace")
	!resolve val CodeableConcept aggregateMethod;
}

@GenModel(documentation="The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="MeasureReport", kind="elementOnly")
class MeasureReport extends DomainResource {

	@GenModel(documentation="A formal identifier that is used to identify this MeasureReport when it is represented in other formats or referenced in a specification, model, design or an instance.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The MeasureReport status. No data will be available until the MeasureReport status is complete.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val MeasureReportStatus[1] status;

	@GenModel(documentation="The type of measure report. This may be an individual report, which provides the score for the measure for an individual member of the population; a subject-listing, which returns the list of members that meet the various criteria in the measure; a summary report, which returns a population count for each of the criteria in the measure; or a data-collection, which enables the MeasureReport to be used to exchange the data-of-interest for a quality measure.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val MeasureReportType[1] type;

	@GenModel(documentation="Indicates whether the data submitted in a data-exchange report represents a snapshot or incremental update. A snapshot update replaces all previously submitted data for the receiver, whereas an incremental update represents only updated and/or changed data and should be applied as a differential update to the existing submitted data for the receiver.")
	@ExtendedMetaData(kind="element", name="dataUpdateType", namespace="##targetNamespace")
	!resolve val SubmitDataUpdateType dataUpdateType;

	@GenModel(documentation="A reference to the Measure that was calculated to produce this report.")
	@ExtendedMetaData(kind="element", name="measure", namespace="##targetNamespace")
	!resolve val Canonical measure;

	@GenModel(documentation="Optional subject identifying the individual or individuals the report is for.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference subject;

	@GenModel(documentation="The date this measure was calculated.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="The individual or organization that is reporting the data.")
	@ExtendedMetaData(kind="element", name="reporter", namespace="##targetNamespace")
	!resolve val Reference reporter;

	@GenModel(documentation="A reference to the vendor who queried the data, calculated results and/or generated the report. The ‘reporting vendor’ is intended to represent the submitting entity when it is not the same as the reporting entity. This extension is used when the Receiver is interested in getting vendor information in the report.")
	@ExtendedMetaData(kind="element", name="reportingVendor", namespace="##targetNamespace")
	!resolve val Reference reportingVendor;

	@GenModel(documentation="A reference to the location for which the data is being reported.")
	@ExtendedMetaData(kind="element", name="location", namespace="##targetNamespace")
	!resolve val Reference location;

	@GenModel(documentation="The reporting period for which the report was calculated.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period[1] period;

	@GenModel(documentation="A reference to a Parameters resource (typically represented using a contained resource) that represents any input parameters that were provided to the operation that generated the report.")
	@ExtendedMetaData(kind="element", name="inputParameters", namespace="##targetNamespace")
	!resolve val Reference inputParameters;

	@GenModel(documentation="Indicates how the calculation is performed for the measure, including proportion, ratio, continuous-variable, and cohort. The value set is extensible, allowing additional measure scoring types to be represented. It is expected to be the same as the scoring element on the referenced Measure.")
	@ExtendedMetaData(kind="element", name="scoring", namespace="##targetNamespace")
	!resolve val CodeableConcept scoring;

	@GenModel(documentation="Whether improvement in the measure is noted by an increase or decrease in the measure score.")
	@ExtendedMetaData(kind="element", name="improvementNotation", namespace="##targetNamespace")
	!resolve val CodeableConcept improvementNotation;

	@GenModel(documentation="The results of the calculation, one for each population group in the measure.")
	@ExtendedMetaData(kind="element", name="group", namespace="##targetNamespace")
	!resolve val MeasureReportGroup[*] group;

	@GenModel(documentation="A reference to a Resource that represents additional information collected for the report. If the value of the supplemental data is not a Resource (i.e. evaluating the supplementalData expression for this case in the measure results in a value that is not a FHIR Resource), it is reported as a reference to a contained Observation resource.")
	@ExtendedMetaData(kind="element", name="supplementalData", namespace="##targetNamespace")
	!resolve val Reference[*] supplementalData;

	@GenModel(documentation="Evaluated resources are used to capture what data was involved in the calculation of a measure. This usage is only allowed for individual reports to ensure that the size of the MeasureReport resource is bounded.")
	@ExtendedMetaData(kind="element", name="evaluatedResource", namespace="##targetNamespace")
	!resolve val Reference[*] evaluatedResource;
}

@GenModel(documentation="The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation.")
@ExtendedMetaData(name="MeasureReport.Component", kind="elementOnly")
class MeasureReportComponent extends BackboneElement {

	@GenModel(documentation="The stratifier component from the Measure that corresponds to this stratifier component in the MeasureReport resource.")
	@ExtendedMetaData(kind="element", name="linkId", namespace="##targetNamespace")
	!resolve val String linkId;

	@GenModel(documentation="The code for the stratum component value.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] code;

	@ExtendedMetaData(kind="element", name="valueCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept valueCodeableConcept;

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueRange", namespace="##targetNamespace")
	!resolve val Range valueRange;

	@ExtendedMetaData(kind="element", name="valueReference", namespace="##targetNamespace")
	!resolve val Reference valueReference;
}

@GenModel(documentation="The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation.")
@ExtendedMetaData(name="MeasureReport.Group", kind="elementOnly")
class MeasureReportGroup extends BackboneElement {

	@GenModel(documentation="The group from the Measure that corresponds to this group in the MeasureReport resource.")
	@ExtendedMetaData(kind="element", name="linkId", namespace="##targetNamespace")
	!resolve val String linkId;

	@GenModel(documentation="The meaning of the population group as defined in the measure definition.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@GenModel(documentation="Optional subject identifying the individual or individuals the report is for.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference subject;

	@GenModel(documentation="The populations that make up the population group, one for each type of population appropriate for the measure.")
	@ExtendedMetaData(kind="element", name="population", namespace="##targetNamespace")
	!resolve val MeasureReportPopulation[*] population;

	@ExtendedMetaData(kind="element", name="measureScoreQuantity", namespace="##targetNamespace")
	!resolve val Quantity measureScoreQuantity;

	@ExtendedMetaData(kind="element", name="measureScoreDateTime", namespace="##targetNamespace")
	!resolve val DateTime measureScoreDateTime;

	@ExtendedMetaData(kind="element", name="measureScoreCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept measureScoreCodeableConcept;

	@ExtendedMetaData(kind="element", name="measureScorePeriod", namespace="##targetNamespace")
	!resolve val Period measureScorePeriod;

	@ExtendedMetaData(kind="element", name="measureScoreRange", namespace="##targetNamespace")
	!resolve val Range measureScoreRange;

	@ExtendedMetaData(kind="element", name="measureScoreDuration", namespace="##targetNamespace")
	!resolve val Duration measureScoreDuration;

	@GenModel(documentation="When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure.")
	@ExtendedMetaData(kind="element", name="stratifier", namespace="##targetNamespace")
	!resolve val MeasureReportStratifier[*] stratifier;
}

@GenModel(documentation="The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation.")
@ExtendedMetaData(name="MeasureReport.Population", kind="elementOnly")
class MeasureReportPopulation extends BackboneElement {

	@GenModel(documentation="The population from the Measure that corresponds to this population in the MeasureReport resource.")
	@ExtendedMetaData(kind="element", name="linkId", namespace="##targetNamespace")
	!resolve val String linkId;

	@GenModel(documentation="The type of the population.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@GenModel(documentation="The number of members of the population.")
	@ExtendedMetaData(kind="element", name="count", namespace="##targetNamespace")
	!resolve val Integer count;

	@GenModel(documentation="This element refers to a List of individual level MeasureReport resources, one for each subject in this population.")
	@ExtendedMetaData(kind="element", name="subjectResults", namespace="##targetNamespace")
	!resolve val Reference subjectResults;

	@GenModel(documentation="A reference to an individual level MeasureReport resource for a member of the population.")
	@ExtendedMetaData(kind="element", name="subjectReport", namespace="##targetNamespace")
	!resolve val Reference[*] subjectReport;

	@GenModel(documentation="Optional Group identifying the individuals that make up the population.")
	@ExtendedMetaData(kind="element", name="subjects", namespace="##targetNamespace")
	!resolve val Reference subjects;
}

@GenModel(documentation="The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation.")
@ExtendedMetaData(name="MeasureReport.Population1", kind="elementOnly")
class MeasureReportPopulation1 extends BackboneElement {

	@GenModel(documentation="The population from the Measure that corresponds to this population in the MeasureReport resource.")
	@ExtendedMetaData(kind="element", name="linkId", namespace="##targetNamespace")
	!resolve val String linkId;

	@GenModel(documentation="The type of the population.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@GenModel(documentation="The number of members of the population in this stratum.")
	@ExtendedMetaData(kind="element", name="count", namespace="##targetNamespace")
	!resolve val Integer count;

	@GenModel(documentation="This element refers to a List of individual level MeasureReport resources, one for each subject in this population in this stratum.")
	@ExtendedMetaData(kind="element", name="subjectResults", namespace="##targetNamespace")
	!resolve val Reference subjectResults;

	@GenModel(documentation="A reference to an individual level MeasureReport resource for a member of the population.")
	@ExtendedMetaData(kind="element", name="subjectReport", namespace="##targetNamespace")
	!resolve val Reference[*] subjectReport;

	@GenModel(documentation="Optional Group identifying the individuals that make up the population.")
	@ExtendedMetaData(kind="element", name="subjects", namespace="##targetNamespace")
	!resolve val Reference subjects;
}

@GenModel(documentation="The status of the measure report.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="MeasureReportStatus", kind="elementOnly")
class MeasureReportStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr MeasureReportStatusEnum value;
}

@ExtendedMetaData(name="MeasureReportStatusEnum")
enum MeasureReportStatusEnum {

	@GenModel(documentation="Complete")
	complete = 0;

	@GenModel(documentation="Pending")
	pending = 1;

	@GenModel(documentation="Error")
	error = 2;
}

@ExtendedMetaData(name="MeasureReportStatusEnum:Object", baseType="MeasureReportStatusEnum")
datatype MeasureReportStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation.")
@ExtendedMetaData(name="MeasureReport.Stratifier", kind="elementOnly")
class MeasureReportStratifier extends BackboneElement {

	@GenModel(documentation="The stratifier from the Measure that corresponds to this stratifier in the MeasureReport resource.")
	@ExtendedMetaData(kind="element", name="linkId", namespace="##targetNamespace")
	!resolve val String linkId;

	@GenModel(documentation="The meaning of this stratifier, as defined in the measure definition.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@GenModel(documentation="This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value.")
	@ExtendedMetaData(kind="element", name="stratum", namespace="##targetNamespace")
	!resolve val MeasureReportStratum[*] stratum;
}

@GenModel(documentation="The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation.")
@ExtendedMetaData(name="MeasureReport.Stratum", kind="elementOnly")
class MeasureReportStratum extends BackboneElement {

	@ExtendedMetaData(kind="element", name="valueCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept valueCodeableConcept;

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueRange", namespace="##targetNamespace")
	!resolve val Range valueRange;

	@ExtendedMetaData(kind="element", name="valueReference", namespace="##targetNamespace")
	!resolve val Reference valueReference;

	@GenModel(documentation="A stratifier component value.")
	@ExtendedMetaData(kind="element", name="component", namespace="##targetNamespace")
	!resolve val MeasureReportComponent[*] component;

	@GenModel(documentation="The populations that make up the stratum, one for each type of population appropriate to the measure.")
	@ExtendedMetaData(kind="element", name="population", namespace="##targetNamespace")
	!resolve val MeasureReportPopulation1[*] population;

	@ExtendedMetaData(kind="element", name="measureScoreQuantity", namespace="##targetNamespace")
	!resolve val Quantity measureScoreQuantity;

	@ExtendedMetaData(kind="element", name="measureScoreDateTime", namespace="##targetNamespace")
	!resolve val DateTime measureScoreDateTime;

	@ExtendedMetaData(kind="element", name="measureScoreCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept measureScoreCodeableConcept;

	@ExtendedMetaData(kind="element", name="measureScorePeriod", namespace="##targetNamespace")
	!resolve val Period measureScorePeriod;

	@ExtendedMetaData(kind="element", name="measureScoreRange", namespace="##targetNamespace")
	!resolve val Range measureScoreRange;

	@ExtendedMetaData(kind="element", name="measureScoreDuration", namespace="##targetNamespace")
	!resolve val Duration measureScoreDuration;
}

@GenModel(documentation="The type of the measure report.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="MeasureReportType", kind="elementOnly")
class MeasureReportType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr MeasureReportTypeEnum value;
}

@ExtendedMetaData(name="MeasureReportTypeEnum")
enum MeasureReportTypeEnum {

	@GenModel(documentation="Individual")
	individual = 0;

	@GenModel(documentation="Subject List")
	subjectList = 1;

	@GenModel(documentation="Summary")
	summary = 2;

	@GenModel(documentation="Data Exchange")
	dataExchange = 3;
}

@ExtendedMetaData(name="MeasureReportTypeEnum:Object", baseType="MeasureReportTypeEnum")
datatype MeasureReportTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="The Measure resource provides the definition of a quality measure.")
@ExtendedMetaData(name="Measure.Stratifier", kind="elementOnly")
class MeasureStratifier extends BackboneElement {

	@GenModel(documentation="An identifier that is unique within the Measure allowing linkage to the equivalent item in a MeasureReport resource.")
	@ExtendedMetaData(kind="element", name="linkId", namespace="##targetNamespace")
	!resolve val String linkId;

	@GenModel(documentation="Indicates a meaning for the stratifier. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing stratifiers to be correlated across measures.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@GenModel(documentation="The human readable description of this stratifier criteria.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="An expression that specifies the criteria for the stratifier. This is typically the name of an expression defined within a referenced library, but it may also be a path to a stratifier element.")
	@ExtendedMetaData(kind="element", name="criteria", namespace="##targetNamespace")
	!resolve val Expression criteria;

	@GenModel(documentation="A Group resource that defines this population as a set of characteristics.")
	@ExtendedMetaData(kind="element", name="groupDefinition", namespace="##targetNamespace")
	!resolve val Reference groupDefinition;

	@GenModel(documentation="A component of the stratifier criteria for the measure report, specified as either the name of a valid CQL expression defined within a referenced library or a valid FHIR Resource Path.")
	@ExtendedMetaData(kind="element", name="component", namespace="##targetNamespace")
	!resolve val MeasureComponent[*] component;
}

@GenModel(documentation="The Measure resource provides the definition of a quality measure.")
@ExtendedMetaData(name="Measure.SupplementalData", kind="elementOnly")
class MeasureSupplementalData extends BackboneElement {

	@GenModel(documentation="An identifier that is unique within the Measure allowing linkage to the equivalent item in a MeasureReport resource.")
	@ExtendedMetaData(kind="element", name="linkId", namespace="##targetNamespace")
	!resolve val String linkId;

	@GenModel(documentation="Indicates a meaning for the supplemental data. This can be as simple as a unique identifier, or it can establish meaning in a broader context by drawing from a terminology, allowing supplemental data to be correlated across measures.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@GenModel(documentation="An indicator of the intended usage for the supplemental data element. Supplemental data indicates the data is additional information requested to augment the measure information. Risk adjustment factor indicates the data is additional information used to calculate risk adjustment factors when applying a risk model to the measure calculation.")
	@ExtendedMetaData(kind="element", name="usage", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] usage;

	@GenModel(documentation="The human readable description of this supplemental data.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The criteria for the supplemental data. This is typically the name of a valid expression defined within a referenced library, but it may also be a path to a specific data element. The criteria defines the data to be returned for this element.")
	@ExtendedMetaData(kind="element", name="criteria", namespace="##targetNamespace")
	!resolve val Expression[1] criteria;
}

@GenModel(documentation="The Measure resource provides the definition of a quality measure.")
@ExtendedMetaData(name="Measure.Term", kind="elementOnly")
class MeasureTerm extends BackboneElement {

	@GenModel(documentation="A codeable representation of the defined term.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@GenModel(documentation="Provides a definition for the term as used within the measure.")
	@ExtendedMetaData(kind="element", name="definition", namespace="##targetNamespace")
	!resolve val Markdown definition;
}

@GenModel(documentation="This resource is primarily used for the identification and definition of a medication, including ingredients, for the purposes of prescribing, dispensing, and administering a medication as well as for making statements about medication use.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Medication", kind="elementOnly")
class Medication extends DomainResource {

	@GenModel(documentation="Business identifier for this medication.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="A code (or set of codes) that specify this medication, or a textual description if no code is available. Usage note: This could be a standard medication code such as a code from RxNorm, SNOMED CT, IDMP etc. It could also be a national or local formulary code, optionally with translations to other code systems.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@GenModel(documentation="A code to indicate if the medication is in active use.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val MedicationStatusCodes status;

	@GenModel(documentation="The company or other legal entity that has authorization, from the appropriate drug regulatory authority,  to market a medicine in one or more jurisdictions.  Typically abbreviated MAH.Note:  The MAH may manufacture the product and may also contract the manufacturing of the product to one or more companies (organizations).")
	@ExtendedMetaData(kind="element", name="marketingAuthorizationHolder", namespace="##targetNamespace")
	!resolve val Reference marketingAuthorizationHolder;

	@GenModel(documentation="Describes the form of the item.  Powder; tablets; capsule.")
	@ExtendedMetaData(kind="element", name="doseForm", namespace="##targetNamespace")
	!resolve val CodeableConcept doseForm;

	@GenModel(documentation="When the specified product code does not infer a package size, this is the specific amount of drug in the product.  For example, when specifying a product that has the same strength (For example, Insulin glargine 100 unit per mL solution for injection), this attribute provides additional clarification of the package amount (For example, 3 mL, 10mL, etc.).")
	@ExtendedMetaData(kind="element", name="totalVolume", namespace="##targetNamespace")
	!resolve val Quantity totalVolume;

	@GenModel(documentation="Identifies a particular constituent of interest in the product.")
	@ExtendedMetaData(kind="element", name="ingredient", namespace="##targetNamespace")
	!resolve val MedicationIngredient[*] ingredient;

	@GenModel(documentation="Information that only applies to packages (not products).")
	@ExtendedMetaData(kind="element", name="batch", namespace="##targetNamespace")
	!resolve val MedicationBatch batch;

	@GenModel(documentation="A reference to a knowledge resource that provides more information about this medication.")
	@ExtendedMetaData(kind="element", name="definition", namespace="##targetNamespace")
	!resolve val Reference definition;
}

@GenModel(documentation="Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="MedicationAdministration", kind="elementOnly")
class MedicationAdministration extends DomainResource {

	@GenModel(documentation="Identifiers associated with this Medication Administration that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="A plan that is fulfilled in whole or in part by this MedicationAdministration.")
	@ExtendedMetaData(kind="element", name="basedOn", namespace="##targetNamespace")
	!resolve val Reference[*] basedOn;

	@GenModel(documentation="A larger event of which this particular event is a component or step.")
	@ExtendedMetaData(kind="element", name="partOf", namespace="##targetNamespace")
	!resolve val Reference[*] partOf;

	@GenModel(documentation="Will generally be set to show that the administration has been completed.  For some long running administrations such as infusions, it is possible for an administration to be started but not completed or it may be paused while some other process is under way.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val MedicationAdministrationStatusCodes[1] status;

	@GenModel(documentation="A code indicating why the administration was not performed.")
	@ExtendedMetaData(kind="element", name="statusReason", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] statusReason;

	@GenModel(documentation="The type of medication administration (for example, drug classification like ATC, where meds would be administered, legal category of the medication).")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] category;

	@GenModel(documentation="Identifies the medication that was administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.")
	@ExtendedMetaData(kind="element", name="medication", namespace="##targetNamespace")
	!resolve val CodeableReference[1] medication;

	@GenModel(documentation="The person or animal or group receiving the medication.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference[1] subject;

	@GenModel(documentation="The visit, admission, or other contact between patient and health care provider during which the medication administration was performed.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@GenModel(documentation="Additional information (for example, patient height and weight) that supports the administration of the medication.  This attribute can be used to provide documentation of specific characteristics of the patient present at the time of administration.  For example, if the dose says \"give \"x\" if the heartrate exceeds \"y\"\", then the heart rate can be included using this attribute.")
	@ExtendedMetaData(kind="element", name="supportingInformation", namespace="##targetNamespace")
	!resolve val Reference[*] supportingInformation;

	@ExtendedMetaData(kind="element", name="occurenceDateTime", namespace="##targetNamespace")
	!resolve val DateTime occurenceDateTime;

	@ExtendedMetaData(kind="element", name="occurencePeriod", namespace="##targetNamespace")
	!resolve val Period occurencePeriod;

	@ExtendedMetaData(kind="element", name="occurenceTiming", namespace="##targetNamespace")
	!resolve val Timing occurenceTiming;

	@GenModel(documentation="The date the occurrence of the  MedicationAdministration was first captured in the record - potentially significantly after the occurrence of the event.")
	@ExtendedMetaData(kind="element", name="recorded", namespace="##targetNamespace")
	!resolve val DateTime recorded;

	@GenModel(documentation="An indication that the full dose was not administered.")
	@ExtendedMetaData(kind="element", name="isSubPotent", namespace="##targetNamespace")
	!resolve val Boolean isSubPotent;

	@GenModel(documentation="The reason or reasons why the full dose was not administered.")
	@ExtendedMetaData(kind="element", name="subPotentReason", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] subPotentReason;

	@GenModel(documentation="The performer of the medication treatment.  For devices this is the device that performed the administration of the medication.  An IV Pump would be an example of a device that is performing the administration. Both the IV Pump and the practitioner that set the rate or bolus on the pump can be listed as performers.")
	@ExtendedMetaData(kind="element", name="performer", namespace="##targetNamespace")
	!resolve val MedicationAdministrationPerformer[*] performer;

	@GenModel(documentation="A code, Condition or observation that supports why the medication was administered.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val CodeableReference[*] reason;

	@GenModel(documentation="The original request, instruction or authority to perform the administration.")
	@ExtendedMetaData(kind="element", name="request", namespace="##targetNamespace")
	!resolve val Reference request;

	@GenModel(documentation="The device that is to be used for the administration of the medication (for example, PCA Pump).")
	@ExtendedMetaData(kind="element", name="device", namespace="##targetNamespace")
	!resolve val CodeableReference[*] device;

	@GenModel(documentation="Extra information about the medication administration that is not conveyed by the other attributes.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="Describes the medication dosage information details e.g. dose, rate, site, route, etc.")
	@ExtendedMetaData(kind="element", name="dosage", namespace="##targetNamespace")
	!resolve val MedicationAdministrationDosage dosage;

	@GenModel(documentation="A summary of the events of interest that have occurred, such as when the administration was verified.")
	@ExtendedMetaData(kind="element", name="eventHistory", namespace="##targetNamespace")
	!resolve val Reference[*] eventHistory;
}

@GenModel(documentation="Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner.")
@ExtendedMetaData(name="MedicationAdministration.Dosage", kind="elementOnly")
class MedicationAdministrationDosage extends BackboneElement {

	@GenModel(documentation="Free text dosage can be used for cases where the dosage administered is too complex to code. When coded dosage is present, the free text dosage may still be present for display to humans.

The dosage instructions should reflect the dosage of the medication that was administered.")
	@ExtendedMetaData(kind="element", name="text", namespace="##targetNamespace")
	!resolve val String text;

	@GenModel(documentation="A coded specification of the anatomic site where the medication first entered the body.  For example, \"left arm\".")
	@ExtendedMetaData(kind="element", name="site", namespace="##targetNamespace")
	!resolve val CodeableConcept site;

	@GenModel(documentation="A code specifying the route or physiological path of administration of a therapeutic agent into or onto the patient.  For example, topical, intravenous, etc.")
	@ExtendedMetaData(kind="element", name="route", namespace="##targetNamespace")
	!resolve val CodeableConcept route;

	@GenModel(documentation="A coded value indicating the method by which the medication is intended to be or was introduced into or on the body.  This attribute will most often NOT be populated.  It is most commonly used for injections.  For example, Slow Push, Deep IV.")
	@ExtendedMetaData(kind="element", name="method", namespace="##targetNamespace")
	!resolve val CodeableConcept method;

	@GenModel(documentation="The amount of the medication given at one administration event.   Use this value when the administration is essentially an instantaneous event such as a swallowing a tablet or giving an injection.")
	@ExtendedMetaData(kind="element", name="dose", namespace="##targetNamespace")
	!resolve val Quantity dose;

	@ExtendedMetaData(kind="element", name="rateRatio", namespace="##targetNamespace")
	!resolve val Ratio rateRatio;

	@ExtendedMetaData(kind="element", name="rateQuantity", namespace="##targetNamespace")
	!resolve val Quantity rateQuantity;
}

@GenModel(documentation="Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner.")
@ExtendedMetaData(name="MedicationAdministration.Performer", kind="elementOnly")
class MedicationAdministrationPerformer extends BackboneElement {

	@GenModel(documentation="Distinguishes the type of involvement of the performer in the medication administration.")
	@ExtendedMetaData(kind="element", name="function", namespace="##targetNamespace")
	!resolve val CodeableConcept function;

	@GenModel(documentation="Indicates who or what performed the medication administration.")
	@ExtendedMetaData(kind="element", name="actor", namespace="##targetNamespace")
	!resolve val CodeableReference[1] actor;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="MedicationAdministrationStatusCodes", kind="elementOnly")
class MedicationAdministrationStatusCodes extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr MedicationAdministrationStatusCodesEnum value;
}

@ExtendedMetaData(name="MedicationAdministrationStatusCodesEnum")
enum MedicationAdministrationStatusCodesEnum {

	@GenModel(documentation="In Progress")
	inProgress = 0;

	@GenModel(documentation="Not Done")
	notDone = 1;

	@GenModel(documentation="On Hold")
	onHold = 2;

	@GenModel(documentation="Completed")
	completed = 3;

	@GenModel(documentation="Entered in Error")
	enteredInError = 4;

	@GenModel(documentation="Stopped")
	stopped = 5;

	@GenModel(documentation="Unknown")
	unknown = 6;
}

@ExtendedMetaData(name="MedicationAdministrationStatusCodesEnum:Object", baseType="MedicationAdministrationStatusCodesEnum")
datatype MedicationAdministrationStatusCodesEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="This resource is primarily used for the identification and definition of a medication, including ingredients, for the purposes of prescribing, dispensing, and administering a medication as well as for making statements about medication use.")
@ExtendedMetaData(name="Medication.Batch", kind="elementOnly")
class MedicationBatch extends BackboneElement {

	@GenModel(documentation="The assigned lot number of a batch of the specified product.")
	@ExtendedMetaData(kind="element", name="lotNumber", namespace="##targetNamespace")
	!resolve val String lotNumber;

	@GenModel(documentation="When this specific batch of product will expire.")
	@ExtendedMetaData(kind="element", name="expirationDate", namespace="##targetNamespace")
	!resolve val DateTime expirationDate;
}

@GenModel(documentation="Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="MedicationDispense", kind="elementOnly")
class MedicationDispense extends DomainResource {

	@GenModel(documentation="Identifiers associated with this Medication Dispense that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="A plan that is fulfilled in whole or in part by this MedicationDispense.")
	@ExtendedMetaData(kind="element", name="basedOn", namespace="##targetNamespace")
	!resolve val Reference[*] basedOn;

	@GenModel(documentation="The procedure or medication administration that triggered the dispense.")
	@ExtendedMetaData(kind="element", name="partOf", namespace="##targetNamespace")
	!resolve val Reference[*] partOf;

	@GenModel(documentation="A code specifying the state of the set of dispense events.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val MedicationDispenseStatusCodes[1] status;

	@GenModel(documentation="Indicates the reason why a dispense was not performed.")
	@ExtendedMetaData(kind="element", name="notPerformedReason", namespace="##targetNamespace")
	!resolve val CodeableReference notPerformedReason;

	@GenModel(documentation="The date (and maybe time) when the status of the dispense record changed.")
	@ExtendedMetaData(kind="element", name="statusChanged", namespace="##targetNamespace")
	!resolve val DateTime statusChanged;

	@GenModel(documentation="Indicates the type of medication dispense (for example, drug classification like ATC, where meds would be administered, legal category of the medication.).")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] category;

	@GenModel(documentation="Identifies the medication supplied. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.")
	@ExtendedMetaData(kind="element", name="medication", namespace="##targetNamespace")
	!resolve val CodeableReference[1] medication;

	@GenModel(documentation="A link to a resource representing the person or the group to whom the medication will be given.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference[1] subject;

	@GenModel(documentation="The encounter that establishes the context for this event.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@GenModel(documentation="Additional information that supports the medication being dispensed.  For example, there may be requirements that a specific lab test has been completed prior to dispensing or the patient's weight at the time of dispensing is documented.")
	@ExtendedMetaData(kind="element", name="supportingInformation", namespace="##targetNamespace")
	!resolve val Reference[*] supportingInformation;

	@GenModel(documentation="Indicates who or what performed the event.")
	@ExtendedMetaData(kind="element", name="performer", namespace="##targetNamespace")
	!resolve val MedicationDispensePerformer[*] performer;

	@GenModel(documentation="The principal physical location where the dispense was performed.")
	@ExtendedMetaData(kind="element", name="location", namespace="##targetNamespace")
	!resolve val Reference location;

	@GenModel(documentation="Indicates the medication order that is being dispensed against.")
	@ExtendedMetaData(kind="element", name="authorizingPrescription", namespace="##targetNamespace")
	!resolve val Reference[*] authorizingPrescription;

	@GenModel(documentation="Indicates the type of dispensing event that is performed. For example, Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="The amount of medication that has been dispensed. Includes unit of measure.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Quantity quantity;

	@GenModel(documentation="The amount of medication expressed as a timing amount.")
	@ExtendedMetaData(kind="element", name="daysSupply", namespace="##targetNamespace")
	!resolve val Quantity daysSupply;

	@GenModel(documentation="The date (and maybe time) when the dispense activity started if whenPrepared or whenHandedOver is not populated.")
	@ExtendedMetaData(kind="element", name="recorded", namespace="##targetNamespace")
	!resolve val DateTime recorded;

	@GenModel(documentation="The time when the dispensed product was packaged and reviewed.")
	@ExtendedMetaData(kind="element", name="whenPrepared", namespace="##targetNamespace")
	!resolve val DateTime whenPrepared;

	@GenModel(documentation="The time the dispensed product was provided to the patient or their representative.")
	@ExtendedMetaData(kind="element", name="whenHandedOver", namespace="##targetNamespace")
	!resolve val DateTime whenHandedOver;

	@GenModel(documentation="Identification of the facility/location where the medication was/will be shipped to, as part of the dispense event.")
	@ExtendedMetaData(kind="element", name="destination", namespace="##targetNamespace")
	!resolve val Reference destination;

	@GenModel(documentation="Identifies the person who picked up the medication or the location of where the medication was delivered.  This will usually be a patient or their caregiver, but some cases exist where it can be a healthcare professional or a location.")
	@ExtendedMetaData(kind="element", name="receiver", namespace="##targetNamespace")
	!resolve val Reference[*] receiver;

	@GenModel(documentation="Extra information about the dispense that could not be conveyed in the other attributes.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="The full representation of the dose of the medication included in all dosage instructions.  To be used when multiple dosage instructions are included to represent complex dosing such as increasing or tapering doses.")
	@ExtendedMetaData(kind="element", name="renderedDosageInstruction", namespace="##targetNamespace")
	!resolve val Markdown renderedDosageInstruction;

	@GenModel(documentation="Indicates how the medication is to be used by the patient.")
	@ExtendedMetaData(kind="element", name="dosageInstruction", namespace="##targetNamespace")
	!resolve val Dosage[*] dosageInstruction;

	@GenModel(documentation="Indicates whether or not substitution was made as part of the dispense.  In some cases, substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.  If nothing is specified, substitution was not done.")
	@ExtendedMetaData(kind="element", name="substitution", namespace="##targetNamespace")
	!resolve val MedicationDispenseSubstitution substitution;

	@GenModel(documentation="A summary of the events of interest that have occurred, such as when the dispense was verified.")
	@ExtendedMetaData(kind="element", name="eventHistory", namespace="##targetNamespace")
	!resolve val Reference[*] eventHistory;
}

@GenModel(documentation="Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.")
@ExtendedMetaData(name="MedicationDispense.Performer", kind="elementOnly")
class MedicationDispensePerformer extends BackboneElement {

	@GenModel(documentation="Distinguishes the type of performer in the dispense.  For example, date enterer, packager, final checker.")
	@ExtendedMetaData(kind="element", name="function", namespace="##targetNamespace")
	!resolve val CodeableConcept function;

	@GenModel(documentation="The device, practitioner, etc. who performed the action.  It should be assumed that the actor is the dispenser of the medication.")
	@ExtendedMetaData(kind="element", name="actor", namespace="##targetNamespace")
	!resolve val Reference[1] actor;
}

@GenModel(documentation="A coded concept specifying the state of the dispense event.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="MedicationDispenseStatusCodes", kind="elementOnly")
class MedicationDispenseStatusCodes extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr MedicationDispenseStatusCodesEnum value;
}

@ExtendedMetaData(name="MedicationDispenseStatusCodesEnum")
enum MedicationDispenseStatusCodesEnum {

	@GenModel(documentation="Preparation")
	preparation = 0;

	@GenModel(documentation="In Progress")
	inProgress = 1;

	@GenModel(documentation="Cancelled")
	cancelled = 2;

	@GenModel(documentation="On Hold")
	onHold = 3;

	@GenModel(documentation="Completed")
	completed = 4;

	@GenModel(documentation="Entered in Error")
	enteredInError = 5;

	@GenModel(documentation="Stopped")
	stopped = 6;

	@GenModel(documentation="Declined")
	declined = 7;

	@GenModel(documentation="Unknown")
	unknown = 8;
}

@ExtendedMetaData(name="MedicationDispenseStatusCodesEnum:Object", baseType="MedicationDispenseStatusCodesEnum")
datatype MedicationDispenseStatusCodesEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.")
@ExtendedMetaData(name="MedicationDispense.Substitution", kind="elementOnly")
class MedicationDispenseSubstitution extends BackboneElement {

	@GenModel(documentation="True if the dispenser dispensed a different drug or product from what was prescribed.")
	@ExtendedMetaData(kind="element", name="wasSubstituted", namespace="##targetNamespace")
	!resolve val Boolean[1] wasSubstituted;

	@GenModel(documentation="A code signifying whether a different drug was dispensed from what was prescribed.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="Indicates the reason for the substitution (or lack of substitution) from what was prescribed.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] reason;

	@GenModel(documentation="The person or organization that has primary responsibility for the substitution.")
	@ExtendedMetaData(kind="element", name="responsibleParty", namespace="##targetNamespace")
	!resolve val Reference responsibleParty;
}

@GenModel(documentation="This resource is primarily used for the identification and definition of a medication, including ingredients, for the purposes of prescribing, dispensing, and administering a medication as well as for making statements about medication use.")
@ExtendedMetaData(name="Medication.Ingredient", kind="elementOnly")
class MedicationIngredient extends BackboneElement {

	@GenModel(documentation="The ingredient (substance or medication) that the ingredient.strength relates to.  This is represented as a concept from a code system or described in another resource (Substance or Medication).")
	@ExtendedMetaData(kind="element", name="item", namespace="##targetNamespace")
	!resolve val CodeableReference[1] item;

	@GenModel(documentation="Indication of whether this ingredient affects the therapeutic action of the drug.")
	@ExtendedMetaData(kind="element", name="isActive", namespace="##targetNamespace")
	!resolve val Boolean isActive;

	@ExtendedMetaData(kind="element", name="strengthRatio", namespace="##targetNamespace")
	!resolve val Ratio strengthRatio;

	@ExtendedMetaData(kind="element", name="strengthCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept strengthCodeableConcept;

	@ExtendedMetaData(kind="element", name="strengthQuantity", namespace="##targetNamespace")
	!resolve val Quantity strengthQuantity;
}

@GenModel(documentation="Information about a medication that is used to support knowledge.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="MedicationKnowledge", kind="elementOnly")
class MedicationKnowledge extends MetadataResource {

	@GenModel(documentation="Business identifier for this medication.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="A code that specifies this medication, or a textual description if no code is available. Usage note: This could be a standard medication code such as a code from RxNorm, SNOMED CT, IDMP etc. It could also be a national or local formulary code, optionally with translations to other code systems.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@GenModel(documentation="A code to indicate if the medication referred to by this MedicationKnowledge is in active use within the drug database or inventory system. The status refers to the validity about the information of the medication and not to its medicinal properties.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val MedicationKnowledgeStatusCodes status;

	@GenModel(documentation="The creator or owner of the knowledge or information about the medication.")
	@ExtendedMetaData(kind="element", name="author", namespace="##targetNamespace")
	!resolve val Reference author;

	@GenModel(documentation="Lists the jurisdictions that this medication knowledge was written for.")
	@ExtendedMetaData(kind="element", name="intendedJurisdiction", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] intendedJurisdiction;

	@GenModel(documentation="All of the names for a medication, for example, the name(s) given to a medication in different countries.  For example, acetaminophen and paracetamol or salbutamol and albuterol.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String[*] name;

	@GenModel(documentation="Associated or related medications. For example, if the medication is a branded product (e.g. Crestor), this is the Therapeutic Moeity (e.g. Rosuvastatin) or if this is a generic medication (e.g. Rosuvastatin), this would link to a branded product (e.g. Crestor.")
	@ExtendedMetaData(kind="element", name="relatedMedicationKnowledge", namespace="##targetNamespace")
	!resolve val MedicationKnowledgeRelatedMedicationKnowledge[*] relatedMedicationKnowledge;

	@GenModel(documentation="Links to associated medications that could be prescribed, dispensed or administered.")
	@ExtendedMetaData(kind="element", name="associatedMedication", namespace="##targetNamespace")
	!resolve val Reference[*] associatedMedication;

	@GenModel(documentation="Category of the medication or product (e.g. branded product, therapeutic moeity, generic product, innovator product, etc.).")
	@ExtendedMetaData(kind="element", name="productType", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] productType;

	@GenModel(documentation="Associated documentation about the medication.")
	@ExtendedMetaData(kind="element", name="monograph", namespace="##targetNamespace")
	!resolve val MedicationKnowledgeMonograph[*] monograph;

	@GenModel(documentation="The instructions for preparing the medication.")
	@ExtendedMetaData(kind="element", name="preparationInstruction", namespace="##targetNamespace")
	!resolve val Markdown preparationInstruction;

	@GenModel(documentation="The price of the medication.")
	@ExtendedMetaData(kind="element", name="cost", namespace="##targetNamespace")
	!resolve val MedicationKnowledgeCost[*] cost;

	@GenModel(documentation="The program under which the medication is reviewed.")
	@ExtendedMetaData(kind="element", name="monitoringProgram", namespace="##targetNamespace")
	!resolve val MedicationKnowledgeMonitoringProgram[*] monitoringProgram;

	@GenModel(documentation="Guidelines or protocols that are applicable for the administration of the medication based on indication.")
	@ExtendedMetaData(kind="element", name="indicationGuideline", namespace="##targetNamespace")
	!resolve val MedicationKnowledgeIndicationGuideline[*] indicationGuideline;

	@GenModel(documentation="Categorization of the medication within a formulary or classification system.")
	@ExtendedMetaData(kind="element", name="medicineClassification", namespace="##targetNamespace")
	!resolve val MedicationKnowledgeMedicineClassification[*] medicineClassification;

	@GenModel(documentation="Information that only applies to packages (not products).")
	@ExtendedMetaData(kind="element", name="packaging", namespace="##targetNamespace")
	!resolve val MedicationKnowledgePackaging[*] packaging;

	@GenModel(documentation="Potential clinical issue with or between medication(s) (for example, drug-drug interaction, drug-disease contraindication, drug-allergy interaction, etc.).")
	@ExtendedMetaData(kind="element", name="clinicalUseIssue", namespace="##targetNamespace")
	!resolve val Reference[*] clinicalUseIssue;

	@GenModel(documentation="Information on how the medication should be stored, for example, refrigeration temperatures and length of stability at a given temperature.")
	@ExtendedMetaData(kind="element", name="storageGuideline", namespace="##targetNamespace")
	!resolve val MedicationKnowledgeStorageGuideline[*] storageGuideline;

	@GenModel(documentation="Regulatory information about a medication.")
	@ExtendedMetaData(kind="element", name="regulatory", namespace="##targetNamespace")
	!resolve val MedicationKnowledgeRegulatory[*] regulatory;

	@GenModel(documentation="Along with the link to a Medicinal Product Definition resource, this information provides common definitional elements that are needed to understand the specific medication that is being described.")
	@ExtendedMetaData(kind="element", name="definitional", namespace="##targetNamespace")
	!resolve val MedicationKnowledgeDefinitional definitional;
}

@GenModel(documentation="Information about a medication that is used to support knowledge.")
@ExtendedMetaData(name="MedicationKnowledge.Cost", kind="elementOnly")
class MedicationKnowledgeCost extends BackboneElement {

	@GenModel(documentation="The date range for which the cost information of the medication is effective.")
	@ExtendedMetaData(kind="element", name="effectiveDate", namespace="##targetNamespace")
	!resolve val Period[*] effectiveDate;

	@GenModel(documentation="The category of the cost information.  For example, manufacturers' cost, patient cost, claim reimbursement cost, actual acquisition cost.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@GenModel(documentation="The source or owner that assigns the price to the medication.")
	@ExtendedMetaData(kind="element", name="source", namespace="##targetNamespace")
	!resolve val String source;

	@ExtendedMetaData(kind="element", name="costMoney", namespace="##targetNamespace")
	!resolve val Money costMoney;

	@ExtendedMetaData(kind="element", name="costCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept costCodeableConcept;
}

@GenModel(documentation="Information about a medication that is used to support knowledge.")
@ExtendedMetaData(name="MedicationKnowledge.Definitional", kind="elementOnly")
class MedicationKnowledgeDefinitional extends BackboneElement {

	@GenModel(documentation="Associated definitions for this medication.")
	@ExtendedMetaData(kind="element", name="definition", namespace="##targetNamespace")
	!resolve val Reference[*] definition;

	@GenModel(documentation="Describes the form of the item.  Powder; tablets; capsule.")
	@ExtendedMetaData(kind="element", name="doseForm", namespace="##targetNamespace")
	!resolve val CodeableConcept doseForm;

	@GenModel(documentation="The intended or approved route of administration.")
	@ExtendedMetaData(kind="element", name="intendedRoute", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] intendedRoute;

	@GenModel(documentation="Identifies a particular constituent of interest in the product.")
	@ExtendedMetaData(kind="element", name="ingredient", namespace="##targetNamespace")
	!resolve val MedicationKnowledgeIngredient[*] ingredient;

	@GenModel(documentation="Specifies descriptive properties of the medicine, such as color, shape, imprints, etc.")
	@ExtendedMetaData(kind="element", name="drugCharacteristic", namespace="##targetNamespace")
	!resolve val MedicationKnowledgeDrugCharacteristic[*] drugCharacteristic;
}

@GenModel(documentation="Information about a medication that is used to support knowledge.")
@ExtendedMetaData(name="MedicationKnowledge.Dosage", kind="elementOnly")
class MedicationKnowledgeDosage extends BackboneElement {

	@GenModel(documentation="The type or category of dosage for a given medication (for example, prophylaxis, maintenance, therapeutic, etc.).")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@GenModel(documentation="Dosage for the medication for the specific guidelines.")
	@ExtendedMetaData(kind="element", name="dosage", namespace="##targetNamespace")
	!resolve val Dosage[+] dosage;
}

@GenModel(documentation="Information about a medication that is used to support knowledge.")
@ExtendedMetaData(name="MedicationKnowledge.DosingGuideline", kind="elementOnly")
class MedicationKnowledgeDosingGuideline extends BackboneElement {

	@GenModel(documentation="The overall intention of the treatment, for example, prophylactic, supporative, curative, etc.")
	@ExtendedMetaData(kind="element", name="treatmentIntent", namespace="##targetNamespace")
	!resolve val CodeableConcept treatmentIntent;

	@GenModel(documentation="Dosage for the medication for the specific guidelines.")
	@ExtendedMetaData(kind="element", name="dosage", namespace="##targetNamespace")
	!resolve val MedicationKnowledgeDosage[*] dosage;

	@GenModel(documentation="The type of the treatment that the guideline applies to, for example, long term therapy, first line treatment, etc.")
	@ExtendedMetaData(kind="element", name="administrationTreatment", namespace="##targetNamespace")
	!resolve val CodeableConcept administrationTreatment;

	@GenModel(documentation="Characteristics of the patient that are relevant to the administration guidelines (for example, height, weight, gender, etc.).")
	@ExtendedMetaData(kind="element", name="patientCharacteristic", namespace="##targetNamespace")
	!resolve val MedicationKnowledgePatientCharacteristic[*] patientCharacteristic;
}

@GenModel(documentation="Information about a medication that is used to support knowledge.")
@ExtendedMetaData(name="MedicationKnowledge.DrugCharacteristic", kind="elementOnly")
class MedicationKnowledgeDrugCharacteristic extends BackboneElement {

	@GenModel(documentation="A code specifying which characteristic of the medicine is being described (for example, colour, shape, imprint).")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@ExtendedMetaData(kind="element", name="valueCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept valueCodeableConcept;

	@ExtendedMetaData(kind="element", name="valueString", namespace="##targetNamespace")
	!resolve val String valueString;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueBase64Binary", namespace="##targetNamespace")
	!resolve val Base64Binary valueBase64Binary;

	@ExtendedMetaData(kind="element", name="valueAttachment", namespace="##targetNamespace")
	!resolve val Attachment valueAttachment;
}

@GenModel(documentation="Information about a medication that is used to support knowledge.")
@ExtendedMetaData(name="MedicationKnowledge.EnvironmentalSetting", kind="elementOnly")
class MedicationKnowledgeEnvironmentalSetting extends BackboneElement {

	@GenModel(documentation="Identifies the category or type of setting (e.g., type of location, temperature, humidity).")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueRange", namespace="##targetNamespace")
	!resolve val Range valueRange;

	@ExtendedMetaData(kind="element", name="valueCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept valueCodeableConcept;
}

@GenModel(documentation="Information about a medication that is used to support knowledge.")
@ExtendedMetaData(name="MedicationKnowledge.IndicationGuideline", kind="elementOnly")
class MedicationKnowledgeIndicationGuideline extends BackboneElement {

	@GenModel(documentation="Indication or reason for use of the medication that applies to the specific administration guideline.")
	@ExtendedMetaData(kind="element", name="indication", namespace="##targetNamespace")
	!resolve val CodeableReference[*] indication;

	@GenModel(documentation="The guidelines for the dosage of the medication for the indication.")
	@ExtendedMetaData(kind="element", name="dosingGuideline", namespace="##targetNamespace")
	!resolve val MedicationKnowledgeDosingGuideline[*] dosingGuideline;
}

@GenModel(documentation="Information about a medication that is used to support knowledge.")
@ExtendedMetaData(name="MedicationKnowledge.Ingredient", kind="elementOnly")
class MedicationKnowledgeIngredient extends BackboneElement {

	@GenModel(documentation="A reference to the resource that provides information about the ingredient.")
	@ExtendedMetaData(kind="element", name="item", namespace="##targetNamespace")
	!resolve val CodeableReference[1] item;

	@GenModel(documentation="Indication of whether this ingredient affects the therapeutic action of the drug.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@ExtendedMetaData(kind="element", name="strengthRatio", namespace="##targetNamespace")
	!resolve val Ratio strengthRatio;

	@ExtendedMetaData(kind="element", name="strengthCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept strengthCodeableConcept;

	@ExtendedMetaData(kind="element", name="strengthQuantity", namespace="##targetNamespace")
	!resolve val Quantity strengthQuantity;
}

@GenModel(documentation="Information about a medication that is used to support knowledge.")
@ExtendedMetaData(name="MedicationKnowledge.MaxDispense", kind="elementOnly")
class MedicationKnowledgeMaxDispense extends BackboneElement {

	@GenModel(documentation="The maximum number of units of the medication that can be dispensed.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Quantity[1] quantity;

	@GenModel(documentation="The period that applies to the maximum number of units.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Duration period;
}

@GenModel(documentation="Information about a medication that is used to support knowledge.")
@ExtendedMetaData(name="MedicationKnowledge.MedicineClassification", kind="elementOnly")
class MedicationKnowledgeMedicineClassification extends BackboneElement {

	@GenModel(documentation="The type of category for the medication (for example, therapeutic classification, therapeutic sub-classification).")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@ExtendedMetaData(kind="element", name="sourceString", namespace="##targetNamespace")
	!resolve val String sourceString;

	@ExtendedMetaData(kind="element", name="sourceUri", namespace="##targetNamespace")
	!resolve val Uri sourceUri;

	@GenModel(documentation="Specific category assigned to the medication (e.g. anti-infective, anti-hypertensive, antibiotic, etc.).")
	@ExtendedMetaData(kind="element", name="classification", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] classification;
}

@GenModel(documentation="Information about a medication that is used to support knowledge.")
@ExtendedMetaData(name="MedicationKnowledge.MonitoringProgram", kind="elementOnly")
class MedicationKnowledgeMonitoringProgram extends BackboneElement {

	@GenModel(documentation="Type of program under which the medication is monitored.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="Name of the reviewing program.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;
}

@GenModel(documentation="Information about a medication that is used to support knowledge.")
@ExtendedMetaData(name="MedicationKnowledge.Monograph", kind="elementOnly")
class MedicationKnowledgeMonograph extends BackboneElement {

	@GenModel(documentation="The category of documentation about the medication. (e.g. professional monograph, patient education monograph).")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="Associated documentation about the medication.")
	@ExtendedMetaData(kind="element", name="source", namespace="##targetNamespace")
	!resolve val Reference source;
}

@GenModel(documentation="Information about a medication that is used to support knowledge.")
@ExtendedMetaData(name="MedicationKnowledge.Packaging", kind="elementOnly")
class MedicationKnowledgePackaging extends BackboneElement {

	@GenModel(documentation="The cost of the packaged medication.")
	@ExtendedMetaData(kind="element", name="cost", namespace="##targetNamespace")
	!resolve val MedicationKnowledgeCost[*] cost;

	@GenModel(documentation="A reference to a PackagedProductDefinition that provides the details of the product that is in the packaging and is being priced.")
	@ExtendedMetaData(kind="element", name="packagedProduct", namespace="##targetNamespace")
	!resolve val Reference packagedProduct;
}

@GenModel(documentation="Information about a medication that is used to support knowledge.")
@ExtendedMetaData(name="MedicationKnowledge.PatientCharacteristic", kind="elementOnly")
class MedicationKnowledgePatientCharacteristic extends BackboneElement {

	@GenModel(documentation="The categorization of the specific characteristic that is relevant to the administration guideline (e.g. height, weight, gender).")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@ExtendedMetaData(kind="element", name="valueCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept valueCodeableConcept;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueRange", namespace="##targetNamespace")
	!resolve val Range valueRange;
}

@GenModel(documentation="Information about a medication that is used to support knowledge.")
@ExtendedMetaData(name="MedicationKnowledge.Regulatory", kind="elementOnly")
class MedicationKnowledgeRegulatory extends BackboneElement {

	@GenModel(documentation="The authority that is specifying the regulations.")
	@ExtendedMetaData(kind="element", name="regulatoryAuthority", namespace="##targetNamespace")
	!resolve val Reference[1] regulatoryAuthority;

	@GenModel(documentation="Specifies if changes are allowed when dispensing a medication from a regulatory perspective.")
	@ExtendedMetaData(kind="element", name="substitution", namespace="##targetNamespace")
	!resolve val MedicationKnowledgeSubstitution[*] substitution;

	@GenModel(documentation="Specifies the schedule of a medication in jurisdiction.")
	@ExtendedMetaData(kind="element", name="schedule", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] schedule;

	@GenModel(documentation="The maximum number of units of the medication that can be dispensed in a period.")
	@ExtendedMetaData(kind="element", name="maxDispense", namespace="##targetNamespace")
	!resolve val MedicationKnowledgeMaxDispense maxDispense;
}

@GenModel(documentation="Information about a medication that is used to support knowledge.")
@ExtendedMetaData(name="MedicationKnowledge.RelatedMedicationKnowledge", kind="elementOnly")
class MedicationKnowledgeRelatedMedicationKnowledge extends BackboneElement {

	@GenModel(documentation="The category of the associated medication knowledge reference.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@GenModel(documentation="Associated documentation about the associated medication knowledge.")
	@ExtendedMetaData(kind="element", name="reference", namespace="##targetNamespace")
	!resolve val Reference[+] reference;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="MedicationKnowledgeStatusCodes", kind="elementOnly")
class MedicationKnowledgeStatusCodes extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr MedicationKnowledgeStatusCodesEnum value;
}

@ExtendedMetaData(name="MedicationKnowledgeStatusCodesEnum")
enum MedicationKnowledgeStatusCodesEnum {

	@GenModel(documentation="Active")
	active = 0;

	@GenModel(documentation="Entered in Error")
	enteredInError = 1;

	@GenModel(documentation="Inactive")
	inactive = 2;
}

@ExtendedMetaData(name="MedicationKnowledgeStatusCodesEnum:Object", baseType="MedicationKnowledgeStatusCodesEnum")
datatype MedicationKnowledgeStatusCodesEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="Information about a medication that is used to support knowledge.")
@ExtendedMetaData(name="MedicationKnowledge.StorageGuideline", kind="elementOnly")
class MedicationKnowledgeStorageGuideline extends BackboneElement {

	@GenModel(documentation="Reference to additional information about the storage guidelines.")
	@ExtendedMetaData(kind="element", name="reference", namespace="##targetNamespace")
	!resolve val Uri reference;

	@GenModel(documentation="Additional notes about the storage.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="Duration that the medication remains stable if the environmentalSetting is respected.")
	@ExtendedMetaData(kind="element", name="stabilityDuration", namespace="##targetNamespace")
	!resolve val Duration stabilityDuration;

	@GenModel(documentation="Describes a setting/value on the environment for the adequate storage of the medication and other substances.  Environment settings may involve temperature, humidity, or exposure to light.")
	@ExtendedMetaData(kind="element", name="environmentalSetting", namespace="##targetNamespace")
	!resolve val MedicationKnowledgeEnvironmentalSetting[*] environmentalSetting;
}

@GenModel(documentation="Information about a medication that is used to support knowledge.")
@ExtendedMetaData(name="MedicationKnowledge.Substitution", kind="elementOnly")
class MedicationKnowledgeSubstitution extends BackboneElement {

	@GenModel(documentation="Specifies the type of substitution allowed.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@GenModel(documentation="Specifies if regulation allows for changes in the medication when dispensing.")
	@ExtendedMetaData(kind="element", name="allowed", namespace="##targetNamespace")
	!resolve val Boolean[1] allowed;
}

@GenModel(documentation="An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called \"MedicationRequest\" rather than \"MedicationPrescription\" or \"MedicationOrder\" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="MedicationRequest", kind="elementOnly")
class MedicationRequest extends DomainResource {

	@GenModel(documentation="Identifiers associated with this medication request that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="A plan or request that is fulfilled in whole or in part by this medication request.")
	@ExtendedMetaData(kind="element", name="basedOn", namespace="##targetNamespace")
	!resolve val Reference[*] basedOn;

	@GenModel(documentation="Reference to an order/prescription that is being replaced by this MedicationRequest.")
	@ExtendedMetaData(kind="element", name="priorPrescription", namespace="##targetNamespace")
	!resolve val Reference priorPrescription;

	@GenModel(documentation="A shared identifier common to multiple independent Request instances that were activated/authorized more or less simultaneously by a single author.  The presence of the same identifier on each request ties those requests together and may have business ramifications in terms of reporting of results, billing, etc.  E.g. a requisition number shared by a set of lab tests ordered together, or a prescription number shared by all meds ordered at one time.")
	@ExtendedMetaData(kind="element", name="groupIdentifier", namespace="##targetNamespace")
	!resolve val Identifier groupIdentifier;

	@GenModel(documentation="A code specifying the current state of the order.  Generally, this will be active or completed state.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val MedicationrequestStatus[1] status;

	@GenModel(documentation="Captures the reason for the current state of the MedicationRequest.")
	@ExtendedMetaData(kind="element", name="statusReason", namespace="##targetNamespace")
	!resolve val CodeableConcept statusReason;

	@GenModel(documentation="The date (and perhaps time) when the status was changed.")
	@ExtendedMetaData(kind="element", name="statusChanged", namespace="##targetNamespace")
	!resolve val DateTime statusChanged;

	@GenModel(documentation="Whether the request is a proposal, plan, or an original order.")
	@ExtendedMetaData(kind="element", name="intent", namespace="##targetNamespace")
	!resolve val MedicationRequestIntent[1] intent;

	@GenModel(documentation="An arbitrary categorization or grouping of the medication request.  It could be used for indicating where meds are intended to be administered, eg. in an inpatient setting or in a patient's home, or a legal category of the medication.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] category;

	@GenModel(documentation="Indicates how quickly the Medication Request should be addressed with respect to other requests.")
	@ExtendedMetaData(kind="element", name="priority", namespace="##targetNamespace")
	!resolve val RequestPriority priority;

	@GenModel(documentation="If true, indicates that the provider is asking for the patient to either stop taking or to not start taking the specified medication. For example, the patient is taking an existing medication and the provider is changing their medication. They want to create two seperate requests: one to stop using the current medication and another to start the new medication.")
	@ExtendedMetaData(kind="element", name="doNotPerform", namespace="##targetNamespace")
	!resolve val Boolean doNotPerform;

	@GenModel(documentation="Identifies the medication being requested. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.")
	@ExtendedMetaData(kind="element", name="medication", namespace="##targetNamespace")
	!resolve val CodeableReference[1] medication;

	@GenModel(documentation="The individual or group for whom the medication has been requested.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference[1] subject;

	@GenModel(documentation="The person or organization who provided the information about this request, if the source is someone other than the requestor.  This is often used when the MedicationRequest is reported by another person.")
	@ExtendedMetaData(kind="element", name="informationSource", namespace="##targetNamespace")
	!resolve val Reference[*] informationSource;

	@GenModel(documentation="The Encounter during which this [x] was created or to which the creation of this record is tightly associated.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@GenModel(documentation="Information to support fulfilling (i.e. dispensing or administering) of the medication, for example, patient height and weight, a MedicationStatement for the patient).")
	@ExtendedMetaData(kind="element", name="supportingInformation", namespace="##targetNamespace")
	!resolve val Reference[*] supportingInformation;

	@GenModel(documentation="The date (and perhaps time) when the prescription was initially written or authored on.")
	@ExtendedMetaData(kind="element", name="authoredOn", namespace="##targetNamespace")
	!resolve val DateTime authoredOn;

	@GenModel(documentation="The individual, organization, or device that initiated the request and has responsibility for its activation.")
	@ExtendedMetaData(kind="element", name="requester", namespace="##targetNamespace")
	!resolve val Reference requester;

	@GenModel(documentation="Indicates if this record was captured as a secondary 'reported' record rather than as an original primary source-of-truth record.  It may also indicate the source of the report.")
	@ExtendedMetaData(kind="element", name="reported", namespace="##targetNamespace")
	!resolve val Boolean reported;

	@GenModel(documentation="Indicates the type of performer of the administration of the medication.")
	@ExtendedMetaData(kind="element", name="performerType", namespace="##targetNamespace")
	!resolve val CodeableConcept performerType;

	@GenModel(documentation="The specified desired performer of the medication treatment (e.g. the performer of the medication administration).  For devices, this is the device that is intended to perform the administration of the medication.  An IV Pump would be an example of a device that is performing the administration.  Both the IV Pump and the practitioner that set the rate or bolus on the pump can be listed as performers.")
	@ExtendedMetaData(kind="element", name="performer", namespace="##targetNamespace")
	!resolve val Reference[*] performer;

	@GenModel(documentation="The intended type of device that is to be used for the administration of the medication (for example, PCA Pump).")
	@ExtendedMetaData(kind="element", name="device", namespace="##targetNamespace")
	!resolve val CodeableReference[*] device;

	@GenModel(documentation="The person who entered the order on behalf of another individual for example in the case of a verbal or a telephone order.")
	@ExtendedMetaData(kind="element", name="recorder", namespace="##targetNamespace")
	!resolve val Reference recorder;

	@GenModel(documentation="The reason or the indication for ordering or not ordering the medication.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val CodeableReference[*] reason;

	@GenModel(documentation="The description of the overall pattern of the administration of the medication to the patient.")
	@ExtendedMetaData(kind="element", name="courseOfTherapyType", namespace="##targetNamespace")
	!resolve val CodeableConcept courseOfTherapyType;

	@GenModel(documentation="Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be required for delivering the requested service.")
	@ExtendedMetaData(kind="element", name="insurance", namespace="##targetNamespace")
	!resolve val Reference[*] insurance;

	@GenModel(documentation="Extra information about the prescription that could not be conveyed by the other attributes.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="The full representation of the dose of the medication included in all dosage instructions.  To be used when multiple dosage instructions are included to represent complex dosing such as increasing or tapering doses.")
	@ExtendedMetaData(kind="element", name="renderedDosageInstruction", namespace="##targetNamespace")
	!resolve val Markdown renderedDosageInstruction;

	@GenModel(documentation="The period over which the medication is to be taken.  Where there are multiple dosageInstruction lines (for example, tapering doses), this is the earliest date and the latest end date of the dosageInstructions.")
	@ExtendedMetaData(kind="element", name="effectiveDosePeriod", namespace="##targetNamespace")
	!resolve val Period effectiveDosePeriod;

	@GenModel(documentation="Specific instructions for how the medication is to be used by the patient.")
	@ExtendedMetaData(kind="element", name="dosageInstruction", namespace="##targetNamespace")
	!resolve val Dosage[*] dosageInstruction;

	@GenModel(documentation="Indicates the specific details for the dispense or medication supply part of a medication request (also known as a Medication Prescription or Medication Order).  Note that this information is not always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.")
	@ExtendedMetaData(kind="element", name="dispenseRequest", namespace="##targetNamespace")
	!resolve val MedicationRequestDispenseRequest dispenseRequest;

	@GenModel(documentation="Indicates whether or not substitution can or should be part of the dispense. In some cases, substitution must happen, in other cases substitution must not happen. This block explains the prescriber's intent. If nothing is specified substitution may be done.")
	@ExtendedMetaData(kind="element", name="substitution", namespace="##targetNamespace")
	!resolve val MedicationRequestSubstitution substitution;

	@GenModel(documentation="Links to Provenance records for past versions of this resource or fulfilling request or event resources that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the resource.")
	@ExtendedMetaData(kind="element", name="eventHistory", namespace="##targetNamespace")
	!resolve val Reference[*] eventHistory;
}

@GenModel(documentation="An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called \"MedicationRequest\" rather than \"MedicationPrescription\" or \"MedicationOrder\" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.")
@ExtendedMetaData(name="MedicationRequest.DispenseRequest", kind="elementOnly")
class MedicationRequestDispenseRequest extends BackboneElement {

	@GenModel(documentation="Indicates the quantity or duration for the first dispense of the medication.")
	@ExtendedMetaData(kind="element", name="initialFill", namespace="##targetNamespace")
	!resolve val MedicationRequestInitialFill initialFill;

	@GenModel(documentation="The minimum period of time that must occur between dispenses of the medication.")
	@ExtendedMetaData(kind="element", name="dispenseInterval", namespace="##targetNamespace")
	!resolve val Duration dispenseInterval;

	@GenModel(documentation="This indicates the validity period of a prescription (stale dating the Prescription).")
	@ExtendedMetaData(kind="element", name="validityPeriod", namespace="##targetNamespace")
	!resolve val Period validityPeriod;

	@GenModel(documentation="An integer indicating the number of times, in addition to the original dispense, (aka refills or repeats) that the patient can receive the prescribed medication. Usage Notes: This integer does not include the original order dispense. This means that if an order indicates dispense 30 tablets plus \"3 repeats\", then the order can be dispensed a total of 4 times and the patient can receive a total of 120 tablets.  A prescriber may explicitly say that zero refills are permitted after the initial dispense.")
	@ExtendedMetaData(kind="element", name="numberOfRepeatsAllowed", namespace="##targetNamespace")
	!resolve val UnsignedInt numberOfRepeatsAllowed;

	@GenModel(documentation="The amount that is to be dispensed for one fill.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Quantity quantity;

	@GenModel(documentation="Identifies the period time over which the supplied product is expected to be used, or the length of time the dispense is expected to last.")
	@ExtendedMetaData(kind="element", name="expectedSupplyDuration", namespace="##targetNamespace")
	!resolve val Duration expectedSupplyDuration;

	@GenModel(documentation="Indicates the intended performing Organization that will dispense the medication as specified by the prescriber.")
	@ExtendedMetaData(kind="element", name="dispenser", namespace="##targetNamespace")
	!resolve val Reference dispenser;

	@GenModel(documentation="Provides additional information to the dispenser, for example, counselling to be provided to the patient.")
	@ExtendedMetaData(kind="element", name="dispenserInstruction", namespace="##targetNamespace")
	!resolve val Annotation[*] dispenserInstruction;

	@GenModel(documentation="Provides information about the type of adherence packaging to be supplied for the medication dispense.")
	@ExtendedMetaData(kind="element", name="doseAdministrationAid", namespace="##targetNamespace")
	!resolve val CodeableConcept doseAdministrationAid;
}

@GenModel(documentation="An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called \"MedicationRequest\" rather than \"MedicationPrescription\" or \"MedicationOrder\" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.")
@ExtendedMetaData(name="MedicationRequest.InitialFill", kind="elementOnly")
class MedicationRequestInitialFill extends BackboneElement {

	@GenModel(documentation="The amount or quantity to provide as part of the first dispense.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Quantity quantity;

	@GenModel(documentation="The length of time that the first dispense is expected to last.")
	@ExtendedMetaData(kind="element", name="duration", namespace="##targetNamespace")
	!resolve val Duration duration;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="MedicationRequestIntent", kind="elementOnly")
class MedicationRequestIntent extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr MedicationRequestIntentEnum value;
}

@ExtendedMetaData(name="MedicationRequestIntentEnum")
enum MedicationRequestIntentEnum {

	@GenModel(documentation="Proposal")
	proposal = 0;

	@GenModel(documentation="Plan")
	plan = 1;

	@GenModel(documentation="Order")
	order = 2;

	@GenModel(documentation="Original Order")
	originalOrder = 3;

	@GenModel(documentation="Reflex Order")
	reflexOrder = 4;

	@GenModel(documentation="Filler Order")
	fillerOrder = 5;

	@GenModel(documentation="Instance Order")
	instanceOrder = 6;

	@GenModel(documentation="Option")
	option = 7;
}

@ExtendedMetaData(name="MedicationRequestIntentEnum:Object", baseType="MedicationRequestIntentEnum")
datatype MedicationRequestIntentEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="MedicationrequestStatus", kind="elementOnly")
class MedicationrequestStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr MedicationrequestStatusEnum value;
}

@ExtendedMetaData(name="MedicationrequestStatusEnum")
enum MedicationrequestStatusEnum {

	@GenModel(documentation="Active")
	active = 0;

	@GenModel(documentation="On Hold")
	onHold = 1;

	@GenModel(documentation="Ended")
	ended = 2;

	@GenModel(documentation="Stopped")
	stopped = 3;

	@GenModel(documentation="Completed")
	completed = 4;

	@GenModel(documentation="Cancelled")
	cancelled = 5;

	@GenModel(documentation="Entered in Error")
	enteredInError = 6;

	@GenModel(documentation="Draft")
	draft = 7;

	@GenModel(documentation="Unknown")
	unknown = 8;
}

@ExtendedMetaData(name="MedicationrequestStatusEnum:Object", baseType="MedicationrequestStatusEnum")
datatype MedicationrequestStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called \"MedicationRequest\" rather than \"MedicationPrescription\" or \"MedicationOrder\" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.")
@ExtendedMetaData(name="MedicationRequest.Substitution", kind="elementOnly")
class MedicationRequestSubstitution extends BackboneElement {

	@ExtendedMetaData(kind="element", name="allowedBoolean", namespace="##targetNamespace")
	!resolve val Boolean allowedBoolean;

	@ExtendedMetaData(kind="element", name="allowedCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept allowedCodeableConcept;

	@GenModel(documentation="Indicates the reason for the substitution, or why substitution must or must not be performed.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val CodeableConcept reason;
}

@GenModel(documentation="A record of a medication that is being consumed by a patient.   A MedicationStatement may indicate that the patient may be taking the medication now or has taken the medication in the past or will be taking the medication in the future.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay.   The medication information may come from sources such as the patient's memory, from a prescription bottle,  or from a list of medications the patient, clinician or other party maintains. 

The primary difference between a medicationstatement and a medicationadministration is that the medication administration has complete administration information and is based on actual administration information from the person who administered the medication.  A medicationstatement is often, if not always, less specific.  There is no required date/time when the medication was administered, in fact we only know that a source has reported the patient is taking this medication, where details such as time, quantity, or rate or even medication product may be incomplete or missing or less precise.  As stated earlier, the Medication Statement information may come from the patient's memory, from a prescription bottle or from a list of medications the patient, clinician or other party maintains.  Medication administration is more formal and is not missing detailed information.

The MedicationStatement resource was previously called MedicationStatement.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="MedicationStatement", kind="elementOnly")
class MedicationStatement extends DomainResource {

	@GenModel(documentation="Identifiers associated with this Medication Statement that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="A larger event of which this particular MedicationStatement is a component or step.")
	@ExtendedMetaData(kind="element", name="partOf", namespace="##targetNamespace")
	!resolve val Reference[*] partOf;

	@GenModel(documentation="A code representing the status of recording the medication statement.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val MedicationStatementStatusCodes[1] status;

	@GenModel(documentation="Type of medication statement (for example, drug classification like ATC, where meds would be administered, legal category of the medication.).")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] category;

	@GenModel(documentation="Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.")
	@ExtendedMetaData(kind="element", name="medication", namespace="##targetNamespace")
	!resolve val CodeableReference[1] medication;

	@GenModel(documentation="The person, animal or group who is/was taking the medication.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference[1] subject;

	@GenModel(documentation="The encounter that establishes the context for this MedicationStatement.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@ExtendedMetaData(kind="element", name="effectiveDateTime", namespace="##targetNamespace")
	!resolve val DateTime effectiveDateTime;

	@ExtendedMetaData(kind="element", name="effectivePeriod", namespace="##targetNamespace")
	!resolve val Period effectivePeriod;

	@ExtendedMetaData(kind="element", name="effectiveTiming", namespace="##targetNamespace")
	!resolve val Timing effectiveTiming;

	@GenModel(documentation="The date when the Medication Statement was asserted by the information source.")
	@ExtendedMetaData(kind="element", name="dateAsserted", namespace="##targetNamespace")
	!resolve val DateTime dateAsserted;

	@GenModel(documentation="The person or organization that provided the information about the taking of this medication. Note: Use derivedFrom when a MedicationStatement is derived from other resources, e.g. Claim or MedicationRequest.")
	@ExtendedMetaData(kind="element", name="informationSource", namespace="##targetNamespace")
	!resolve val Reference[*] informationSource;

	@GenModel(documentation="Allows linking the MedicationStatement to the underlying MedicationRequest, or to other information that supports or is used to derive the MedicationStatement.")
	@ExtendedMetaData(kind="element", name="derivedFrom", namespace="##targetNamespace")
	!resolve val Reference[*] derivedFrom;

	@GenModel(documentation="A concept, Condition or observation that supports why the medication is being/was taken.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val CodeableReference[*] reason;

	@GenModel(documentation="Provides extra information about the Medication Statement that is not conveyed by the other attributes.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="Link to information that is relevant to a medication statement, for example, illicit drug use, gestational age, etc.")
	@ExtendedMetaData(kind="element", name="relatedClinicalInformation", namespace="##targetNamespace")
	!resolve val Reference[*] relatedClinicalInformation;

	@GenModel(documentation="The full representation of the dose of the medication included in all dosage instructions.  To be used when multiple dosage instructions are included to represent complex dosing such as increasing or tapering doses.")
	@ExtendedMetaData(kind="element", name="renderedDosageInstruction", namespace="##targetNamespace")
	!resolve val Markdown renderedDosageInstruction;

	@GenModel(documentation="Indicates how the medication is/was or should be taken by the patient.")
	@ExtendedMetaData(kind="element", name="dosage", namespace="##targetNamespace")
	!resolve val Dosage[*] dosage;

	@GenModel(documentation="Indicates whether the medication is or is not being consumed or administered.")
	@ExtendedMetaData(kind="element", name="adherence", namespace="##targetNamespace")
	!resolve val MedicationStatementAdherence adherence;
}

@GenModel(documentation="A record of a medication that is being consumed by a patient.   A MedicationStatement may indicate that the patient may be taking the medication now or has taken the medication in the past or will be taking the medication in the future.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay.   The medication information may come from sources such as the patient's memory, from a prescription bottle,  or from a list of medications the patient, clinician or other party maintains. 

The primary difference between a medicationstatement and a medicationadministration is that the medication administration has complete administration information and is based on actual administration information from the person who administered the medication.  A medicationstatement is often, if not always, less specific.  There is no required date/time when the medication was administered, in fact we only know that a source has reported the patient is taking this medication, where details such as time, quantity, or rate or even medication product may be incomplete or missing or less precise.  As stated earlier, the Medication Statement information may come from the patient's memory, from a prescription bottle or from a list of medications the patient, clinician or other party maintains.  Medication administration is more formal and is not missing detailed information.

The MedicationStatement resource was previously called MedicationStatement.")
@ExtendedMetaData(name="MedicationStatement.Adherence", kind="elementOnly")
class MedicationStatementAdherence extends BackboneElement {

	@GenModel(documentation="Type of the adherence for the medication.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] code;

	@GenModel(documentation="Captures the reason for the current use or adherence of a medication.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val CodeableConcept reason;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="MedicationStatementStatusCodes", kind="elementOnly")
class MedicationStatementStatusCodes extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr MedicationStatementStatusCodesEnum value;
}

@ExtendedMetaData(name="MedicationStatementStatusCodesEnum")
enum MedicationStatementStatusCodesEnum {

	@GenModel(documentation="Recorded")
	recorded = 0;

	@GenModel(documentation="Entered in Error")
	enteredInError = 1;

	@GenModel(documentation="Draft")
	draft = 2;
}

@ExtendedMetaData(name="MedicationStatementStatusCodesEnum:Object", baseType="MedicationStatementStatusCodesEnum")
datatype MedicationStatementStatusCodesEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="MedicationStatusCodes", kind="elementOnly")
class MedicationStatusCodes extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr MedicationStatusCodesEnum value;
}

@ExtendedMetaData(name="MedicationStatusCodesEnum")
enum MedicationStatusCodesEnum {

	@GenModel(documentation="Active")
	active = 0;

	@GenModel(documentation="Inactive")
	inactive = 1;

	@GenModel(documentation="Entered in Error")
	enteredInError = 2;
}

@ExtendedMetaData(name="MedicationStatusCodesEnum:Object", baseType="MedicationStatusCodesEnum")
datatype MedicationStatusCodesEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A medicinal product, being a substance or combination of substances that is intended to treat, prevent or diagnose a disease, or to restore, correct or modify physiological functions by exerting a pharmacological, immunological or metabolic action. This resource is intended to define and detail such products and their properties, for uses other than direct patient care (e.g. regulatory use, or drug catalogs).
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="MedicinalProductDefinition", kind="elementOnly")
class MedicinalProductDefinition extends DomainResource {

	@GenModel(documentation="Business identifier for this product. Could be an MPID. When in development or being regulated, products are typically referenced by official identifiers, assigned by a manufacturer or regulator, and unique to a product (which, when compared to a product instance being prescribed, is actually a product type). See also MedicinalProductDefinition.code.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Regulatory type, e.g. Investigational or Authorized.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="If this medicine applies to human or veterinary uses.")
	@ExtendedMetaData(kind="element", name="domain", namespace="##targetNamespace")
	!resolve val CodeableConcept domain;

	@GenModel(documentation="A business identifier relating to a specific version of the product, this is commonly used to support revisions to an existing product.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@GenModel(documentation="The status within the lifecycle of this product record. A high-level status, this is not intended to duplicate details carried elsewhere such as legal status, or authorization status.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val CodeableConcept status;

	@GenModel(documentation="The date at which the given status became applicable.")
	@ExtendedMetaData(kind="element", name="statusDate", namespace="##targetNamespace")
	!resolve val DateTime statusDate;

	@GenModel(documentation="General description of this product.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The dose form for a single part product, or combined form of a multiple part product. This is one concept that describes all the components. It does not represent the form with components physically mixed, if that might be necessary, for which see (AdministrableProductDefinition.administrableDoseForm).")
	@ExtendedMetaData(kind="element", name="combinedPharmaceuticalDoseForm", namespace="##targetNamespace")
	!resolve val CodeableConcept combinedPharmaceuticalDoseForm;

	@GenModel(documentation="The path by which the product is taken into or makes contact with the body. In some regions this is referred to as the licenced or approved route. See also AdministrableProductDefinition resource. MedicinalProductDefinition.route is the same concept as AdministrableProductDefinition.routeOfAdministration.code, and they cannot be used together.")
	@ExtendedMetaData(kind="element", name="route", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] route;

	@GenModel(documentation="Description of indication(s) for this product, used when structured indications are not required. In cases where structured indications are required, they are captured using the ClinicalUseDefinition resource. An indication is a medical situation for which using the product is appropriate.")
	@ExtendedMetaData(kind="element", name="indication", namespace="##targetNamespace")
	!resolve val Markdown indication;

	@GenModel(documentation="The legal status of supply of the medicinal product as classified by the regulator.")
	@ExtendedMetaData(kind="element", name="legalStatusOfSupply", namespace="##targetNamespace")
	!resolve val CodeableConcept legalStatusOfSupply;

	@GenModel(documentation="Whether the Medicinal Product is subject to additional monitoring for regulatory reasons, such as heightened reporting requirements.")
	@ExtendedMetaData(kind="element", name="additionalMonitoringIndicator", namespace="##targetNamespace")
	!resolve val CodeableConcept additionalMonitoringIndicator;

	@GenModel(documentation="Whether the Medicinal Product is subject to special measures for regulatory reasons, such as a requirement to conduct post-authorization studies.")
	@ExtendedMetaData(kind="element", name="specialMeasures", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] specialMeasures;

	@GenModel(documentation="If authorised for use in children, or infants, neonates etc.")
	@ExtendedMetaData(kind="element", name="pediatricUseIndicator", namespace="##targetNamespace")
	!resolve val CodeableConcept pediatricUseIndicator;

	@GenModel(documentation="Allows the product to be classified by various systems, commonly WHO ATC.")
	@ExtendedMetaData(kind="element", name="classification", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] classification;

	@GenModel(documentation="Marketing status of the medicinal product, in contrast to marketing authorization. This refers to the product being actually 'on the market' as opposed to being allowed to be on the market (which is an authorization).")
	@ExtendedMetaData(kind="element", name="marketingStatus", namespace="##targetNamespace")
	!resolve val MarketingStatus[*] marketingStatus;

	@GenModel(documentation="Package type for the product. See also the PackagedProductDefinition resource.")
	@ExtendedMetaData(kind="element", name="packagedMedicinalProduct", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] packagedMedicinalProduct;

	@GenModel(documentation="Types of medicinal manufactured items and/or devices that this product consists of, such as tablets, capsule, or syringes. Used as a direct link when the item's packaging is not being recorded (see also PackagedProductDefinition.package.containedItem.item).")
	@ExtendedMetaData(kind="element", name="comprisedOf", namespace="##targetNamespace")
	!resolve val Reference[*] comprisedOf;

	@GenModel(documentation="The ingredients of this medicinal product - when not detailed in other resources. This is only needed if the ingredients are not specified by incoming references from the Ingredient resource, or indirectly via incoming AdministrableProductDefinition, PackagedProductDefinition or ManufacturedItemDefinition references. In cases where those levels of detail are not used, the ingredients may be specified directly here as codes.")
	@ExtendedMetaData(kind="element", name="ingredient", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] ingredient;

	@GenModel(documentation="Any component of the drug product which is not the chemical entity defined as the drug substance, or an excipient in the drug product. This includes process-related impurities and contaminants, product-related impurities including degradation products.")
	@ExtendedMetaData(kind="element", name="impurity", namespace="##targetNamespace")
	!resolve val CodeableReference[*] impurity;

	@GenModel(documentation="Additional information or supporting documentation about the medicinal product.")
	@ExtendedMetaData(kind="element", name="attachedDocument", namespace="##targetNamespace")
	!resolve val Reference[*] attachedDocument;

	@GenModel(documentation="A master file for the medicinal product (e.g. Pharmacovigilance System Master File). Drug master files (DMFs) are documents submitted to regulatory agencies to provide confidential detailed information about facilities, processes or articles used in the manufacturing, processing, packaging and storing of drug products.")
	@ExtendedMetaData(kind="element", name="masterFile", namespace="##targetNamespace")
	!resolve val Reference[*] masterFile;

	@GenModel(documentation="A product specific contact, person (in a role), or an organization.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val MedicinalProductDefinitionContact[*] contact;

	@GenModel(documentation="Clinical trials or studies that this product is involved in.")
	@ExtendedMetaData(kind="element", name="clinicalTrial", namespace="##targetNamespace")
	!resolve val Reference[*] clinicalTrial;

	@GenModel(documentation="A code that this product is known by, usually within some formal terminology, perhaps assigned by a third party (i.e. not the manufacturer or regulator). Products (types of medications) tend to be known by identifiers during development and within regulatory process. However when they are prescribed they tend to be identified by codes. The same product may be have multiple codes, applied to it by multiple organizations.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val Coding[*] code;

	@GenModel(documentation="The product's name, including full name and possibly coded parts.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val MedicinalProductDefinitionName[+] name;

	@GenModel(documentation="Reference to another product, e.g. for linking authorised to investigational product, or a virtual product.")
	@ExtendedMetaData(kind="element", name="crossReference", namespace="##targetNamespace")
	!resolve val MedicinalProductDefinitionCrossReference[*] crossReference;

	@GenModel(documentation="A manufacturing or administrative process or step associated with (or performed on) the medicinal product.")
	@ExtendedMetaData(kind="element", name="operation", namespace="##targetNamespace")
	!resolve val MedicinalProductDefinitionOperation[*] operation;

	@GenModel(documentation="Allows the key product features to be recorded, such as \"sugar free\", \"modified release\", \"parallel import\".")
	@ExtendedMetaData(kind="element", name="characteristic", namespace="##targetNamespace")
	!resolve val MedicinalProductDefinitionCharacteristic[*] characteristic;
}

@GenModel(documentation="A medicinal product, being a substance or combination of substances that is intended to treat, prevent or diagnose a disease, or to restore, correct or modify physiological functions by exerting a pharmacological, immunological or metabolic action. This resource is intended to define and detail such products and their properties, for uses other than direct patient care (e.g. regulatory use, or drug catalogs).")
@ExtendedMetaData(name="MedicinalProductDefinition.Characteristic", kind="elementOnly")
class MedicinalProductDefinitionCharacteristic extends BackboneElement {

	@GenModel(documentation="A code expressing the type of characteristic.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@ExtendedMetaData(kind="element", name="valueCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept valueCodeableConcept;

	@ExtendedMetaData(kind="element", name="valueMarkdown", namespace="##targetNamespace")
	!resolve val Markdown valueMarkdown;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueInteger", namespace="##targetNamespace")
	!resolve val Integer valueInteger;

	@ExtendedMetaData(kind="element", name="valueDate", namespace="##targetNamespace")
	!resolve val Date valueDate;

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;

	@ExtendedMetaData(kind="element", name="valueAttachment", namespace="##targetNamespace")
	!resolve val Attachment valueAttachment;
}

@GenModel(documentation="A medicinal product, being a substance or combination of substances that is intended to treat, prevent or diagnose a disease, or to restore, correct or modify physiological functions by exerting a pharmacological, immunological or metabolic action. This resource is intended to define and detail such products and their properties, for uses other than direct patient care (e.g. regulatory use, or drug catalogs).")
@ExtendedMetaData(name="MedicinalProductDefinition.Contact", kind="elementOnly")
class MedicinalProductDefinitionContact extends BackboneElement {

	@GenModel(documentation="Allows the contact to be classified, for example QPPV, Pharmacovigilance Enquiry Information.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="A product specific contact, person (in a role), or an organization.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val Reference[1] contact;
}

@GenModel(documentation="A medicinal product, being a substance or combination of substances that is intended to treat, prevent or diagnose a disease, or to restore, correct or modify physiological functions by exerting a pharmacological, immunological or metabolic action. This resource is intended to define and detail such products and their properties, for uses other than direct patient care (e.g. regulatory use, or drug catalogs).")
@ExtendedMetaData(name="MedicinalProductDefinition.CrossReference", kind="elementOnly")
class MedicinalProductDefinitionCrossReference extends BackboneElement {

	@GenModel(documentation="Reference to another product, e.g. for linking authorised to investigational product.")
	@ExtendedMetaData(kind="element", name="product", namespace="##targetNamespace")
	!resolve val CodeableReference[1] product;

	@GenModel(documentation="The type of relationship, for instance branded to generic, virtual to actual product, product to development product (investigational), parallel import version.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;
}

@GenModel(documentation="A medicinal product, being a substance or combination of substances that is intended to treat, prevent or diagnose a disease, or to restore, correct or modify physiological functions by exerting a pharmacological, immunological or metabolic action. This resource is intended to define and detail such products and their properties, for uses other than direct patient care (e.g. regulatory use, or drug catalogs).")
@ExtendedMetaData(name="MedicinalProductDefinition.Name", kind="elementOnly")
class MedicinalProductDefinitionName extends BackboneElement {

	@GenModel(documentation="The full product name.")
	@ExtendedMetaData(kind="element", name="productName", namespace="##targetNamespace")
	!resolve val String[1] productName;

	@GenModel(documentation="Type of product name, such as rINN, BAN, Proprietary, Non-Proprietary.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="Coding words or phrases of the name.")
	@ExtendedMetaData(kind="element", name="part", namespace="##targetNamespace")
	!resolve val MedicinalProductDefinitionPart[*] part;

	@GenModel(documentation="Country and jurisdiction where the name applies, and associated language.")
	@ExtendedMetaData(kind="element", name="usage", namespace="##targetNamespace")
	!resolve val MedicinalProductDefinitionUsage[*] usage;
}

@GenModel(documentation="A medicinal product, being a substance or combination of substances that is intended to treat, prevent or diagnose a disease, or to restore, correct or modify physiological functions by exerting a pharmacological, immunological or metabolic action. This resource is intended to define and detail such products and their properties, for uses other than direct patient care (e.g. regulatory use, or drug catalogs).")
@ExtendedMetaData(name="MedicinalProductDefinition.Operation", kind="elementOnly")
class MedicinalProductDefinitionOperation extends BackboneElement {

	@GenModel(documentation="The type of manufacturing operation e.g. manufacturing itself, re-packaging. For the authorization of this, a RegulatedAuthorization would point to the same plan or activity referenced here.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableReference type;

	@GenModel(documentation="Date range of applicability.")
	@ExtendedMetaData(kind="element", name="effectiveDate", namespace="##targetNamespace")
	!resolve val Period effectiveDate;

	@GenModel(documentation="The organization or establishment responsible for (or associated with) the particular process or step, examples include the manufacturer, importer, agent.")
	@ExtendedMetaData(kind="element", name="organization", namespace="##targetNamespace")
	!resolve val Reference[*] organization;

	@GenModel(documentation="Specifies whether this particular business or manufacturing process is considered proprietary or confidential.")
	@ExtendedMetaData(kind="element", name="confidentialityIndicator", namespace="##targetNamespace")
	!resolve val CodeableConcept confidentialityIndicator;
}

@GenModel(documentation="A medicinal product, being a substance or combination of substances that is intended to treat, prevent or diagnose a disease, or to restore, correct or modify physiological functions by exerting a pharmacological, immunological or metabolic action. This resource is intended to define and detail such products and their properties, for uses other than direct patient care (e.g. regulatory use, or drug catalogs).")
@ExtendedMetaData(name="MedicinalProductDefinition.Part", kind="elementOnly")
class MedicinalProductDefinitionPart extends BackboneElement {

	@GenModel(documentation="A fragment of a product name.")
	@ExtendedMetaData(kind="element", name="part", namespace="##targetNamespace")
	!resolve val String[1] part;

	@GenModel(documentation="Identifying type for this part of the name (e.g. strength part).")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;
}

@GenModel(documentation="A medicinal product, being a substance or combination of substances that is intended to treat, prevent or diagnose a disease, or to restore, correct or modify physiological functions by exerting a pharmacological, immunological or metabolic action. This resource is intended to define and detail such products and their properties, for uses other than direct patient care (e.g. regulatory use, or drug catalogs).")
@ExtendedMetaData(name="MedicinalProductDefinition.Usage", kind="elementOnly")
class MedicinalProductDefinitionUsage extends BackboneElement {

	@GenModel(documentation="Country code for where this name applies.")
	@ExtendedMetaData(kind="element", name="country", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] country;

	@GenModel(documentation="Jurisdiction code for where this name applies. A jurisdiction may be a sub- or supra-national entity (e.g. a state or a geographic region).")
	@ExtendedMetaData(kind="element", name="jurisdiction", namespace="##targetNamespace")
	!resolve val CodeableConcept jurisdiction;

	@GenModel(documentation="Language code for this name.")
	@ExtendedMetaData(kind="element", name="language", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] language;
}

@GenModel(documentation="Defines the characteristics of a message that can be shared between systems, including the type of event that initiates the message, the content to be transmitted and what response(s), if any, are permitted.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="MessageDefinition", kind="elementOnly")
class MessageDefinition extends CanonicalResource {

	@GenModel(documentation="The business identifier that is used to reference the MessageDefinition and *is* expected to be consistent from server to server.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri url;

	@GenModel(documentation="A formal identifier that is used to identify this message definition when it is represented in other formats, or referenced in a specification, model, design or an instance.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The identifier that is used to identify this version of the message definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the message definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@ExtendedMetaData(kind="element", name="versionAlgorithmString", namespace="##targetNamespace")
	!resolve val String versionAlgorithmString;

	@ExtendedMetaData(kind="element", name="versionAlgorithmCoding", namespace="##targetNamespace")
	!resolve val Coding versionAlgorithmCoding;

	@GenModel(documentation="A natural language name identifying the message definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="A short, descriptive, user-friendly title for the message definition.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="A MessageDefinition that is superseded by this definition.")
	@ExtendedMetaData(kind="element", name="replaces", namespace="##targetNamespace")
	!resolve val Canonical[*] replaces;

	@GenModel(documentation="The status of this message definition. Enables tracking the life-cycle of the content.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="A Boolean value to indicate that this message definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.")
	@ExtendedMetaData(kind="element", name="experimental", namespace="##targetNamespace")
	!resolve val Boolean experimental;

	@GenModel(documentation="The date  (and optionally time) when the message definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the message definition changes.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime[1] date;

	@GenModel(documentation="The name of the organization or individual responsible for the release and ongoing maintenance of the message definition.")
	@ExtendedMetaData(kind="element", name="publisher", namespace="##targetNamespace")
	!resolve val String publisher;

	@GenModel(documentation="Contact details to assist a user in finding and communicating with the publisher.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactDetail[*] contact;

	@GenModel(documentation="A free text natural language description of the message definition from a consumer's perspective.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate message definition instances.")
	@ExtendedMetaData(kind="element", name="useContext", namespace="##targetNamespace")
	!resolve val UsageContext[*] useContext;

	@GenModel(documentation="A legal or geographic region in which the message definition is intended to be used.")
	@ExtendedMetaData(kind="element", name="jurisdiction", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] jurisdiction;

	@GenModel(documentation="Explanation of why this message definition is needed and why it has been designed as it has.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val Markdown purpose;

	@GenModel(documentation="A copyright statement relating to the message definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the message definition.")
	@ExtendedMetaData(kind="element", name="copyright", namespace="##targetNamespace")
	!resolve val Markdown copyright;

	@GenModel(documentation="A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').")
	@ExtendedMetaData(kind="element", name="copyrightLabel", namespace="##targetNamespace")
	!resolve val String copyrightLabel;

	@GenModel(documentation="The MessageDefinition that is the basis for the contents of this resource.")
	@ExtendedMetaData(kind="element", name="base", namespace="##targetNamespace")
	!resolve val Canonical base;

	@GenModel(documentation="Identifies a protocol or workflow that this MessageDefinition represents a step in.")
	@ExtendedMetaData(kind="element", name="parent", namespace="##targetNamespace")
	!resolve val Canonical[*] parent;

	@ExtendedMetaData(kind="element", name="eventCoding", namespace="##targetNamespace")
	!resolve val Coding eventCoding;

	@ExtendedMetaData(kind="element", name="eventUri", namespace="##targetNamespace")
	!resolve val Uri eventUri;

	@GenModel(documentation="The impact of the content of the message.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val MessageSignificanceCategory category;

	@GenModel(documentation="Identifies the resource (or resources) that are being addressed by the event.  For example, the Encounter for an admit message or two Account records for a merge.")
	@ExtendedMetaData(kind="element", name="focus", namespace="##targetNamespace")
	!resolve val MessageDefinitionFocus[*] focus;

	@GenModel(documentation="Declare at a message definition level whether a response is required or only upon error or success, or never.")
	@ExtendedMetaData(kind="element", name="responseRequired", namespace="##targetNamespace")
	!resolve val MessageheaderResponseRequest responseRequired;

	@GenModel(documentation="Indicates what types of messages may be sent as an application-level response to this message.")
	@ExtendedMetaData(kind="element", name="allowedResponse", namespace="##targetNamespace")
	!resolve val MessageDefinitionAllowedResponse[*] allowedResponse;

	@GenModel(documentation="Graph is Canonical reference to a GraphDefinition. If a URL is provided, it is the canonical reference to a GraphDefinition that it controls what additional resources are to be added to the Bundle when building the message. The GraphDefinition can also specify profiles that apply to the various resources.")
	@ExtendedMetaData(kind="element", name="graph", namespace="##targetNamespace")
	!resolve val Canonical graph;
}

@GenModel(documentation="Defines the characteristics of a message that can be shared between systems, including the type of event that initiates the message, the content to be transmitted and what response(s), if any, are permitted.")
@ExtendedMetaData(name="MessageDefinition.AllowedResponse", kind="elementOnly")
class MessageDefinitionAllowedResponse extends BackboneElement {

	@GenModel(documentation="A reference to the message definition that must be adhered to by this supported response.")
	@ExtendedMetaData(kind="element", name="message", namespace="##targetNamespace")
	!resolve val Canonical[1] message;

	@GenModel(documentation="Provides a description of the circumstances in which this response should be used (as opposed to one of the alternative responses).")
	@ExtendedMetaData(kind="element", name="situation", namespace="##targetNamespace")
	!resolve val Markdown situation;
}

@GenModel(documentation="Defines the characteristics of a message that can be shared between systems, including the type of event that initiates the message, the content to be transmitted and what response(s), if any, are permitted.")
@ExtendedMetaData(name="MessageDefinition.Focus", kind="elementOnly")
class MessageDefinitionFocus extends BackboneElement {

	@GenModel(documentation="The kind of resource that must be the focus for this message.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val ResourceType[1] code;

	@GenModel(documentation="A profile that reflects constraints for the focal resource (and potentially for related resources).")
	@ExtendedMetaData(kind="element", name="profile", namespace="##targetNamespace")
	!resolve val Canonical profile;

	@GenModel(documentation="Identifies the minimum number of resources of this type that must be pointed to by a message in order for it to be valid against this MessageDefinition.")
	@ExtendedMetaData(kind="element", name="min", namespace="##targetNamespace")
	!resolve val UnsignedInt[1] min;

	@GenModel(documentation="Identifies the maximum number of resources of this type that must be pointed to by a message in order for it to be valid against this MessageDefinition.")
	@ExtendedMetaData(kind="element", name="max", namespace="##targetNamespace")
	!resolve val String max;
}

@GenModel(documentation="The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="MessageHeader", kind="elementOnly")
class MessageHeader extends DomainResource {

	@ExtendedMetaData(kind="element", name="eventCoding", namespace="##targetNamespace")
	!resolve val Coding eventCoding;

	@ExtendedMetaData(kind="element", name="eventCanonical", namespace="##targetNamespace")
	!resolve val Canonical eventCanonical;

	@GenModel(documentation="The destination application which the message is intended for.")
	@ExtendedMetaData(kind="element", name="destination", namespace="##targetNamespace")
	!resolve val MessageHeaderDestination[*] destination;

	@GenModel(documentation="Identifies the sending system to allow the use of a trust relationship.")
	@ExtendedMetaData(kind="element", name="sender", namespace="##targetNamespace")
	!resolve val Reference sender;

	@GenModel(documentation="The logical author of the message - the personor device that decided the described event should happen. When there is more than one candidate, pick the most proximal to the MessageHeader. Can provide other authors in extensions.")
	@ExtendedMetaData(kind="element", name="author", namespace="##targetNamespace")
	!resolve val Reference author;

	@GenModel(documentation="The source application from which this message originated.")
	@ExtendedMetaData(kind="element", name="source", namespace="##targetNamespace")
	!resolve val MessageHeaderSource[1] source;

	@GenModel(documentation="The person or organization that accepts overall responsibility for the contents of the message. The implication is that the message event happened under the policies of the responsible party.")
	@ExtendedMetaData(kind="element", name="responsible", namespace="##targetNamespace")
	!resolve val Reference responsible;

	@GenModel(documentation="Coded indication of the cause for the event - indicates  a reason for the occurrence of the event that is a focus of this message.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val CodeableConcept reason;

	@GenModel(documentation="Information about the message that this message is a response to.  Only present if this message is a response.")
	@ExtendedMetaData(kind="element", name="response", namespace="##targetNamespace")
	!resolve val MessageHeaderResponse response;

	@GenModel(documentation="The actual data of the message - a reference to the root/focus class of the event. This is allowed to be a Parameters resource.")
	@ExtendedMetaData(kind="element", name="focus", namespace="##targetNamespace")
	!resolve val Reference[*] focus;

	@GenModel(documentation="Permanent link to the MessageDefinition for this message.")
	@ExtendedMetaData(kind="element", name="definition", namespace="##targetNamespace")
	!resolve val Canonical definition;
}

@GenModel(documentation="The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.")
@ExtendedMetaData(name="MessageHeader.Destination", kind="elementOnly")
class MessageHeaderDestination extends BackboneElement {

	@ExtendedMetaData(kind="element", name="endpointUrl", namespace="##targetNamespace")
	!resolve val Url endpointUrl;

	@ExtendedMetaData(kind="element", name="endpointReference", namespace="##targetNamespace")
	!resolve val Reference endpointReference;

	@GenModel(documentation="Human-readable name for the target system.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="Identifies the target end system in situations where the initial message transmission is to an intermediary system.")
	@ExtendedMetaData(kind="element", name="target", namespace="##targetNamespace")
	!resolve val Reference target;

	@GenModel(documentation="Allows data conveyed by a message to be addressed to a particular person or department when routing to a specific application isn't sufficient.")
	@ExtendedMetaData(kind="element", name="receiver", namespace="##targetNamespace")
	!resolve val Reference receiver;
}

@GenModel(documentation="The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.")
@ExtendedMetaData(name="MessageHeader.Response", kind="elementOnly")
class MessageHeaderResponse extends BackboneElement {

	@GenModel(documentation="The Bundle.identifier of the message to which this message is a response.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[1] identifier;

	@GenModel(documentation="Code that identifies the type of response to the message - whether it was successful or not, and whether it should be resent or not.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val ResponseType[1] code;

	@GenModel(documentation="Full details of any issues found in the message.")
	@ExtendedMetaData(kind="element", name="details", namespace="##targetNamespace")
	!resolve val Reference details;
}

@GenModel(documentation="HL7-defined table of codes which identify conditions under which acknowledgments are required to be returned in response to a message.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="MessageheaderResponseRequest", kind="elementOnly")
class MessageheaderResponseRequest extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr MessageheaderResponseRequestEnum value;
}

@ExtendedMetaData(name="MessageheaderResponseRequestEnum")
enum MessageheaderResponseRequestEnum {

	@GenModel(documentation="Always")
	always = 0;

	@GenModel(documentation="Error/reject conditions only")
	onError = 1;

	@GenModel(documentation="Never")
	never = 2;

	@GenModel(documentation="Successful completion only")
	onSuccess = 3;
}

@ExtendedMetaData(name="MessageheaderResponseRequestEnum:Object", baseType="MessageheaderResponseRequestEnum")
datatype MessageheaderResponseRequestEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.")
@ExtendedMetaData(name="MessageHeader.Source", kind="elementOnly")
class MessageHeaderSource extends BackboneElement {

	@ExtendedMetaData(kind="element", name="endpointUrl", namespace="##targetNamespace")
	!resolve val Url endpointUrl;

	@ExtendedMetaData(kind="element", name="endpointReference", namespace="##targetNamespace")
	!resolve val Reference endpointReference;

	@GenModel(documentation="Human-readable name for the source system.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="May include configuration or other information useful in debugging.")
	@ExtendedMetaData(kind="element", name="software", namespace="##targetNamespace")
	!resolve val String software;

	@GenModel(documentation="Can convey versions of multiple systems in situations where a message passes through multiple hands.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@GenModel(documentation="An e-mail, phone, website or other contact point to use to resolve issues with message communications.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactPoint contact;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="MessageSignificanceCategory", kind="elementOnly")
class MessageSignificanceCategory extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr MessageSignificanceCategoryEnum value;
}

@ExtendedMetaData(name="MessageSignificanceCategoryEnum")
enum MessageSignificanceCategoryEnum {

	@GenModel(documentation="Consequence")
	consequence = 0;

	@GenModel(documentation="Currency")
	currency = 1;

	@GenModel(documentation="Notification")
	notification = 2;
}

@ExtendedMetaData(name="MessageSignificanceCategoryEnum:Object", baseType="MessageSignificanceCategoryEnum")
datatype MessageSignificanceCategoryEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="Meta", kind="elementOnly")
class Meta extends DataType {

	@GenModel(documentation="The version specific identifier, as it appears in the version portion of the URL. This value changes when the resource is created, updated, or deleted.")
	@ExtendedMetaData(kind="element", name="versionId", namespace="##targetNamespace")
	!resolve val Id versionId;

	@GenModel(documentation="When the resource last changed - e.g. when the version changed.")
	@ExtendedMetaData(kind="element", name="lastUpdated", namespace="##targetNamespace")
	!resolve val Instant lastUpdated;

	@GenModel(documentation="A uri that identifies the source system of the resource. This provides a minimal amount of [[[Provenance]]] information that can be used to track or differentiate the source of information in the resource. The source may identify another FHIR server, document, message, database, etc.")
	@ExtendedMetaData(kind="element", name="source", namespace="##targetNamespace")
	!resolve val Uri source;

	@GenModel(documentation="A list of profiles (references to [[[StructureDefinition]]] resources) that this resource claims to conform to. The URL is a reference to [[[StructureDefinition.url]]].")
	@ExtendedMetaData(kind="element", name="profile", namespace="##targetNamespace")
	!resolve val Canonical[*] profile;

	@GenModel(documentation="Security labels applied to this resource. These tags connect specific resources to the overall security policy and infrastructure.")
	@ExtendedMetaData(kind="element", name="security", namespace="##targetNamespace")
	!resolve val Coding[*] security;

	@GenModel(documentation="Tags applied to this resource. Tags are intended to be used to identify and relate resources to process and workflow, and applications are not required to consider the tags when interpreting the meaning of a resource.")
	@ExtendedMetaData(kind="element", name="tag", namespace="##targetNamespace")
	!resolve val Coding[*] tag;
}

@GenModel(documentation="Common Interface declaration for conformance and knowledge artifact resources.")
@ExtendedMetaData(name="MetadataResource", kind="elementOnly")
class MetadataResource extends CanonicalResource {
}

@GenModel(documentation="Representation of a molecular sequence.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="MolecularSequence", kind="elementOnly")
class MolecularSequence extends DomainResource {

	@GenModel(documentation="A unique identifier for this particular sequence instance.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Amino Acid Sequence/ DNA Sequence / RNA Sequence.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val SequenceType type;

	@GenModel(documentation="Indicates the subject this sequence is associated too.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference subject;

	@GenModel(documentation="The actual focus of a molecular sequence when it is not the patient of record representing something or someone associated with the patient such as a spouse, parent, child, or sibling. For example, in trio testing, the subject would be the child (proband) and the focus would be the parent.")
	@ExtendedMetaData(kind="element", name="focus", namespace="##targetNamespace")
	!resolve val Reference[*] focus;

	@GenModel(documentation="Specimen used for sequencing.")
	@ExtendedMetaData(kind="element", name="specimen", namespace="##targetNamespace")
	!resolve val Reference specimen;

	@GenModel(documentation="The method for sequencing, for example, chip information.")
	@ExtendedMetaData(kind="element", name="device", namespace="##targetNamespace")
	!resolve val Reference device;

	@GenModel(documentation="The organization or lab that should be responsible for this result.")
	@ExtendedMetaData(kind="element", name="performer", namespace="##targetNamespace")
	!resolve val Reference performer;

	@GenModel(documentation="Sequence that was observed.")
	@ExtendedMetaData(kind="element", name="literal", namespace="##targetNamespace")
	!resolve val String literal;

	@GenModel(documentation="Sequence that was observed as file content. Can be an actual file contents, or referenced by a URL to an external system.")
	@ExtendedMetaData(kind="element", name="formatted", namespace="##targetNamespace")
	!resolve val Attachment[*] formatted;

	@GenModel(documentation="A sequence defined relative to another sequence.")
	@ExtendedMetaData(kind="element", name="relative", namespace="##targetNamespace")
	!resolve val MolecularSequenceRelative[*] relative;
}

@GenModel(documentation="Representation of a molecular sequence.")
@ExtendedMetaData(name="MolecularSequence.Edit", kind="elementOnly")
class MolecularSequenceEdit extends BackboneElement {

	@GenModel(documentation="Start position of the edit on the starting sequence. If the coordinate system is either 0-based or 1-based, then start position is inclusive.")
	@ExtendedMetaData(kind="element", name="start", namespace="##targetNamespace")
	!resolve val Integer start;

	@GenModel(documentation="End position of the edit on the starting sequence. If the coordinate system is 0-based then end is exclusive and does not include the last position. If the coordinate system is 1-base, then end is inclusive and includes the last position.")
	@ExtendedMetaData(kind="element", name="end", namespace="##targetNamespace")
	!resolve val Integer end;

	@GenModel(documentation="Allele that was observed. Nucleotide(s)/amino acids from start position of sequence to stop position of sequence on the positive (+) strand of the observed sequence. When the sequence type is DNA, it should be the sequence on the positive (+) strand. This will lay in the range between variant.start and variant.end.")
	@ExtendedMetaData(kind="element", name="replacementSequence", namespace="##targetNamespace")
	!resolve val String replacementSequence;

	@GenModel(documentation="Allele in the starting sequence. Nucleotide(s)/amino acids from start position of sequence to stop position of sequence on the positive (+) strand of the starting sequence. When the sequence  type is DNA, it should be the sequence on the positive (+) strand. This will lay in the range between variant.start and variant.end.")
	@ExtendedMetaData(kind="element", name="replacedSequence", namespace="##targetNamespace")
	!resolve val String replacedSequence;
}

@GenModel(documentation="Representation of a molecular sequence.")
@ExtendedMetaData(name="MolecularSequence.Relative", kind="elementOnly")
class MolecularSequenceRelative extends BackboneElement {

	@GenModel(documentation="These are different ways of identifying nucleotides or amino acids within a sequence. Different databases and file types may use different systems. For detail definitions, see https://loinc.org/92822-6/ for more detail.")
	@ExtendedMetaData(kind="element", name="coordinateSystem", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] coordinateSystem;

	@GenModel(documentation="Indicates the order in which the sequence should be considered when putting multiple 'relative' elements together.")
	@ExtendedMetaData(kind="element", name="ordinalPosition", namespace="##targetNamespace")
	!resolve val Integer ordinalPosition;

	@GenModel(documentation="Indicates the nucleotide range in the composed sequence when multiple 'relative' elements are used together.")
	@ExtendedMetaData(kind="element", name="sequenceRange", namespace="##targetNamespace")
	!resolve val Range sequenceRange;

	@GenModel(documentation="A sequence that is used as a starting sequence to describe variants that are present in a sequence analyzed.")
	@ExtendedMetaData(kind="element", name="startingSequence", namespace="##targetNamespace")
	!resolve val MolecularSequenceStartingSequence startingSequence;

	@GenModel(documentation="Changes in sequence from the starting sequence.")
	@ExtendedMetaData(kind="element", name="edit", namespace="##targetNamespace")
	!resolve val MolecularSequenceEdit[*] edit;
}

@GenModel(documentation="Representation of a molecular sequence.")
@ExtendedMetaData(name="MolecularSequence.StartingSequence", kind="elementOnly")
class MolecularSequenceStartingSequence extends BackboneElement {

	@GenModel(documentation="The genome assembly used for starting sequence, e.g. GRCh38.")
	@ExtendedMetaData(kind="element", name="genomeAssembly", namespace="##targetNamespace")
	!resolve val CodeableConcept genomeAssembly;

	@GenModel(documentation="Structural unit composed of a nucleic acid molecule which controls its own replication through the interaction of specific proteins at one or more origins of replication ([SO:0000340](http://www.sequenceontology.org/browser/current_svn/term/SO:0000340)).")
	@ExtendedMetaData(kind="element", name="chromosome", namespace="##targetNamespace")
	!resolve val CodeableConcept chromosome;

	@ExtendedMetaData(kind="element", name="sequenceCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept sequenceCodeableConcept;

	@ExtendedMetaData(kind="element", name="sequenceString", namespace="##targetNamespace")
	!resolve val String sequenceString;

	@ExtendedMetaData(kind="element", name="sequenceReference", namespace="##targetNamespace")
	!resolve val Reference sequenceReference;

	@GenModel(documentation="Start position of the window on the starting sequence. This value should honor the rules of the coordinateSystem.")
	@ExtendedMetaData(kind="element", name="windowStart", namespace="##targetNamespace")
	!resolve val Integer windowStart;

	@GenModel(documentation="End position of the window on the starting sequence. This value should honor the rules of the  coordinateSystem.")
	@ExtendedMetaData(kind="element", name="windowEnd", namespace="##targetNamespace")
	!resolve val Integer windowEnd;

	@GenModel(documentation="A relative reference to a DNA strand based on gene orientation. The strand that contains the open reading frame of the gene is the \"sense\" strand, and the opposite complementary strand is the \"antisense\" strand.")
	@ExtendedMetaData(kind="element", name="orientation", namespace="##targetNamespace")
	!resolve val OrientationType orientation;

	@GenModel(documentation="An absolute reference to a strand. The Watson strand is the strand whose 5'-end is on the short arm of the chromosome, and the Crick strand as the one whose 5'-end is on the long arm.")
	@ExtendedMetaData(kind="element", name="strand", namespace="##targetNamespace")
	!resolve val StrandType strand;
}

@GenModel(documentation="Availability data for an {item}.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="MonetaryComponent", kind="elementOnly")
class MonetaryComponent extends DataType {

	@GenModel(documentation="base | surcharge | deduction | discount | tax | informational.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val Code[1] type;

	@GenModel(documentation="Codes may be used to differentiate between kinds of taxes, surcharges, discounts etc.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@GenModel(documentation="Factor used for calculating this component.")
	@ExtendedMetaData(kind="element", name="factor", namespace="##targetNamespace")
	!resolve val Decimal factor;

	@GenModel(documentation="Explicit value amount to be used.")
	@ExtendedMetaData(kind="element", name="amount", namespace="##targetNamespace")
	!resolve val Money amount;
}

@GenModel(documentation="An amount of economic utility in some recognized currency.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="Money", kind="elementOnly")
class Money extends DataType {

	@GenModel(documentation="Numerical value (with implicit precision).")
	@ExtendedMetaData(kind="element", name="value", namespace="##targetNamespace")
	!resolve val Decimal value;

	@GenModel(documentation="ISO 4217 Currency Code.")
	@ExtendedMetaData(kind="element", name="currency", namespace="##targetNamespace")
	!resolve val Code currency;
}

@GenModel(documentation="The use of a human name.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="NameUse", kind="elementOnly")
class NameUse extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr NameUseEnum value;
}

@ExtendedMetaData(name="NameUseEnum")
enum NameUseEnum {

	@GenModel(documentation="Usual")
	usual = 0;

	@GenModel(documentation="Official")
	official = 1;

	@GenModel(documentation="Temp")
	temp = 2;

	@GenModel(documentation="Nickname")
	nickname = 3;

	@GenModel(documentation="Anonymous")
	anonymous = 4;

	@GenModel(documentation="Old")
	old = 5;

	@GenModel(documentation="Name changed for Marriage")
	maiden = 6;
}

@ExtendedMetaData(name="NameUseEnum:Object", baseType="NameUseEnum")
datatype NameUseEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a \"System\" used within the Identifier and Coding data types.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="NamingSystem", kind="elementOnly")
class NamingSystem extends MetadataResource {

	@GenModel(documentation="An absolute URI that is used to identify this naming system when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this naming system is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the naming system is stored on different servers.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri url;

	@GenModel(documentation="A formal identifier that is used to identify this naming system when it is represented in other formats, or referenced in a specification, model, design or an instance.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The identifier that is used to identify this version of the naming system when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the naming system author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@ExtendedMetaData(kind="element", name="versionAlgorithmString", namespace="##targetNamespace")
	!resolve val String versionAlgorithmString;

	@ExtendedMetaData(kind="element", name="versionAlgorithmCoding", namespace="##targetNamespace")
	!resolve val Coding versionAlgorithmCoding;

	@GenModel(documentation="A natural language name identifying the naming system. This name should be usable as an identifier for the module by machine processing applications such as code generation.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String[1] name;

	@GenModel(documentation="A short, descriptive, user-friendly title for the naming system.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="The status of this naming system. Enables tracking the life-cycle of the content.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="Indicates the purpose for the naming system - what kinds of things does it make unique?")
	@ExtendedMetaData(kind="element", name="kind", namespace="##targetNamespace")
	!resolve val NamingSystemType[1] kind;

	@GenModel(documentation="A Boolean value to indicate that this naming system is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.")
	@ExtendedMetaData(kind="element", name="experimental", namespace="##targetNamespace")
	!resolve val Boolean experimental;

	@GenModel(documentation="The date  (and optionally time) when the naming system was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the naming system changes.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime[1] date;

	@GenModel(documentation="The name of the organization or individual responsible for the release and ongoing maintenance of the naming system.")
	@ExtendedMetaData(kind="element", name="publisher", namespace="##targetNamespace")
	!resolve val String publisher;

	@GenModel(documentation="Contact details to assist a user in finding and communicating with the publisher.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactDetail[*] contact;

	@GenModel(documentation="The name of the organization that is responsible for issuing identifiers or codes for this namespace and ensuring their non-collision.")
	@ExtendedMetaData(kind="element", name="responsible", namespace="##targetNamespace")
	!resolve val String responsible;

	@GenModel(documentation="Categorizes a naming system for easier search by grouping related naming systems.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="A free text natural language description of the naming system from a consumer's perspective. Details about what the namespace identifies including scope, granularity, version labeling, etc.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate naming system instances.")
	@ExtendedMetaData(kind="element", name="useContext", namespace="##targetNamespace")
	!resolve val UsageContext[*] useContext;

	@GenModel(documentation="A legal or geographic region in which the naming system is intended to be used.")
	@ExtendedMetaData(kind="element", name="jurisdiction", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] jurisdiction;

	@GenModel(documentation="Explanation of why this naming system is needed and why it has been designed as it has.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val Markdown purpose;

	@GenModel(documentation="A copyright statement relating to the naming system and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the naming system.")
	@ExtendedMetaData(kind="element", name="copyright", namespace="##targetNamespace")
	!resolve val Markdown copyright;

	@GenModel(documentation="A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').")
	@ExtendedMetaData(kind="element", name="copyrightLabel", namespace="##targetNamespace")
	!resolve val String copyrightLabel;

	@GenModel(documentation="The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.")
	@ExtendedMetaData(kind="element", name="approvalDate", namespace="##targetNamespace")
	!resolve val Date approvalDate;

	@GenModel(documentation="The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.")
	@ExtendedMetaData(kind="element", name="lastReviewDate", namespace="##targetNamespace")
	!resolve val Date lastReviewDate;

	@GenModel(documentation="The period during which the NamingSystem content was or is planned to be in active use.")
	@ExtendedMetaData(kind="element", name="effectivePeriod", namespace="##targetNamespace")
	!resolve val Period effectivePeriod;

	@GenModel(documentation="Descriptions related to the content of the NamingSystem. Topics provide a high-level categorization as well as keywords for the NamingSystem that can be useful for filtering and searching.")
	@ExtendedMetaData(kind="element", name="topic", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] topic;

	@GenModel(documentation="An individiual or organization primarily involved in the creation and maintenance of the NamingSystem.")
	@ExtendedMetaData(kind="element", name="author", namespace="##targetNamespace")
	!resolve val ContactDetail[*] author;

	@GenModel(documentation="An individual or organization primarily responsible for internal coherence of the NamingSystem.")
	@ExtendedMetaData(kind="element", name="editor", namespace="##targetNamespace")
	!resolve val ContactDetail[*] editor;

	@GenModel(documentation="An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the NamingSystem.")
	@ExtendedMetaData(kind="element", name="reviewer", namespace="##targetNamespace")
	!resolve val ContactDetail[*] reviewer;

	@GenModel(documentation="An individual or organization asserted by the publisher to be responsible for officially endorsing the NamingSystem for use in some setting.")
	@ExtendedMetaData(kind="element", name="endorser", namespace="##targetNamespace")
	!resolve val ContactDetail[*] endorser;

	@GenModel(documentation="Related artifacts such as additional documentation, justification, dependencies, bibliographic references, and predecessor and successor artifacts.")
	@ExtendedMetaData(kind="element", name="relatedArtifact", namespace="##targetNamespace")
	!resolve val RelatedArtifact[*] relatedArtifact;

	@GenModel(documentation="Provides guidance on the use of the namespace, including the handling of formatting characters, use of upper vs. lower case, etc.")
	@ExtendedMetaData(kind="element", name="usage", namespace="##targetNamespace")
	!resolve val String usage;

	@GenModel(documentation="Indicates how the system may be identified when referenced in electronic exchange.")
	@ExtendedMetaData(kind="element", name="uniqueId", namespace="##targetNamespace")
	!resolve val NamingSystemUniqueId[+] uniqueId;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="NamingSystemIdentifierType", kind="elementOnly")
class NamingSystemIdentifierType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr NamingSystemIdentifierTypeEnum value;
}

@ExtendedMetaData(name="NamingSystemIdentifierTypeEnum")
enum NamingSystemIdentifierTypeEnum {

	@GenModel(documentation="OID")
	oid = 0;

	@GenModel(documentation="UUID")
	uuid = 1;

	@GenModel(documentation="URI")
	uri = 2;

	@GenModel(documentation="IRI stem")
	iriStem = 3;

	@GenModel(documentation="V2CSMNemonic")
	v2csmnemonic = 4;

	@GenModel(documentation="Other")
	other = 5;
}

@ExtendedMetaData(name="NamingSystemIdentifierTypeEnum:Object", baseType="NamingSystemIdentifierTypeEnum")
datatype NamingSystemIdentifierTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="NamingSystemType", kind="elementOnly")
class NamingSystemType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr NamingSystemTypeEnum value;
}

@ExtendedMetaData(name="NamingSystemTypeEnum")
enum NamingSystemTypeEnum {

	@GenModel(documentation="Code System")
	codesystem = 0;

	@GenModel(documentation="Identifier")
	identifier = 1;

	@GenModel(documentation="Root")
	root = 2;
}

@ExtendedMetaData(name="NamingSystemTypeEnum:Object", baseType="NamingSystemTypeEnum")
datatype NamingSystemTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a \"System\" used within the Identifier and Coding data types.")
@ExtendedMetaData(name="NamingSystem.UniqueId", kind="elementOnly")
class NamingSystemUniqueId extends BackboneElement {

	@GenModel(documentation="Identifies the unique identifier scheme used for this particular identifier.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val NamingSystemIdentifierType[1] type;

	@GenModel(documentation="The string that should be sent over the wire to identify the code system or identifier system.")
	@ExtendedMetaData(kind="element", name="value", namespace="##targetNamespace")
	!resolve val String[1] value;

	@GenModel(documentation="Indicates whether this identifier is the \"preferred\" identifier of this type.")
	@ExtendedMetaData(kind="element", name="preferred", namespace="##targetNamespace")
	!resolve val Boolean preferred;

	@GenModel(documentation="Notes about the past or intended usage of this identifier.")
	@ExtendedMetaData(kind="element", name="comment", namespace="##targetNamespace")
	!resolve val String comment;

	@GenModel(documentation="Identifies the period of time over which this identifier is considered appropriate to refer to the naming system.  Outside of this window, the identifier might be non-deterministic.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;

	@GenModel(documentation="Indicates whether this identifier ie endorsed by the official owner of the associated naming system.")
	@ExtendedMetaData(kind="element", name="authoritative", namespace="##targetNamespace")
	!resolve val Boolean authoritative;
}

@GenModel(documentation="A human-readable summary of the resource conveying the essential clinical and business information for the resource.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="Narrative", kind="elementOnly")
class Narrative extends DataType {

	@GenModel(documentation="The status of the narrative - whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val NarrativeStatus[1] status;

	@GenModel(documentation="The actual narrative content, a stripped down version of XHTML.")
	@ExtendedMetaData(kind="element", name="div", namespace="http://www.w3.org/1999/xhtml")
	attr type.AnySimpleType[1] div;
}

@GenModel(documentation="The status of a resource narrative.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="NarrativeStatus", kind="elementOnly")
class NarrativeStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr NarrativeStatusEnum value;
}

@ExtendedMetaData(name="NarrativeStatusEnum")
enum NarrativeStatusEnum {

	@GenModel(documentation="Generated")
	generated = 0;

	@GenModel(documentation="Extensions")
	extensions = 1;

	@GenModel(documentation="Additional")
	additional = 2;

	@GenModel(documentation="Empty")
	empty = 3;
}

@ExtendedMetaData(name="NarrativeStatusEnum:Object", baseType="NarrativeStatusEnum")
datatype NarrativeStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="NoteType", kind="elementOnly")
class NoteType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr NoteTypeEnum value;
}

@ExtendedMetaData(name="NoteTypeEnum")
enum NoteTypeEnum {

	@GenModel(documentation="Display")
	display = 0;

	@GenModel(documentation="Print (Form)")
	print = 1;

	@GenModel(documentation="Print (Operator)")
	printoper = 2;
}

@ExtendedMetaData(name="NoteTypeEnum:Object", baseType="NoteTypeEnum")
datatype NoteTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A record of food or fluid that is being consumed by a patient.   A NutritionIntake may indicate that the patient may be consuming the food or fluid now or has consumed the food or fluid in the past.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay or through an app that tracks food or fluids consumed.   The consumption information may come from sources such as the patient's memory, from a nutrition label,  or from a clinician documenting observed intake.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="NutritionIntake", kind="elementOnly")
class NutritionIntake extends DomainResource {

	@GenModel(documentation="Identifiers associated with this Nutrition Intake that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate. They are business identifiers assigned to this resource by the performer or other systems and remain constant as the resource is updated and propagates from server to server.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Instantiates FHIR protocol or definition.")
	@ExtendedMetaData(kind="element", name="instantiatesCanonical", namespace="##targetNamespace")
	!resolve val Canonical[*] instantiatesCanonical;

	@GenModel(documentation="Instantiates external protocol or definition.")
	@ExtendedMetaData(kind="element", name="instantiatesUri", namespace="##targetNamespace")
	!resolve val Uri[*] instantiatesUri;

	@GenModel(documentation="A plan, proposal or order that is fulfilled in whole or in part by this event.")
	@ExtendedMetaData(kind="element", name="basedOn", namespace="##targetNamespace")
	!resolve val Reference[*] basedOn;

	@GenModel(documentation="A larger event of which this particular event is a component or step.")
	@ExtendedMetaData(kind="element", name="partOf", namespace="##targetNamespace")
	!resolve val Reference[*] partOf;

	@GenModel(documentation="A code representing the patient or other source's judgment about the state of the intake that this assertion is about.  Generally, this will be active or completed.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val EventStatus[1] status;

	@GenModel(documentation="Captures the reason for the current state of the NutritionIntake.")
	@ExtendedMetaData(kind="element", name="statusReason", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] statusReason;

	@GenModel(documentation="Overall type of nutrition intake.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@GenModel(documentation="The person, animal or group who is/was consuming the food or fluid.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference[1] subject;

	@GenModel(documentation="The encounter that establishes the context for this NutritionIntake.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@ExtendedMetaData(kind="element", name="occurrenceDateTime", namespace="##targetNamespace")
	!resolve val DateTime occurrenceDateTime;

	@ExtendedMetaData(kind="element", name="occurrencePeriod", namespace="##targetNamespace")
	!resolve val Period occurrencePeriod;

	@GenModel(documentation="The date when the Nutrition Intake was asserted by the information source.")
	@ExtendedMetaData(kind="element", name="recorded", namespace="##targetNamespace")
	!resolve val DateTime recorded;

	@ExtendedMetaData(kind="element", name="reportedBoolean", namespace="##targetNamespace")
	!resolve val Boolean reportedBoolean;

	@ExtendedMetaData(kind="element", name="reportedReference", namespace="##targetNamespace")
	!resolve val Reference reportedReference;

	@GenModel(documentation="What food or fluid product or item was consumed.")
	@ExtendedMetaData(kind="element", name="consumedItem", namespace="##targetNamespace")
	!resolve val NutritionIntakeConsumedItem[+] consumedItem;

	@GenModel(documentation="Total nutrient amounts for the whole meal, product, serving, etc.")
	@ExtendedMetaData(kind="element", name="ingredientLabel", namespace="##targetNamespace")
	!resolve val NutritionIntakeIngredientLabel[*] ingredientLabel;

	@GenModel(documentation="Who performed the intake and how they were involved.")
	@ExtendedMetaData(kind="element", name="performer", namespace="##targetNamespace")
	!resolve val NutritionIntakePerformer[*] performer;

	@GenModel(documentation="Where the intake occurred.")
	@ExtendedMetaData(kind="element", name="location", namespace="##targetNamespace")
	!resolve val Reference location;

	@GenModel(documentation="Allows linking the NutritionIntake to the underlying NutritionOrder, or to other information, such as AllergyIntolerance, that supports or is used to derive the NutritionIntake.")
	@ExtendedMetaData(kind="element", name="derivedFrom", namespace="##targetNamespace")
	!resolve val Reference[*] derivedFrom;

	@GenModel(documentation="A reason, Condition or observation for why the food or fluid is /was consumed.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val CodeableReference[*] reason;

	@GenModel(documentation="Provides extra information about the Nutrition Intake that is not conveyed by the other attributes.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;
}

@GenModel(documentation="A record of food or fluid that is being consumed by a patient.   A NutritionIntake may indicate that the patient may be consuming the food or fluid now or has consumed the food or fluid in the past.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay or through an app that tracks food or fluids consumed.   The consumption information may come from sources such as the patient's memory, from a nutrition label,  or from a clinician documenting observed intake.")
@ExtendedMetaData(name="NutritionIntake.ConsumedItem", kind="elementOnly")
class NutritionIntakeConsumedItem extends BackboneElement {

	@GenModel(documentation="Indicates what a category of item that was consumed: e.g., food, fluid, enteral, etc.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@GenModel(documentation="Identifies the food or fluid product that was consumed. This is potentially a link to a resource representing the details of the food product (TBD) or a simple attribute carrying a code that identifies the food from a known list of foods.")
	@ExtendedMetaData(kind="element", name="nutritionProduct", namespace="##targetNamespace")
	!resolve val CodeableReference[1] nutritionProduct;

	@GenModel(documentation="Scheduled frequency of consumption.")
	@ExtendedMetaData(kind="element", name="schedule", namespace="##targetNamespace")
	!resolve val Timing schedule;

	@GenModel(documentation="Quantity of the specified food.")
	@ExtendedMetaData(kind="element", name="amount", namespace="##targetNamespace")
	!resolve val Quantity amount;

	@GenModel(documentation="Rate at which enteral feeding was administered.")
	@ExtendedMetaData(kind="element", name="rate", namespace="##targetNamespace")
	!resolve val Quantity rate;

	@GenModel(documentation="Indicator when a patient is in a setting where it is helpful to know if food was not consumed, such as it was refused, held (as in tube feedings), or otherwise not provided. If a consumption is being recorded from an app, such as MyFitnessPal, this indicator will likely not be used.")
	@ExtendedMetaData(kind="element", name="notConsumed", namespace="##targetNamespace")
	!resolve val Boolean notConsumed;

	@GenModel(documentation="Document the reason the food or fluid was not consumed, such as refused, held, etc.")
	@ExtendedMetaData(kind="element", name="notConsumedReason", namespace="##targetNamespace")
	!resolve val CodeableConcept notConsumedReason;
}

@GenModel(documentation="A record of food or fluid that is being consumed by a patient.   A NutritionIntake may indicate that the patient may be consuming the food or fluid now or has consumed the food or fluid in the past.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay or through an app that tracks food or fluids consumed.   The consumption information may come from sources such as the patient's memory, from a nutrition label,  or from a clinician documenting observed intake.")
@ExtendedMetaData(name="NutritionIntake.IngredientLabel", kind="elementOnly")
class NutritionIntakeIngredientLabel extends BackboneElement {

	@GenModel(documentation="Total nutrient consumed. This could be a macronutrient (protein, fat, carbohydrate), or a vitamin and mineral.")
	@ExtendedMetaData(kind="element", name="nutrient", namespace="##targetNamespace")
	!resolve val CodeableReference[1] nutrient;

	@GenModel(documentation="Total amount of nutrient consumed.")
	@ExtendedMetaData(kind="element", name="amount", namespace="##targetNamespace")
	!resolve val Quantity[1] amount;
}

@GenModel(documentation="A record of food or fluid that is being consumed by a patient.   A NutritionIntake may indicate that the patient may be consuming the food or fluid now or has consumed the food or fluid in the past.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay or through an app that tracks food or fluids consumed.   The consumption information may come from sources such as the patient's memory, from a nutrition label,  or from a clinician documenting observed intake.")
@ExtendedMetaData(name="NutritionIntake.Performer", kind="elementOnly")
class NutritionIntakePerformer extends BackboneElement {

	@GenModel(documentation="Type of performer.")
	@ExtendedMetaData(kind="element", name="function", namespace="##targetNamespace")
	!resolve val CodeableConcept function;

	@GenModel(documentation="Who performed the intake.")
	@ExtendedMetaData(kind="element", name="actor", namespace="##targetNamespace")
	!resolve val Reference[1] actor;
}

@GenModel(documentation="A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="NutritionOrder", kind="elementOnly")
class NutritionOrder extends DomainResource {

	@GenModel(documentation="Identifiers assigned to this order by the order sender or by the order receiver.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this NutritionOrder.")
	@ExtendedMetaData(kind="element", name="instantiatesCanonical", namespace="##targetNamespace")
	!resolve val Canonical[*] instantiatesCanonical;

	@GenModel(documentation="The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this NutritionOrder.")
	@ExtendedMetaData(kind="element", name="instantiatesUri", namespace="##targetNamespace")
	!resolve val Uri[*] instantiatesUri;

	@GenModel(documentation="The URL pointing to a protocol, guideline, orderset or other definition that is adhered to in whole or in part by this NutritionOrder.")
	@ExtendedMetaData(kind="element", name="instantiates", namespace="##targetNamespace")
	!resolve val Uri[*] instantiates;

	@GenModel(documentation="A plan or request that is fulfilled in whole or in part by this nutrition order.")
	@ExtendedMetaData(kind="element", name="basedOn", namespace="##targetNamespace")
	!resolve val Reference[*] basedOn;

	@GenModel(documentation="A shared identifier common to all nutrition orders that were authorized more or less simultaneously by a single author, representing the composite or group identifier.")
	@ExtendedMetaData(kind="element", name="groupIdentifier", namespace="##targetNamespace")
	!resolve val Identifier groupIdentifier;

	@GenModel(documentation="The workflow status of the nutrition order/request.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val RequestStatus[1] status;

	@GenModel(documentation="Indicates the level of authority/intentionality associated with the NutrionOrder and where the request fits into the workflow chain.")
	@ExtendedMetaData(kind="element", name="intent", namespace="##targetNamespace")
	!resolve val RequestIntent[1] intent;

	@GenModel(documentation="Indicates how quickly the Nutrition Order should be addressed with respect to other        requests.")
	@ExtendedMetaData(kind="element", name="priority", namespace="##targetNamespace")
	!resolve val RequestPriority priority;

	@GenModel(documentation="The person or set of individuals who needs the nutrition order for an oral diet, nutritional supplement and/or enteral or formula feeding.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference[1] subject;

	@GenModel(documentation="An encounter that provides additional information about the healthcare context in which this request is made.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@GenModel(documentation="Information to support fulfilling (i.e. dispensing or administering) of the nutrition,        for example, patient height and weight).")
	@ExtendedMetaData(kind="element", name="supportingInformation", namespace="##targetNamespace")
	!resolve val Reference[*] supportingInformation;

	@GenModel(documentation="The date and time that this nutrition order was requested.")
	@ExtendedMetaData(kind="element", name="dateTime", namespace="##targetNamespace")
	!resolve val DateTime[1] dateTime;

	@GenModel(documentation="The practitioner that holds legal responsibility for ordering the diet, nutritional supplement, or formula feedings.")
	@ExtendedMetaData(kind="element", name="orderer", namespace="##targetNamespace")
	!resolve val Reference orderer;

	@GenModel(documentation="The specified desired performer of the nutrition order.")
	@ExtendedMetaData(kind="element", name="performer", namespace="##targetNamespace")
	!resolve val CodeableReference[*] performer;

	@GenModel(documentation="A link to a record of allergies or intolerances  which should be included in the nutrition order.")
	@ExtendedMetaData(kind="element", name="allergyIntolerance", namespace="##targetNamespace")
	!resolve val Reference[*] allergyIntolerance;

	@GenModel(documentation="This modifier is used to convey order-specific modifiers about the type of food that should be given. These can be derived from patient allergies, intolerances, or preferences such as Halal, Vegan or Kosher. This modifier applies to the entire nutrition order inclusive of the oral diet, nutritional supplements and enteral formula feedings.")
	@ExtendedMetaData(kind="element", name="foodPreferenceModifier", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] foodPreferenceModifier;

	@GenModel(documentation="This modifier is used to convey Order-specific modifier about the type of oral food or oral fluids that should not be given. These can be derived from patient allergies, intolerances, or preferences such as No Red Meat, No Soy or No Wheat or  Gluten-Free.  While it should not be necessary to repeat allergy or intolerance information captured in the referenced AllergyIntolerance resource in the excludeFoodModifier, this element may be used to convey additional specificity related to foods that should be eliminated from the patient’s diet for any reason.  This modifier applies to the entire nutrition order inclusive of the oral diet, nutritional supplements and enteral formula feedings.")
	@ExtendedMetaData(kind="element", name="excludeFoodModifier", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] excludeFoodModifier;

	@GenModel(documentation="This modifier is used to convey whether a food item is allowed to be brought in by the patient and/or family.  If set to true, indicates that the receiving system does not need to supply the food item.")
	@ExtendedMetaData(kind="element", name="outsideFoodAllowed", namespace="##targetNamespace")
	!resolve val Boolean outsideFoodAllowed;

	@GenModel(documentation="Diet given orally in contrast to enteral (tube) feeding.")
	@ExtendedMetaData(kind="element", name="oralDiet", namespace="##targetNamespace")
	!resolve val NutritionOrderOralDiet oralDiet;

	@GenModel(documentation="Oral nutritional products given in order to add further nutritional value to the patient's diet.")
	@ExtendedMetaData(kind="element", name="supplement", namespace="##targetNamespace")
	!resolve val NutritionOrderSupplement[*] supplement;

	@GenModel(documentation="Feeding provided through the gastrointestinal tract via a tube, catheter, or stoma that delivers nutrition distal to the oral cavity.")
	@ExtendedMetaData(kind="element", name="enteralFormula", namespace="##targetNamespace")
	!resolve val NutritionOrderEnteralFormula enteralFormula;

	@GenModel(documentation="Comments made about the {{title}} by the requester, performer, subject or other participants.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;
}

@GenModel(documentation="A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.")
@ExtendedMetaData(name="NutritionOrder.Additive", kind="elementOnly")
class NutritionOrderAdditive extends BackboneElement {

	@GenModel(documentation="Indicates the type of modular component such as protein, carbohydrate, fat or fiber to be provided in addition to or mixed with the base formula.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableReference type;

	@GenModel(documentation="The product or brand name of the type of modular component to be added to the formula.")
	@ExtendedMetaData(kind="element", name="productName", namespace="##targetNamespace")
	!resolve val String productName;

	@GenModel(documentation="The amount of additive to be given in addition or to be mixed in with the base formula.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Quantity quantity;
}

@GenModel(documentation="A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.")
@ExtendedMetaData(name="NutritionOrder.Administration", kind="elementOnly")
class NutritionOrderAdministration extends BackboneElement {

	@GenModel(documentation="Schedule information for an enteral formula.")
	@ExtendedMetaData(kind="element", name="schedule", namespace="##targetNamespace")
	!resolve val NutritionOrderSchedule2 schedule;

	@GenModel(documentation="The volume of formula to provide to the patient per the specified administration schedule.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Quantity quantity;

	@ExtendedMetaData(kind="element", name="rateQuantity", namespace="##targetNamespace")
	!resolve val Quantity rateQuantity;

	@ExtendedMetaData(kind="element", name="rateRatio", namespace="##targetNamespace")
	!resolve val Ratio rateRatio;
}

@GenModel(documentation="A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.")
@ExtendedMetaData(name="NutritionOrder.EnteralFormula", kind="elementOnly")
class NutritionOrderEnteralFormula extends BackboneElement {

	@GenModel(documentation="The type of enteral or infant formula such as an adult standard formula with fiber or a soy-based infant formula.")
	@ExtendedMetaData(kind="element", name="baseFormulaType", namespace="##targetNamespace")
	!resolve val CodeableReference baseFormulaType;

	@GenModel(documentation="The product or brand name of the enteral or infant formula product such as \"ACME Adult Standard Formula\".")
	@ExtendedMetaData(kind="element", name="baseFormulaProductName", namespace="##targetNamespace")
	!resolve val String baseFormulaProductName;

	@GenModel(documentation="The intended type of device that is to be used for the administration of the enteral formula.")
	@ExtendedMetaData(kind="element", name="deliveryDevice", namespace="##targetNamespace")
	!resolve val CodeableReference[*] deliveryDevice;

	@GenModel(documentation="Indicates modular components to be provided in addition or mixed with the base formula.")
	@ExtendedMetaData(kind="element", name="additive", namespace="##targetNamespace")
	!resolve val NutritionOrderAdditive[*] additive;

	@GenModel(documentation="The amount of energy (calories) that the formula should provide per specified volume, typically per mL or fluid oz.  For example, an infant may require a formula that provides 24 calories per fluid ounce or an adult may require an enteral formula that provides 1.5 calorie/mL.")
	@ExtendedMetaData(kind="element", name="caloricDensity", namespace="##targetNamespace")
	!resolve val Quantity caloricDensity;

	@GenModel(documentation="The route or physiological path of administration into the patient's gastrointestinal  tract for purposes of providing the formula feeding, e.g. nasogastric tube.")
	@ExtendedMetaData(kind="element", name="routeOfAdministration", namespace="##targetNamespace")
	!resolve val CodeableConcept routeOfAdministration;

	@GenModel(documentation="Formula administration instructions as structured data.  This repeating structure allows for changing the administration rate or volume over time for both bolus and continuous feeding.  An example of this would be an instruction to increase the rate of continuous feeding every 2 hours.")
	@ExtendedMetaData(kind="element", name="administration", namespace="##targetNamespace")
	!resolve val NutritionOrderAdministration[*] administration;

	@GenModel(documentation="The maximum total quantity of formula that may be administered to a subject over the period of time, e.g. 1440 mL over 24 hours.")
	@ExtendedMetaData(kind="element", name="maxVolumeToDeliver", namespace="##targetNamespace")
	!resolve val Quantity maxVolumeToDeliver;

	@GenModel(documentation="Free text formula administration, feeding instructions or additional instructions or information.")
	@ExtendedMetaData(kind="element", name="administrationInstruction", namespace="##targetNamespace")
	!resolve val Markdown administrationInstruction;
}

@GenModel(documentation="A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.")
@ExtendedMetaData(name="NutritionOrder.Nutrient", kind="elementOnly")
class NutritionOrderNutrient extends BackboneElement {

	@GenModel(documentation="The nutrient that is being modified such as carbohydrate or sodium.")
	@ExtendedMetaData(kind="element", name="modifier", namespace="##targetNamespace")
	!resolve val CodeableConcept modifier;

	@GenModel(documentation="The quantity of the specified nutrient to include in diet.")
	@ExtendedMetaData(kind="element", name="amount", namespace="##targetNamespace")
	!resolve val Quantity amount;
}

@GenModel(documentation="A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.")
@ExtendedMetaData(name="NutritionOrder.OralDiet", kind="elementOnly")
class NutritionOrderOralDiet extends BackboneElement {

	@GenModel(documentation="The kind of diet or dietary restriction such as fiber restricted diet or diabetic diet.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] type;

	@GenModel(documentation="Schedule information for an oral diet.")
	@ExtendedMetaData(kind="element", name="schedule", namespace="##targetNamespace")
	!resolve val NutritionOrderSchedule schedule;

	@GenModel(documentation="Class that defines the quantity and type of nutrient modifications (for example carbohydrate, fiber or sodium) required for the oral diet.")
	@ExtendedMetaData(kind="element", name="nutrient", namespace="##targetNamespace")
	!resolve val NutritionOrderNutrient[*] nutrient;

	@GenModel(documentation="Class that describes any texture modifications required for the patient to safely consume various types of solid foods.")
	@ExtendedMetaData(kind="element", name="texture", namespace="##targetNamespace")
	!resolve val NutritionOrderTexture[*] texture;

	@GenModel(documentation="The required consistency (e.g. honey-thick, nectar-thick, thin, thickened.) of liquids or fluids served to the patient.")
	@ExtendedMetaData(kind="element", name="fluidConsistencyType", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] fluidConsistencyType;

	@GenModel(documentation="Free text or additional instructions or information pertaining to the oral diet.")
	@ExtendedMetaData(kind="element", name="instruction", namespace="##targetNamespace")
	!resolve val String instruction;
}

@GenModel(documentation="A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.")
@ExtendedMetaData(name="NutritionOrder.Schedule", kind="elementOnly")
class NutritionOrderSchedule extends BackboneElement {

	@GenModel(documentation="The time period and frequency at which the diet should be given.  The diet should be given for the combination of all schedules if more than one schedule is present.")
	@ExtendedMetaData(kind="element", name="timing", namespace="##targetNamespace")
	!resolve val Timing[*] timing;

	@GenModel(documentation="Indicates whether the product is only taken when needed within a specific dosing schedule.")
	@ExtendedMetaData(kind="element", name="asNeeded", namespace="##targetNamespace")
	!resolve val Boolean asNeeded;

	@GenModel(documentation="Indicates whether the product is only taken based on a precondition for taking the product.")
	@ExtendedMetaData(kind="element", name="asNeededFor", namespace="##targetNamespace")
	!resolve val CodeableConcept asNeededFor;
}

@GenModel(documentation="A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.")
@ExtendedMetaData(name="NutritionOrder.Schedule1", kind="elementOnly")
class NutritionOrderSchedule1 extends BackboneElement {

	@GenModel(documentation="The time period and frequency at which the supplement should be given.  The supplement should be given for the combination of all schedules if more than one schedule is present.")
	@ExtendedMetaData(kind="element", name="timing", namespace="##targetNamespace")
	!resolve val Timing[*] timing;

	@GenModel(documentation="Indicates whether the supplement is only taken when needed within a specific dosing schedule.")
	@ExtendedMetaData(kind="element", name="asNeeded", namespace="##targetNamespace")
	!resolve val Boolean asNeeded;

	@GenModel(documentation="Indicates whether the supplement is only taken based on a precondition for taking the supplement.")
	@ExtendedMetaData(kind="element", name="asNeededFor", namespace="##targetNamespace")
	!resolve val CodeableConcept asNeededFor;
}

@GenModel(documentation="A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.")
@ExtendedMetaData(name="NutritionOrder.Schedule2", kind="elementOnly")
class NutritionOrderSchedule2 extends BackboneElement {

	@GenModel(documentation="The time period and frequency at which the enteral formula should be given.  The enteral formula should be given for the combination of all schedules if more than one schedule is present.")
	@ExtendedMetaData(kind="element", name="timing", namespace="##targetNamespace")
	!resolve val Timing[*] timing;

	@GenModel(documentation="Indicates whether the enteral formula is only taken when needed within a specific dosing schedule.")
	@ExtendedMetaData(kind="element", name="asNeeded", namespace="##targetNamespace")
	!resolve val Boolean asNeeded;

	@GenModel(documentation="Indicates whether the enteral formula is only taken based on a precondition for taking the enteral formula.")
	@ExtendedMetaData(kind="element", name="asNeededFor", namespace="##targetNamespace")
	!resolve val CodeableConcept asNeededFor;
}

@GenModel(documentation="A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.")
@ExtendedMetaData(name="NutritionOrder.Supplement", kind="elementOnly")
class NutritionOrderSupplement extends BackboneElement {

	@GenModel(documentation="The kind of nutritional supplement product required such as a high protein or pediatric clear liquid supplement.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableReference type;

	@GenModel(documentation="The product or brand name of the nutritional supplement such as \"Acme Protein Shake\".")
	@ExtendedMetaData(kind="element", name="productName", namespace="##targetNamespace")
	!resolve val String productName;

	@GenModel(documentation="Schedule information for a supplement.")
	@ExtendedMetaData(kind="element", name="schedule", namespace="##targetNamespace")
	!resolve val NutritionOrderSchedule1 schedule;

	@GenModel(documentation="The amount of the nutritional supplement to be given.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Quantity quantity;

	@GenModel(documentation="Free text or additional instructions or information pertaining to the oral supplement.")
	@ExtendedMetaData(kind="element", name="instruction", namespace="##targetNamespace")
	!resolve val String instruction;
}

@GenModel(documentation="A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.")
@ExtendedMetaData(name="NutritionOrder.Texture", kind="elementOnly")
class NutritionOrderTexture extends BackboneElement {

	@GenModel(documentation="Any texture modifications (for solid foods) that should be made, e.g. easy to chew, chopped, ground, and pureed.")
	@ExtendedMetaData(kind="element", name="modifier", namespace="##targetNamespace")
	!resolve val CodeableConcept modifier;

	@GenModel(documentation="The food type(s) (e.g. meats, all foods)  that the texture modification applies to.  This could be all foods types.")
	@ExtendedMetaData(kind="element", name="foodType", namespace="##targetNamespace")
	!resolve val CodeableConcept foodType;
}

@GenModel(documentation="A food or supplement that is consumed by patients.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="NutritionProduct", kind="elementOnly")
class NutritionProduct extends DomainResource {

	@GenModel(documentation="The code assigned to the product, for example a USDA NDB number, a USDA FDC ID number, or a Langual code.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@GenModel(documentation="The current state of the product.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val NutritionProductStatus[1] status;

	@GenModel(documentation="Nutrition products can have different classifications - according to its nutritional properties, preparation methods, etc.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] category;

	@GenModel(documentation="The organisation (manufacturer, representative or legal authorization holder) that is responsible for the device.")
	@ExtendedMetaData(kind="element", name="manufacturer", namespace="##targetNamespace")
	!resolve val Reference[*] manufacturer;

	@GenModel(documentation="The product's nutritional information expressed by the nutrients.")
	@ExtendedMetaData(kind="element", name="nutrient", namespace="##targetNamespace")
	!resolve val NutritionProductNutrient[*] nutrient;

	@GenModel(documentation="Ingredients contained in this product.")
	@ExtendedMetaData(kind="element", name="ingredient", namespace="##targetNamespace")
	!resolve val NutritionProductIngredient[*] ingredient;

	@GenModel(documentation="Allergens that are known or suspected to be a part of this nutrition product.")
	@ExtendedMetaData(kind="element", name="knownAllergen", namespace="##targetNamespace")
	!resolve val CodeableReference[*] knownAllergen;

	@GenModel(documentation="Specifies descriptive properties of the nutrition product.")
	@ExtendedMetaData(kind="element", name="characteristic", namespace="##targetNamespace")
	!resolve val NutritionProductCharacteristic[*] characteristic;

	@GenModel(documentation="Conveys instance-level information about this product item. One or several physical, countable instances or occurrences of the product.")
	@ExtendedMetaData(kind="element", name="instance", namespace="##targetNamespace")
	!resolve val NutritionProductInstance[*] instance;

	@GenModel(documentation="Comments made about the product.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;
}

@GenModel(documentation="A food or supplement that is consumed by patients.")
@ExtendedMetaData(name="NutritionProduct.Characteristic", kind="elementOnly")
class NutritionProductCharacteristic extends BackboneElement {

	@GenModel(documentation="A code specifying which characteristic of the product is being described (for example, colour, shape).")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@ExtendedMetaData(kind="element", name="valueCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept valueCodeableConcept;

	@ExtendedMetaData(kind="element", name="valueString", namespace="##targetNamespace")
	!resolve val String valueString;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueBase64Binary", namespace="##targetNamespace")
	!resolve val Base64Binary valueBase64Binary;

	@ExtendedMetaData(kind="element", name="valueAttachment", namespace="##targetNamespace")
	!resolve val Attachment valueAttachment;

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;
}

@GenModel(documentation="A food or supplement that is consumed by patients.")
@ExtendedMetaData(name="NutritionProduct.Ingredient", kind="elementOnly")
class NutritionProductIngredient extends BackboneElement {

	@GenModel(documentation="The ingredient contained in the product.")
	@ExtendedMetaData(kind="element", name="item", namespace="##targetNamespace")
	!resolve val CodeableReference[1] item;

	@GenModel(documentation="The amount of ingredient that is in the product.")
	@ExtendedMetaData(kind="element", name="amount", namespace="##targetNamespace")
	!resolve val Ratio[*] amount;
}

@GenModel(documentation="A food or supplement that is consumed by patients.")
@ExtendedMetaData(name="NutritionProduct.Instance", kind="elementOnly")
class NutritionProductInstance extends BackboneElement {

	@GenModel(documentation="The amount of items or instances that the resource considers, for instance when referring to 2 identical units together.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Quantity quantity;

	@GenModel(documentation="The identifier for the physical instance, typically a serial number or manufacturer number.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The name for the specific product.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="The identification of the batch or lot of the product.")
	@ExtendedMetaData(kind="element", name="lotNumber", namespace="##targetNamespace")
	!resolve val String lotNumber;

	@GenModel(documentation="The time after which the product is no longer expected to be in proper condition, or its use is not advised or not allowed.")
	@ExtendedMetaData(kind="element", name="expiry", namespace="##targetNamespace")
	!resolve val DateTime expiry;

	@GenModel(documentation="The time after which the product is no longer expected to be in proper condition, or its use is not advised or not allowed.")
	@ExtendedMetaData(kind="element", name="useBy", namespace="##targetNamespace")
	!resolve val DateTime useBy;

	@GenModel(documentation="An identifier that supports traceability to the event during which material in this product from one or more biological entities was obtained or pooled.")
	@ExtendedMetaData(kind="element", name="biologicalSourceEvent", namespace="##targetNamespace")
	!resolve val Identifier biologicalSourceEvent;
}

@GenModel(documentation="A food or supplement that is consumed by patients.")
@ExtendedMetaData(name="NutritionProduct.Nutrient", kind="elementOnly")
class NutritionProductNutrient extends BackboneElement {

	@GenModel(documentation="The (relevant) nutrients in the product.")
	@ExtendedMetaData(kind="element", name="item", namespace="##targetNamespace")
	!resolve val CodeableReference item;

	@GenModel(documentation="The amount of nutrient expressed in one or more units: X per pack / per serving / per dose.")
	@ExtendedMetaData(kind="element", name="amount", namespace="##targetNamespace")
	!resolve val Ratio[*] amount;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="NutritionProductStatus", kind="elementOnly")
class NutritionProductStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr NutritionProductStatusEnum value;
}

@ExtendedMetaData(name="NutritionProductStatusEnum")
enum NutritionProductStatusEnum {

	@GenModel(documentation="Active")
	active = 0;

	@GenModel(documentation="Inactive")
	inactive = 1;

	@GenModel(documentation="Entered in Error")
	enteredInError = 2;
}

@ExtendedMetaData(name="NutritionProductStatusEnum:Object", baseType="NutritionProductStatusEnum")
datatype NutritionProductStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="Measurements and simple assertions made about a patient, device or other subject.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Observation", kind="elementOnly")
class Observation extends DomainResource {

	@GenModel(documentation="A unique identifier assigned to this observation.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@ExtendedMetaData(kind="element", name="instantiatesCanonical", namespace="##targetNamespace")
	!resolve val Canonical instantiatesCanonical;

	@ExtendedMetaData(kind="element", name="instantiatesReference", namespace="##targetNamespace")
	!resolve val Reference instantiatesReference;

	@GenModel(documentation="A plan, proposal or order that is fulfilled in whole or in part by this event.  For example, a MedicationRequest may require a patient to have laboratory test performed before  it is dispensed.")
	@ExtendedMetaData(kind="element", name="basedOn", namespace="##targetNamespace")
	!resolve val Reference[*] basedOn;

	@GenModel(documentation="Identifies the observation(s) that triggered the performance of this observation.")
	@ExtendedMetaData(kind="element", name="triggeredBy", namespace="##targetNamespace")
	!resolve val ObservationTriggeredBy[*] triggeredBy;

	@GenModel(documentation="A larger event of which this particular Observation is a component or step.  For example,  an observation as part of a procedure.")
	@ExtendedMetaData(kind="element", name="partOf", namespace="##targetNamespace")
	!resolve val Reference[*] partOf;

	@GenModel(documentation="The status of the result value.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val ObservationStatus[1] status;

	@GenModel(documentation="A code that classifies the general type of observation being made.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] category;

	@GenModel(documentation="Describes what was observed. Sometimes this is called the observation \"name\".")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] code;

	@GenModel(documentation="The patient, or group of patients, location, device, organization, procedure or practitioner this observation is about and into whose or what record the observation is placed. If the actual focus of the observation is different from the subject (or a sample of, part, or region of the subject), the `focus` element or the `code` itself specifies the actual focus of the observation.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference subject;

	@GenModel(documentation="The actual focus of an observation when it is not the patient of record representing something or someone associated with the patient such as a spouse, parent, fetus, or donor. For example, fetus observations in a mother's record.  The focus of an observation could also be an existing condition,  an intervention, the subject's diet,  another observation of the subject,  or a body structure such as tumor or implanted device.   An example use case would be using the Observation resource to capture whether the mother is trained to change her child's tracheostomy tube. In this example, the child is the patient of record and the mother is the focus.")
	@ExtendedMetaData(kind="element", name="focus", namespace="##targetNamespace")
	!resolve val Reference[*] focus;

	@GenModel(documentation="The healthcare event  (e.g. a patient and healthcare provider interaction) during which this observation is made.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@ExtendedMetaData(kind="element", name="effectiveDateTime", namespace="##targetNamespace")
	!resolve val DateTime effectiveDateTime;

	@ExtendedMetaData(kind="element", name="effectivePeriod", namespace="##targetNamespace")
	!resolve val Period effectivePeriod;

	@ExtendedMetaData(kind="element", name="effectiveTiming", namespace="##targetNamespace")
	!resolve val Timing effectiveTiming;

	@ExtendedMetaData(kind="element", name="effectiveInstant", namespace="##targetNamespace")
	!resolve val Instant effectiveInstant;

	@GenModel(documentation="The date and time this version of the observation was made available to providers, typically after the results have been reviewed and verified.")
	@ExtendedMetaData(kind="element", name="issued", namespace="##targetNamespace")
	!resolve val Instant issued;

	@GenModel(documentation="Who was responsible for asserting the observed value as \"true\".")
	@ExtendedMetaData(kind="element", name="performer", namespace="##targetNamespace")
	!resolve val Reference[*] performer;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept valueCodeableConcept;

	@ExtendedMetaData(kind="element", name="valueString", namespace="##targetNamespace")
	!resolve val String valueString;

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;

	@ExtendedMetaData(kind="element", name="valueInteger", namespace="##targetNamespace")
	!resolve val Integer valueInteger;

	@ExtendedMetaData(kind="element", name="valueRange", namespace="##targetNamespace")
	!resolve val Range valueRange;

	@ExtendedMetaData(kind="element", name="valueRatio", namespace="##targetNamespace")
	!resolve val Ratio valueRatio;

	@ExtendedMetaData(kind="element", name="valueSampledData", namespace="##targetNamespace")
	!resolve val SampledData valueSampledData;

	@ExtendedMetaData(kind="element", name="valueTime", namespace="##targetNamespace")
	!resolve val Time valueTime;

	@ExtendedMetaData(kind="element", name="valueDateTime", namespace="##targetNamespace")
	!resolve val DateTime valueDateTime;

	@ExtendedMetaData(kind="element", name="valuePeriod", namespace="##targetNamespace")
	!resolve val Period valuePeriod;

	@ExtendedMetaData(kind="element", name="valueAttachment", namespace="##targetNamespace")
	!resolve val Attachment valueAttachment;

	@ExtendedMetaData(kind="element", name="valueReference", namespace="##targetNamespace")
	!resolve val Reference valueReference;

	@GenModel(documentation="Provides a reason why the expected value in the element Observation.value[x] is missing.")
	@ExtendedMetaData(kind="element", name="dataAbsentReason", namespace="##targetNamespace")
	!resolve val CodeableConcept dataAbsentReason;

	@GenModel(documentation="A categorical assessment of an observation value.  For example, high, low, normal.")
	@ExtendedMetaData(kind="element", name="interpretation", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] interpretation;

	@GenModel(documentation="Comments about the observation or the results.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="Indicates the site on the subject's body where the observation was made (i.e. the target site).")
	@ExtendedMetaData(kind="element", name="bodySite", namespace="##targetNamespace")
	!resolve val CodeableConcept bodySite;

	@GenModel(documentation="Indicates the body structure on the subject's body where the observation was made (i.e. the target site).")
	@ExtendedMetaData(kind="element", name="bodyStructure", namespace="##targetNamespace")
	!resolve val Reference bodyStructure;

	@GenModel(documentation="Indicates the mechanism used to perform the observation.")
	@ExtendedMetaData(kind="element", name="method", namespace="##targetNamespace")
	!resolve val CodeableConcept method;

	@GenModel(documentation="The specimen that was used when this observation was made.")
	@ExtendedMetaData(kind="element", name="specimen", namespace="##targetNamespace")
	!resolve val Reference specimen;

	@GenModel(documentation="A reference to the device that generates the measurements or the device settings for the device.")
	@ExtendedMetaData(kind="element", name="device", namespace="##targetNamespace")
	!resolve val Reference device;

	@GenModel(documentation="Guidance on how to interpret the value by comparison to a normal or recommended range.  Multiple reference ranges are interpreted as an \"OR\".   In other words, to represent two distinct target populations, two `referenceRange` elements would be used.")
	@ExtendedMetaData(kind="element", name="referenceRange", namespace="##targetNamespace")
	!resolve val ObservationReferenceRange[*] referenceRange;

	@GenModel(documentation="This observation is a group observation (e.g. a battery, a panel of tests, a set of vital sign measurements) that includes the target as a member of the group.")
	@ExtendedMetaData(kind="element", name="hasMember", namespace="##targetNamespace")
	!resolve val Reference[*] hasMember;

	@GenModel(documentation="The target resource that represents a measurement from which this observation value is derived. For example, a calculated anion gap or a fetal measurement based on an ultrasound image.")
	@ExtendedMetaData(kind="element", name="derivedFrom", namespace="##targetNamespace")
	!resolve val Reference[*] derivedFrom;

	@GenModel(documentation="Some observations have multiple component observations.  These component observations are expressed as separate code value pairs that share the same attributes.  Examples include systolic and diastolic component observations for blood pressure measurement and multiple component observations for genetics observations.")
	@ExtendedMetaData(kind="element", name="component", namespace="##targetNamespace")
	!resolve val ObservationComponent[*] component;
}

@GenModel(documentation="Measurements and simple assertions made about a patient, device or other subject.")
@ExtendedMetaData(name="Observation.Component", kind="elementOnly")
class ObservationComponent extends BackboneElement {

	@GenModel(documentation="Describes what was observed. Sometimes this is called the observation \"code\".")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] code;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept valueCodeableConcept;

	@ExtendedMetaData(kind="element", name="valueString", namespace="##targetNamespace")
	!resolve val String valueString;

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;

	@ExtendedMetaData(kind="element", name="valueInteger", namespace="##targetNamespace")
	!resolve val Integer valueInteger;

	@ExtendedMetaData(kind="element", name="valueRange", namespace="##targetNamespace")
	!resolve val Range valueRange;

	@ExtendedMetaData(kind="element", name="valueRatio", namespace="##targetNamespace")
	!resolve val Ratio valueRatio;

	@ExtendedMetaData(kind="element", name="valueSampledData", namespace="##targetNamespace")
	!resolve val SampledData valueSampledData;

	@ExtendedMetaData(kind="element", name="valueTime", namespace="##targetNamespace")
	!resolve val Time valueTime;

	@ExtendedMetaData(kind="element", name="valueDateTime", namespace="##targetNamespace")
	!resolve val DateTime valueDateTime;

	@ExtendedMetaData(kind="element", name="valuePeriod", namespace="##targetNamespace")
	!resolve val Period valuePeriod;

	@ExtendedMetaData(kind="element", name="valueAttachment", namespace="##targetNamespace")
	!resolve val Attachment valueAttachment;

	@ExtendedMetaData(kind="element", name="valueReference", namespace="##targetNamespace")
	!resolve val Reference valueReference;

	@GenModel(documentation="Provides a reason why the expected value in the element Observation.component.value[x] is missing.")
	@ExtendedMetaData(kind="element", name="dataAbsentReason", namespace="##targetNamespace")
	!resolve val CodeableConcept dataAbsentReason;

	@GenModel(documentation="A categorical assessment of an observation value.  For example, high, low, normal.")
	@ExtendedMetaData(kind="element", name="interpretation", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] interpretation;

	@GenModel(documentation="Guidance on how to interpret the value by comparison to a normal or recommended range.")
	@ExtendedMetaData(kind="element", name="referenceRange", namespace="##targetNamespace")
	!resolve val ObservationReferenceRange[*] referenceRange;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ObservationDataType", kind="elementOnly")
class ObservationDataType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ObservationDataTypeEnum value;
}

@ExtendedMetaData(name="ObservationDataTypeEnum")
enum ObservationDataTypeEnum {

	@GenModel(documentation="Quantity")
	Quantity = 0;

	@GenModel(documentation="CodeableConcept")
	CodeableConcept = 1;

	@GenModel(documentation="string")
	string = 2;

	@GenModel(documentation="boolean")
	boolean = 3;

	@GenModel(documentation="integer")
	integer = 4;

	@GenModel(documentation="Range")
	Range = 5;

	@GenModel(documentation="Ratio")
	Ratio = 6;

	@GenModel(documentation="SampledData")
	SampledData = 7;

	@GenModel(documentation="time")
	time = 8;

	@GenModel(documentation="dateTime")
	dateTime = 9;

	@GenModel(documentation="Period")
	Period = 10;
}

@ExtendedMetaData(name="ObservationDataTypeEnum:Object", baseType="ObservationDataTypeEnum")
datatype ObservationDataTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="Set of definitional characteristics for a kind of observation or measurement produced or consumed by an orderable health care service.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ObservationDefinition", kind="elementOnly")
class ObservationDefinition extends MetadataResource {

	@GenModel(documentation="An absolute URL that is used to identify this ObservationDefinition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this ObservationDefinition is (or will be) published. The URL SHOULD include the major version of the ObservationDefinition. For more information see Technical and Business Versions.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri url;

	@GenModel(documentation="Business identifiers assigned to this ObservationDefinition. by the performer and/or other systems. These identifiers remain constant as the resource is updated and propagates from server to server.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier identifier;

	@GenModel(documentation="The identifier that is used to identify this version of the ObservationDefinition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the ObservationDefinition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions are orderable.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@ExtendedMetaData(kind="element", name="versionAlgorithmString", namespace="##targetNamespace")
	!resolve val String versionAlgorithmString;

	@ExtendedMetaData(kind="element", name="versionAlgorithmCoding", namespace="##targetNamespace")
	!resolve val Coding versionAlgorithmCoding;

	@GenModel(documentation="A natural language name identifying the ObservationDefinition. This name should be usable as an identifier for the module by machine processing applications such as code generation.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="A short, descriptive, user-friendly title for the ObservationDefinition.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="The current state of the ObservationDefinition.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="A flag to indicate that this ObservationDefinition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.")
	@ExtendedMetaData(kind="element", name="experimental", namespace="##targetNamespace")
	!resolve val Boolean experimental;

	@GenModel(documentation="The date (and optionally time) when the ObservationDefinition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the ObservationDefinition changes.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="Helps establish the \"authority/credibility\" of the ObservationDefinition. May also allow for contact.")
	@ExtendedMetaData(kind="element", name="publisher", namespace="##targetNamespace")
	!resolve val String publisher;

	@GenModel(documentation="Contact details to assist a user in finding and communicating with the publisher.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactDetail[*] contact;

	@GenModel(documentation="A free text natural language description of the ObservationDefinition from the consumer's perspective.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate ObservationDefinition instances.")
	@ExtendedMetaData(kind="element", name="useContext", namespace="##targetNamespace")
	!resolve val UsageContext[*] useContext;

	@GenModel(documentation="A jurisdiction in which the ObservationDefinition is intended to be used.")
	@ExtendedMetaData(kind="element", name="jurisdiction", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] jurisdiction;

	@GenModel(documentation="Explains why this ObservationDefinition is needed and why it has been designed as it has.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val Markdown purpose;

	@GenModel(documentation="Copyright statement relating to the ObservationDefinition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the ObservationDefinition.")
	@ExtendedMetaData(kind="element", name="copyright", namespace="##targetNamespace")
	!resolve val Markdown copyright;

	@GenModel(documentation="A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').")
	@ExtendedMetaData(kind="element", name="copyrightLabel", namespace="##targetNamespace")
	!resolve val String copyrightLabel;

	@GenModel(documentation="The date on which the asset content was approved by the publisher. Approval happens once when the content is officially approved for usage.")
	@ExtendedMetaData(kind="element", name="approvalDate", namespace="##targetNamespace")
	!resolve val Date approvalDate;

	@GenModel(documentation="The date on which the asset content was last reviewed. Review happens periodically after that, but doesn't change the original approval date.")
	@ExtendedMetaData(kind="element", name="lastReviewDate", namespace="##targetNamespace")
	!resolve val Date lastReviewDate;

	@GenModel(documentation="The period during which the ObservationDefinition content was or is planned to be effective.")
	@ExtendedMetaData(kind="element", name="effectivePeriod", namespace="##targetNamespace")
	!resolve val Period effectivePeriod;

	@GenModel(documentation="The canonical URL pointing to another FHIR-defined ObservationDefinition that is adhered to in whole or in part by this definition.")
	@ExtendedMetaData(kind="element", name="derivedFromCanonical", namespace="##targetNamespace")
	!resolve val Canonical[*] derivedFromCanonical;

	@GenModel(documentation="The URL pointing to an externally-defined observation definition, guideline or other definition that is adhered to in whole or in part by this definition.")
	@ExtendedMetaData(kind="element", name="derivedFromUri", namespace="##targetNamespace")
	!resolve val Uri[*] derivedFromUri;

	@GenModel(documentation="A code that describes the intended kind of subject of Observation instances conforming to this ObservationDefinition.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] subject;

	@GenModel(documentation="The type of individual/organization/device that is expected to act upon instances of this definition.")
	@ExtendedMetaData(kind="element", name="performerType", namespace="##targetNamespace")
	!resolve val CodeableConcept performerType;

	@GenModel(documentation="A code that classifies the general type of observation.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] category;

	@GenModel(documentation="Describes what will be observed. Sometimes this is called the observation \"name\".")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] code;

	@GenModel(documentation="The data types allowed for the value element of the instance observations conforming to this ObservationDefinition.")
	@ExtendedMetaData(kind="element", name="permittedDataType", namespace="##targetNamespace")
	!resolve val ObservationDataType[*] permittedDataType;

	@GenModel(documentation="Multiple results allowed for observations conforming to this ObservationDefinition.")
	@ExtendedMetaData(kind="element", name="multipleResultsAllowed", namespace="##targetNamespace")
	!resolve val Boolean multipleResultsAllowed;

	@GenModel(documentation="The site on the subject's body where the  observation is to be made.")
	@ExtendedMetaData(kind="element", name="bodySite", namespace="##targetNamespace")
	!resolve val CodeableConcept bodySite;

	@GenModel(documentation="The method or technique used to perform the observation.")
	@ExtendedMetaData(kind="element", name="method", namespace="##targetNamespace")
	!resolve val CodeableConcept method;

	@GenModel(documentation="The kind of specimen that this type of observation is produced on.")
	@ExtendedMetaData(kind="element", name="specimen", namespace="##targetNamespace")
	!resolve val Reference[*] specimen;

	@GenModel(documentation="The measurement model of device or actual device used to produce observations of this type.")
	@ExtendedMetaData(kind="element", name="device", namespace="##targetNamespace")
	!resolve val Reference[*] device;

	@GenModel(documentation="The preferred name to be used when reporting the results of observations conforming to this ObservationDefinition.")
	@ExtendedMetaData(kind="element", name="preferredReportName", namespace="##targetNamespace")
	!resolve val String preferredReportName;

	@GenModel(documentation="Units allowed for the valueQuantity element in the instance observations conforming to this ObservationDefinition.")
	@ExtendedMetaData(kind="element", name="permittedUnit", namespace="##targetNamespace")
	!resolve val Coding[*] permittedUnit;

	@GenModel(documentation="A set of qualified values associated with a context and a set of conditions -  provides a range for quantitative and ordinal observations and a collection of value sets for qualitative observations.")
	@ExtendedMetaData(kind="element", name="qualifiedValue", namespace="##targetNamespace")
	!resolve val ObservationDefinitionQualifiedValue[*] qualifiedValue;

	@GenModel(documentation="This ObservationDefinition defines a group  observation (e.g. a battery, a panel of tests, a set of vital sign measurements) that includes the target as a member of the group.")
	@ExtendedMetaData(kind="element", name="hasMember", namespace="##targetNamespace")
	!resolve val Reference[*] hasMember;

	@GenModel(documentation="Some observations have multiple component observations, expressed as separate code value pairs.")
	@ExtendedMetaData(kind="element", name="component", namespace="##targetNamespace")
	!resolve val ObservationDefinitionComponent[*] component;
}

@GenModel(documentation="Set of definitional characteristics for a kind of observation or measurement produced or consumed by an orderable health care service.")
@ExtendedMetaData(name="ObservationDefinition.Component", kind="elementOnly")
class ObservationDefinitionComponent extends BackboneElement {

	@GenModel(documentation="Describes what will be observed.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] code;

	@GenModel(documentation="The data types allowed for the value element of the instance of this component observations.")
	@ExtendedMetaData(kind="element", name="permittedDataType", namespace="##targetNamespace")
	!resolve val ObservationDataType[*] permittedDataType;

	@GenModel(documentation="Units allowed for the valueQuantity element in the instance observations conforming to this ObservationDefinition.")
	@ExtendedMetaData(kind="element", name="permittedUnit", namespace="##targetNamespace")
	!resolve val Coding[*] permittedUnit;

	@GenModel(documentation="A set of qualified values associated with a context and a set of conditions -  provides a range for quantitative and ordinal observations and a collection of value sets for qualitative observations.")
	@ExtendedMetaData(kind="element", name="qualifiedValue", namespace="##targetNamespace")
	!resolve val ObservationDefinitionQualifiedValue[*] qualifiedValue;
}

@GenModel(documentation="Set of definitional characteristics for a kind of observation or measurement produced or consumed by an orderable health care service.")
@ExtendedMetaData(name="ObservationDefinition.QualifiedValue", kind="elementOnly")
class ObservationDefinitionQualifiedValue extends BackboneElement {

	@GenModel(documentation="A concept defining the context for this set of qualified values.")
	@ExtendedMetaData(kind="element", name="context", namespace="##targetNamespace")
	!resolve val CodeableConcept context;

	@GenModel(documentation="The target population this  set of qualified values applies to.")
	@ExtendedMetaData(kind="element", name="appliesTo", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] appliesTo;

	@GenModel(documentation="The gender this  set of qualified values applies to.")
	@ExtendedMetaData(kind="element", name="gender", namespace="##targetNamespace")
	!resolve val AdministrativeGender gender;

	@GenModel(documentation="The age range this  set of qualified values applies to.")
	@ExtendedMetaData(kind="element", name="age", namespace="##targetNamespace")
	!resolve val Range age;

	@GenModel(documentation="The gestational age this  set of qualified values applies to.")
	@ExtendedMetaData(kind="element", name="gestationalAge", namespace="##targetNamespace")
	!resolve val Range gestationalAge;

	@GenModel(documentation="Text based condition for which the the set of qualified values is valid.")
	@ExtendedMetaData(kind="element", name="condition", namespace="##targetNamespace")
	!resolve val String condition;

	@GenModel(documentation="The category of range of values for continuous or ordinal observations that match the criteria of this set of qualified values.")
	@ExtendedMetaData(kind="element", name="rangeCategory", namespace="##targetNamespace")
	!resolve val ObservationRangeCategory rangeCategory;

	@GenModel(documentation="The range of values defined for continuous or ordinal observations that match the criteria of this set of qualified values.")
	@ExtendedMetaData(kind="element", name="range", namespace="##targetNamespace")
	!resolve val Range range;

	@GenModel(documentation="The set of valid coded results for qualitative observations  that match the criteria of this set of qualified values.")
	@ExtendedMetaData(kind="element", name="validCodedValueSet", namespace="##targetNamespace")
	!resolve val Canonical validCodedValueSet;

	@GenModel(documentation="The set of normal coded results for qualitative observations  that match the criteria of this set of qualified values.")
	@ExtendedMetaData(kind="element", name="normalCodedValueSet", namespace="##targetNamespace")
	!resolve val Canonical normalCodedValueSet;

	@GenModel(documentation="The set of abnormal coded results for qualitative observations  that match the criteria of this set of qualified values.")
	@ExtendedMetaData(kind="element", name="abnormalCodedValueSet", namespace="##targetNamespace")
	!resolve val Canonical abnormalCodedValueSet;

	@GenModel(documentation="The set of critical coded results for qualitative observations  that match the criteria of this set of qualified values.")
	@ExtendedMetaData(kind="element", name="criticalCodedValueSet", namespace="##targetNamespace")
	!resolve val Canonical criticalCodedValueSet;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ObservationRangeCategory", kind="elementOnly")
class ObservationRangeCategory extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ObservationRangeCategoryEnum value;
}

@ExtendedMetaData(name="ObservationRangeCategoryEnum")
enum ObservationRangeCategoryEnum {

	@GenModel(documentation="reference range")
	reference = 0;

	@GenModel(documentation="critical range")
	critical = 1;

	@GenModel(documentation="absolute range")
	absolute = 2;
}

@ExtendedMetaData(name="ObservationRangeCategoryEnum:Object", baseType="ObservationRangeCategoryEnum")
datatype ObservationRangeCategoryEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="Measurements and simple assertions made about a patient, device or other subject.")
@ExtendedMetaData(name="Observation.ReferenceRange", kind="elementOnly")
class ObservationReferenceRange extends BackboneElement {

	@GenModel(documentation="The value of the low bound of the reference range.  The low bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9). If the low bound is omitted,  it is assumed to be meaningless (e.g. reference range is <=2.3).")
	@ExtendedMetaData(kind="element", name="low", namespace="##targetNamespace")
	!resolve val Quantity low;

	@GenModel(documentation="The value of the high bound of the reference range.  The high bound of the reference range endpoint is inclusive of the value (e.g.  reference range is >=5 - <=9). If the high bound is omitted,  it is assumed to be meaningless (e.g. reference range is >= 2.3).")
	@ExtendedMetaData(kind="element", name="high", namespace="##targetNamespace")
	!resolve val Quantity high;

	@GenModel(documentation="The value of the normal value of the reference range.")
	@ExtendedMetaData(kind="element", name="normalValue", namespace="##targetNamespace")
	!resolve val CodeableConcept normalValue;

	@GenModel(documentation="Codes to indicate the what part of the targeted reference population it applies to. For example, the normal or therapeutic range.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="Codes to indicate the target population this reference range applies to.  For example, a reference range may be based on the normal population or a particular sex or race.  Multiple `appliesTo`  are interpreted as an \"AND\" of the target populations.  For example, to represent a target population of African American females, both a code of female and a code for African American would be used.")
	@ExtendedMetaData(kind="element", name="appliesTo", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] appliesTo;

	@GenModel(documentation="The age at which this reference range is applicable. This is a neonatal age (e.g. number of weeks at term) if the meaning says so.")
	@ExtendedMetaData(kind="element", name="age", namespace="##targetNamespace")
	!resolve val Range age;

	@GenModel(documentation="Text based reference range in an observation which may be used when a quantitative range is not appropriate for an observation.  An example would be a reference value of \"Negative\" or a list or table of \"normals\".")
	@ExtendedMetaData(kind="element", name="text", namespace="##targetNamespace")
	!resolve val Markdown text;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ObservationStatus", kind="elementOnly")
class ObservationStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ObservationStatusEnum value;
}

@ExtendedMetaData(name="ObservationStatusEnum")
enum ObservationStatusEnum {

	@GenModel(documentation="Registered")
	registered = 0;

	@GenModel(documentation="Preliminary")
	preliminary = 1;

	@GenModel(documentation="Final")
	final = 2;

	@GenModel(documentation="Amended")
	amended = 3;

	@GenModel(documentation="Corrected")
	corrected = 4;

	@GenModel(documentation="Cancelled")
	cancelled = 5;

	@GenModel(documentation="Entered in Error")
	enteredInError = 6;

	@GenModel(documentation="Unknown")
	unknown = 7;
}

@ExtendedMetaData(name="ObservationStatusEnum:Object", baseType="ObservationStatusEnum")
datatype ObservationStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="Measurements and simple assertions made about a patient, device or other subject.")
@ExtendedMetaData(name="Observation.TriggeredBy", kind="elementOnly")
class ObservationTriggeredBy extends BackboneElement {

	@GenModel(documentation="Reference to the triggering observation.")
	@ExtendedMetaData(kind="element", name="observation", namespace="##targetNamespace")
	!resolve val Reference[1] observation;

	@GenModel(documentation="The type of trigger.
Reflex | Repeat | Re-run.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val TriggeredBytype[1] type;

	@GenModel(documentation="Provides the reason why this observation was performed as a result of the observation(s) referenced.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val String reason;
}

@GenModel(documentation="An OID represented as a URI
RFC 3001. See also ISO/IEC 8824:1990 €
If the element is present, it must have either a @value, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="oid", kind="elementOnly")
class Oid extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	attr OidPrimitive value;
}

@ExtendedMetaData(name="oid-primitive", baseType="http://www.eclipse.org/emf/2003/XMLType#anyURI", minLength="1", pattern="urn:oid:[0-2](\.(0|[1-9][0-9]*))+")
datatype OidPrimitive : java.lang.String;

@GenModel(documentation="A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="OperationDefinition", kind="elementOnly")
class OperationDefinition extends CanonicalResource {

	@GenModel(documentation="An absolute URI that is used to identify this operation definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this operation definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the operation definition is stored on different servers.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri url;

	@GenModel(documentation="A formal identifier that is used to identify this implementation guide when it is represented in other formats, or referenced in a specification, model, design or an instance.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The identifier that is used to identify this version of the operation definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the operation definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@ExtendedMetaData(kind="element", name="versionAlgorithmString", namespace="##targetNamespace")
	!resolve val String versionAlgorithmString;

	@ExtendedMetaData(kind="element", name="versionAlgorithmCoding", namespace="##targetNamespace")
	!resolve val Coding versionAlgorithmCoding;

	@GenModel(documentation="A natural language name identifying the operation definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String[1] name;

	@GenModel(documentation="A short, descriptive, user-friendly title for the operation definition.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="The current state of this operation definition.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="Whether this is an operation or a named query.")
	@ExtendedMetaData(kind="element", name="kind", namespace="##targetNamespace")
	!resolve val OperationKind[1] kind;

	@GenModel(documentation="A Boolean value to indicate that this operation definition is authored for testing purposes (or education/evaluation/marketing) and is not intended for genuine usage.")
	@ExtendedMetaData(kind="element", name="experimental", namespace="##targetNamespace")
	!resolve val Boolean experimental;

	@GenModel(documentation="The date  (and optionally time) when the operation definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the operation definition changes.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="The name of the organization or individual responsible for the release and ongoing maintenance of the operation definition.")
	@ExtendedMetaData(kind="element", name="publisher", namespace="##targetNamespace")
	!resolve val String publisher;

	@GenModel(documentation="Contact details to assist a user in finding and communicating with the publisher.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactDetail[*] contact;

	@GenModel(documentation="A free text natural language description of the operation definition from a consumer's perspective.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate operation definition.")
	@ExtendedMetaData(kind="element", name="useContext", namespace="##targetNamespace")
	!resolve val UsageContext[*] useContext;

	@GenModel(documentation="A legal or geographic region in which the operation definition is intended to be used.")
	@ExtendedMetaData(kind="element", name="jurisdiction", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] jurisdiction;

	@GenModel(documentation="Explanation of why this operation definition is needed and why it has been designed as it has.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val Markdown purpose;

	@GenModel(documentation="A copyright statement relating to the operation definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the operation definition.")
	@ExtendedMetaData(kind="element", name="copyright", namespace="##targetNamespace")
	!resolve val Markdown copyright;

	@GenModel(documentation="A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').")
	@ExtendedMetaData(kind="element", name="copyrightLabel", namespace="##targetNamespace")
	!resolve val String copyrightLabel;

	@GenModel(documentation="Whether the operation affects state. Side effects such as producing audit trail entries do not count as 'affecting  state'.")
	@ExtendedMetaData(kind="element", name="affectsState", namespace="##targetNamespace")
	!resolve val Boolean affectsState;

	@GenModel(documentation="The label that is recommended to be used in the URL for this operation. In some cases, servers may need to use a different CapabilityStatement operation.name to differentiate between multiple SearchParameters that happen to have the same code.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val Code[1] code;

	@GenModel(documentation="Additional information about how to use this operation or named query.")
	@ExtendedMetaData(kind="element", name="comment", namespace="##targetNamespace")
	!resolve val Markdown comment;

	@GenModel(documentation="Indicates that this operation definition is a constraining profile on the base.")
	@ExtendedMetaData(kind="element", name="base", namespace="##targetNamespace")
	!resolve val Canonical base;

	@GenModel(documentation="The types on which this operation can be executed.")
	@ExtendedMetaData(kind="element", name="resource", namespace="##targetNamespace")
	!resolve val VersionIndependentResourceTypesAll[*] resource;

	@GenModel(documentation="Indicates whether this operation or named query can be invoked at the system level (e.g. without needing to choose a resource type for the context).")
	@ExtendedMetaData(kind="element", name="system", namespace="##targetNamespace")
	!resolve val Boolean[1] system;

	@GenModel(documentation="Indicates whether this operation or named query can be invoked at the resource type level for any given resource type level (e.g. without needing to choose a specific resource id for the context).")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val Boolean[1] type;

	@GenModel(documentation="Indicates whether this operation can be invoked on a particular instance of one of the given types.")
	@ExtendedMetaData(kind="element", name="instance", namespace="##targetNamespace")
	!resolve val Boolean[1] instance;

	@GenModel(documentation="Additional validation information for the in parameters - a single profile that covers all the parameters. The profile is a constraint on the parameters resource as a whole.")
	@ExtendedMetaData(kind="element", name="inputProfile", namespace="##targetNamespace")
	!resolve val Canonical inputProfile;

	@GenModel(documentation="Additional validation information for the out parameters - a single profile that covers all the parameters. The profile is a constraint on the parameters resource.")
	@ExtendedMetaData(kind="element", name="outputProfile", namespace="##targetNamespace")
	!resolve val Canonical outputProfile;

	@GenModel(documentation="The parameters for the operation/query.")
	@ExtendedMetaData(kind="element", name="parameter", namespace="##targetNamespace")
	!resolve val OperationDefinitionParameter[*] parameter;

	@GenModel(documentation="Defines an appropriate combination of parameters to use when invoking this operation, to help code generators when generating overloaded parameter sets for this operation.")
	@ExtendedMetaData(kind="element", name="overload", namespace="##targetNamespace")
	!resolve val OperationDefinitionOverload[*] overload;
}

@GenModel(documentation="A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).")
@ExtendedMetaData(name="OperationDefinition.Binding", kind="elementOnly")
class OperationDefinitionBinding extends BackboneElement {

	@GenModel(documentation="Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.")
	@ExtendedMetaData(kind="element", name="strength", namespace="##targetNamespace")
	!resolve val BindingStrength[1] strength;

	@GenModel(documentation="Points to the value set or external definition (e.g. implicit value set) that identifies the set of codes to be used.")
	@ExtendedMetaData(kind="element", name="valueSet", namespace="##targetNamespace")
	!resolve val Canonical[1] valueSet;
}

@GenModel(documentation="A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).")
@ExtendedMetaData(name="OperationDefinition.Overload", kind="elementOnly")
class OperationDefinitionOverload extends BackboneElement {

	@GenModel(documentation="Name of parameter to include in overload.")
	@ExtendedMetaData(kind="element", name="parameterName", namespace="##targetNamespace")
	!resolve val String[*] parameterName;

	@GenModel(documentation="Comments to go on overload.")
	@ExtendedMetaData(kind="element", name="comment", namespace="##targetNamespace")
	!resolve val String comment;
}

@GenModel(documentation="A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).")
@ExtendedMetaData(name="OperationDefinition.Parameter", kind="elementOnly")
class OperationDefinitionParameter extends BackboneElement {

	@GenModel(documentation="The name of used to identify the parameter.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val Code[1] name;

	@GenModel(documentation="Whether this is an input or an output parameter.")
	@ExtendedMetaData(kind="element", name="use", namespace="##targetNamespace")
	!resolve val OperationParameterUse[1] use;

	@GenModel(documentation="If present, indicates that the parameter applies when the operation is being invoked at the specified level.")
	@ExtendedMetaData(kind="element", name="scope", namespace="##targetNamespace")
	!resolve val OperationParameterScope[*] scope;

	@GenModel(documentation="The minimum number of times this parameter SHALL appear in the request or response.")
	@ExtendedMetaData(kind="element", name="min", namespace="##targetNamespace")
	!resolve val Integer[1] min;

	@GenModel(documentation="The maximum number of times this element is permitted to appear in the request or response.")
	@ExtendedMetaData(kind="element", name="max", namespace="##targetNamespace")
	!resolve val String[1] max;

	@GenModel(documentation="Describes the meaning or use of this parameter.")
	@ExtendedMetaData(kind="element", name="documentation", namespace="##targetNamespace")
	!resolve val Markdown documentation;

	@GenModel(documentation="The type for this parameter.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val FHIRTypes type;

	@GenModel(documentation="Support for polymorphic types. If the parameter type is abstract, this element lists allowed sub-types for the parameter.")
	@ExtendedMetaData(kind="element", name="allowedType", namespace="##targetNamespace")
	!resolve val FHIRTypes[*] allowedType;

	@GenModel(documentation="Used when the type is \"Reference\" or \"canonical\", and identifies a profile structure or implementation Guide that applies to the target of the reference this parameter refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the target resource SHALL conform to at least one profile defined in the implementation guide.")
	@ExtendedMetaData(kind="element", name="targetProfile", namespace="##targetNamespace")
	!resolve val Canonical[*] targetProfile;

	@GenModel(documentation="How the parameter is understood if/when it used as search parameter. This is only used if the parameter is a string.")
	@ExtendedMetaData(kind="element", name="searchType", namespace="##targetNamespace")
	!resolve val SearchParamType searchType;

	@GenModel(documentation="Binds to a value set if this parameter is coded (code, Coding, CodeableConcept).")
	@ExtendedMetaData(kind="element", name="binding", namespace="##targetNamespace")
	!resolve val OperationDefinitionBinding binding;

	@GenModel(documentation="Identifies other resource parameters within the operation invocation that are expected to resolve to this resource.")
	@ExtendedMetaData(kind="element", name="referencedFrom", namespace="##targetNamespace")
	!resolve val OperationDefinitionReferencedFrom[*] referencedFrom;

	@GenModel(documentation="The parts of a nested Parameter.")
	@ExtendedMetaData(kind="element", name="part", namespace="##targetNamespace")
	!resolve val OperationDefinitionParameter[*] part;
}

@GenModel(documentation="A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).")
@ExtendedMetaData(name="OperationDefinition.ReferencedFrom", kind="elementOnly")
class OperationDefinitionReferencedFrom extends BackboneElement {

	@GenModel(documentation="The name of the parameter or dot-separated path of parameter names pointing to the resource parameter that is expected to contain a reference to this resource.")
	@ExtendedMetaData(kind="element", name="source", namespace="##targetNamespace")
	!resolve val String[1] source;

	@GenModel(documentation="The id of the element in the referencing resource that is expected to resolve to this resource.")
	@ExtendedMetaData(kind="element", name="sourceId", namespace="##targetNamespace")
	!resolve val String sourceId;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="OperationKind", kind="elementOnly")
class OperationKind extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr OperationKindEnum value;
}

@ExtendedMetaData(name="OperationKindEnum")
enum OperationKindEnum {

	@GenModel(documentation="Operation")
	operation = 0;

	@GenModel(documentation="Query")
	query = 1;
}

@ExtendedMetaData(name="OperationKindEnum:Object", baseType="OperationKindEnum")
datatype OperationKindEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A collection of error, warning, or information messages that result from a system action.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="OperationOutcome", kind="elementOnly")
class OperationOutcome extends DomainResource {

	@GenModel(documentation="An error, warning, or information message that results from a system action.")
	@ExtendedMetaData(kind="element", name="issue", namespace="##targetNamespace")
	!resolve val OperationOutcomeIssue[+] issue;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="OperationOutcomeCodes", kind="elementOnly")
class OperationOutcomeCodes extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr OperationOutcomeCodesEnum value;
}

@ExtendedMetaData(name="OperationOutcomeCodesEnum")
enum OperationOutcomeCodesEnum {

	@GenModel(documentation="Error: Multiple matches exist for the conditional delete
Fout: er is meer dan één resultaat voor de conditionele delete")
	DELETEMULTIPLEMATCHES = 0;

	@GenModel(documentation="You must authenticate before you can use this service
Autenticazione richiesta prima di usare questo servizio
Wymagana autentykacja przed u?yciem tego serwisu
Vous devez être authentifié avant de pouvoir utiliser ce service
U moet zich authenticeren voor gebruik van deze service
?????????
Debe autenticarse antes de poder usar este servicio")
	MSGAUTHREQUIRED = 1;

	@GenModel(documentation="Bad Syntax: \"%s\" must be a %s'
???????? ???????: \"%s\" ?????? ???? %s
Sintassi Errata: \"%s\" deve essere un %s'
B??d sk?adni: \"%s\" powinno by? %s'
Erreur de Syntaxe : \"%s\" doit être un %s
Verkeerde syntax: \"%s\" moet een %s zijn
????: \"%s\" ????? %s'
Sintaxis Incorrecta: \"%s\" debe de ser un %s'")
	MSGBADFORMAT = 2;

	@GenModel(documentation="Bad Syntax in %s
???????? ???????: %s
Sintassi errata in %s
B??d sk?adni w %s
Erreur de Syntaxe dans %s
Verkeerde syntax in %s
%s ?????
Sintaxis Incorrecta en %s")
	MSGBADSYNTAX = 3;

	@GenModel(documentation="Unable to parse feed (entry content type = \"%s\")
Impossibile effettuare il parsing del feed (tipo del contenuto della entry = \"%s\")
B??d parsowania (typ zawarto?ci wej?ciowej = \"%s\")
Impossible d'analyser le flux (type de contenu de l'entrée = \"%s\")
Kan feed niet verwerken (contenttype inhoud = \"%s\")
????feed (??????? = \"%s\")
No se pudo parsear el feed (el tipo de contenido de la entry = \"%s\")")
	MSGCANTPARSECONTENT = 4;

	@GenModel(documentation="Unable to parse feed (root element name = \"%s\")
?? ??????? ????????? ?????? (???????? ??????? = \"%s\")
Impossibile effettuare il parsing del feed (nome elemento root = \"%s\")
B??d parsowania (nazwa elementu root = \"%s\")
Impossible d'analyser le flux (nom de l'élément racine = \"%s\")
Kan feed niet verwerken (rootelementnaam = \"%s\")
????feed (???? = \"%s\")
No se pudo parsear el feed (nombre del elemento raiz = \"%s\")")
	MSGCANTPARSEROOT = 5;

	@GenModel(documentation="New resource created
Nieuwe resource gemaakt")
	MSGCREATED = 6;

	@GenModel(documentation="The Date value %s is not in the correct format (Xml Date Format required)
???????? Date %s ? ???????? ??????? (????????? Xml Date ??????)
Il valore %s per la data non è nel formato corretto (richiesto il Formato Data Xml)
Niepoprawny format warto?ci daty %s (wymagany format XML)
Le format de la date %s est incorrect (format Date Xml attendu)
De Datum-waarde %s heeft niet de juiste structuur (Xml Date vereist)
???? %s ????? (???Xml Date??)
El valor de la fecha %s no está en el formato correcto (se requiere un formato de fecha Xml)")
	MSGDATEFORMAT = 7;

	@GenModel(documentation="This resource has been deleted
?????? ?????? ??? ??????
Questa risorsa è stata cancellata
Ten zasób zosta? usuni?ty
La ressource a été supprimée
Deze resource is verwijderd
??????
Este recurso ha sido borrado")
	MSGDELETED = 8;

	@GenModel(documentation="Resource deleted
?????? ??????
Risorsa cancellata
Zasób usuni?to
Ressource supprimée
Resource verwijderd
?????
Recurso borrado")
	MSGDELETEDDONE = 9;

	@GenModel(documentation="The resource \"%s\" has been deleted
?????? \"%s\" ??? ??????
La risorsa \"%s\" è stata eliminata
Zasób \"%s\" zosta? usuni?ty
La ressource \"%s\" a été supprimée
De resource \"%s\" is verwijderd
?? \"%s\" ????
El recurso \"%s\" ha sido borrado")
	MSGDELETEDID = 10;

	@GenModel(documentation="Duplicate Id %s for resource type %s
??????????? Id %s ??? ???? ??????? %s
Id %s duplicato per il tipo di risorsa %s
Zdublowany identyfikator %s dla zasobu typu %s
Id %s en double pour le type de ressource %s
Duplicaat-id %s voor resourcetype %s
ID %s ??????? %s?
Id %s duplicada para el recurso de tipo %s")
	MSGDUPLICATEID = 11;

	@GenModel(documentation="Error parsing resource Xml (%s)
?????? ??????????????? ??????? ??????? Xml (%s)
Errore nel parsing della risorsa Xml (%s)
B??d w trakcie parsowania zasobu XML (%s)
Erreur d'analyse de la ressource Xml (%s)
Fout in verwerking resource Xml (%s)
????Xml??? (%s)
Error parseando el recurso Xml (%s)")
	MSGERRORPARSING = 12;

	@GenModel(documentation="Id \"%s\" has an invalid character \"%s\"
Id \"%s\" ???????? ???????????? ??????? \"%s\"
L''Id \"%s\" ha un carattere non valido: \"%s\"
Identyfikator \"%s\" zawiera niepoprawny znak \"%s\"
Id \"%s\" possède un caractère invalide \"%s\"
Id \"%s\" heeft een ongeldig teken \"%s\"
ID \"%s\" ??????: \"%s\"
El Id \"%s\" contiene el caracter inválido \"%s\"")
	MSGIDINVALID = 13;

	@GenModel(documentation="Id \"%s\" too long (length limit 36)
???????????? ????? Id \"%s\" (??????????? 36)
Id \"%s\" troppo lunga (limite di lunghezza: 36)
Identyfikator \"%s\" jest zbyt d?ugi (limit d?ugo?ci 36)
Id \"%s\" trop long (la longueur limite est 36)
Id \"%s\" te lang (max lengte 36)
Id \"%s\" ?? (????: 36)
El Id \"%s\" es demasiado largo (limite de longitud: 36)")
	MSGIDTOOLONG = 14;

	@GenModel(documentation="Id not accepted
Id ?? ???????
Id non accettato
Identyfikator nie zaakceptowany
Id non accepté
Id niet geaccepteerd
Id????
Id no aceptada")
	MSGINVALIDID = 15;

	@GenModel(documentation="Json Source for a resource should start with an object
Json Source ??? ??????? ?????? ?????????? ? ???????
Il sorgente Json di una risorsa dovrebbe iniziare con un oggetto
?ród?o json dla zasobu powinno rozpoczyna? si? od obiektu
La source Json pour une ressource doit commencer par un objet
Json Source van een resource moeten beginnen met een object
???Json?????object??
La fuente Json para un recurso debería empezar con un objeto")
	MSGJSONOBJECT = 16;

	@GenModel(documentation="Unable to resolve local reference to resource %s
?????????? ?????????? ????????? ?????? ?? ?????? %s
Impossibile risolvere il riferimento locale alla risorsa %s
Zasób wskazywany przez loklan? referencj? %s nie zosta? odnaleziony
Impossible de résourdre la référence locale à la ressource %s
De resource met lokale referentie %s is niet gevonden
??????? %s ?????
Imposible resolver la referencia al recurso %s")
	MSGLOCALFAIL = 17;

	@GenModel(documentation="Resource Id \"%s\" does not exist
?????? Id \"%s\" ?? ??????????
La risorsa con Id \"%s\" non esiste
Zasób o identyfikatorze \"%s\" nie istnieje
La ressource avec l'Id \"%s\" n'existe pas
Resource-id \"%s\" bestaat niet
??Id \"%s\"???
El recurso con Id \"%s\" no existe")
	MSGNOEXIST = 18;

	@GenModel(documentation="No Resource found matching the query \"%s\"
Nessuna Risorsa soddisfa la query \"%s\"
Geen resource gevonden met query \"%s\"")
	MSGNOMATCH = 19;

	@GenModel(documentation="No module could be found to handle the request \"%s\"
?????? ??? ????????? ??????? \"%s\" ?? ??????
Impossibile trovare un modulo per gestire la richiesta \"%s\"
Nie mo?na odnale?? modu?u, aby obs?u?y? ??danie \"%s\"
Aucun module disponible pour traiter la requête \"%s\"
Er kon geen module worden gevonden om verzoek \"%s\" te verwerken
????????\"%s\"???
No se encontró un modulo que gestione la petición \"%s\"")
	MSGNOMODULE = 20;

	@GenModel(documentation="No Summary for this resource
??????????? Summary ??? ??????? ???????
Nessun riepilogo per questa risorsa
Brak podsumowania (Summary) dla tego zasobu
Aucun résumé disponible pour cette ressource
Geen samenvatting voor deze resource
????summary
No existe un resumen para este recurso")
	MSGNOSUMMARY = 21;

	@GenModel(documentation="Operation %s not allowed for resource %s (due to local configuration)
???????? %s ??????????? ??? ??????? %s (?? ??????? ????????? ????????????)
Operazione %s non consentita per la risorsa %s (a causa di configurazioni locali)
Niedozwolona operacja %s dla zasobu %s (ze wzgl?du na lokaln? konfiguracj?)
L'opération %s n'est pas permise pour la ressource %s (à cause de la configuration locale)
Bewerking %s niet toegestaan voor resource %s (vanwege lokale configuratie)
?? %s ???????? %s (??????)
Operación %s no permitida para el recurso %s (debido a la configuración local)")
	MSGOPNOTALLOWED = 22;

	@GenModel(documentation="Unknown chained parameter name \"%s\"
?????????? ????????? ???????????? ????????? \"%s\"
Nome di parametro concatenato sconosciuto: \"%s\"
Nieznana nazwa parametru powi?zanego \"%s\"
Nom du paramètre chainé inconnu : \"%s\"
Onbekende geschakelde parameternaam \"%s\"
????????: \"%s\"
Nombre de parametro encadenado desconocido: \"%s\"")
	MSGPARAMCHAINED = 23;

	@GenModel(documentation="Parameter \"%s\" content is invalid
Il contenuto del Parametro \"%s\" non è valido
Waarde van parameter \"%s\" is ongeldig")
	MSGPARAMINVALID = 24;

	@GenModel(documentation="Parameter \"%s\" modifier is invalid
Modifier van parameter \"%s\" is ongeldig")
	MSGPARAMMODIFIERINVALID = 25;

	@GenModel(documentation="Parameter \"%s\" is not allowed to repeat
???????? \"%s\" ?? ????? ???? ????????
Non ? consentito ripetere il parametro \"%s\"
Parametr \"%s\" nie mo?e zosta? powtórzony
Le paramètre \"%s\" ne peut pas être répété
Parameter \"%s\" mag niet herhalen
??\"%s\"????
No se permite la repetición del parámetro \"%s\"")
	MSGPARAMNOREPEAT = 26;

	@GenModel(documentation="Parameter \"%s\" not understood
???????? \"%s\" ?? ?????
Parametro \"%s\" non riconosciuto
Niezrozumia?y parametr \"%s\"
Paramètre \"%s\" non reconnu
Parameter \"%s\" onbekend
??????\"%s\"
Parámetro \"%s\" no reconocido")
	MSGPARAMUNKNOWN = 27;

	@GenModel(documentation="Unable to resolve local reference to resource %s")
	MSGREMOTEFAIL = 28;

	@GenModel(documentation="Resources with identity \"example\" cannot be deleted (for testing/training purposes)
?????? ? ??????????????? \"example\" ?? ????? ???? ?????? (??? ??????? ????????????/????????)
Le Risorse aventi l'identità \"example\" non possono essere cancellate (per finalità di test/formazione)
Zasoby oznaczone jako \"example\" nie mog? zosta? usuni?te (dla celów testów/szkole?)
Les ressources ayant l'identité \"example\" ne peuvent pas être supprimées (utilisées pour les tests/formations)
Resources met identiteit \"voorbeeld\" kunnen niet worden verwijderd (ten behoeve van testen/training)
?\"example\" ?ID???????? (????/??)
Recursos con la identidad \"example\" no pueden ser borrados (son usados para pruebas/entrenamiento)")
	MSGRESOURCEEXAMPLEPROTECTED = 29;

	@GenModel(documentation="unable to allocate resource id
?????????? ???????? ????????????? ???????
impossibile allocare l''id della risorsa
nie mo?na nada? identyfikatora zasobu
impossible d'allouer l'id de la ressource
kan geen resource-id reserveren
??????ID
imposible encontrar el id del recurso")
	MSGRESOURCEIDFAIL = 30;

	@GenModel(documentation="Resource Id Mismatch
Problème de correspondance d'Id de la Ressource
Resource ID's komen niet overeen")
	MSGRESOURCEIDMISMATCH = 31;

	@GenModel(documentation="Resource Id Missing
Id della Risorsa mancante
Id de la Ressource manquante
Resource ID ontbreekt")
	MSGRESOURCEIDMISSING = 32;

	@GenModel(documentation="Not allowed to submit a resource for this operation
??? ?????? ???????? ???????? ??????? ???????????
Non è consentito sottomettere una risorsa per questa operazione
Nie mo?na zg?osi? zasobu dla tej operacji
Non autorisé à soumettre une ressource pour cette opération
Niet toegestaan om een resource in te dienen voor deze bewerking
??????????
No se permite el envío de un recurso para esta operación")
	MSGRESOURCENOTALLOWED = 33;

	@GenModel(documentation="A resource is required
????????? ??????
E'' richiesta una risorsa
Zasób jest wymagany
Une ressource est requise
Een resource is verplicht
????????
Se requiere un recurso")
	MSGRESOURCEREQUIRED = 34;

	@GenModel(documentation="Resource Type Mismatch
?????????????? ???? ???????
Tipo Risorsa non corrispondente
Niepoprawny typ zasobu
Type de ressource incorrect
Verkeerd resourcetype
???????
Los Tipos de los recursos no coinciden")
	MSGRESOURCETYPEMISMATCH = 35;

	@GenModel(documentation="Unknown sort parameter name \"%s\"
??????????? ??? ????????? ?????????? \"%s\"
Nome del parametro di ordinamento \"%s\" non riconosciuto
Nieznany parametr sortowania \"%s\"
Nom du paramètre de tri inconnu \"%s\"
Onbekende parameternaam \"%s\" voor sortering
?????????\"%s\"
Nombre del parámetro de ordenación \"%s\" desconocido")
	MSGSORTUNKNOWN = 36;

	@GenModel(documentation="Duplicate Identifier in transaction: %s
??????????? ????????????? ? ??????????: %s
Zdublowany identyfikator w transakcji: %s
Identifiant en double dans la transaction : %s
Dubbele identificatie in transactie: %s
???????Id: %s
Identificador duplicado en la transacción: %s")
	MSGTRANSACTIONDUPLICATEID = 37;

	@GenModel(documentation="Missing Identifier in transaction - an entry.id must be provided
??????????? ????????????? ? ?????????? - ????????? entry.id
Brak identyfikatora w transakcji - nale?y poda? entry.id
Identifiant manquant dans la transaction - un élément entry.id doit être fourni
Ontbrekende identificatie in transactie - entry.id is verplicht
?????Id - ??????entry.id
Identificador de la transacción no encontrado - se debe proporcionar un entry.id")
	MSGTRANSACTIONMISSINGID = 38;

	@GenModel(documentation="Unhandled xml node type \"%s\"
?? ???????????? xml ???? \"%s\"
Tipo di nodo Xml non gestito \"%s\"
Nieobs?ugiwany typ w?z?a XML \"%s\"
Type de noeud xml \"%s\" non traité
Kan xml nodetype \"%s\" niet verwerken
????XML????\"%s\"
Tipo de nodo Xml no soportado \"%s\"")
	MSGUNHANDLEDNODETYPE = 39;

	@GenModel(documentation="Unknown Content (%s) at %s
??????????? ??????? (%s) ? %s
Contenuto Sconosciuto (%s) at %s
Nieznana zawarto?? (%s) dla %s
Contenu inconnu (%s) à %s
Onbekende content (%s) at %s
???? (%s) ?? %s
Contenido desconocido (%s) en %s")
	MSGUNKNOWNCONTENT = 40;

	@GenModel(documentation="unknown FHIR http operation
??????????? ???????? FHIR http
operazione http FHIR sconosciuta
nieznana operacja FHIR http
operation http FHIR inconnue
onbekende FHIR http operation
???FHIR HTTP??
Operación http FHIR desconocida")
	MSGUNKNOWNOPERATION = 41;

	@GenModel(documentation="Resource Type \"%s\" not recognised
??? ??????? \"%s\" ?? ?????????
Tipo di Risorsa \"%s\" non riconosciuto
Nie rozpoznany typ zasobu: \"%s\"
Type de ressource \"%s\" non reconnu
Resourcetype \"%s\" niet herkend
????\"%s\"???
Tipo de Recurso \"%s\" no reconocido")
	MSGUNKNOWNTYPE = 42;

	@GenModel(documentation="existing resource updated
???????????? ?????? ????????
risorsa esistente aggiornata
uaktualniono istniej?cy zasób
ressource existante mise à jour
bestaande resource updated
???????
Recurso existente actualizado")
	MSGUPDATED = 43;

	@GenModel(documentation="Version aware updates are required for this resource
??? ??????? ??????? ?????????? ?????????? ? ?????? ??????
Questa risorsa richiede aggiornamenti per versione
Uaktualnienia zak?adaj?ce wersjonowanie s? wymagane dla tego zasobu
Des mises à jour en relation avec la version sont requises pour cette ressource
Versie-bewuste updates zijn vereist voor deze resource
????????????
Este recurso requiere actualizaciones en base a versiones")
	MSGVERSIONAWARE = 44;

	@GenModel(documentation="Update Conflict (server current version = \"%s\", client version referenced = \"%s\")
???????? ?????????? (??????? ?????? ??????? = \"%s\", ????????? ?????? ??????? = \"%s\")
Conflitto nell''aggiornamento (attuale = \"%s\", quotato = \"%s\")
Konflikt podczas uaktualnienia (obecna wersja na serwerze = \"%s\", wersja wskazana przez klienta = \"%s\")
Conflit de mise à jour (version courante du serveur = \"%s\", version référencée du client = \"%s\")
Updateconflict (huidige serverversie = \"%s\", opgegeven clientversie = \"%s\")
???? (??????? = \"%s\", ???????? = \"%s\")
Conflicto de actualizaciones (versión actual del servidor = \"%s\", versión del cliente referenciada = \"%s\")")
	MSGVERSIONAWARECONFLICT = 45;

	@GenModel(documentation="Version specific URL not recognised
URL ??? ????????? ?????? ?? ?????????
URL specifico alla versione non riconosciuto
Nie rozpoznany URL specyficzny dla wersji
URL spécifique à une version non reconnue
Versie-specifieke URL niet herkend
????????URL
URL especifica de la versión no reconocida")
	MSGVERSIONAWAREURL = 46;

	@GenModel(documentation="This does not appear to be a FHIR element or resource (wrong namespace \"%s\")
Dit lijkt geen FHIR element of resource te zijn (verkeerde namespace \"%s\")")
	MSGWRONGNS = 47;

	@GenModel(documentation="Error: Multiple matches exist for %s search parameters \"%s\"
??????: ????????????? ?????????? ??? %s ? ??????????? ?????? \"%s\"
Errore: Trovate corrispondenze multiple per %s parametri di ricerca \"%s\"
B??d: Istniej? wielokrotne dopasowania dla %s parametrów wyszukiwania \"%s\"
Erreur : Plusieurs correspondances existent pour ce paramètre de recherche %s
Fout: er is meer dan één resultaat voor %s zoekparameters \"%s\"
??: ?? %s ????? \"%s\"??????
Error: Multiples ocurrencias existen para %s parametros de búsqueda \"%s\"")
	SEARCHMULTIPLE = 48;

	@GenModel(documentation="Error: no processable search found for %s search parameters \"%s\"
??????: ?????????????? ??????????? ?????? ??? %s ? ??????????? ?????? \"%s\" ?? ???????
Errore: non è stato trovato alcun parametro di ricerca processabile per %s parametri di ricerca \"%s\"
B??d: Niewykonalne wyszukiwanie dla %s parametrów wyszukiwania \"%s\"
Erreur : aucune recherche trouvée pour les paramètres %s \"%s\"
Fout: geen verwerkbare zoekactie gevonden voor %s zoekparameters \"%s\"
??: ?%s????\"%s\"?????????
Error: no se encontro una búsqueda apropiada para %s parametros de búsqueda \"%s\"")
	SEARCHNONE = 49;

	@GenModel(documentation="Error: Multiple matches exist for the conditional update
Fout: er is meer dan één resultaat voor de conditionele update")
	UPDATEMULTIPLEMATCHES = 50;
}

@ExtendedMetaData(name="OperationOutcomeCodesEnum:Object", baseType="OperationOutcomeCodesEnum")
datatype OperationOutcomeCodesEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A collection of error, warning, or information messages that result from a system action.")
@ExtendedMetaData(name="OperationOutcome.Issue", kind="elementOnly")
class OperationOutcomeIssue extends BackboneElement {

	@GenModel(documentation="Indicates whether the issue indicates a variation from successful processing.")
	@ExtendedMetaData(kind="element", name="severity", namespace="##targetNamespace")
	!resolve val IssueSeverity[1] severity;

	@GenModel(documentation="Describes the type of the issue. The system that creates an OperationOutcome SHALL choose the most applicable code from the IssueType value set, and may additional provide its own code for the error in the details element.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val IssueType[1] code;

	@GenModel(documentation="Additional details about the error. This may be a text description of the error or a system code that identifies the error.")
	@ExtendedMetaData(kind="element", name="details", namespace="##targetNamespace")
	!resolve val CodeableConcept details;

	@GenModel(documentation="Additional diagnostic information about the issue.")
	@ExtendedMetaData(kind="element", name="diagnostics", namespace="##targetNamespace")
	!resolve val String diagnostics;

	@GenModel(documentation="This element is deprecated because it is XML specific. It is replaced by issue.expression, which is format independent, and simpler to parse. 

For resource issues, this will be a simple XPath limited to element names, repetition indicators and the default child accessor that identifies one of the elements in the resource that caused this issue to be raised.  For HTTP errors, will be \"http.\" + the parameter name.")
	@ExtendedMetaData(kind="element", name="location", namespace="##targetNamespace")
	!resolve val String[*] location;

	@GenModel(documentation="A [simple subset of FHIRPath](fhirpath.html#simple) limited to element names, repetition indicators and the default child accessor that identifies one of the elements in the resource that caused this issue to be raised.")
	@ExtendedMetaData(kind="element", name="expression", namespace="##targetNamespace")
	!resolve val String[*] expression;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="OperationParameterScope", kind="elementOnly")
class OperationParameterScope extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr OperationParameterScopeEnum value;
}

@ExtendedMetaData(name="OperationParameterScopeEnum")
enum OperationParameterScopeEnum {

	@GenModel(documentation="Instance")
	instance = 0;

	@GenModel(documentation="Type")
	type = 1;

	@GenModel(documentation="System")
	system = 2;
}

@ExtendedMetaData(name="OperationParameterScopeEnum:Object", baseType="OperationParameterScopeEnum")
datatype OperationParameterScopeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="OperationParameterUse", kind="elementOnly")
class OperationParameterUse extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr OperationParameterUseEnum value;
}

@ExtendedMetaData(name="OperationParameterUseEnum")
enum OperationParameterUseEnum {

	@GenModel(documentation="In")
	in = 0;

	@GenModel(documentation="Out")
	out = 1;
}

@ExtendedMetaData(name="OperationParameterUseEnum:Object", baseType="OperationParameterUseEnum")
datatype OperationParameterUseEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A formally or informally recognized grouping of people or organizations formed for the purpose of achieving some form of collective action.  Includes companies, institutions, corporations, departments, community groups, healthcare practice groups, payer/insurer, etc.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Organization", kind="elementOnly")
class Organization extends DomainResource {

	@GenModel(documentation="Identifier for the organization that is used to identify the organization across multiple disparate systems.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Whether the organization's record is still in active use.")
	@ExtendedMetaData(kind="element", name="active", namespace="##targetNamespace")
	!resolve val Boolean active;

	@GenModel(documentation="The kind(s) of organization that this is.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] type;

	@GenModel(documentation="A name associated with the organization.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="A list of alternate names that the organization is known as, or was known as in the past.")
	@ExtendedMetaData(kind="element", name="alias", namespace="##targetNamespace")
	!resolve val String[*] alias;

	@GenModel(documentation="Description of the organization, which helps provide additional general context on the organization to ensure that the correct organization is selected.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The contact details of communication devices available relevant to the specific Organization. This can include addresses, phone numbers, fax numbers, mobile numbers, email addresses and web sites.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ExtendedContactDetail[*] contact;

	@GenModel(documentation="The organization of which this organization forms a part.")
	@ExtendedMetaData(kind="element", name="partOf", namespace="##targetNamespace")
	!resolve val Reference partOf;

	@GenModel(documentation="Technical endpoints providing access to services operated for the organization.")
	@ExtendedMetaData(kind="element", name="endpoint", namespace="##targetNamespace")
	!resolve val Reference[*] endpoint;

	@GenModel(documentation="The official certifications, accreditations, training, designations and licenses that authorize and/or otherwise endorse the provision of care by the organization.

For example, an approval to provide a type of services issued by a certifying body (such as the US Joint Commission) to an organization.")
	@ExtendedMetaData(kind="element", name="qualification", namespace="##targetNamespace")
	!resolve val OrganizationQualification[*] qualification;
}

@GenModel(documentation="Defines an affiliation/association/relationship between 2 distinct organizations, that is not a part-of relationship/sub-division relationship.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="OrganizationAffiliation", kind="elementOnly")
class OrganizationAffiliation extends DomainResource {

	@GenModel(documentation="Business identifiers that are specific to this role.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Whether this organization affiliation record is in active use.")
	@ExtendedMetaData(kind="element", name="active", namespace="##targetNamespace")
	!resolve val Boolean active;

	@GenModel(documentation="The period during which the participatingOrganization is affiliated with the primary organization.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;

	@GenModel(documentation="Organization where the role is available (primary organization/has members).")
	@ExtendedMetaData(kind="element", name="organization", namespace="##targetNamespace")
	!resolve val Reference organization;

	@GenModel(documentation="The Participating Organization provides/performs the role(s) defined by the code to the Primary Organization (e.g. providing services or is a member of).")
	@ExtendedMetaData(kind="element", name="participatingOrganization", namespace="##targetNamespace")
	!resolve val Reference participatingOrganization;

	@GenModel(documentation="The network in which the participatingOrganization provides the role's services (if defined) at the indicated locations (if defined).")
	@ExtendedMetaData(kind="element", name="network", namespace="##targetNamespace")
	!resolve val Reference[*] network;

	@GenModel(documentation="Definition of the role the participatingOrganization plays in the association.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] code;

	@GenModel(documentation="Specific specialty of the participatingOrganization in the context of the role.")
	@ExtendedMetaData(kind="element", name="specialty", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] specialty;

	@GenModel(documentation="The location(s) at which the role occurs.")
	@ExtendedMetaData(kind="element", name="location", namespace="##targetNamespace")
	!resolve val Reference[*] location;

	@GenModel(documentation="Healthcare services provided through the role.")
	@ExtendedMetaData(kind="element", name="healthcareService", namespace="##targetNamespace")
	!resolve val Reference[*] healthcareService;

	@GenModel(documentation="The contact details of communication devices available at the participatingOrganization relevant to this Affiliation.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ExtendedContactDetail[*] contact;

	@GenModel(documentation="Technical endpoints providing access to services operated for this role.")
	@ExtendedMetaData(kind="element", name="endpoint", namespace="##targetNamespace")
	!resolve val Reference[*] endpoint;
}

@GenModel(documentation="A formally or informally recognized grouping of people or organizations formed for the purpose of achieving some form of collective action.  Includes companies, institutions, corporations, departments, community groups, healthcare practice groups, payer/insurer, etc.")
@ExtendedMetaData(name="Organization.Qualification", kind="elementOnly")
class OrganizationQualification extends BackboneElement {

	@GenModel(documentation="An identifier allocated to this qualification for this organization.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Coded representation of the qualification.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] code;

	@GenModel(documentation="Period during which the qualification is valid.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;

	@GenModel(documentation="Organization that regulates and issues the qualification.")
	@ExtendedMetaData(kind="element", name="issuer", namespace="##targetNamespace")
	!resolve val Reference issuer;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="OrientationType", kind="elementOnly")
class OrientationType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr OrientationTypeEnum value;
}

@ExtendedMetaData(name="OrientationTypeEnum")
enum OrientationTypeEnum {

	@GenModel(documentation="Sense orientation of referenceSeq")
	sense = 0;

	@GenModel(documentation="Antisense orientation of referenceSeq")
	antisense = 1;
}

@ExtendedMetaData(name="OrientationTypeEnum:Object", baseType="OrientationTypeEnum")
datatype OrientationTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A medically related item or items, in a container or package.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="PackagedProductDefinition", kind="elementOnly")
class PackagedProductDefinition extends DomainResource {

	@GenModel(documentation="A unique identifier for this package as whole - not the the content of the package. Unique instance identifiers assigned to a package by manufacturers, regulators, drug catalogue custodians or other organizations.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="A name for this package. Typically what it would be listed as in a drug formulary or catalogue, inventory etc.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="A high level category e.g. medicinal product, raw material, shipping/transport container, etc.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="The product this package model relates to, not the contents of the package (for which see package.containedItem).")
	@ExtendedMetaData(kind="element", name="packageFor", namespace="##targetNamespace")
	!resolve val Reference[*] packageFor;

	@GenModel(documentation="The status within the lifecycle of this item. A high level status, this is not intended to duplicate details carried elsewhere such as legal status, or authorization or marketing status.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val CodeableConcept status;

	@GenModel(documentation="The date at which the given status became applicable.")
	@ExtendedMetaData(kind="element", name="statusDate", namespace="##targetNamespace")
	!resolve val DateTime statusDate;

	@GenModel(documentation="A total of the complete count of contained items of a particular type/form, independent of sub-packaging or organization. This can be considered as the pack size. This attribute differs from containedItem.amount in that it can give a single aggregated count of all tablet types in a pack, even when these are different manufactured items. For example a pill pack of 21 tablets plus 7 sugar tablets, can be denoted here as '28 tablets'. This attribute is repeatable so that the different item types in one pack type can be counted (e.g. a count of vials and count of syringes). Each repeat must have different units, so that it is clear what the different sets of counted items are, and it is not intended to allow different counts of similar items (e.g. not '2 tubes and 3 tubes'). Repeats are not to be used to represent different pack sizes (e.g. 20 pack vs. 50 pack) - which would be different instances of this resource.")
	@ExtendedMetaData(kind="element", name="containedItemQuantity", namespace="##targetNamespace")
	!resolve val Quantity[*] containedItemQuantity;

	@GenModel(documentation="Textual description. Note that this is not the name of the package or product.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The legal status of supply of the packaged item as classified by the regulator.")
	@ExtendedMetaData(kind="element", name="legalStatusOfSupply", namespace="##targetNamespace")
	!resolve val PackagedProductDefinitionLegalStatusOfSupply[*] legalStatusOfSupply;

	@GenModel(documentation="Allows specifying that an item is on the market for sale, or that it is not available, and the dates and locations associated.")
	@ExtendedMetaData(kind="element", name="marketingStatus", namespace="##targetNamespace")
	!resolve val MarketingStatus[*] marketingStatus;

	@GenModel(documentation="Identifies if the package contains different items, such as when a drug product is supplied with another item e.g. a diluent or adjuvant.")
	@ExtendedMetaData(kind="element", name="copackagedIndicator", namespace="##targetNamespace")
	!resolve val Boolean copackagedIndicator;

	@GenModel(documentation="Manufacturer of this package type. When there are multiple it means these are all possible manufacturers.")
	@ExtendedMetaData(kind="element", name="manufacturer", namespace="##targetNamespace")
	!resolve val Reference[*] manufacturer;

	@GenModel(documentation="Additional information or supporting documentation about the packaged product.")
	@ExtendedMetaData(kind="element", name="attachedDocument", namespace="##targetNamespace")
	!resolve val Reference[*] attachedDocument;

	@GenModel(documentation="A packaging item, as a container for medically related items, possibly with other packaging items within, or a packaging component, such as bottle cap (which is not a device or a medication manufactured item).")
	@ExtendedMetaData(kind="element", name="packaging", namespace="##targetNamespace")
	!resolve val PackagedProductDefinitionPackaging packaging;

	@GenModel(documentation="Allows the key features to be recorded, such as \"hospital pack\", \"nurse prescribable\", \"calendar pack\".")
	@ExtendedMetaData(kind="element", name="characteristic", namespace="##targetNamespace")
	!resolve val PackagedProductDefinitionProperty[*] characteristic;
}

@GenModel(documentation="A medically related item or items, in a container or package.")
@ExtendedMetaData(name="PackagedProductDefinition.ContainedItem", kind="elementOnly")
class PackagedProductDefinitionContainedItem extends BackboneElement {

	@GenModel(documentation="The actual item(s) of medication, as manufactured, or a device (typically, but not necessarily, a co-packaged one), or other medically related item (such as food, biologicals, raw materials, medical fluids, gases etc.), as contained in the package. This also allows another whole packaged product to be included, which is solely for the case where a package of other entire packages is wanted - such as a wholesale or distribution pack (for layers within one package, use PackagedProductDefinition.packaging.packaging).")
	@ExtendedMetaData(kind="element", name="item", namespace="##targetNamespace")
	!resolve val CodeableReference[1] item;

	@GenModel(documentation="The number of this type of item within this packaging or for continuous items such as liquids it is the quantity (for example 25ml). See also PackagedProductDefinition.containedItemQuantity (especially the long definition).")
	@ExtendedMetaData(kind="element", name="amount", namespace="##targetNamespace")
	!resolve val Quantity amount;
}

@GenModel(documentation="A medically related item or items, in a container or package.")
@ExtendedMetaData(name="PackagedProductDefinition.LegalStatusOfSupply", kind="elementOnly")
class PackagedProductDefinitionLegalStatusOfSupply extends BackboneElement {

	@GenModel(documentation="The actual status of supply. Conveys in what situation this package type may be supplied for use.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@GenModel(documentation="The place where the legal status of supply applies. When not specified, this indicates it is unknown in this context.")
	@ExtendedMetaData(kind="element", name="jurisdiction", namespace="##targetNamespace")
	!resolve val CodeableConcept jurisdiction;
}

@GenModel(documentation="A medically related item or items, in a container or package.")
@ExtendedMetaData(name="PackagedProductDefinition.Packaging", kind="elementOnly")
class PackagedProductDefinitionPackaging extends BackboneElement {

	@GenModel(documentation="A business identifier that is specific to this particular part of the packaging, often assigned by the manufacturer. Including possibly Data Carrier Identifier (a GS1 barcode).")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The physical type of the container of the items.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="Is this a part of the packaging (e.g. a cap or bottle stopper), rather than the packaging itself (e.g. a bottle or vial). The latter type are designed be a container, but the former are not.")
	@ExtendedMetaData(kind="element", name="componentPart", namespace="##targetNamespace")
	!resolve val Boolean componentPart;

	@GenModel(documentation="The quantity of packaging items contained at this layer of the package. This does not relate to the number of contained items but relates solely to the number of packaging items. When looking at the outermost layer it is always 1. If there are two boxes within, at the next layer it would be 2.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Integer quantity;

	@GenModel(documentation="Material type of the package item.")
	@ExtendedMetaData(kind="element", name="material", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] material;

	@GenModel(documentation="A possible alternate material for this part of the packaging, that is allowed to be used instead of the usual material (e.g. different types of plastic for a blister sleeve).")
	@ExtendedMetaData(kind="element", name="alternateMaterial", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] alternateMaterial;

	@GenModel(documentation="Shelf Life and storage information.")
	@ExtendedMetaData(kind="element", name="shelfLifeStorage", namespace="##targetNamespace")
	!resolve val ProductShelfLife[*] shelfLifeStorage;

	@GenModel(documentation="Manufacturer of this packaging item. When there are multiple values each one is a potential manufacturer of this packaging item.")
	@ExtendedMetaData(kind="element", name="manufacturer", namespace="##targetNamespace")
	!resolve val Reference[*] manufacturer;

	@GenModel(documentation="General characteristics of this item.")
	@ExtendedMetaData(kind="element", name="property", namespace="##targetNamespace")
	!resolve val PackagedProductDefinitionProperty[*] property;

	@GenModel(documentation="The item(s) within the packaging.")
	@ExtendedMetaData(kind="element", name="containedItem", namespace="##targetNamespace")
	!resolve val PackagedProductDefinitionContainedItem[*] containedItem;

	@GenModel(documentation="Allows containers (and parts of containers) within containers, still as a part of a single packaged product. See also PackagedProductDefinition.packaging.containedItem.item(PackagedProductDefinition).")
	@ExtendedMetaData(kind="element", name="packaging", namespace="##targetNamespace")
	!resolve val PackagedProductDefinitionPackaging[*] packaging;
}

@GenModel(documentation="A medically related item or items, in a container or package.")
@ExtendedMetaData(name="PackagedProductDefinition.Property", kind="elementOnly")
class PackagedProductDefinitionProperty extends BackboneElement {

	@GenModel(documentation="A code expressing the type of characteristic.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@ExtendedMetaData(kind="element", name="valueCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept valueCodeableConcept;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueDate", namespace="##targetNamespace")
	!resolve val Date valueDate;

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;

	@ExtendedMetaData(kind="element", name="valueAttachment", namespace="##targetNamespace")
	!resolve val Attachment valueAttachment;
}

@GenModel(documentation="The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="ParameterDefinition", kind="elementOnly")
class ParameterDefinition extends DataType {

	@GenModel(documentation="The name of the parameter used to allow access to the value of the parameter in evaluation contexts.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val Code name;

	@GenModel(documentation="Whether the parameter is input or output for the module.")
	@ExtendedMetaData(kind="element", name="use", namespace="##targetNamespace")
	!resolve val Code[1] use;

	@GenModel(documentation="The minimum number of times this parameter SHALL appear in the request or response.")
	@ExtendedMetaData(kind="element", name="min", namespace="##targetNamespace")
	!resolve val Integer min;

	@GenModel(documentation="The maximum number of times this element is permitted to appear in the request or response.")
	@ExtendedMetaData(kind="element", name="max", namespace="##targetNamespace")
	!resolve val String max;

	@GenModel(documentation="A brief discussion of what the parameter is for and how it is used by the module.")
	@ExtendedMetaData(kind="element", name="documentation", namespace="##targetNamespace")
	!resolve val String documentation;

	@GenModel(documentation="The type of the parameter.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val Code[1] type;

	@GenModel(documentation="If specified, this indicates a profile that the input data must conform to, or that the output data will conform to.")
	@ExtendedMetaData(kind="element", name="profile", namespace="##targetNamespace")
	!resolve val Canonical profile;
}

@GenModel(documentation="This resource is used to pass information into and back from an operation (whether invoked directly from REST or within a messaging environment).  It is not persisted or allowed to be referenced by other resources.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Parameters", kind="elementOnly")
class Parameters extends Resource {

	@GenModel(documentation="A parameter passed to or received from the operation.")
	@ExtendedMetaData(kind="element", name="parameter", namespace="##targetNamespace")
	!resolve val ParametersParameter[*] parameter;
}

@GenModel(documentation="This resource is used to pass information into and back from an operation (whether invoked directly from REST or within a messaging environment).  It is not persisted or allowed to be referenced by other resources.")
@ExtendedMetaData(name="Parameters.Parameter", kind="elementOnly")
class ParametersParameter extends BackboneElement {

	@GenModel(documentation="The name of the parameter (reference to the operation definition).")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String[1] name;

	@ExtendedMetaData(kind="element", name="valueBase64Binary", namespace="##targetNamespace")
	!resolve val Base64Binary valueBase64Binary;

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;

	@ExtendedMetaData(kind="element", name="valueCanonical", namespace="##targetNamespace")
	!resolve val Canonical valueCanonical;

	@ExtendedMetaData(kind="element", name="valueCode", namespace="##targetNamespace")
	!resolve val Code valueCode;

	@ExtendedMetaData(kind="element", name="valueDate", namespace="##targetNamespace")
	!resolve val Date valueDate;

	@ExtendedMetaData(kind="element", name="valueDateTime", namespace="##targetNamespace")
	!resolve val DateTime valueDateTime;

	@ExtendedMetaData(kind="element", name="valueDecimal", namespace="##targetNamespace")
	!resolve val Decimal valueDecimal;

	@ExtendedMetaData(kind="element", name="valueId", namespace="##targetNamespace")
	!resolve val Id valueId;

	@ExtendedMetaData(kind="element", name="valueInstant", namespace="##targetNamespace")
	!resolve val Instant valueInstant;

	@ExtendedMetaData(kind="element", name="valueInteger", namespace="##targetNamespace")
	!resolve val Integer valueInteger;

	@ExtendedMetaData(kind="element", name="valueInteger64", namespace="##targetNamespace")
	!resolve val Integer64 valueInteger64;

	@ExtendedMetaData(kind="element", name="valueMarkdown", namespace="##targetNamespace")
	!resolve val Markdown valueMarkdown;

	@ExtendedMetaData(kind="element", name="valueOid", namespace="##targetNamespace")
	!resolve val Oid valueOid;

	@ExtendedMetaData(kind="element", name="valuePositiveInt", namespace="##targetNamespace")
	!resolve val PositiveInt valuePositiveInt;

	@ExtendedMetaData(kind="element", name="valueString", namespace="##targetNamespace")
	!resolve val String valueString;

	@ExtendedMetaData(kind="element", name="valueTime", namespace="##targetNamespace")
	!resolve val Time valueTime;

	@ExtendedMetaData(kind="element", name="valueUnsignedInt", namespace="##targetNamespace")
	!resolve val UnsignedInt valueUnsignedInt;

	@ExtendedMetaData(kind="element", name="valueUri", namespace="##targetNamespace")
	!resolve val Uri valueUri;

	@ExtendedMetaData(kind="element", name="valueUrl", namespace="##targetNamespace")
	!resolve val Url valueUrl;

	@ExtendedMetaData(kind="element", name="valueUuid", namespace="##targetNamespace")
	!resolve val Uuid valueUuid;

	@ExtendedMetaData(kind="element", name="valueAddress", namespace="##targetNamespace")
	!resolve val Address valueAddress;

	@ExtendedMetaData(kind="element", name="valueAge", namespace="##targetNamespace")
	!resolve val Age valueAge;

	@ExtendedMetaData(kind="element", name="valueAnnotation", namespace="##targetNamespace")
	!resolve val Annotation valueAnnotation;

	@ExtendedMetaData(kind="element", name="valueAttachment", namespace="##targetNamespace")
	!resolve val Attachment valueAttachment;

	@ExtendedMetaData(kind="element", name="valueCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept valueCodeableConcept;

	@ExtendedMetaData(kind="element", name="valueCodeableReference", namespace="##targetNamespace")
	!resolve val CodeableReference valueCodeableReference;

	@ExtendedMetaData(kind="element", name="valueCoding", namespace="##targetNamespace")
	!resolve val Coding valueCoding;

	@ExtendedMetaData(kind="element", name="valueContactPoint", namespace="##targetNamespace")
	!resolve val ContactPoint valueContactPoint;

	@ExtendedMetaData(kind="element", name="valueCount", namespace="##targetNamespace")
	!resolve val Count valueCount;

	@ExtendedMetaData(kind="element", name="valueDistance", namespace="##targetNamespace")
	!resolve val Distance valueDistance;

	@ExtendedMetaData(kind="element", name="valueDuration", namespace="##targetNamespace")
	!resolve val Duration valueDuration;

	@ExtendedMetaData(kind="element", name="valueHumanName", namespace="##targetNamespace")
	!resolve val HumanName valueHumanName;

	@ExtendedMetaData(kind="element", name="valueIdentifier", namespace="##targetNamespace")
	!resolve val Identifier valueIdentifier;

	@ExtendedMetaData(kind="element", name="valueMoney", namespace="##targetNamespace")
	!resolve val Money valueMoney;

	@ExtendedMetaData(kind="element", name="valuePeriod", namespace="##targetNamespace")
	!resolve val Period valuePeriod;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueRange", namespace="##targetNamespace")
	!resolve val Range valueRange;

	@ExtendedMetaData(kind="element", name="valueRatio", namespace="##targetNamespace")
	!resolve val Ratio valueRatio;

	@ExtendedMetaData(kind="element", name="valueRatioRange", namespace="##targetNamespace")
	!resolve val RatioRange valueRatioRange;

	@ExtendedMetaData(kind="element", name="valueReference", namespace="##targetNamespace")
	!resolve val Reference valueReference;

	@ExtendedMetaData(kind="element", name="valueSampledData", namespace="##targetNamespace")
	!resolve val SampledData valueSampledData;

	@ExtendedMetaData(kind="element", name="valueSignature", namespace="##targetNamespace")
	!resolve val Signature valueSignature;

	@ExtendedMetaData(kind="element", name="valueTiming", namespace="##targetNamespace")
	!resolve val Timing valueTiming;

	@ExtendedMetaData(kind="element", name="valueContactDetail", namespace="##targetNamespace")
	!resolve val ContactDetail valueContactDetail;

	@ExtendedMetaData(kind="element", name="valueDataRequirement", namespace="##targetNamespace")
	!resolve val DataRequirement valueDataRequirement;

	@ExtendedMetaData(kind="element", name="valueExpression", namespace="##targetNamespace")
	!resolve val Expression valueExpression;

	@ExtendedMetaData(kind="element", name="valueParameterDefinition", namespace="##targetNamespace")
	!resolve val ParameterDefinition valueParameterDefinition;

	@ExtendedMetaData(kind="element", name="valueRelatedArtifact", namespace="##targetNamespace")
	!resolve val RelatedArtifact valueRelatedArtifact;

	@ExtendedMetaData(kind="element", name="valueTriggerDefinition", namespace="##targetNamespace")
	!resolve val TriggerDefinition valueTriggerDefinition;

	@ExtendedMetaData(kind="element", name="valueUsageContext", namespace="##targetNamespace")
	!resolve val UsageContext valueUsageContext;

	@ExtendedMetaData(kind="element", name="valueAvailability", namespace="##targetNamespace")
	!resolve val Availability valueAvailability;

	@ExtendedMetaData(kind="element", name="valueExtendedContactDetail", namespace="##targetNamespace")
	!resolve val ExtendedContactDetail valueExtendedContactDetail;

	@ExtendedMetaData(kind="element", name="valueDosage", namespace="##targetNamespace")
	!resolve val Dosage valueDosage;

	@ExtendedMetaData(kind="element", name="valueMeta", namespace="##targetNamespace")
	!resolve val Meta valueMeta;

	@GenModel(documentation="Conveys the content if the parameter is a whole resource.")
	@ExtendedMetaData(kind="element", name="resource", namespace="##targetNamespace")
	!resolve val ResourceContainer resource;

	@GenModel(documentation="A named part of a multi-part parameter.")
	@ExtendedMetaData(kind="element", name="part", namespace="##targetNamespace")
	!resolve val ParametersParameter[*] part;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ParticipantResourceTypes", kind="elementOnly")
class ParticipantResourceTypes extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ParticipantResourceTypesEnum value;
}

@ExtendedMetaData(name="ParticipantResourceTypesEnum")
enum ParticipantResourceTypesEnum {

	@GenModel(documentation="CareTeam")
	CareTeam = 0;

	@GenModel(documentation="Device")
	Device = 1;

	@GenModel(documentation="Group")
	Group = 2;

	@GenModel(documentation="HealthcareService")
	HealthcareService = 3;

	@GenModel(documentation="Location")
	Location = 4;

	@GenModel(documentation="Organization")
	Organization = 5;

	@GenModel(documentation="Patient")
	Patient = 6;

	@GenModel(documentation="Practitioner")
	Practitioner = 7;

	@GenModel(documentation="PractitionerRole")
	PractitionerRole = 8;

	@GenModel(documentation="RelatedPerson")
	RelatedPerson = 9;
}

@ExtendedMetaData(name="ParticipantResourceTypesEnum:Object", baseType="ParticipantResourceTypesEnum")
datatype ParticipantResourceTypesEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ParticipationStatus", kind="elementOnly")
class ParticipationStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ParticipationStatusEnum value;
}

@ExtendedMetaData(name="ParticipationStatusEnum")
enum ParticipationStatusEnum {

	@GenModel(documentation="Accepted")
	accepted = 0;

	@GenModel(documentation="Declined")
	declined = 1;

	@GenModel(documentation="Tentative")
	tentative = 2;

	@GenModel(documentation="Needs Action")
	needsAction = 3;
}

@ExtendedMetaData(name="ParticipationStatusEnum:Object", baseType="ParticipationStatusEnum")
datatype ParticipationStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="Demographics and other administrative information about an individual or animal receiving care or other health-related services.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Patient", kind="elementOnly")
class Patient extends DomainResource {

	@GenModel(documentation="An identifier for this patient.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Whether this patient record is in active use. 
Many systems use this property to mark as non-current patients, such as those that have not been seen for a period of time based on an organization's business rules.

It is often used to filter patient lists to exclude inactive patients

Deceased patients may also be marked as inactive for the same reasons, but may be active for some time after death.")
	@ExtendedMetaData(kind="element", name="active", namespace="##targetNamespace")
	!resolve val Boolean active;

	@GenModel(documentation="A name associated with the individual.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val HumanName[*] name;

	@GenModel(documentation="A contact detail (e.g. a telephone number or an email address) by which the individual may be contacted.")
	@ExtendedMetaData(kind="element", name="telecom", namespace="##targetNamespace")
	!resolve val ContactPoint[*] telecom;

	@GenModel(documentation="Administrative Gender - the gender that the patient is considered to have for administration and record keeping purposes.")
	@ExtendedMetaData(kind="element", name="gender", namespace="##targetNamespace")
	!resolve val AdministrativeGender gender;

	@GenModel(documentation="The date of birth for the individual.")
	@ExtendedMetaData(kind="element", name="birthDate", namespace="##targetNamespace")
	!resolve val Date birthDate;

	@ExtendedMetaData(kind="element", name="deceasedBoolean", namespace="##targetNamespace")
	!resolve val Boolean deceasedBoolean;

	@ExtendedMetaData(kind="element", name="deceasedDateTime", namespace="##targetNamespace")
	!resolve val DateTime deceasedDateTime;

	@GenModel(documentation="An address for the individual.")
	@ExtendedMetaData(kind="element", name="address", namespace="##targetNamespace")
	!resolve val Address[*] address;

	@GenModel(documentation="This field contains a patient's most recent marital (civil) status.")
	@ExtendedMetaData(kind="element", name="maritalStatus", namespace="##targetNamespace")
	!resolve val CodeableConcept maritalStatus;

	@ExtendedMetaData(kind="element", name="multipleBirthBoolean", namespace="##targetNamespace")
	!resolve val Boolean multipleBirthBoolean;

	@ExtendedMetaData(kind="element", name="multipleBirthInteger", namespace="##targetNamespace")
	!resolve val Integer multipleBirthInteger;

	@GenModel(documentation="Image of the patient.")
	@ExtendedMetaData(kind="element", name="photo", namespace="##targetNamespace")
	!resolve val Attachment[*] photo;

	@GenModel(documentation="A contact party (e.g. guardian, partner, friend) for the patient.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val PatientContact[*] contact;

	@GenModel(documentation="A language which may be used to communicate with the patient about his or her health.")
	@ExtendedMetaData(kind="element", name="communication", namespace="##targetNamespace")
	!resolve val PatientCommunication[*] communication;

	@GenModel(documentation="Patient's nominated care provider.")
	@ExtendedMetaData(kind="element", name="generalPractitioner", namespace="##targetNamespace")
	!resolve val Reference[*] generalPractitioner;

	@GenModel(documentation="Organization that is the custodian of the patient record.")
	@ExtendedMetaData(kind="element", name="managingOrganization", namespace="##targetNamespace")
	!resolve val Reference managingOrganization;

	@GenModel(documentation="Link to a Patient or RelatedPerson resource that concerns the same actual individual.")
	@ExtendedMetaData(kind="element", name="link", namespace="##targetNamespace")
	!resolve val PatientLink[*] link;
}

@GenModel(documentation="Demographics and other administrative information about an individual or animal receiving care or other health-related services.")
@ExtendedMetaData(name="Patient.Communication", kind="elementOnly")
class PatientCommunication extends BackboneElement {

	@GenModel(documentation="The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. \"en\" for English, or \"en-US\" for American English versus \"en-AU\" for Australian English.")
	@ExtendedMetaData(kind="element", name="language", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] language;

	@GenModel(documentation="Indicates whether or not the patient prefers this language (over other languages he masters up a certain level).")
	@ExtendedMetaData(kind="element", name="preferred", namespace="##targetNamespace")
	!resolve val Boolean preferred;
}

@GenModel(documentation="Demographics and other administrative information about an individual or animal receiving care or other health-related services.")
@ExtendedMetaData(name="Patient.Contact", kind="elementOnly")
class PatientContact extends BackboneElement {

	@GenModel(documentation="The nature of the relationship between the patient and the contact person.")
	@ExtendedMetaData(kind="element", name="relationship", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] relationship;

	@GenModel(documentation="A name associated with the contact person.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val HumanName name;

	@GenModel(documentation="A contact detail for the person, e.g. a telephone number or an email address.")
	@ExtendedMetaData(kind="element", name="telecom", namespace="##targetNamespace")
	!resolve val ContactPoint[*] telecom;

	@GenModel(documentation="Address for the contact person.")
	@ExtendedMetaData(kind="element", name="address", namespace="##targetNamespace")
	!resolve val Address address;

	@GenModel(documentation="Administrative Gender - the gender that the contact person is considered to have for administration and record keeping purposes.")
	@ExtendedMetaData(kind="element", name="gender", namespace="##targetNamespace")
	!resolve val AdministrativeGender gender;

	@GenModel(documentation="Organization on behalf of which the contact is acting or for which the contact is working.")
	@ExtendedMetaData(kind="element", name="organization", namespace="##targetNamespace")
	!resolve val Reference organization;

	@GenModel(documentation="The period during which this contact person or organization is valid to be contacted relating to this patient.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;
}

@GenModel(documentation="Demographics and other administrative information about an individual or animal receiving care or other health-related services.")
@ExtendedMetaData(name="Patient.Link", kind="elementOnly")
class PatientLink extends BackboneElement {

	@GenModel(documentation="Link to a Patient or RelatedPerson resource that concerns the same actual individual.")
	@ExtendedMetaData(kind="element", name="other", namespace="##targetNamespace")
	!resolve val Reference[1] other;

	@GenModel(documentation="The type of link between this patient resource and another patient resource.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val LinkType[1] type;
}

@GenModel(documentation="This resource provides the status of the payment for goods and services rendered, and the request and response resource references.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="PaymentNotice", kind="elementOnly")
class PaymentNotice extends DomainResource {

	@GenModel(documentation="A unique identifier assigned to this payment notice.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The status of the resource instance.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val FinancialResourceStatusCodes[1] status;

	@GenModel(documentation="Reference of resource for which payment is being made.")
	@ExtendedMetaData(kind="element", name="request", namespace="##targetNamespace")
	!resolve val Reference request;

	@GenModel(documentation="Reference of response to resource for which payment is being made.")
	@ExtendedMetaData(kind="element", name="response", namespace="##targetNamespace")
	!resolve val Reference response;

	@GenModel(documentation="The date when this resource was created.")
	@ExtendedMetaData(kind="element", name="created", namespace="##targetNamespace")
	!resolve val DateTime[1] created;

	@GenModel(documentation="The party who reports the payment notice.")
	@ExtendedMetaData(kind="element", name="reporter", namespace="##targetNamespace")
	!resolve val Reference reporter;

	@GenModel(documentation="A reference to the payment which is the subject of this notice.")
	@ExtendedMetaData(kind="element", name="payment", namespace="##targetNamespace")
	!resolve val Reference payment;

	@GenModel(documentation="The date when the above payment action occurred.")
	@ExtendedMetaData(kind="element", name="paymentDate", namespace="##targetNamespace")
	!resolve val Date paymentDate;

	@GenModel(documentation="The party who will receive or has received payment that is the subject of this notification.")
	@ExtendedMetaData(kind="element", name="payee", namespace="##targetNamespace")
	!resolve val Reference payee;

	@GenModel(documentation="The party who is notified of the payment status.")
	@ExtendedMetaData(kind="element", name="recipient", namespace="##targetNamespace")
	!resolve val Reference[1] recipient;

	@GenModel(documentation="The amount sent to the payee.")
	@ExtendedMetaData(kind="element", name="amount", namespace="##targetNamespace")
	!resolve val Money[1] amount;

	@GenModel(documentation="A code indicating whether payment has been sent or cleared.")
	@ExtendedMetaData(kind="element", name="paymentStatus", namespace="##targetNamespace")
	!resolve val CodeableConcept paymentStatus;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="PaymentOutcome", kind="elementOnly")
class PaymentOutcome extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr PaymentOutcomeEnum value;
}

@ExtendedMetaData(name="PaymentOutcomeEnum")
enum PaymentOutcomeEnum {

	@GenModel(documentation="Queued")
	queued = 0;

	@GenModel(documentation="Processing Complete")
	complete = 1;

	@GenModel(documentation="Error")
	error = 2;

	@GenModel(documentation="Partial Processing")
	partial = 3;
}

@ExtendedMetaData(name="PaymentOutcomeEnum:Object", baseType="PaymentOutcomeEnum")
datatype PaymentOutcomeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="This resource provides the details including amount of a payment and allocates the payment items being paid.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="PaymentReconciliation", kind="elementOnly")
class PaymentReconciliation extends DomainResource {

	@GenModel(documentation="A unique identifier assigned to this payment reconciliation.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Code to indicate the nature of the payment such as payment, adjustment.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@GenModel(documentation="The status of the resource instance.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val FinancialResourceStatusCodes[1] status;

	@GenModel(documentation="The workflow or activity which gave rise to or during which the payment ocurred such as a kiosk, deposit on account, periodic payment etc.")
	@ExtendedMetaData(kind="element", name="kind", namespace="##targetNamespace")
	!resolve val CodeableConcept kind;

	@GenModel(documentation="The period of time for which payments have been gathered into this bulk payment for settlement.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;

	@GenModel(documentation="The date when the resource was created.")
	@ExtendedMetaData(kind="element", name="created", namespace="##targetNamespace")
	!resolve val DateTime[1] created;

	@GenModel(documentation="Payment enterer if not the actual payment issuer.")
	@ExtendedMetaData(kind="element", name="enterer", namespace="##targetNamespace")
	!resolve val Reference enterer;

	@GenModel(documentation="The type of the source such as patient or insurance.")
	@ExtendedMetaData(kind="element", name="issuerType", namespace="##targetNamespace")
	!resolve val CodeableConcept issuerType;

	@GenModel(documentation="The party who generated the payment.")
	@ExtendedMetaData(kind="element", name="paymentIssuer", namespace="##targetNamespace")
	!resolve val Reference paymentIssuer;

	@GenModel(documentation="Original request resource reference.")
	@ExtendedMetaData(kind="element", name="request", namespace="##targetNamespace")
	!resolve val Reference request;

	@GenModel(documentation="The practitioner who is responsible for the services rendered to the patient.")
	@ExtendedMetaData(kind="element", name="requestor", namespace="##targetNamespace")
	!resolve val Reference requestor;

	@GenModel(documentation="The outcome of a request for a reconciliation.")
	@ExtendedMetaData(kind="element", name="outcome", namespace="##targetNamespace")
	!resolve val PaymentOutcome outcome;

	@GenModel(documentation="A human readable description of the status of the request for the reconciliation.")
	@ExtendedMetaData(kind="element", name="disposition", namespace="##targetNamespace")
	!resolve val String disposition;

	@GenModel(documentation="The date of payment as indicated on the financial instrument.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val Date[1] date;

	@GenModel(documentation="The location of the site or device for electronic transfers or physical location for cash payments.")
	@ExtendedMetaData(kind="element", name="location", namespace="##targetNamespace")
	!resolve val Reference location;

	@GenModel(documentation="The means of payment such as check, card cash, or electronic funds transfer.")
	@ExtendedMetaData(kind="element", name="method", namespace="##targetNamespace")
	!resolve val CodeableConcept method;

	@GenModel(documentation="The card brand such as debit, Visa, Amex etc. used if a card is the method of payment.")
	@ExtendedMetaData(kind="element", name="cardBrand", namespace="##targetNamespace")
	!resolve val String cardBrand;

	@GenModel(documentation="A portion of the account number, often the last 4 digits, used for verification not charging purposes.")
	@ExtendedMetaData(kind="element", name="accountNumber", namespace="##targetNamespace")
	!resolve val String accountNumber;

	@GenModel(documentation="The year and month (YYYY-MM) when the instrument, typically card, expires.")
	@ExtendedMetaData(kind="element", name="expirationDate", namespace="##targetNamespace")
	!resolve val Date expirationDate;

	@GenModel(documentation="The name of the card processor, etf processor, bank for checks.")
	@ExtendedMetaData(kind="element", name="processor", namespace="##targetNamespace")
	!resolve val String processor;

	@GenModel(documentation="The check number, eft reference, car processor reference.")
	@ExtendedMetaData(kind="element", name="referenceNumber", namespace="##targetNamespace")
	!resolve val String referenceNumber;

	@GenModel(documentation="An alphanumeric issued by the processor to confirm the successful issuance of payment.")
	@ExtendedMetaData(kind="element", name="authorization", namespace="##targetNamespace")
	!resolve val String authorization;

	@GenModel(documentation="The amount offered by the issuer, typically applies to cash when the issuer provides an amount in bank note denominations equal to or excess of the amount actually being paid.")
	@ExtendedMetaData(kind="element", name="tenderedAmount", namespace="##targetNamespace")
	!resolve val Money tenderedAmount;

	@GenModel(documentation="The amount returned by the receiver which is excess to the amount payable, often referred to as 'change'.")
	@ExtendedMetaData(kind="element", name="returnedAmount", namespace="##targetNamespace")
	!resolve val Money returnedAmount;

	@GenModel(documentation="Total payment amount as indicated on the financial instrument.")
	@ExtendedMetaData(kind="element", name="amount", namespace="##targetNamespace")
	!resolve val Money[1] amount;

	@GenModel(documentation="Issuer's unique identifier for the payment instrument.")
	@ExtendedMetaData(kind="element", name="paymentIdentifier", namespace="##targetNamespace")
	!resolve val Identifier paymentIdentifier;

	@GenModel(documentation="Distribution of the payment amount for a previously acknowledged payable.")
	@ExtendedMetaData(kind="element", name="allocation", namespace="##targetNamespace")
	!resolve val PaymentReconciliationAllocation[*] allocation;

	@GenModel(documentation="A code for the form to be used for printing the content.")
	@ExtendedMetaData(kind="element", name="formCode", namespace="##targetNamespace")
	!resolve val CodeableConcept formCode;

	@GenModel(documentation="A note that describes or explains the processing in a human readable form.")
	@ExtendedMetaData(kind="element", name="processNote", namespace="##targetNamespace")
	!resolve val PaymentReconciliationProcessNote[*] processNote;
}

@GenModel(documentation="This resource provides the details including amount of a payment and allocates the payment items being paid.")
@ExtendedMetaData(name="PaymentReconciliation.Allocation", kind="elementOnly")
class PaymentReconciliationAllocation extends BackboneElement {

	@GenModel(documentation="Unique identifier for the current payment item for the referenced payable.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier identifier;

	@GenModel(documentation="Unique identifier for the prior payment item for the referenced payable.")
	@ExtendedMetaData(kind="element", name="predecessor", namespace="##targetNamespace")
	!resolve val Identifier predecessor;

	@GenModel(documentation="Specific resource to which the payment/adjustment/advance applies.")
	@ExtendedMetaData(kind="element", name="target", namespace="##targetNamespace")
	!resolve val Reference target;

	@ExtendedMetaData(kind="element", name="targetItemString", namespace="##targetNamespace")
	!resolve val String targetItemString;

	@ExtendedMetaData(kind="element", name="targetItemIdentifier", namespace="##targetNamespace")
	!resolve val Identifier targetItemIdentifier;

	@ExtendedMetaData(kind="element", name="targetItemPositiveInt", namespace="##targetNamespace")
	!resolve val PositiveInt targetItemPositiveInt;

	@GenModel(documentation="The Encounter to which this payment applies, may be completed by the receiver, used for search.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@GenModel(documentation="The Account to which this payment applies, may be completed by the receiver, used for search.")
	@ExtendedMetaData(kind="element", name="account", namespace="##targetNamespace")
	!resolve val Reference account;

	@GenModel(documentation="Code to indicate the nature of the payment.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="The party which submitted the claim or financial transaction.")
	@ExtendedMetaData(kind="element", name="submitter", namespace="##targetNamespace")
	!resolve val Reference submitter;

	@GenModel(documentation="A resource, such as a ClaimResponse, which contains a commitment to payment.")
	@ExtendedMetaData(kind="element", name="response", namespace="##targetNamespace")
	!resolve val Reference response;

	@GenModel(documentation="The date from the response resource containing a commitment to pay.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val Date date;

	@GenModel(documentation="A reference to the individual who is responsible for inquiries regarding the response and its payment.")
	@ExtendedMetaData(kind="element", name="responsible", namespace="##targetNamespace")
	!resolve val Reference responsible;

	@GenModel(documentation="The party which is receiving the payment.")
	@ExtendedMetaData(kind="element", name="payee", namespace="##targetNamespace")
	!resolve val Reference payee;

	@GenModel(documentation="The monetary amount allocated from the total payment to the payable.")
	@ExtendedMetaData(kind="element", name="amount", namespace="##targetNamespace")
	!resolve val Money amount;
}

@GenModel(documentation="This resource provides the details including amount of a payment and allocates the payment items being paid.")
@ExtendedMetaData(name="PaymentReconciliation.ProcessNote", kind="elementOnly")
class PaymentReconciliationProcessNote extends BackboneElement {

	@GenModel(documentation="The business purpose of the note text.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val NoteType type;

	@GenModel(documentation="The explanation or description associated with the processing.")
	@ExtendedMetaData(kind="element", name="text", namespace="##targetNamespace")
	!resolve val String text;
}

@GenModel(documentation="A time period defined by a start and end date and optionally time.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="Period", kind="elementOnly")
class Period extends DataType {

	@GenModel(documentation="The start of the period. The boundary is inclusive.")
	@ExtendedMetaData(kind="element", name="start", namespace="##targetNamespace")
	!resolve val DateTime start;

	@GenModel(documentation="The end of the period. If the end of the period is missing, it means no end was known or planned at the time the instance was created. The start may be in the past, and the end date in the future, which means that period is expected/planned to end at that time.")
	@ExtendedMetaData(kind="element", name="end", namespace="##targetNamespace")
	!resolve val DateTime end;
}

@GenModel(documentation="Permission resource holds access rules for a given data and context.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Permission", kind="elementOnly")
class Permission extends DomainResource {

	@GenModel(documentation="Status.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PermissionStatus[1] status;

	@GenModel(documentation="The person or entity that asserts the permission.")
	@ExtendedMetaData(kind="element", name="asserter", namespace="##targetNamespace")
	!resolve val Reference asserter;

	@GenModel(documentation="The date that permission was asserted.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime[*] date;

	@GenModel(documentation="The period in which the permission is active.")
	@ExtendedMetaData(kind="element", name="validity", namespace="##targetNamespace")
	!resolve val Period validity;

	@GenModel(documentation="The asserted justification for using the data.")
	@ExtendedMetaData(kind="element", name="justification", namespace="##targetNamespace")
	!resolve val PermissionJustification justification;

	@GenModel(documentation="Defines a procedure for arriving at an access decision given the set of rules.")
	@ExtendedMetaData(kind="element", name="combining", namespace="##targetNamespace")
	!resolve val PermissionRuleCombining[1] combining;

	@GenModel(documentation="A set of rules.")
	@ExtendedMetaData(kind="element", name="rule", namespace="##targetNamespace")
	!resolve val PermissionRule[*] rule;
}

@GenModel(documentation="Permission resource holds access rules for a given data and context.")
@ExtendedMetaData(name="Permission.Activity", kind="elementOnly")
class PermissionActivity extends BackboneElement {

	@GenModel(documentation="The actor(s) authorized for the defined activity.")
	@ExtendedMetaData(kind="element", name="actor", namespace="##targetNamespace")
	!resolve val Reference[*] actor;

	@GenModel(documentation="Actions controlled by this Rule.")
	@ExtendedMetaData(kind="element", name="action", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] action;

	@GenModel(documentation="The purpose for which the permission is given.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] purpose;
}

@GenModel(documentation="Permission resource holds access rules for a given data and context.")
@ExtendedMetaData(name="Permission.Data", kind="elementOnly")
class PermissionData extends BackboneElement {

	@GenModel(documentation="Explicit FHIR Resource references.")
	@ExtendedMetaData(kind="element", name="resource", namespace="##targetNamespace")
	!resolve val PermissionResource[*] resource;

	@GenModel(documentation="The data in scope are those with the given codes present in that data .meta.security element.")
	@ExtendedMetaData(kind="element", name="security", namespace="##targetNamespace")
	!resolve val Coding[*] security;

	@GenModel(documentation="Clinical or Operational Relevant period of time that bounds the data controlled by this rule.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period[*] period;

	@GenModel(documentation="Used when other data selection elements are insufficient.")
	@ExtendedMetaData(kind="element", name="expression", namespace="##targetNamespace")
	!resolve val Expression expression;
}

@GenModel(documentation="Permission resource holds access rules for a given data and context.")
@ExtendedMetaData(name="Permission.Justification", kind="elementOnly")
class PermissionJustification extends BackboneElement {

	@GenModel(documentation="This would be a codeableconcept, or a coding, which can be constrained to , for example, the 6 grounds for processing in GDPR.")
	@ExtendedMetaData(kind="element", name="basis", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] basis;

	@GenModel(documentation="Justifing rational.")
	@ExtendedMetaData(kind="element", name="evidence", namespace="##targetNamespace")
	!resolve val Reference[*] evidence;
}

@GenModel(documentation="Permission resource holds access rules for a given data and context.")
@ExtendedMetaData(name="Permission.Resource", kind="elementOnly")
class PermissionResource extends BackboneElement {

	@GenModel(documentation="How the resource reference is interpreted when testing consent restrictions.")
	@ExtendedMetaData(kind="element", name="meaning", namespace="##targetNamespace")
	!resolve val ConsentDataMeaning[1] meaning;

	@GenModel(documentation="A reference to a specific resource that defines which resources are covered by this consent.")
	@ExtendedMetaData(kind="element", name="reference", namespace="##targetNamespace")
	!resolve val Reference[1] reference;
}

@GenModel(documentation="Permission resource holds access rules for a given data and context.")
@ExtendedMetaData(name="Permission.Rule", kind="elementOnly")
class PermissionRule extends BackboneElement {

	@GenModel(documentation="deny | permit.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val ConsentProvisionType type;

	@GenModel(documentation="A description or definition of which activities are allowed to be done on the data.")
	@ExtendedMetaData(kind="element", name="data", namespace="##targetNamespace")
	!resolve val PermissionData[*] data;

	@GenModel(documentation="A description or definition of which activities are allowed to be done on the data.")
	@ExtendedMetaData(kind="element", name="activity", namespace="##targetNamespace")
	!resolve val PermissionActivity[*] activity;

	@GenModel(documentation="What limits apply to the use of the data.")
	@ExtendedMetaData(kind="element", name="limit", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] limit;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="PermissionRuleCombining", kind="elementOnly")
class PermissionRuleCombining extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr PermissionRuleCombiningEnum value;
}

@ExtendedMetaData(name="PermissionRuleCombiningEnum")
enum PermissionRuleCombiningEnum {

	@GenModel(documentation="Deny-overrides")
	denyOverrides = 0;

	@GenModel(documentation="Permit-overrides")
	permitOverrides = 1;

	@GenModel(documentation="Ordered-deny-overrides")
	orderedDenyOverrides = 2;

	@GenModel(documentation="Ordered-permit-overrides")
	orderedPermitOverrides = 3;

	@GenModel(documentation="Deny-unless-permit")
	denyUnlessPermit = 4;

	@GenModel(documentation="Permit-unless-deny")
	permitUnlessDeny = 5;
}

@ExtendedMetaData(name="PermissionRuleCombiningEnum:Object", baseType="PermissionRuleCombiningEnum")
datatype PermissionRuleCombiningEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="PermissionStatus", kind="elementOnly")
class PermissionStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr PermissionStatusEnum value;
}

@ExtendedMetaData(name="PermissionStatusEnum")
enum PermissionStatusEnum {

	@GenModel(documentation="Active")
	active = 0;

	@GenModel(documentation="Entered in Error")
	enteredInError = 1;

	@GenModel(documentation="Draft")
	draft = 2;

	@GenModel(documentation="Rejected")
	rejected = 3;
}

@ExtendedMetaData(name="PermissionStatusEnum:Object", baseType="PermissionStatusEnum")
datatype PermissionStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="Demographics and administrative information about a person independent of a specific health-related context.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Person", kind="elementOnly")
class Person extends DomainResource {

	@GenModel(documentation="Identifier for a person within a particular scope.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Whether this person's record is in active use.")
	@ExtendedMetaData(kind="element", name="active", namespace="##targetNamespace")
	!resolve val Boolean active;

	@GenModel(documentation="A name associated with the person.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val HumanName[*] name;

	@GenModel(documentation="A contact detail for the person, e.g. a telephone number or an email address.")
	@ExtendedMetaData(kind="element", name="telecom", namespace="##targetNamespace")
	!resolve val ContactPoint[*] telecom;

	@GenModel(documentation="Administrative Gender.")
	@ExtendedMetaData(kind="element", name="gender", namespace="##targetNamespace")
	!resolve val AdministrativeGender gender;

	@GenModel(documentation="The birth date for the person.")
	@ExtendedMetaData(kind="element", name="birthDate", namespace="##targetNamespace")
	!resolve val Date birthDate;

	@ExtendedMetaData(kind="element", name="deceasedBoolean", namespace="##targetNamespace")
	!resolve val Boolean deceasedBoolean;

	@ExtendedMetaData(kind="element", name="deceasedDateTime", namespace="##targetNamespace")
	!resolve val DateTime deceasedDateTime;

	@GenModel(documentation="One or more addresses for the person.")
	@ExtendedMetaData(kind="element", name="address", namespace="##targetNamespace")
	!resolve val Address[*] address;

	@GenModel(documentation="This field contains a person's most recent marital (civil) status.")
	@ExtendedMetaData(kind="element", name="maritalStatus", namespace="##targetNamespace")
	!resolve val CodeableConcept maritalStatus;

	@GenModel(documentation="An image that can be displayed as a thumbnail of the person to enhance the identification of the individual.")
	@ExtendedMetaData(kind="element", name="photo", namespace="##targetNamespace")
	!resolve val Attachment[*] photo;

	@GenModel(documentation="A language which may be used to communicate with the person about his or her health.")
	@ExtendedMetaData(kind="element", name="communication", namespace="##targetNamespace")
	!resolve val PersonCommunication[*] communication;

	@GenModel(documentation="The organization that is the custodian of the person record.")
	@ExtendedMetaData(kind="element", name="managingOrganization", namespace="##targetNamespace")
	!resolve val Reference managingOrganization;

	@GenModel(documentation="Link to a resource that concerns the same actual person.")
	@ExtendedMetaData(kind="element", name="link", namespace="##targetNamespace")
	!resolve val PersonLink[*] link;
}

@GenModel(documentation="Demographics and administrative information about a person independent of a specific health-related context.")
@ExtendedMetaData(name="Person.Communication", kind="elementOnly")
class PersonCommunication extends BackboneElement {

	@GenModel(documentation="The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. \"en\" for English, or \"en-US\" for American English versus \"en-AU\" for Australian English.")
	@ExtendedMetaData(kind="element", name="language", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] language;

	@GenModel(documentation="Indicates whether or not the person prefers this language (over other languages he masters up a certain level).")
	@ExtendedMetaData(kind="element", name="preferred", namespace="##targetNamespace")
	!resolve val Boolean preferred;
}

@GenModel(documentation="Demographics and administrative information about a person independent of a specific health-related context.")
@ExtendedMetaData(name="Person.Link", kind="elementOnly")
class PersonLink extends BackboneElement {

	@GenModel(documentation="The resource to which this actual person is associated.")
	@ExtendedMetaData(kind="element", name="target", namespace="##targetNamespace")
	!resolve val Reference[1] target;

	@GenModel(documentation="Level of assurance that this link is associated with the target resource.")
	@ExtendedMetaData(kind="element", name="assurance", namespace="##targetNamespace")
	!resolve val IdentityAssuranceLevel assurance;
}

@GenModel(documentation="This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical and non-clinical artifacts such as clinical decision support rules, order sets, protocols, and drug quality specifications.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="PlanDefinition", kind="elementOnly")
class PlanDefinition extends MetadataResource {

	@GenModel(documentation="An absolute URI that is used to identify this plan definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this plan definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the plan definition is stored on different servers.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri url;

	@GenModel(documentation="A formal identifier that is used to identify this plan definition when it is represented in other formats, or referenced in a specification, model, design or an instance.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The identifier that is used to identify this version of the plan definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the plan definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@ExtendedMetaData(kind="element", name="versionAlgorithmString", namespace="##targetNamespace")
	!resolve val String versionAlgorithmString;

	@ExtendedMetaData(kind="element", name="versionAlgorithmCoding", namespace="##targetNamespace")
	!resolve val Coding versionAlgorithmCoding;

	@GenModel(documentation="A natural language name identifying the plan definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="A short, descriptive, user-friendly title for the plan definition.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="An explanatory or alternate title for the plan definition giving additional information about its content.")
	@ExtendedMetaData(kind="element", name="subtitle", namespace="##targetNamespace")
	!resolve val String subtitle;

	@GenModel(documentation="A high-level category for the plan definition that distinguishes the kinds of systems that would be interested in the plan definition.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="The status of this plan definition. Enables tracking the life-cycle of the content.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="A Boolean value to indicate that this plan definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.")
	@ExtendedMetaData(kind="element", name="experimental", namespace="##targetNamespace")
	!resolve val Boolean experimental;

	@ExtendedMetaData(kind="element", name="subjectCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept subjectCodeableConcept;

	@ExtendedMetaData(kind="element", name="subjectReference", namespace="##targetNamespace")
	!resolve val Reference subjectReference;

	@ExtendedMetaData(kind="element", name="subjectCanonical", namespace="##targetNamespace")
	!resolve val Canonical subjectCanonical;

	@GenModel(documentation="The date  (and optionally time) when the plan definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the plan definition changes.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="The name of the organization or individual responsible for the release and ongoing maintenance of the plan definition.")
	@ExtendedMetaData(kind="element", name="publisher", namespace="##targetNamespace")
	!resolve val String publisher;

	@GenModel(documentation="Contact details to assist a user in finding and communicating with the publisher.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactDetail[*] contact;

	@GenModel(documentation="A free text natural language description of the plan definition from a consumer's perspective.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate plan definition instances.")
	@ExtendedMetaData(kind="element", name="useContext", namespace="##targetNamespace")
	!resolve val UsageContext[*] useContext;

	@GenModel(documentation="A legal or geographic region in which the plan definition is intended to be used.")
	@ExtendedMetaData(kind="element", name="jurisdiction", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] jurisdiction;

	@GenModel(documentation="Explanation of why this plan definition is needed and why it has been designed as it has.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val Markdown purpose;

	@GenModel(documentation="A detailed description of how the plan definition is used from a clinical perspective.")
	@ExtendedMetaData(kind="element", name="usage", namespace="##targetNamespace")
	!resolve val Markdown usage;

	@GenModel(documentation="A copyright statement relating to the plan definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the plan definition.")
	@ExtendedMetaData(kind="element", name="copyright", namespace="##targetNamespace")
	!resolve val Markdown copyright;

	@GenModel(documentation="A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').")
	@ExtendedMetaData(kind="element", name="copyrightLabel", namespace="##targetNamespace")
	!resolve val String copyrightLabel;

	@GenModel(documentation="The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.")
	@ExtendedMetaData(kind="element", name="approvalDate", namespace="##targetNamespace")
	!resolve val Date approvalDate;

	@GenModel(documentation="The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.")
	@ExtendedMetaData(kind="element", name="lastReviewDate", namespace="##targetNamespace")
	!resolve val Date lastReviewDate;

	@GenModel(documentation="The period during which the plan definition content was or is planned to be in active use.")
	@ExtendedMetaData(kind="element", name="effectivePeriod", namespace="##targetNamespace")
	!resolve val Period effectivePeriod;

	@GenModel(documentation="Descriptive topics related to the content of the plan definition. Topics provide a high-level categorization of the definition that can be useful for filtering and searching.")
	@ExtendedMetaData(kind="element", name="topic", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] topic;

	@GenModel(documentation="An individiual or organization primarily involved in the creation and maintenance of the content.")
	@ExtendedMetaData(kind="element", name="author", namespace="##targetNamespace")
	!resolve val ContactDetail[*] author;

	@GenModel(documentation="An individual or organization primarily responsible for internal coherence of the content.")
	@ExtendedMetaData(kind="element", name="editor", namespace="##targetNamespace")
	!resolve val ContactDetail[*] editor;

	@GenModel(documentation="An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the content.")
	@ExtendedMetaData(kind="element", name="reviewer", namespace="##targetNamespace")
	!resolve val ContactDetail[*] reviewer;

	@GenModel(documentation="An individual or organization asserted by the publisher to be responsible for officially endorsing the content for use in some setting.")
	@ExtendedMetaData(kind="element", name="endorser", namespace="##targetNamespace")
	!resolve val ContactDetail[*] endorser;

	@GenModel(documentation="Related artifacts such as additional documentation, justification, or bibliographic references.")
	@ExtendedMetaData(kind="element", name="relatedArtifact", namespace="##targetNamespace")
	!resolve val RelatedArtifact[*] relatedArtifact;

	@GenModel(documentation="A reference to a Library resource containing any formal logic used by the plan definition.")
	@ExtendedMetaData(kind="element", name="library", namespace="##targetNamespace")
	!resolve val Canonical[*] library;

	@GenModel(documentation="A goal describes an expected outcome that activities within the plan are intended to achieve. For example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, meeting the acceptance criteria for a test as specified by a quality specification, etc.")
	@ExtendedMetaData(kind="element", name="goal", namespace="##targetNamespace")
	!resolve val PlanDefinitionGoal[*] goal;

	@GenModel(documentation="Actors represent the individuals or groups involved in the execution of the defined set of activities.")
	@ExtendedMetaData(kind="element", name="actor", namespace="##targetNamespace")
	!resolve val PlanDefinitionActor[*] actor;

	@GenModel(documentation="An action or group of actions to be taken as part of the plan. For example, in clinical care, an action would be to prescribe a particular indicated medication, or perform a particular test as appropriate. In pharmaceutical quality, an action would be the test that needs to be performed on a drug product as defined in the quality specification.")
	@ExtendedMetaData(kind="element", name="action", namespace="##targetNamespace")
	!resolve val PlanDefinitionAction[*] action;

	@ExtendedMetaData(kind="element", name="asNeededBoolean", namespace="##targetNamespace")
	!resolve val Boolean asNeededBoolean;

	@ExtendedMetaData(kind="element", name="asNeededCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept asNeededCodeableConcept;
}

@GenModel(documentation="This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical and non-clinical artifacts such as clinical decision support rules, order sets, protocols, and drug quality specifications.")
@ExtendedMetaData(name="PlanDefinition.Action", kind="elementOnly")
class PlanDefinitionAction extends BackboneElement {

	@GenModel(documentation="An identifier that is unique within the PlanDefinition to allow linkage within the realized CarePlan and/or RequestOrchestration.")
	@ExtendedMetaData(kind="element", name="linkId", namespace="##targetNamespace")
	!resolve val String linkId;

	@GenModel(documentation="A user-visible prefix for the action. For example a section or item numbering such as 1. or A.")
	@ExtendedMetaData(kind="element", name="prefix", namespace="##targetNamespace")
	!resolve val String prefix;

	@GenModel(documentation="The textual description of the action displayed to a user. For example, when the action is a test to be performed, the title would be the title of the test such as Assay by HPLC.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="A brief description of the action used to provide a summary to display to the user.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="A text equivalent of the action to be performed. This provides a human-interpretable description of the action when the definition is consumed by a system that might not be capable of interpreting it dynamically.")
	@ExtendedMetaData(kind="element", name="textEquivalent", namespace="##targetNamespace")
	!resolve val Markdown textEquivalent;

	@GenModel(documentation="Indicates how quickly the action should be addressed with respect to other actions.")
	@ExtendedMetaData(kind="element", name="priority", namespace="##targetNamespace")
	!resolve val RequestPriority priority;

	@GenModel(documentation="A code that provides a meaning, grouping, or classification for the action or action group. For example, a section may have a LOINC code for the section of a documentation template. In pharmaceutical quality, an action (Test) such as pH could be classified as a physical property.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@GenModel(documentation="A description of why this action is necessary or appropriate.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] reason;

	@GenModel(documentation="Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources.")
	@ExtendedMetaData(kind="element", name="documentation", namespace="##targetNamespace")
	!resolve val RelatedArtifact[*] documentation;

	@GenModel(documentation="Identifies goals that this action supports. The reference must be to a goal element defined within this plan definition. In pharmaceutical quality, a goal represents acceptance criteria (Goal) for a given action (Test), so the goalId would be the unique id of a defined goal element establishing the acceptance criteria for the action.")
	@ExtendedMetaData(kind="element", name="goalId", namespace="##targetNamespace")
	!resolve val Id[*] goalId;

	@ExtendedMetaData(kind="element", name="subjectCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept subjectCodeableConcept;

	@ExtendedMetaData(kind="element", name="subjectReference", namespace="##targetNamespace")
	!resolve val Reference subjectReference;

	@ExtendedMetaData(kind="element", name="subjectCanonical", namespace="##targetNamespace")
	!resolve val Canonical subjectCanonical;

	@GenModel(documentation="A description of when the action should be triggered. When multiple triggers are specified on an action, any triggering event invokes the action.")
	@ExtendedMetaData(kind="element", name="trigger", namespace="##targetNamespace")
	!resolve val TriggerDefinition[*] trigger;

	@GenModel(documentation="An expression that describes applicability criteria or start/stop conditions for the action.")
	@ExtendedMetaData(kind="element", name="condition", namespace="##targetNamespace")
	!resolve val PlanDefinitionCondition[*] condition;

	@GenModel(documentation="Defines input data requirements for the action.")
	@ExtendedMetaData(kind="element", name="input", namespace="##targetNamespace")
	!resolve val PlanDefinitionInput[*] input;

	@GenModel(documentation="Defines the outputs of the action, if any.")
	@ExtendedMetaData(kind="element", name="output", namespace="##targetNamespace")
	!resolve val PlanDefinitionOutput[*] output;

	@GenModel(documentation="A relationship to another action such as \"before\" or \"30-60 minutes after start of\".")
	@ExtendedMetaData(kind="element", name="relatedAction", namespace="##targetNamespace")
	!resolve val PlanDefinitionRelatedAction[*] relatedAction;

	@ExtendedMetaData(kind="element", name="timingAge", namespace="##targetNamespace")
	!resolve val Age timingAge;

	@ExtendedMetaData(kind="element", name="timingDuration", namespace="##targetNamespace")
	!resolve val Duration timingDuration;

	@ExtendedMetaData(kind="element", name="timingRange", namespace="##targetNamespace")
	!resolve val Range timingRange;

	@ExtendedMetaData(kind="element", name="timingTiming", namespace="##targetNamespace")
	!resolve val Timing timingTiming;

	@GenModel(documentation="Identifies the facility where the action will occur; e.g. home, hospital, specific clinic, etc.")
	@ExtendedMetaData(kind="element", name="location", namespace="##targetNamespace")
	!resolve val CodeableReference location;

	@GenModel(documentation="Indicates who should participate in performing the action described.")
	@ExtendedMetaData(kind="element", name="participant", namespace="##targetNamespace")
	!resolve val PlanDefinitionParticipant[*] participant;

	@GenModel(documentation="The type of action to perform (create, update, remove).")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="Defines the grouping behavior for the action and its children.")
	@ExtendedMetaData(kind="element", name="groupingBehavior", namespace="##targetNamespace")
	!resolve val ActionGroupingBehavior groupingBehavior;

	@GenModel(documentation="Defines the selection behavior for the action and its children.")
	@ExtendedMetaData(kind="element", name="selectionBehavior", namespace="##targetNamespace")
	!resolve val ActionSelectionBehavior selectionBehavior;

	@GenModel(documentation="Defines the required behavior for the action.")
	@ExtendedMetaData(kind="element", name="requiredBehavior", namespace="##targetNamespace")
	!resolve val ActionRequiredBehavior requiredBehavior;

	@GenModel(documentation="Defines whether the action should usually be preselected.")
	@ExtendedMetaData(kind="element", name="precheckBehavior", namespace="##targetNamespace")
	!resolve val ActionPrecheckBehavior precheckBehavior;

	@GenModel(documentation="Defines whether the action can be selected multiple times.")
	@ExtendedMetaData(kind="element", name="cardinalityBehavior", namespace="##targetNamespace")
	!resolve val ActionCardinalityBehavior cardinalityBehavior;

	@ExtendedMetaData(kind="element", name="definitionCanonical", namespace="##targetNamespace")
	!resolve val Canonical definitionCanonical;

	@ExtendedMetaData(kind="element", name="definitionUri", namespace="##targetNamespace")
	!resolve val Uri definitionUri;

	@GenModel(documentation="A reference to a StructureMap resource that defines a transform that can be executed to produce the intent resource using the ActivityDefinition instance as the input.")
	@ExtendedMetaData(kind="element", name="transform", namespace="##targetNamespace")
	!resolve val Canonical transform;

	@GenModel(documentation="Customizations that should be applied to the statically defined resource. For example, if the dosage of a medication must be computed based on the patient's weight, a customization would be used to specify an expression that calculated the weight, and the path on the resource that would contain the result.")
	@ExtendedMetaData(kind="element", name="dynamicValue", namespace="##targetNamespace")
	!resolve val PlanDefinitionDynamicValue[*] dynamicValue;

	@GenModel(documentation="Sub actions that are contained within the action. The behavior of this action determines the functionality of the sub-actions. For example, a selection behavior of at-most-one indicates that of the sub-actions, at most one may be chosen as part of realizing the action definition.")
	@ExtendedMetaData(kind="element", name="action", namespace="##targetNamespace")
	!resolve val PlanDefinitionAction[*] action;
}

@GenModel(documentation="This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical and non-clinical artifacts such as clinical decision support rules, order sets, protocols, and drug quality specifications.")
@ExtendedMetaData(name="PlanDefinition.Actor", kind="elementOnly")
class PlanDefinitionActor extends BackboneElement {

	@GenModel(documentation="A descriptive label for the actor.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="A description of how the actor fits into the overall actions of the plan definition.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The characteristics of the candidates that could serve as the actor.")
	@ExtendedMetaData(kind="element", name="option", namespace="##targetNamespace")
	!resolve val PlanDefinitionOption[+] option;
}

@GenModel(documentation="This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical and non-clinical artifacts such as clinical decision support rules, order sets, protocols, and drug quality specifications.")
@ExtendedMetaData(name="PlanDefinition.Condition", kind="elementOnly")
class PlanDefinitionCondition extends BackboneElement {

	@GenModel(documentation="The kind of condition.")
	@ExtendedMetaData(kind="element", name="kind", namespace="##targetNamespace")
	!resolve val ActionConditionKind[1] kind;

	@GenModel(documentation="An expression that returns true or false, indicating whether the condition is satisfied.")
	@ExtendedMetaData(kind="element", name="expression", namespace="##targetNamespace")
	!resolve val Expression expression;
}

@GenModel(documentation="This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical and non-clinical artifacts such as clinical decision support rules, order sets, protocols, and drug quality specifications.")
@ExtendedMetaData(name="PlanDefinition.DynamicValue", kind="elementOnly")
class PlanDefinitionDynamicValue extends BackboneElement {

	@GenModel(documentation="The path to the element to be customized. This is the path on the resource that will hold the result of the calculation defined by the expression. The specified path SHALL be a FHIRPath resolvable on the specified target type of the ActivityDefinition, and SHALL consist only of identifiers, constant indexers, and a restricted subset of functions. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).")
	@ExtendedMetaData(kind="element", name="path", namespace="##targetNamespace")
	!resolve val String path;

	@GenModel(documentation="An expression specifying the value of the customized element.")
	@ExtendedMetaData(kind="element", name="expression", namespace="##targetNamespace")
	!resolve val Expression expression;
}

@GenModel(documentation="This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical and non-clinical artifacts such as clinical decision support rules, order sets, protocols, and drug quality specifications.")
@ExtendedMetaData(name="PlanDefinition.Goal", kind="elementOnly")
class PlanDefinitionGoal extends BackboneElement {

	@GenModel(documentation="Indicates a category the goal falls within.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept category;

	@GenModel(documentation="Human-readable and/or coded description of a specific desired objective of care, such as \"control blood pressure\" or \"negotiate an obstacle course\" or \"dance with child at wedding\".")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] description;

	@GenModel(documentation="Identifies the expected level of importance associated with reaching/sustaining the defined goal.")
	@ExtendedMetaData(kind="element", name="priority", namespace="##targetNamespace")
	!resolve val CodeableConcept priority;

	@GenModel(documentation="The event after which the goal should begin being pursued.")
	@ExtendedMetaData(kind="element", name="start", namespace="##targetNamespace")
	!resolve val CodeableConcept start;

	@GenModel(documentation="Identifies problems, conditions, issues, or concerns the goal is intended to address.")
	@ExtendedMetaData(kind="element", name="addresses", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] addresses;

	@GenModel(documentation="Didactic or other informational resources associated with the goal that provide further supporting information about the goal. Information resources can include inline text commentary and links to web resources.")
	@ExtendedMetaData(kind="element", name="documentation", namespace="##targetNamespace")
	!resolve val RelatedArtifact[*] documentation;

	@GenModel(documentation="Indicates what should be done and within what timeframe.")
	@ExtendedMetaData(kind="element", name="target", namespace="##targetNamespace")
	!resolve val PlanDefinitionTarget[*] target;
}

@GenModel(documentation="This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical and non-clinical artifacts such as clinical decision support rules, order sets, protocols, and drug quality specifications.")
@ExtendedMetaData(name="PlanDefinition.Input", kind="elementOnly")
class PlanDefinitionInput extends BackboneElement {

	@GenModel(documentation="A human-readable label for the data requirement used to label data flows in BPMN or similar diagrams. Also provides a human readable label when rendering the data requirement that conveys its purpose to human readers.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="Defines the data that is to be provided as input to the action.")
	@ExtendedMetaData(kind="element", name="requirement", namespace="##targetNamespace")
	!resolve val DataRequirement requirement;

	@GenModel(documentation="Points to an existing input or output element that provides data to this input.")
	@ExtendedMetaData(kind="element", name="relatedData", namespace="##targetNamespace")
	!resolve val Id relatedData;
}

@GenModel(documentation="This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical and non-clinical artifacts such as clinical decision support rules, order sets, protocols, and drug quality specifications.")
@ExtendedMetaData(name="PlanDefinition.Option", kind="elementOnly")
class PlanDefinitionOption extends BackboneElement {

	@GenModel(documentation="The type of participant in the action.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val ActionParticipantType type;

	@GenModel(documentation="The type of participant in the action.")
	@ExtendedMetaData(kind="element", name="typeCanonical", namespace="##targetNamespace")
	!resolve val Canonical typeCanonical;

	@GenModel(documentation="The type of participant in the action.")
	@ExtendedMetaData(kind="element", name="typeReference", namespace="##targetNamespace")
	!resolve val Reference typeReference;

	@GenModel(documentation="The role the participant should play in performing the described action.")
	@ExtendedMetaData(kind="element", name="role", namespace="##targetNamespace")
	!resolve val CodeableConcept role;
}

@GenModel(documentation="This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical and non-clinical artifacts such as clinical decision support rules, order sets, protocols, and drug quality specifications.")
@ExtendedMetaData(name="PlanDefinition.Output", kind="elementOnly")
class PlanDefinitionOutput extends BackboneElement {

	@GenModel(documentation="A human-readable label for the data requirement used to label data flows in BPMN or similar diagrams. Also provides a human readable label when rendering the data requirement that conveys its purpose to human readers.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="Defines the data that results as output from the action.")
	@ExtendedMetaData(kind="element", name="requirement", namespace="##targetNamespace")
	!resolve val DataRequirement requirement;

	@GenModel(documentation="Points to an existing input or output element that is results as output from the action.")
	@ExtendedMetaData(kind="element", name="relatedData", namespace="##targetNamespace")
	!resolve val String relatedData;
}

@GenModel(documentation="This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical and non-clinical artifacts such as clinical decision support rules, order sets, protocols, and drug quality specifications.")
@ExtendedMetaData(name="PlanDefinition.Participant", kind="elementOnly")
class PlanDefinitionParticipant extends BackboneElement {

	@GenModel(documentation="A reference to the id element of the actor who will participate in this action.")
	@ExtendedMetaData(kind="element", name="actorId", namespace="##targetNamespace")
	!resolve val String actorId;

	@GenModel(documentation="The type of participant in the action.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val ActionParticipantType type;

	@GenModel(documentation="The type of participant in the action.")
	@ExtendedMetaData(kind="element", name="typeCanonical", namespace="##targetNamespace")
	!resolve val Canonical typeCanonical;

	@GenModel(documentation="The type of participant in the action.")
	@ExtendedMetaData(kind="element", name="typeReference", namespace="##targetNamespace")
	!resolve val Reference typeReference;

	@GenModel(documentation="The role the participant should play in performing the described action.")
	@ExtendedMetaData(kind="element", name="role", namespace="##targetNamespace")
	!resolve val CodeableConcept role;

	@GenModel(documentation="Indicates how the actor will be involved in the action - author, reviewer, witness, etc.")
	@ExtendedMetaData(kind="element", name="function", namespace="##targetNamespace")
	!resolve val CodeableConcept function;
}

@GenModel(documentation="This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical and non-clinical artifacts such as clinical decision support rules, order sets, protocols, and drug quality specifications.")
@ExtendedMetaData(name="PlanDefinition.RelatedAction", kind="elementOnly")
class PlanDefinitionRelatedAction extends BackboneElement {

	@GenModel(documentation="The element id of the target related action.")
	@ExtendedMetaData(kind="element", name="targetId", namespace="##targetNamespace")
	!resolve val Id[1] targetId;

	@GenModel(documentation="The relationship of the start of this action to the related action.")
	@ExtendedMetaData(kind="element", name="relationship", namespace="##targetNamespace")
	!resolve val ActionRelationshipType[1] relationship;

	@GenModel(documentation="The relationship of the end of this action to the related action.")
	@ExtendedMetaData(kind="element", name="endRelationship", namespace="##targetNamespace")
	!resolve val ActionRelationshipType endRelationship;

	@ExtendedMetaData(kind="element", name="offsetDuration", namespace="##targetNamespace")
	!resolve val Duration offsetDuration;

	@ExtendedMetaData(kind="element", name="offsetRange", namespace="##targetNamespace")
	!resolve val Range offsetRange;
}

@GenModel(documentation="This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical and non-clinical artifacts such as clinical decision support rules, order sets, protocols, and drug quality specifications.")
@ExtendedMetaData(name="PlanDefinition.Target", kind="elementOnly")
class PlanDefinitionTarget extends BackboneElement {

	@GenModel(documentation="The parameter whose value is to be tracked, e.g. body weight, blood pressure, or hemoglobin A1c level.")
	@ExtendedMetaData(kind="element", name="measure", namespace="##targetNamespace")
	!resolve val CodeableConcept measure;

	@ExtendedMetaData(kind="element", name="detailQuantity", namespace="##targetNamespace")
	!resolve val Quantity detailQuantity;

	@ExtendedMetaData(kind="element", name="detailRange", namespace="##targetNamespace")
	!resolve val Range detailRange;

	@ExtendedMetaData(kind="element", name="detailCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept detailCodeableConcept;

	@ExtendedMetaData(kind="element", name="detailString", namespace="##targetNamespace")
	!resolve val String detailString;

	@ExtendedMetaData(kind="element", name="detailBoolean", namespace="##targetNamespace")
	!resolve val Boolean detailBoolean;

	@ExtendedMetaData(kind="element", name="detailInteger", namespace="##targetNamespace")
	!resolve val Integer detailInteger;

	@ExtendedMetaData(kind="element", name="detailRatio", namespace="##targetNamespace")
	!resolve val Ratio detailRatio;

	@GenModel(documentation="Indicates the timeframe after the start of the goal in which the goal should be met.")
	@ExtendedMetaData(kind="element", name="due", namespace="##targetNamespace")
	!resolve val Duration due;
}

@GenModel(documentation="An integer with a value that is positive (e.g. >0)
If the element is present, it must have either a @value, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="positiveInt", kind="elementOnly")
class PositiveInt extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	attr PositiveIntPrimitive value;
}

@ExtendedMetaData(name="positiveInt-primitive", baseType="http://www.eclipse.org/emf/2003/XMLType#positiveInteger", pattern="[1-9][0-9]*")
datatype PositiveIntPrimitive : java.math.BigInteger;

@GenModel(documentation="A person who is directly or indirectly involved in the provisioning of healthcare or related services.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Practitioner", kind="elementOnly")
class Practitioner extends DomainResource {

	@GenModel(documentation="An identifier that applies to this person in this role.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Whether this practitioner's record is in active use.")
	@ExtendedMetaData(kind="element", name="active", namespace="##targetNamespace")
	!resolve val Boolean active;

	@GenModel(documentation="The name(s) associated with the practitioner.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val HumanName[*] name;

	@GenModel(documentation="A contact detail for the practitioner, e.g. a telephone number or an email address.")
	@ExtendedMetaData(kind="element", name="telecom", namespace="##targetNamespace")
	!resolve val ContactPoint[*] telecom;

	@GenModel(documentation="Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.")
	@ExtendedMetaData(kind="element", name="gender", namespace="##targetNamespace")
	!resolve val AdministrativeGender gender;

	@GenModel(documentation="The date of birth for the practitioner.")
	@ExtendedMetaData(kind="element", name="birthDate", namespace="##targetNamespace")
	!resolve val Date birthDate;

	@ExtendedMetaData(kind="element", name="deceasedBoolean", namespace="##targetNamespace")
	!resolve val Boolean deceasedBoolean;

	@ExtendedMetaData(kind="element", name="deceasedDateTime", namespace="##targetNamespace")
	!resolve val DateTime deceasedDateTime;

	@GenModel(documentation="Address(es) of the practitioner that are not role specific (typically home address). 
Work addresses are not typically entered in this property as they are usually role dependent.")
	@ExtendedMetaData(kind="element", name="address", namespace="##targetNamespace")
	!resolve val Address[*] address;

	@GenModel(documentation="Image of the person.")
	@ExtendedMetaData(kind="element", name="photo", namespace="##targetNamespace")
	!resolve val Attachment[*] photo;

	@GenModel(documentation="The official qualifications, certifications, accreditations, training, licenses (and other types of educations/skills/capabilities) that authorize or otherwise pertain to the provision of care by the practitioner.

For example, a medical license issued by a medical board of licensure authorizing the practitioner to practice medicine within a certain locality.")
	@ExtendedMetaData(kind="element", name="qualification", namespace="##targetNamespace")
	!resolve val PractitionerQualification[*] qualification;

	@GenModel(documentation="A language which may be used to communicate with the practitioner, often for correspondence/administrative purposes.

The `PractitionerRole.communication` property should be used for publishing the languages that a practitioner is able to communicate with patients (on a per Organization/Role basis).")
	@ExtendedMetaData(kind="element", name="communication", namespace="##targetNamespace")
	!resolve val PractitionerCommunication[*] communication;
}

@GenModel(documentation="A person who is directly or indirectly involved in the provisioning of healthcare or related services.")
@ExtendedMetaData(name="Practitioner.Communication", kind="elementOnly")
class PractitionerCommunication extends BackboneElement {

	@GenModel(documentation="The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. \"en\" for English, or \"en-US\" for American English versus \"en-AU\" for Australian English.")
	@ExtendedMetaData(kind="element", name="language", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] language;

	@GenModel(documentation="Indicates whether or not the person prefers this language (over other languages he masters up a certain level).")
	@ExtendedMetaData(kind="element", name="preferred", namespace="##targetNamespace")
	!resolve val Boolean preferred;
}

@GenModel(documentation="A person who is directly or indirectly involved in the provisioning of healthcare or related services.")
@ExtendedMetaData(name="Practitioner.Qualification", kind="elementOnly")
class PractitionerQualification extends BackboneElement {

	@GenModel(documentation="An identifier that applies to this person's qualification.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Coded representation of the qualification.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] code;

	@GenModel(documentation="Period during which the qualification is valid.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;

	@GenModel(documentation="Organization that regulates and issues the qualification.")
	@ExtendedMetaData(kind="element", name="issuer", namespace="##targetNamespace")
	!resolve val Reference issuer;
}

@GenModel(documentation="A specific set of Roles/Locations/specialties/services that a practitioner may perform at an organization for a period of time.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="PractitionerRole", kind="elementOnly")
class PractitionerRole extends DomainResource {

	@GenModel(documentation="Business Identifiers that are specific to a role/location.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation=" Whether this practitioner role record is in active use. Some systems may use this property to mark non-active practitioners, such as those that are not currently employed.")
	@ExtendedMetaData(kind="element", name="active", namespace="##targetNamespace")
	!resolve val Boolean active;

	@GenModel(documentation="The period during which the person is authorized to act as a practitioner in these role(s) for the organization.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;

	@GenModel(documentation="Practitioner that is able to provide the defined services for the organization.")
	@ExtendedMetaData(kind="element", name="practitioner", namespace="##targetNamespace")
	!resolve val Reference practitioner;

	@GenModel(documentation="The organization where the Practitioner performs the roles associated.")
	@ExtendedMetaData(kind="element", name="organization", namespace="##targetNamespace")
	!resolve val Reference organization;

	@GenModel(documentation="Roles which this practitioner is authorized to perform for the organization.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] code;

	@GenModel(documentation="The specialty of a practitioner that describes the functional role they are practicing at a given organization or location.")
	@ExtendedMetaData(kind="element", name="specialty", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] specialty;

	@GenModel(documentation="The location(s) at which this practitioner provides care.")
	@ExtendedMetaData(kind="element", name="location", namespace="##targetNamespace")
	!resolve val Reference[*] location;

	@GenModel(documentation="The list of healthcare services that this worker provides for this role's Organization/Location(s).")
	@ExtendedMetaData(kind="element", name="healthcareService", namespace="##targetNamespace")
	!resolve val Reference[*] healthcareService;

	@GenModel(documentation="The contact details of communication devices available relevant to the specific PractitionerRole. This can include addresses, phone numbers, fax numbers, mobile numbers, email addresses and web sites.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ExtendedContactDetail[*] contact;

	@GenModel(documentation="Collection of characteristics (attributes).")
	@ExtendedMetaData(kind="element", name="characteristic", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] characteristic;

	@GenModel(documentation="A language the practitioner can use in patient communication. The practitioner may know several languages (listed in practitioner.communication), however these are the languages that could be advertised in a directory for a patient to search.")
	@ExtendedMetaData(kind="element", name="communication", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] communication;

	@GenModel(documentation="A collection of times the practitioner is available or performing this role at the location and/or healthcareservice.")
	@ExtendedMetaData(kind="element", name="availability", namespace="##targetNamespace")
	!resolve val Availability[*] availability;

	@GenModel(documentation=" Technical endpoints providing access to services operated for the practitioner with this role. Commonly used for locating scheduling services, or identifying where to send referrals electronically.")
	@ExtendedMetaData(kind="element", name="endpoint", namespace="##targetNamespace")
	!resolve val Reference[*] endpoint;
}

@GenModel(documentation="The base type for all re-useable types defined that have a simple property.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="PrimitiveType", kind="elementOnly")
class PrimitiveType extends DataType {
}

@GenModel(documentation="An action that is or was performed on or for a patient, practitioner, device, organization, or location. For example, this can be a physical intervention on a patient like an operation, or less invasive like long term services, counseling, or hypnotherapy.  This can be a quality or safety inspection for a location, organization, or device.  This can be an accreditation procedure on a practitioner for licensing.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Procedure", kind="elementOnly")
class Procedure extends DomainResource {

	@GenModel(documentation="Business identifiers assigned to this procedure by the performer or other systems which remain constant as the resource is updated and is propagated from server to server.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The URL pointing to a FHIR-defined protocol, guideline, order set or other definition that is adhered to in whole or in part by this Procedure.")
	@ExtendedMetaData(kind="element", name="instantiatesCanonical", namespace="##targetNamespace")
	!resolve val Canonical[*] instantiatesCanonical;

	@GenModel(documentation="The URL pointing to an externally maintained protocol, guideline, order set or other definition that is adhered to in whole or in part by this Procedure.")
	@ExtendedMetaData(kind="element", name="instantiatesUri", namespace="##targetNamespace")
	!resolve val Uri[*] instantiatesUri;

	@GenModel(documentation="A reference to a resource that contains details of the request for this procedure.")
	@ExtendedMetaData(kind="element", name="basedOn", namespace="##targetNamespace")
	!resolve val Reference[*] basedOn;

	@GenModel(documentation="A larger event of which this particular procedure is a component or step.")
	@ExtendedMetaData(kind="element", name="partOf", namespace="##targetNamespace")
	!resolve val Reference[*] partOf;

	@GenModel(documentation="A code specifying the state of the procedure. Generally, this will be the in-progress or completed state.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val EventStatus[1] status;

	@GenModel(documentation="Captures the reason for the current state of the procedure.")
	@ExtendedMetaData(kind="element", name="statusReason", namespace="##targetNamespace")
	!resolve val CodeableConcept statusReason;

	@GenModel(documentation="A code that classifies the procedure for searching, sorting and display purposes (e.g. \"Surgical Procedure\").")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] category;

	@GenModel(documentation="The specific procedure that is performed. Use text if the exact nature of the procedure cannot be coded (e.g. \"Laparoscopic Appendectomy\").")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@GenModel(documentation="On whom or on what the procedure was performed. This is usually an individual human, but can also be performed on animals, groups of humans or animals, organizations or practitioners (for licensing), locations or devices (for safety inspections or regulatory authorizations).  If the actual focus of the procedure is different from the subject, the focus element specifies the actual focus of the procedure.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference[1] subject;

	@GenModel(documentation="Who is the target of the procedure when it is not the subject of record only.  If focus is not present, then subject is the focus.  If focus is present and the subject is one of the targets of the procedure, include subject as a focus as well. If focus is present and the subject is not included in focus, it implies that the procedure was only targeted on the focus. For example, when a caregiver is given education for a patient, the caregiver would be the focus and the procedure record is associated with the subject (e.g. patient).  For example, use focus when recording the target of the education, training, or counseling is the parent or relative of a patient.")
	@ExtendedMetaData(kind="element", name="focus", namespace="##targetNamespace")
	!resolve val Reference focus;

	@GenModel(documentation="The Encounter during which this Procedure was created or performed or to which the creation of this record is tightly associated.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@ExtendedMetaData(kind="element", name="occurrenceDateTime", namespace="##targetNamespace")
	!resolve val DateTime occurrenceDateTime;

	@ExtendedMetaData(kind="element", name="occurrencePeriod", namespace="##targetNamespace")
	!resolve val Period occurrencePeriod;

	@ExtendedMetaData(kind="element", name="occurrenceString", namespace="##targetNamespace")
	!resolve val String occurrenceString;

	@ExtendedMetaData(kind="element", name="occurrenceAge", namespace="##targetNamespace")
	!resolve val Age occurrenceAge;

	@ExtendedMetaData(kind="element", name="occurrenceRange", namespace="##targetNamespace")
	!resolve val Range occurrenceRange;

	@ExtendedMetaData(kind="element", name="occurrenceTiming", namespace="##targetNamespace")
	!resolve val Timing occurrenceTiming;

	@GenModel(documentation="The date the occurrence of the procedure was first captured in the record regardless of Procedure.status (potentially after the occurrence of the event).")
	@ExtendedMetaData(kind="element", name="recorded", namespace="##targetNamespace")
	!resolve val DateTime recorded;

	@GenModel(documentation="Individual who recorded the record and takes responsibility for its content.")
	@ExtendedMetaData(kind="element", name="recorder", namespace="##targetNamespace")
	!resolve val Reference recorder;

	@ExtendedMetaData(kind="element", name="reportedBoolean", namespace="##targetNamespace")
	!resolve val Boolean reportedBoolean;

	@ExtendedMetaData(kind="element", name="reportedReference", namespace="##targetNamespace")
	!resolve val Reference reportedReference;

	@GenModel(documentation="Indicates who or what performed the procedure and how they were involved.")
	@ExtendedMetaData(kind="element", name="performer", namespace="##targetNamespace")
	!resolve val ProcedurePerformer[*] performer;

	@GenModel(documentation="The location where the procedure actually happened.  E.g. a newborn at home, a tracheostomy at a restaurant.")
	@ExtendedMetaData(kind="element", name="location", namespace="##targetNamespace")
	!resolve val Reference location;

	@GenModel(documentation="The coded reason or reference why the procedure was performed. This may be a coded entity of some type, be present as text, or be a reference to one of several resources that justify the procedure.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val CodeableReference[*] reason;

	@GenModel(documentation="Detailed and structured anatomical location information. Multiple locations are allowed - e.g. multiple punch biopsies of a lesion.")
	@ExtendedMetaData(kind="element", name="bodySite", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] bodySite;

	@GenModel(documentation="The outcome of the procedure - did it resolve the reasons for the procedure being performed?")
	@ExtendedMetaData(kind="element", name="outcome", namespace="##targetNamespace")
	!resolve val CodeableConcept outcome;

	@GenModel(documentation="This could be a histology result, pathology report, surgical report, etc.")
	@ExtendedMetaData(kind="element", name="report", namespace="##targetNamespace")
	!resolve val Reference[*] report;

	@GenModel(documentation="Any complications that occurred during the procedure, or in the immediate post-performance period. These are generally tracked separately from the notes, which will typically describe the procedure itself rather than any 'post procedure' issues.")
	@ExtendedMetaData(kind="element", name="complication", namespace="##targetNamespace")
	!resolve val CodeableReference[*] complication;

	@GenModel(documentation="If the procedure required specific follow up - e.g. removal of sutures. The follow up may be represented as a simple note or could potentially be more complex, in which case the CarePlan resource can be used.")
	@ExtendedMetaData(kind="element", name="followUp", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] followUp;

	@GenModel(documentation="Any other notes and comments about the procedure.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="A device that is implanted, removed or otherwise manipulated (calibration, battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion of the Procedure.")
	@ExtendedMetaData(kind="element", name="focalDevice", namespace="##targetNamespace")
	!resolve val ProcedureFocalDevice[*] focalDevice;

	@GenModel(documentation="Identifies medications, devices and any other substance used as part of the procedure.")
	@ExtendedMetaData(kind="element", name="used", namespace="##targetNamespace")
	!resolve val CodeableReference[*] used;

	@GenModel(documentation="Other resources from the patient record that may be relevant to the procedure.  The information from these resources was either used to create the instance or is provided to help with its interpretation. This extension should not be used if more specific inline elements or extensions are available.")
	@ExtendedMetaData(kind="element", name="supportingInfo", namespace="##targetNamespace")
	!resolve val Reference[*] supportingInfo;
}

@GenModel(documentation="An action that is or was performed on or for a patient, practitioner, device, organization, or location. For example, this can be a physical intervention on a patient like an operation, or less invasive like long term services, counseling, or hypnotherapy.  This can be a quality or safety inspection for a location, organization, or device.  This can be an accreditation procedure on a practitioner for licensing.")
@ExtendedMetaData(name="Procedure.FocalDevice", kind="elementOnly")
class ProcedureFocalDevice extends BackboneElement {

	@GenModel(documentation="The kind of change that happened to the device during the procedure.")
	@ExtendedMetaData(kind="element", name="action", namespace="##targetNamespace")
	!resolve val CodeableConcept action;

	@GenModel(documentation="The device that was manipulated (changed) during the procedure.")
	@ExtendedMetaData(kind="element", name="manipulated", namespace="##targetNamespace")
	!resolve val Reference[1] manipulated;
}

@GenModel(documentation="An action that is or was performed on or for a patient, practitioner, device, organization, or location. For example, this can be a physical intervention on a patient like an operation, or less invasive like long term services, counseling, or hypnotherapy.  This can be a quality or safety inspection for a location, organization, or device.  This can be an accreditation procedure on a practitioner for licensing.")
@ExtendedMetaData(name="Procedure.Performer", kind="elementOnly")
class ProcedurePerformer extends BackboneElement {

	@GenModel(documentation="Distinguishes the type of involvement of the performer in the procedure. For example, surgeon, anaesthetist, endoscopist.")
	@ExtendedMetaData(kind="element", name="function", namespace="##targetNamespace")
	!resolve val CodeableConcept function;

	@GenModel(documentation="Indicates who or what performed the procedure.")
	@ExtendedMetaData(kind="element", name="actor", namespace="##targetNamespace")
	!resolve val Reference[1] actor;

	@GenModel(documentation="The Organization the Patient, RelatedPerson, Device, CareTeam, and HealthcareService was acting on behalf of.")
	@ExtendedMetaData(kind="element", name="onBehalfOf", namespace="##targetNamespace")
	!resolve val Reference onBehalfOf;

	@GenModel(documentation="Time period during which the performer performed the procedure.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;
}

@GenModel(documentation="The shelf-life and storage information for a medicinal product item or container can be described using this class.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="ProductShelfLife", kind="elementOnly")
class ProductShelfLife extends BackboneType {

	@GenModel(documentation="This describes the shelf life, taking into account various scenarios such as shelf life of the packaged Medicinal Product itself, shelf life after transformation where necessary and shelf life after the first opening of a bottle, etc. The shelf life type shall be specified using an appropriate controlled vocabulary The controlled term and the controlled term identifier shall be specified.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@ExtendedMetaData(kind="element", name="periodDuration", namespace="##targetNamespace")
	!resolve val Duration periodDuration;

	@ExtendedMetaData(kind="element", name="periodString", namespace="##targetNamespace")
	!resolve val String periodString;

	@GenModel(documentation="Special precautions for storage, if any, can be specified using an appropriate controlled vocabulary The controlled term and the controlled term identifier shall be specified.")
	@ExtendedMetaData(kind="element", name="specialPrecautionsForStorage", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] specialPrecautionsForStorage;
}

@GenModel(documentation="How a property is represented when serialized.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="PropertyRepresentation", kind="elementOnly")
class PropertyRepresentation extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr PropertyRepresentationEnum value;
}

@ExtendedMetaData(name="PropertyRepresentationEnum")
enum PropertyRepresentationEnum {

	@GenModel(documentation="XML Attribute")
	xmlAttr = 0;

	@GenModel(documentation="XML Text")
	xmlText = 1;

	@GenModel(documentation="Type Attribute")
	typeAttr = 2;

	@GenModel(documentation="CDA Text Format")
	cdaText = 3;

	@GenModel(documentation="XHTML")
	xhtml = 4;
}

@ExtendedMetaData(name="PropertyRepresentationEnum:Object", baseType="PropertyRepresentationEnum")
datatype PropertyRepresentationEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="PropertyType", kind="elementOnly")
class PropertyType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr PropertyTypeEnum value;
}

@ExtendedMetaData(name="PropertyTypeEnum")
enum PropertyTypeEnum {

	@GenModel(documentation="code (internal reference)")
	code = 0;

	@GenModel(documentation="Coding (external reference)")
	Coding = 1;

	@GenModel(documentation="string")
	string = 2;

	@GenModel(documentation="integer")
	integer = 3;

	@GenModel(documentation="boolean")
	boolean = 4;

	@GenModel(documentation="dateTime")
	dateTime = 5;

	@GenModel(documentation="decimal")
	decimal = 6;
}

@ExtendedMetaData(name="PropertyTypeEnum:Object", baseType="PropertyTypeEnum")
datatype PropertyTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Provenance", kind="elementOnly")
class Provenance extends DomainResource {

	@GenModel(documentation="The Reference(s) that were generated or updated by  the activity described in this resource. A provenance can point to more than one target if multiple resources were created/updated by the same activity.")
	@ExtendedMetaData(kind="element", name="target", namespace="##targetNamespace")
	!resolve val Reference[+] target;

	@ExtendedMetaData(kind="element", name="occurredPeriod", namespace="##targetNamespace")
	!resolve val Period occurredPeriod;

	@ExtendedMetaData(kind="element", name="occurredDateTime", namespace="##targetNamespace")
	!resolve val DateTime occurredDateTime;

	@GenModel(documentation="The instant of time at which the activity was recorded.")
	@ExtendedMetaData(kind="element", name="recorded", namespace="##targetNamespace")
	!resolve val Instant recorded;

	@GenModel(documentation="Policy or plan the activity was defined by. Typically, a single activity may have multiple applicable policy documents, such as patient consent, guarantor funding, etc.")
	@ExtendedMetaData(kind="element", name="policy", namespace="##targetNamespace")
	!resolve val Uri[*] policy;

	@GenModel(documentation="Where the activity occurred, if relevant.")
	@ExtendedMetaData(kind="element", name="location", namespace="##targetNamespace")
	!resolve val Reference location;

	@GenModel(documentation="The authorization (e.g., PurposeOfUse) that was used during the event being recorded.")
	@ExtendedMetaData(kind="element", name="authorization", namespace="##targetNamespace")
	!resolve val CodeableReference[*] authorization;

	@GenModel(documentation="An activity is something that occurs over a period of time and acts upon or with entities; it may include consuming, processing, transforming, modifying, relocating, using, or generating entities.")
	@ExtendedMetaData(kind="element", name="activity", namespace="##targetNamespace")
	!resolve val CodeableConcept activity;

	@GenModel(documentation="Allows tracing of authorizatino for the events and tracking whether proposals/recommendations were acted upon.")
	@ExtendedMetaData(kind="element", name="basedOn", namespace="##targetNamespace")
	!resolve val Reference[*] basedOn;

	@GenModel(documentation="The patient element is available to enable deterministic tracking of activities that involve the patient as the subject of the data used in an activity.")
	@ExtendedMetaData(kind="element", name="patient", namespace="##targetNamespace")
	!resolve val Reference patient;

	@GenModel(documentation="This will typically be the encounter the event occurred, but some events may be initiated prior to or after the official completion of an encounter but still be tied to the context of the encounter (e.g. pre-admission lab tests).")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@GenModel(documentation="An actor taking a role in an activity  for which it can be assigned some degree of responsibility for the activity taking place.")
	@ExtendedMetaData(kind="element", name="agent", namespace="##targetNamespace")
	!resolve val ProvenanceAgent[+] agent;

	@GenModel(documentation="An entity used in this activity.")
	@ExtendedMetaData(kind="element", name="entity", namespace="##targetNamespace")
	!resolve val ProvenanceEntity[*] entity;

	@GenModel(documentation="A digital signature on the target Reference(s). The signer should match a Provenance.agent. The purpose of the signature is indicated.")
	@ExtendedMetaData(kind="element", name="signature", namespace="##targetNamespace")
	!resolve val Signature[*] signature;
}

@GenModel(documentation="Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.")
@ExtendedMetaData(name="Provenance.Agent", kind="elementOnly")
class ProvenanceAgent extends BackboneElement {

	@GenModel(documentation="The Functional Role of the agent with respect to the activity.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="The structural roles of the agent indicating the agent's competency. The security role enabling the agent with respect to the activity.")
	@ExtendedMetaData(kind="element", name="role", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] role;

	@GenModel(documentation="Indicates who or what performed in the event.")
	@ExtendedMetaData(kind="element", name="who", namespace="##targetNamespace")
	!resolve val Reference[1] who;

	@GenModel(documentation="The agent that delegated authority to perform the activity performed by the agent.who element.")
	@ExtendedMetaData(kind="element", name="onBehalfOf", namespace="##targetNamespace")
	!resolve val Reference onBehalfOf;
}

@GenModel(documentation="Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.")
@ExtendedMetaData(name="Provenance.Entity", kind="elementOnly")
class ProvenanceEntity extends BackboneElement {

	@GenModel(documentation="How the entity was used during the activity.")
	@ExtendedMetaData(kind="element", name="role", namespace="##targetNamespace")
	!resolve val ProvenanceEntityRole[1] role;

	@GenModel(documentation="Identity of the  Entity used. May be a logical or physical uri and maybe absolute or relative.")
	@ExtendedMetaData(kind="element", name="what", namespace="##targetNamespace")
	!resolve val Reference[1] what;

	@GenModel(documentation="The entity is attributed to an agent to express the agent's responsibility for that entity, possibly along with other agents. This description can be understood as shorthand for saying that the agent was responsible for the activity which used the entity.")
	@ExtendedMetaData(kind="element", name="agent", namespace="##targetNamespace")
	!resolve val ProvenanceAgent[*] agent;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ProvenanceEntityRole", kind="elementOnly")
class ProvenanceEntityRole extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ProvenanceEntityRoleEnum value;
}

@ExtendedMetaData(name="ProvenanceEntityRoleEnum")
enum ProvenanceEntityRoleEnum {

	@GenModel(documentation="Revision")
	revision = 0;

	@GenModel(documentation="Quotation")
	quotation = 1;

	@GenModel(documentation="Source")
	source = 2;

	@GenModel(documentation="Instantiates")
	instantiates = 3;

	@GenModel(documentation="Removal")
	removal = 4;
}

@ExtendedMetaData(name="ProvenanceEntityRoleEnum:Object", baseType="ProvenanceEntityRoleEnum")
datatype ProvenanceEntityRoleEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="PublicationStatus", kind="elementOnly")
class PublicationStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr PublicationStatusEnum value;
}

@ExtendedMetaData(name="PublicationStatusEnum")
enum PublicationStatusEnum {

	@GenModel(documentation="Draft
????????
ontwerp")
	draft = 0;

	@GenModel(documentation="Active
????????
actief")
	active = 1;

	@GenModel(documentation="Retired
??????
verouderd")
	retired = 2;

	@GenModel(documentation="Unknown")
	unknown = 3;
}

@ExtendedMetaData(name="PublicationStatusEnum:Object", baseType="PublicationStatusEnum")
datatype PublicationStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="Quantity", kind="elementOnly")
class Quantity extends DataType {

	@GenModel(documentation="The value of the measured amount. The value includes an implicit precision in the presentation of the value.")
	@ExtendedMetaData(kind="element", name="value", namespace="##targetNamespace")
	!resolve val Decimal value;

	@GenModel(documentation="How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is \"<\" , then the real value is < stated value.")
	@ExtendedMetaData(kind="element", name="comparator", namespace="##targetNamespace")
	!resolve val QuantityComparator comparator;

	@GenModel(documentation="A human-readable form of the unit.")
	@ExtendedMetaData(kind="element", name="unit", namespace="##targetNamespace")
	!resolve val String unit;

	@GenModel(documentation="The identification of the system that provides the coded form of the unit.")
	@ExtendedMetaData(kind="element", name="system", namespace="##targetNamespace")
	!resolve val Uri system;

	@GenModel(documentation="A computer processable form of the unit in some unit representation system.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val Code code;
}

@GenModel(documentation="How the Quantity should be understood and represented.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="QuantityComparator", kind="elementOnly")
class QuantityComparator extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr QuantityComparatorEnum value;
}

@ExtendedMetaData(name="QuantityComparatorEnum")
enum QuantityComparatorEnum {

	@GenModel(documentation="Less than")
	_ = 0;

	@GenModel(documentation="Less or Equal to")
	_1 = 1;

	@GenModel(documentation="Greater or Equal to")
	_2 = 2;

	@GenModel(documentation="Greater than")
	_3 = 3;

	@GenModel(documentation="Sufficient to achieve this total quantity")
	ad = 4;
}

@ExtendedMetaData(name="QuantityComparatorEnum:Object", baseType="QuantityComparatorEnum")
datatype QuantityComparatorEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Questionnaire", kind="elementOnly")
class Questionnaire extends MetadataResource {

	@GenModel(documentation="An absolute URI that is used to identify this questionnaire when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this questionnaire is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the questionnaire is stored on different servers.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri url;

	@GenModel(documentation="A formal identifier that is used to identify this questionnaire when it is represented in other formats, or referenced in a specification, model, design or an instance.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The identifier that is used to identify this version of the questionnaire when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the questionnaire author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@ExtendedMetaData(kind="element", name="versionAlgorithmString", namespace="##targetNamespace")
	!resolve val String versionAlgorithmString;

	@ExtendedMetaData(kind="element", name="versionAlgorithmCoding", namespace="##targetNamespace")
	!resolve val Coding versionAlgorithmCoding;

	@GenModel(documentation="A natural language name identifying the questionnaire. This name should be usable as an identifier for the module by machine processing applications such as code generation.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="A short, descriptive, user-friendly title for the questionnaire.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="The URL of a Questionnaire that this Questionnaire is based on.")
	@ExtendedMetaData(kind="element", name="derivedFrom", namespace="##targetNamespace")
	!resolve val Canonical[*] derivedFrom;

	@GenModel(documentation="The current state of this questionnaire.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="A Boolean value to indicate that this questionnaire is authored for testing purposes (or education/evaluation/marketing) and is not intended for genuine usage.")
	@ExtendedMetaData(kind="element", name="experimental", namespace="##targetNamespace")
	!resolve val Boolean experimental;

	@GenModel(documentation="The types of subjects that can be the subject of responses created for the questionnaire.")
	@ExtendedMetaData(kind="element", name="subjectType", namespace="##targetNamespace")
	!resolve val ResourceType[*] subjectType;

	@GenModel(documentation="The date  (and optionally time) when the questionnaire was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the questionnaire changes.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="The name of the organization or individual responsible for the release and ongoing maintenance of the questionnaire.")
	@ExtendedMetaData(kind="element", name="publisher", namespace="##targetNamespace")
	!resolve val String publisher;

	@GenModel(documentation="Contact details to assist a user in finding and communicating with the publisher.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactDetail[*] contact;

	@GenModel(documentation="A free text natural language description of the questionnaire from a consumer's perspective.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate questionnaires.")
	@ExtendedMetaData(kind="element", name="useContext", namespace="##targetNamespace")
	!resolve val UsageContext[*] useContext;

	@GenModel(documentation="A legal or geographic region in which the questionnaire is intended to be used.")
	@ExtendedMetaData(kind="element", name="jurisdiction", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] jurisdiction;

	@GenModel(documentation="Explanation of why this questionnaire is needed and why it has been designed as it has.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val Markdown purpose;

	@GenModel(documentation="A copyright statement relating to the questionnaire and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the questionnaire.")
	@ExtendedMetaData(kind="element", name="copyright", namespace="##targetNamespace")
	!resolve val Markdown copyright;

	@GenModel(documentation="A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').")
	@ExtendedMetaData(kind="element", name="copyrightLabel", namespace="##targetNamespace")
	!resolve val String copyrightLabel;

	@GenModel(documentation="The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.")
	@ExtendedMetaData(kind="element", name="approvalDate", namespace="##targetNamespace")
	!resolve val Date approvalDate;

	@GenModel(documentation="The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.")
	@ExtendedMetaData(kind="element", name="lastReviewDate", namespace="##targetNamespace")
	!resolve val Date lastReviewDate;

	@GenModel(documentation="The period during which the questionnaire content was or is planned to be in active use.")
	@ExtendedMetaData(kind="element", name="effectivePeriod", namespace="##targetNamespace")
	!resolve val Period effectivePeriod;

	@GenModel(documentation="An identifier for this collection of questions in a particular terminology such as LOINC.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val Coding[*] code;

	@GenModel(documentation="A particular question, question grouping or display text that is part of the questionnaire.")
	@ExtendedMetaData(kind="element", name="item", namespace="##targetNamespace")
	!resolve val QuestionnaireItem[*] item;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="QuestionnaireAnswerConstraint", kind="elementOnly")
class QuestionnaireAnswerConstraint extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr QuestionnaireAnswerConstraintEnum value;
}

@ExtendedMetaData(name="QuestionnaireAnswerConstraintEnum")
enum QuestionnaireAnswerConstraintEnum {

	@GenModel(documentation="Options only")
	optionsOnly = 0;

	@GenModel(documentation="Options or 'type'")
	optionsOrType = 1;

	@GenModel(documentation="Options or string")
	optionsOrString = 2;
}

@ExtendedMetaData(name="QuestionnaireAnswerConstraintEnum:Object", baseType="QuestionnaireAnswerConstraintEnum")
datatype QuestionnaireAnswerConstraintEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection.")
@ExtendedMetaData(name="Questionnaire.AnswerOption", kind="elementOnly")
class QuestionnaireAnswerOption extends BackboneElement {

	@ExtendedMetaData(kind="element", name="valueInteger", namespace="##targetNamespace")
	!resolve val Integer valueInteger;

	@ExtendedMetaData(kind="element", name="valueDate", namespace="##targetNamespace")
	!resolve val Date valueDate;

	@ExtendedMetaData(kind="element", name="valueTime", namespace="##targetNamespace")
	!resolve val Time valueTime;

	@ExtendedMetaData(kind="element", name="valueString", namespace="##targetNamespace")
	!resolve val String valueString;

	@ExtendedMetaData(kind="element", name="valueCoding", namespace="##targetNamespace")
	!resolve val Coding valueCoding;

	@ExtendedMetaData(kind="element", name="valueReference", namespace="##targetNamespace")
	!resolve val Reference valueReference;

	@GenModel(documentation="Indicates whether the answer value is selected when the list of possible answers is initially shown.")
	@ExtendedMetaData(kind="element", name="initialSelected", namespace="##targetNamespace")
	!resolve val Boolean initialSelected;
}

@GenModel(documentation="A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection.")
@ExtendedMetaData(name="Questionnaire.EnableWhen", kind="elementOnly")
class QuestionnaireEnableWhen extends BackboneElement {

	@GenModel(documentation="The linkId for the question whose answer (or lack of answer) governs whether this item is enabled.")
	@ExtendedMetaData(kind="element", name="question", namespace="##targetNamespace")
	!resolve val String[1] question;

	@GenModel(documentation="Specifies the criteria by which the question is enabled.")
	@ExtendedMetaData(kind="element", name="operator", namespace="##targetNamespace")
	!resolve val QuestionnaireItemOperator[1] operator;

	@ExtendedMetaData(kind="element", name="answerBoolean", namespace="##targetNamespace")
	!resolve val Boolean answerBoolean;

	@ExtendedMetaData(kind="element", name="answerDecimal", namespace="##targetNamespace")
	!resolve val Decimal answerDecimal;

	@ExtendedMetaData(kind="element", name="answerInteger", namespace="##targetNamespace")
	!resolve val Integer answerInteger;

	@ExtendedMetaData(kind="element", name="answerDate", namespace="##targetNamespace")
	!resolve val Date answerDate;

	@ExtendedMetaData(kind="element", name="answerDateTime", namespace="##targetNamespace")
	!resolve val DateTime answerDateTime;

	@ExtendedMetaData(kind="element", name="answerTime", namespace="##targetNamespace")
	!resolve val Time answerTime;

	@ExtendedMetaData(kind="element", name="answerString", namespace="##targetNamespace")
	!resolve val String answerString;

	@ExtendedMetaData(kind="element", name="answerCoding", namespace="##targetNamespace")
	!resolve val Coding answerCoding;

	@ExtendedMetaData(kind="element", name="answerQuantity", namespace="##targetNamespace")
	!resolve val Quantity answerQuantity;

	@ExtendedMetaData(kind="element", name="answerReference", namespace="##targetNamespace")
	!resolve val Reference answerReference;
}

@GenModel(documentation="A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection.")
@ExtendedMetaData(name="Questionnaire.Initial", kind="elementOnly")
class QuestionnaireInitial extends BackboneElement {

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;

	@ExtendedMetaData(kind="element", name="valueDecimal", namespace="##targetNamespace")
	!resolve val Decimal valueDecimal;

	@ExtendedMetaData(kind="element", name="valueInteger", namespace="##targetNamespace")
	!resolve val Integer valueInteger;

	@ExtendedMetaData(kind="element", name="valueDate", namespace="##targetNamespace")
	!resolve val Date valueDate;

	@ExtendedMetaData(kind="element", name="valueDateTime", namespace="##targetNamespace")
	!resolve val DateTime valueDateTime;

	@ExtendedMetaData(kind="element", name="valueTime", namespace="##targetNamespace")
	!resolve val Time valueTime;

	@ExtendedMetaData(kind="element", name="valueString", namespace="##targetNamespace")
	!resolve val String valueString;

	@ExtendedMetaData(kind="element", name="valueUri", namespace="##targetNamespace")
	!resolve val Uri valueUri;

	@ExtendedMetaData(kind="element", name="valueAttachment", namespace="##targetNamespace")
	!resolve val Attachment valueAttachment;

	@ExtendedMetaData(kind="element", name="valueCoding", namespace="##targetNamespace")
	!resolve val Coding valueCoding;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueReference", namespace="##targetNamespace")
	!resolve val Reference valueReference;
}

@GenModel(documentation="A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection.")
@ExtendedMetaData(name="Questionnaire.Item", kind="elementOnly")
class QuestionnaireItem extends BackboneElement {

	@GenModel(documentation="An identifier that is unique within the Questionnaire allowing linkage to the equivalent item in a QuestionnaireResponse resource.")
	@ExtendedMetaData(kind="element", name="linkId", namespace="##targetNamespace")
	!resolve val String[1] linkId;

	@GenModel(documentation="This element is a URI that refers to an [ElementDefinition](elementdefinition.html) or to an [ObservationDefinition](observationdefinition.html) that provides information about this item, including information that might otherwise be included in the instance of the Questionnaire resource. A detailed description of the construction of the URI is shown in [Comments](questionnaire.html#definition), below.")
	@ExtendedMetaData(kind="element", name="definition", namespace="##targetNamespace")
	!resolve val Uri definition;

	@GenModel(documentation="A terminology code that corresponds to this group or question (e.g. a code from LOINC, which defines many questions and answers).")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val Coding[*] code;

	@GenModel(documentation="A short label for a particular group, question or set of display text within the questionnaire used for reference by the individual completing the questionnaire.")
	@ExtendedMetaData(kind="element", name="prefix", namespace="##targetNamespace")
	!resolve val String prefix;

	@GenModel(documentation="The name of a section, the text of a question or text content for a display item.")
	@ExtendedMetaData(kind="element", name="text", namespace="##targetNamespace")
	!resolve val String text;

	@GenModel(documentation="The type of questionnaire item this is - whether text for display, a grouping of other items or a particular type of data to be captured (string, integer, Coding, etc.).")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val QuestionnaireItemType[1] type;

	@GenModel(documentation="A constraint indicating that this item should only be enabled (displayed/allow answers to be captured) when the specified condition is true.")
	@ExtendedMetaData(kind="element", name="enableWhen", namespace="##targetNamespace")
	!resolve val QuestionnaireEnableWhen[*] enableWhen;

	@GenModel(documentation="Controls how multiple enableWhen values are interpreted -  whether all or any must be true.")
	@ExtendedMetaData(kind="element", name="enableBehavior", namespace="##targetNamespace")
	!resolve val EnableWhenBehavior enableBehavior;

	@GenModel(documentation="Indicates if and how items that are disabled (because enableWhen evaluates to 'false') should be displayed.")
	@ExtendedMetaData(kind="element", name="disabledDisplay", namespace="##targetNamespace")
	!resolve val QuestionnaireItemDisabledDisplay disabledDisplay;

	@GenModel(documentation="An indication, if true, that the item must be present in a \"completed\" QuestionnaireResponse.  If false, the item may be skipped when answering the questionnaire.")
	@ExtendedMetaData(kind="element", name="required", namespace="##targetNamespace")
	!resolve val Boolean required;

	@GenModel(documentation="An indication, if true, that a QuestionnaireResponse for this item may include multiple answers associated with a single instance of this item (for question-type items) or multiple repetitions of the item (for group-type items).")
	@ExtendedMetaData(kind="element", name="repeats", namespace="##targetNamespace")
	!resolve val Boolean repeats;

	@GenModel(documentation="An indication, when true, that the value cannot be changed by a human respondent to the Questionnaire.")
	@ExtendedMetaData(kind="element", name="readOnly", namespace="##targetNamespace")
	!resolve val Boolean readOnly;

	@GenModel(documentation="The maximum number of characters that are permitted in the answer to be considered a \"valid\" QuestionnaireResponse.")
	@ExtendedMetaData(kind="element", name="maxLength", namespace="##targetNamespace")
	!resolve val Integer maxLength;

	@GenModel(documentation="For items that have a defined set of allowed answers (via answerOption or answerValueSet), indicates whether values *other* than those specified can be selected.")
	@ExtendedMetaData(kind="element", name="answerConstraint", namespace="##targetNamespace")
	!resolve val QuestionnaireAnswerConstraint answerConstraint;

	@GenModel(documentation="A reference to a value set containing a list of values representing permitted answers for a question.")
	@ExtendedMetaData(kind="element", name="answerValueSet", namespace="##targetNamespace")
	!resolve val Canonical answerValueSet;

	@GenModel(documentation="One of the permitted answers for the question.")
	@ExtendedMetaData(kind="element", name="answerOption", namespace="##targetNamespace")
	!resolve val QuestionnaireAnswerOption[*] answerOption;

	@GenModel(documentation="One or more values that should be pre-populated in the answer when initially rendering the questionnaire for user input.")
	@ExtendedMetaData(kind="element", name="initial", namespace="##targetNamespace")
	!resolve val QuestionnaireInitial[*] initial;

	@GenModel(documentation="Text, questions and other groups to be nested beneath a question or group.")
	@ExtendedMetaData(kind="element", name="item", namespace="##targetNamespace")
	!resolve val QuestionnaireItem[*] item;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="QuestionnaireItemDisabledDisplay", kind="elementOnly")
class QuestionnaireItemDisabledDisplay extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr QuestionnaireItemDisabledDisplayEnum value;
}

@ExtendedMetaData(name="QuestionnaireItemDisabledDisplayEnum")
enum QuestionnaireItemDisabledDisplayEnum {

	@GenModel(documentation="Hidden")
	hidden = 0;

	@GenModel(documentation="Protected")
	protected = 1;
}

@ExtendedMetaData(name="QuestionnaireItemDisabledDisplayEnum:Object", baseType="QuestionnaireItemDisabledDisplayEnum")
datatype QuestionnaireItemDisabledDisplayEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="QuestionnaireItemOperator", kind="elementOnly")
class QuestionnaireItemOperator extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr QuestionnaireItemOperatorEnum value;
}

@ExtendedMetaData(name="QuestionnaireItemOperatorEnum")
enum QuestionnaireItemOperatorEnum {

	@GenModel(documentation="Exists")
	exists = 0;

	@GenModel(documentation="Equals")
	_ = 1;

	@GenModel(documentation="Not Equals")
	_1 = 2;

	@GenModel(documentation="Greater Than")
	_2 = 3;

	@GenModel(documentation="Less Than")
	_3 = 4;

	@GenModel(documentation="Greater or Equals")
	_4 = 5;

	@GenModel(documentation="Less or Equals")
	_5 = 6;
}

@ExtendedMetaData(name="QuestionnaireItemOperatorEnum:Object", baseType="QuestionnaireItemOperatorEnum")
datatype QuestionnaireItemOperatorEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="QuestionnaireItemType", kind="elementOnly")
class QuestionnaireItemType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr QuestionnaireItemTypeEnum value;
}

@ExtendedMetaData(name="QuestionnaireItemTypeEnum")
enum QuestionnaireItemTypeEnum {

	@GenModel(documentation="Group")
	group = 0;

	@GenModel(documentation="Display")
	display = 1;

	@GenModel(documentation="Question")
	question = 2;

	@GenModel(documentation="Boolean")
	boolean = 3;

	@GenModel(documentation="Decimal")
	decimal = 4;

	@GenModel(documentation="Integer")
	integer = 5;

	@GenModel(documentation="Date")
	date = 6;

	@GenModel(documentation="Date Time")
	dateTime = 7;

	@GenModel(documentation="Time")
	time = 8;

	@GenModel(documentation="String")
	string = 9;

	@GenModel(documentation="Text")
	text = 10;

	@GenModel(documentation="Url")
	url = 11;

	@GenModel(documentation="Coding")
	coding = 12;

	@GenModel(documentation="Attachment")
	attachment = 13;

	@GenModel(documentation="Reference")
	reference = 14;

	@GenModel(documentation="Quantity")
	quantity = 15;
}

@ExtendedMetaData(name="QuestionnaireItemTypeEnum:Object", baseType="QuestionnaireItemTypeEnum")
datatype QuestionnaireItemTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the questionnaire being responded to.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="QuestionnaireResponse", kind="elementOnly")
class QuestionnaireResponse extends DomainResource {

	@GenModel(documentation="Business identifiers assigned to this questionnaire response by the performer and/or other systems.  These identifiers remain constant as the resource is updated and propagates from server to server.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="A plan, proposal or order that is fulfilled in whole or in part by this questionnaire response.  For example, a ServiceRequest seeking an intake assessment or a decision support recommendation to assess for post-partum depression.")
	@ExtendedMetaData(kind="element", name="basedOn", namespace="##targetNamespace")
	!resolve val Reference[*] basedOn;

	@GenModel(documentation="A procedure or observation that this questionnaire was performed as part of the execution of.  For example, the surgery a checklist was executed as part of.")
	@ExtendedMetaData(kind="element", name="partOf", namespace="##targetNamespace")
	!resolve val Reference[*] partOf;

	@GenModel(documentation="The Questionnaire that defines and organizes the questions for which answers are being provided.")
	@ExtendedMetaData(kind="element", name="questionnaire", namespace="##targetNamespace")
	!resolve val Canonical[1] questionnaire;

	@GenModel(documentation="The current state of the questionnaire response.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val QuestionnaireResponseStatus[1] status;

	@GenModel(documentation="The subject of the questionnaire response.  This could be a patient, organization, practitioner, device, etc.  This is who/what the answers apply to, but is not necessarily the source of information.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference subject;

	@GenModel(documentation="The Encounter during which this questionnaire response was created or to which the creation of this record is tightly associated.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@GenModel(documentation="The date and/or time that this questionnaire response was last modified by the user - e.g. changing answers or revising status.")
	@ExtendedMetaData(kind="element", name="authored", namespace="##targetNamespace")
	!resolve val DateTime authored;

	@GenModel(documentation="The individual or device that received the answers to the questions in the QuestionnaireResponse and recorded them in the system.")
	@ExtendedMetaData(kind="element", name="author", namespace="##targetNamespace")
	!resolve val Reference author;

	@GenModel(documentation="The individual or device that answered the questions about the subject.")
	@ExtendedMetaData(kind="element", name="source", namespace="##targetNamespace")
	!resolve val Reference source;

	@GenModel(documentation="A group or question item from the original questionnaire for which answers are provided.")
	@ExtendedMetaData(kind="element", name="item", namespace="##targetNamespace")
	!resolve val QuestionnaireResponseItem[*] item;
}

@GenModel(documentation="A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the questionnaire being responded to.")
@ExtendedMetaData(name="QuestionnaireResponse.Answer", kind="elementOnly")
class QuestionnaireResponseAnswer extends BackboneElement {

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;

	@ExtendedMetaData(kind="element", name="valueDecimal", namespace="##targetNamespace")
	!resolve val Decimal valueDecimal;

	@ExtendedMetaData(kind="element", name="valueInteger", namespace="##targetNamespace")
	!resolve val Integer valueInteger;

	@ExtendedMetaData(kind="element", name="valueDate", namespace="##targetNamespace")
	!resolve val Date valueDate;

	@ExtendedMetaData(kind="element", name="valueDateTime", namespace="##targetNamespace")
	!resolve val DateTime valueDateTime;

	@ExtendedMetaData(kind="element", name="valueTime", namespace="##targetNamespace")
	!resolve val Time valueTime;

	@ExtendedMetaData(kind="element", name="valueString", namespace="##targetNamespace")
	!resolve val String valueString;

	@ExtendedMetaData(kind="element", name="valueUri", namespace="##targetNamespace")
	!resolve val Uri valueUri;

	@ExtendedMetaData(kind="element", name="valueAttachment", namespace="##targetNamespace")
	!resolve val Attachment valueAttachment;

	@ExtendedMetaData(kind="element", name="valueCoding", namespace="##targetNamespace")
	!resolve val Coding valueCoding;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueReference", namespace="##targetNamespace")
	!resolve val Reference valueReference;

	@GenModel(documentation="Nested groups and/or questions found within this particular answer.")
	@ExtendedMetaData(kind="element", name="item", namespace="##targetNamespace")
	!resolve val QuestionnaireResponseItem[*] item;
}

@GenModel(documentation="A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the questionnaire being responded to.")
@ExtendedMetaData(name="QuestionnaireResponse.Item", kind="elementOnly")
class QuestionnaireResponseItem extends BackboneElement {

	@GenModel(documentation="The item from the Questionnaire that corresponds to this item in the QuestionnaireResponse resource.")
	@ExtendedMetaData(kind="element", name="linkId", namespace="##targetNamespace")
	!resolve val String[1] linkId;

	@GenModel(documentation="A reference to an [ElementDefinition](elementdefinition.html) that provides the details for the item.")
	@ExtendedMetaData(kind="element", name="definition", namespace="##targetNamespace")
	!resolve val Uri definition;

	@GenModel(documentation="Text that is displayed above the contents of the group or as the text of the question being answered.")
	@ExtendedMetaData(kind="element", name="text", namespace="##targetNamespace")
	!resolve val String text;

	@GenModel(documentation="The respondent's answer(s) to the question.")
	@ExtendedMetaData(kind="element", name="answer", namespace="##targetNamespace")
	!resolve val QuestionnaireResponseAnswer[*] answer;

	@GenModel(documentation="Sub-questions, sub-groups or display items nested beneath a group.")
	@ExtendedMetaData(kind="element", name="item", namespace="##targetNamespace")
	!resolve val QuestionnaireResponseItem[*] item;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="QuestionnaireResponseStatus", kind="elementOnly")
class QuestionnaireResponseStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr QuestionnaireResponseStatusEnum value;
}

@ExtendedMetaData(name="QuestionnaireResponseStatusEnum")
enum QuestionnaireResponseStatusEnum {

	@GenModel(documentation="In Progress")
	inProgress = 0;

	@GenModel(documentation="Completed")
	completed = 1;

	@GenModel(documentation="Amended")
	amended = 2;

	@GenModel(documentation="Entered in Error")
	enteredInError = 3;

	@GenModel(documentation="Stopped")
	stopped = 4;
}

@ExtendedMetaData(name="QuestionnaireResponseStatusEnum:Object", baseType="QuestionnaireResponseStatusEnum")
datatype QuestionnaireResponseStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A set of ordered Quantities defined by a low and high limit.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="Range", kind="elementOnly")
class Range extends DataType {

	@GenModel(documentation="The low limit. The boundary is inclusive.")
	@ExtendedMetaData(kind="element", name="low", namespace="##targetNamespace")
	!resolve val Quantity low;

	@GenModel(documentation="The high limit. The boundary is inclusive.")
	@ExtendedMetaData(kind="element", name="high", namespace="##targetNamespace")
	!resolve val Quantity high;
}

@GenModel(documentation="A relationship of two Quantity values - expressed as a numerator and a denominator.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="Ratio", kind="elementOnly")
class Ratio extends DataType {

	@GenModel(documentation="The value of the numerator.")
	@ExtendedMetaData(kind="element", name="numerator", namespace="##targetNamespace")
	!resolve val Quantity numerator;

	@GenModel(documentation="The value of the denominator.")
	@ExtendedMetaData(kind="element", name="denominator", namespace="##targetNamespace")
	!resolve val Quantity denominator;
}

@GenModel(documentation="A range of ratios expressed as a low and high numerator and a denominator.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="RatioRange", kind="elementOnly")
class RatioRange extends DataType {

	@GenModel(documentation="The value of the low limit numerator.")
	@ExtendedMetaData(kind="element", name="lowNumerator", namespace="##targetNamespace")
	!resolve val Quantity lowNumerator;

	@GenModel(documentation="The value of the high limit numerator.")
	@ExtendedMetaData(kind="element", name="highNumerator", namespace="##targetNamespace")
	!resolve val Quantity highNumerator;

	@GenModel(documentation="The value of the denominator.")
	@ExtendedMetaData(kind="element", name="denominator", namespace="##targetNamespace")
	!resolve val Quantity denominator;
}

@GenModel(documentation="A reference from one resource to another.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="Reference", kind="elementOnly")
class Reference extends DataType {

	@GenModel(documentation="A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources.")
	@ExtendedMetaData(kind="element", name="reference", namespace="##targetNamespace")
	!resolve val String reference;

	@GenModel(documentation="The expected type of the target of the reference. If both Reference.type and Reference.reference are populated and Reference.reference is a FHIR URL, both SHALL be consistent.

The type is the Canonical URL of Resource Definition that is the type this reference refers to. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition/ e.g. \"Patient\" is a reference to http://hl7.org/fhir/StructureDefinition/Patient. Absolute URLs are only allowed for logical models (and can only be used in references in logical models, not resources).")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val Uri type;

	@GenModel(documentation="An identifier for the target resource. This is used when there is no way to reference the other resource directly, either because the entity it represents is not available through a FHIR server, or because there is no way for the author of the resource to convert a known identifier to an actual location. There is no requirement that a Reference.identifier point to something that is actually exposed as a FHIR instance, but it SHALL point to a business concept that would be expected to be exposed as a FHIR instance, and that instance would need to be of a FHIR resource type allowed by the reference.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier identifier;

	@GenModel(documentation="Plain text narrative that identifies the resource in addition to the resource reference.")
	@ExtendedMetaData(kind="element", name="display", namespace="##targetNamespace")
	!resolve val String display;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ReferenceHandlingPolicy", kind="elementOnly")
class ReferenceHandlingPolicy extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ReferenceHandlingPolicyEnum value;
}

@ExtendedMetaData(name="ReferenceHandlingPolicyEnum")
enum ReferenceHandlingPolicyEnum {

	@GenModel(documentation="Literal References")
	literal = 0;

	@GenModel(documentation="Logical References")
	logical = 1;

	@GenModel(documentation="Resolves References")
	resolves = 2;

	@GenModel(documentation="Reference Integrity Enforced")
	enforced = 3;

	@GenModel(documentation="Local References Only")
	local = 4;
}

@ExtendedMetaData(name="ReferenceHandlingPolicyEnum:Object", baseType="ReferenceHandlingPolicyEnum")
datatype ReferenceHandlingPolicyEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="Whether a reference needs to be version specific or version independent, or whether either can be used.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ReferenceVersionRules", kind="elementOnly")
class ReferenceVersionRules extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ReferenceVersionRulesEnum value;
}

@ExtendedMetaData(name="ReferenceVersionRulesEnum")
enum ReferenceVersionRulesEnum {

	@GenModel(documentation="Either Specific or independent")
	either = 0;

	@GenModel(documentation="Version independent")
	independent = 1;

	@GenModel(documentation="Version Specific")
	specific = 2;
}

@ExtendedMetaData(name="ReferenceVersionRulesEnum:Object", baseType="ReferenceVersionRulesEnum")
datatype ReferenceVersionRulesEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="Regulatory approval, clearance or licencing related to a regulated product, treatment, facility or activity that is cited in a guidance, regulation, rule or legislative act. An example is Market Authorization relating to a Medicinal Product.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="RegulatedAuthorization", kind="elementOnly")
class RegulatedAuthorization extends DomainResource {

	@GenModel(documentation="Business identifier for the authorization, typically assigned by the authorizing body.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The product type, treatment, facility or activity that is being authorized.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference[*] subject;

	@GenModel(documentation="Overall type of this authorization, for example drug marketing approval, orphan drug designation.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="General textual supporting information.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The territory (e.g., country, jurisdiction etc.) in which the authorization has been granted.")
	@ExtendedMetaData(kind="element", name="region", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] region;

	@GenModel(documentation="The status that is authorised e.g. approved. Intermediate states and actions can be tracked with cases and applications.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val CodeableConcept status;

	@GenModel(documentation="The date at which the current status was assigned.")
	@ExtendedMetaData(kind="element", name="statusDate", namespace="##targetNamespace")
	!resolve val DateTime statusDate;

	@GenModel(documentation="The time period in which the regulatory approval, clearance or licencing is in effect. As an example, a Marketing Authorization includes the date of authorization and/or an expiration date.")
	@ExtendedMetaData(kind="element", name="validityPeriod", namespace="##targetNamespace")
	!resolve val Period validityPeriod;

	@GenModel(documentation="Condition for which the use of the regulated product applies.")
	@ExtendedMetaData(kind="element", name="indication", namespace="##targetNamespace")
	!resolve val CodeableReference[*] indication;

	@GenModel(documentation="The intended use of the product, e.g. prevention, treatment, diagnosis.")
	@ExtendedMetaData(kind="element", name="intendedUse", namespace="##targetNamespace")
	!resolve val CodeableConcept intendedUse;

	@GenModel(documentation="The legal or regulatory framework against which this authorization is granted, or other reasons for it.")
	@ExtendedMetaData(kind="element", name="basis", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] basis;

	@GenModel(documentation="The organization that has been granted this authorization, by some authoritative body (the 'regulator').")
	@ExtendedMetaData(kind="element", name="holder", namespace="##targetNamespace")
	!resolve val Reference holder;

	@GenModel(documentation="The regulatory authority or authorizing body granting the authorization. For example, European Medicines Agency (EMA), Food and Drug Administration (FDA), Health Canada (HC), etc.")
	@ExtendedMetaData(kind="element", name="regulator", namespace="##targetNamespace")
	!resolve val Reference regulator;

	@GenModel(documentation="Additional information or supporting documentation about the authorization.")
	@ExtendedMetaData(kind="element", name="attachedDocument", namespace="##targetNamespace")
	!resolve val Reference[*] attachedDocument;

	@GenModel(documentation="The case or regulatory procedure for granting or amending a regulated authorization. An authorization is granted in response to submissions/applications by those seeking authorization. A case is the administrative process that deals with the application(s) that relate to this and assesses them. Note: This area is subject to ongoing review and the workgroup is seeking implementer feedback on its use (see link at bottom of page).")
	@ExtendedMetaData(kind="element", name="case", namespace="##targetNamespace")
	!resolve val RegulatedAuthorizationCase case;
}

@GenModel(documentation="Regulatory approval, clearance or licencing related to a regulated product, treatment, facility or activity that is cited in a guidance, regulation, rule or legislative act. An example is Market Authorization relating to a Medicinal Product.")
@ExtendedMetaData(name="RegulatedAuthorization.Case", kind="elementOnly")
class RegulatedAuthorizationCase extends BackboneElement {

	@GenModel(documentation="Identifier by which this case can be referenced.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier identifier;

	@GenModel(documentation="The defining type of case.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="The status associated with the case.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val CodeableConcept status;

	@ExtendedMetaData(kind="element", name="datePeriod", namespace="##targetNamespace")
	!resolve val Period datePeriod;

	@ExtendedMetaData(kind="element", name="dateDateTime", namespace="##targetNamespace")
	!resolve val DateTime dateDateTime;

	@GenModel(documentation="A regulatory submission from an organization to a regulator, as part of an assessing case. Multiple applications may occur over time, with more or different information to support or modify the submission or the authorization. The applications can be considered as steps within the longer running case or procedure for this authorization process.")
	@ExtendedMetaData(kind="element", name="application", namespace="##targetNamespace")
	!resolve val RegulatedAuthorizationCase[*] application;
}

@GenModel(documentation="Related artifacts such as additional documentation, justification, or bibliographic references.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="RelatedArtifact", kind="elementOnly")
class RelatedArtifact extends DataType {

	@GenModel(documentation="The type of relationship to the related artifact.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val RelatedArtifactType[1] type;

	@GenModel(documentation="Provides additional classifiers of the related artifact.")
	@ExtendedMetaData(kind="element", name="classifier", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] classifier;

	@GenModel(documentation="A short label that can be used to reference the citation from elsewhere in the containing artifact, such as a footnote index.")
	@ExtendedMetaData(kind="element", name="label", namespace="##targetNamespace")
	!resolve val String label;

	@GenModel(documentation="A brief description of the document or knowledge resource being referenced, suitable for display to a consumer.")
	@ExtendedMetaData(kind="element", name="display", namespace="##targetNamespace")
	!resolve val String display;

	@GenModel(documentation="A bibliographic citation for the related artifact. This text SHOULD be formatted according to an accepted citation format.")
	@ExtendedMetaData(kind="element", name="citation", namespace="##targetNamespace")
	!resolve val Markdown citation;

	@GenModel(documentation="The document being referenced, represented as an attachment. This is exclusive with the resource element.")
	@ExtendedMetaData(kind="element", name="document", namespace="##targetNamespace")
	!resolve val Attachment document;

	@GenModel(documentation="The related artifact, such as a library, value set, profile, or other knowledge resource.")
	@ExtendedMetaData(kind="element", name="resource", namespace="##targetNamespace")
	!resolve val Canonical resource;

	@GenModel(documentation="The related artifact, if the artifact is not a canonical resource, or a resource reference to a canonical resource.")
	@ExtendedMetaData(kind="element", name="resourceReference", namespace="##targetNamespace")
	!resolve val Reference resourceReference;

	@GenModel(documentation="The publication status of the artifact being referred to.")
	@ExtendedMetaData(kind="element", name="publicationStatus", namespace="##targetNamespace")
	!resolve val Code publicationStatus;

	@GenModel(documentation="The date of publication of the artifact being referred to.")
	@ExtendedMetaData(kind="element", name="publicationDate", namespace="##targetNamespace")
	!resolve val Date publicationDate;
}

@GenModel(documentation="The type of relationship to the related artifact.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="RelatedArtifactType", kind="elementOnly")
class RelatedArtifactType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr RelatedArtifactTypeEnum value;
}

@ExtendedMetaData(name="RelatedArtifactTypeEnum")
enum RelatedArtifactTypeEnum {

	@GenModel(documentation="Documentation")
	documentation = 0;

	@GenModel(documentation="Justification")
	justification = 1;

	@GenModel(documentation="Citation")
	citation = 2;

	@GenModel(documentation="Predecessor")
	predecessor = 3;

	@GenModel(documentation="Successor")
	successor = 4;

	@GenModel(documentation="Derived From")
	derivedFrom = 5;

	@GenModel(documentation="Depends On")
	dependsOn = 6;

	@GenModel(documentation="Composed Of")
	composedOf = 7;

	@GenModel(documentation="Part Of")
	partOf = 8;

	@GenModel(documentation="Amends")
	amends = 9;

	@GenModel(documentation="Amended With")
	amendedWith = 10;

	@GenModel(documentation="Appends")
	appends = 11;

	@GenModel(documentation="Appended With")
	appendedWith = 12;

	@GenModel(documentation="Cites")
	cites = 13;

	@GenModel(documentation="Cited By")
	citedBy = 14;

	@GenModel(documentation="Is Comment On")
	commentsOn = 15;

	@GenModel(documentation="Has Comment In")
	commentIn = 16;

	@GenModel(documentation="Contains")
	contains = 17;

	@GenModel(documentation="Contained In")
	containedIn = 18;

	@GenModel(documentation="Corrects")
	corrects = 19;

	@GenModel(documentation="Correction In")
	correctionIn = 20;

	@GenModel(documentation="Replaces")
	replaces = 21;

	@GenModel(documentation="Replaced With")
	replacedWith = 22;

	@GenModel(documentation="Retracts")
	retracts = 23;

	@GenModel(documentation="Retracted By")
	retractedBy = 24;

	@GenModel(documentation="Signs")
	signs = 25;

	@GenModel(documentation="Similar To")
	similarTo = 26;

	@GenModel(documentation="Supports")
	supports = 27;

	@GenModel(documentation="Supported With")
	supportedWith = 28;

	@GenModel(documentation="Transforms")
	transforms = 29;

	@GenModel(documentation="Transformed Into")
	transformedInto = 30;

	@GenModel(documentation="Transformed With")
	transformedWith = 31;

	@GenModel(documentation="Documents")
	documents = 32;

	@GenModel(documentation="Specification Of")
	specificationOf = 33;

	@GenModel(documentation="Created With")
	createdWith = 34;

	@GenModel(documentation="Cite As")
	citeAs = 35;
}

@ExtendedMetaData(name="RelatedArtifactTypeEnum:Object", baseType="RelatedArtifactTypeEnum")
datatype RelatedArtifactTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="RelatedArtifactTypeExpanded", kind="elementOnly")
class RelatedArtifactTypeExpanded extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr RelatedArtifactTypeExpandedEnum value;
}

@ExtendedMetaData(name="RelatedArtifactTypeExpandedEnum")
enum RelatedArtifactTypeExpandedEnum {

	@GenModel(documentation="Documentation")
	documentation = 0;

	@GenModel(documentation="Justification")
	justification = 1;

	@GenModel(documentation="Citation")
	citation = 2;

	@GenModel(documentation="Predecessor")
	predecessor = 3;

	@GenModel(documentation="Successor")
	successor = 4;

	@GenModel(documentation="Derived From")
	derivedFrom = 5;

	@GenModel(documentation="Depends On")
	dependsOn = 6;

	@GenModel(documentation="Composed Of")
	composedOf = 7;

	@GenModel(documentation="Part Of")
	partOf = 8;

	@GenModel(documentation="Amends")
	amends = 9;

	@GenModel(documentation="Amended With")
	amendedWith = 10;

	@GenModel(documentation="Appends")
	appends = 11;

	@GenModel(documentation="Appended With")
	appendedWith = 12;

	@GenModel(documentation="Cites")
	cites = 13;

	@GenModel(documentation="Cited By")
	citedBy = 14;

	@GenModel(documentation="Is Comment On")
	commentsOn = 15;

	@GenModel(documentation="Has Comment In")
	commentIn = 16;

	@GenModel(documentation="Contains")
	contains = 17;

	@GenModel(documentation="Contained In")
	containedIn = 18;

	@GenModel(documentation="Corrects")
	corrects = 19;

	@GenModel(documentation="Correction In")
	correctionIn = 20;

	@GenModel(documentation="Replaces")
	replaces = 21;

	@GenModel(documentation="Replaced With")
	replacedWith = 22;

	@GenModel(documentation="Retracts")
	retracts = 23;

	@GenModel(documentation="Retracted By")
	retractedBy = 24;

	@GenModel(documentation="Signs")
	signs = 25;

	@GenModel(documentation="Similar To")
	similarTo = 26;

	@GenModel(documentation="Supports")
	supports = 27;

	@GenModel(documentation="Supported With")
	supportedWith = 28;

	@GenModel(documentation="Transforms")
	transforms = 29;

	@GenModel(documentation="Transformed Into")
	transformedInto = 30;

	@GenModel(documentation="Transformed With")
	transformedWith = 31;

	@GenModel(documentation="Documents")
	documents = 32;

	@GenModel(documentation="Specification Of")
	specificationOf = 33;

	@GenModel(documentation="Created With")
	createdWith = 34;

	@GenModel(documentation="Cite As")
	citeAs = 35;

	@GenModel(documentation="Reprint")
	reprint = 36;

	@GenModel(documentation="Reprint Of")
	reprintOf = 37;
}

@ExtendedMetaData(name="RelatedArtifactTypeExpandedEnum:Object", baseType="RelatedArtifactTypeExpandedEnum")
datatype RelatedArtifactTypeExpandedEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="Information about a person that is involved in a patient's health or the care for a patient, but who is not the target of healthcare, nor has a formal responsibility in the care process.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="RelatedPerson", kind="elementOnly")
class RelatedPerson extends DomainResource {

	@GenModel(documentation="Identifier for a person within a particular scope.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Whether this related person record is in active use.")
	@ExtendedMetaData(kind="element", name="active", namespace="##targetNamespace")
	!resolve val Boolean active;

	@GenModel(documentation="The patient this person is related to.")
	@ExtendedMetaData(kind="element", name="patient", namespace="##targetNamespace")
	!resolve val Reference[1] patient;

	@GenModel(documentation="The nature of the relationship between the related person and the patient.")
	@ExtendedMetaData(kind="element", name="relationship", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] relationship;

	@GenModel(documentation="A name associated with the person.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val HumanName[*] name;

	@GenModel(documentation="A contact detail for the person, e.g. a telephone number or an email address.")
	@ExtendedMetaData(kind="element", name="telecom", namespace="##targetNamespace")
	!resolve val ContactPoint[*] telecom;

	@GenModel(documentation="Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.")
	@ExtendedMetaData(kind="element", name="gender", namespace="##targetNamespace")
	!resolve val AdministrativeGender gender;

	@GenModel(documentation="The date on which the related person was born.")
	@ExtendedMetaData(kind="element", name="birthDate", namespace="##targetNamespace")
	!resolve val Date birthDate;

	@GenModel(documentation="Address where the related person can be contacted or visited.")
	@ExtendedMetaData(kind="element", name="address", namespace="##targetNamespace")
	!resolve val Address[*] address;

	@GenModel(documentation="Image of the person.")
	@ExtendedMetaData(kind="element", name="photo", namespace="##targetNamespace")
	!resolve val Attachment[*] photo;

	@GenModel(documentation="The period of time during which this relationship is or was active. If there are no dates defined, then the interval is unknown.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;

	@GenModel(documentation="A language which may be used to communicate with the related person about the patient's health.")
	@ExtendedMetaData(kind="element", name="communication", namespace="##targetNamespace")
	!resolve val RelatedPersonCommunication[*] communication;
}

@GenModel(documentation="Information about a person that is involved in a patient's health or the care for a patient, but who is not the target of healthcare, nor has a formal responsibility in the care process.")
@ExtendedMetaData(name="RelatedPerson.Communication", kind="elementOnly")
class RelatedPersonCommunication extends BackboneElement {

	@GenModel(documentation="The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. \"en\" for English, or \"en-US\" for American English versus \"en-AU\" for Australian English.")
	@ExtendedMetaData(kind="element", name="language", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] language;

	@GenModel(documentation="Indicates whether or not the related person prefers this language (over other languages he or she masters up a certain level).")
	@ExtendedMetaData(kind="element", name="preferred", namespace="##targetNamespace")
	!resolve val Boolean preferred;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="RemittanceOutcome", kind="elementOnly")
class RemittanceOutcome extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr RemittanceOutcomeEnum value;
}

@ExtendedMetaData(name="RemittanceOutcomeEnum")
enum RemittanceOutcomeEnum {

	@GenModel(documentation="Complete")
	complete = 0;

	@GenModel(documentation="Error")
	error = 1;

	@GenModel(documentation="Partial")
	partial = 2;
}

@ExtendedMetaData(name="RemittanceOutcomeEnum:Object", baseType="RemittanceOutcomeEnum")
datatype RemittanceOutcomeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ReportRelationshipType", kind="elementOnly")
class ReportRelationshipType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ReportRelationshipTypeEnum value;
}

@ExtendedMetaData(name="ReportRelationshipTypeEnum")
enum ReportRelationshipTypeEnum {

	@GenModel(documentation="Replaces")
	replaces = 0;

	@GenModel(documentation="Amends")
	amends = 1;

	@GenModel(documentation="Appends")
	appends = 2;

	@GenModel(documentation="Transforms")
	transforms = 3;

	@GenModel(documentation="Replaced With")
	replacedWith = 4;

	@GenModel(documentation="Amended With")
	amendedWith = 5;

	@GenModel(documentation="Appended With")
	appendedWith = 6;

	@GenModel(documentation="Transformed With")
	transformedWith = 7;
}

@ExtendedMetaData(name="ReportRelationshipTypeEnum:Object", baseType="ReportRelationshipTypeEnum")
datatype ReportRelationshipTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="RequestIntent", kind="elementOnly")
class RequestIntent extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr RequestIntentEnum value;
}

@ExtendedMetaData(name="RequestIntentEnum")
enum RequestIntentEnum {

	@GenModel(documentation="Proposal")
	proposal = 0;

	@GenModel(documentation="Plan")
	plan = 1;

	@GenModel(documentation="Directive")
	directive = 2;

	@GenModel(documentation="Order")
	order = 3;

	@GenModel(documentation="Original Order")
	originalOrder = 4;

	@GenModel(documentation="Reflex Order")
	reflexOrder = 5;

	@GenModel(documentation="Filler Order")
	fillerOrder = 6;

	@GenModel(documentation="Instance Order")
	instanceOrder = 7;

	@GenModel(documentation="Option")
	option = 8;
}

@ExtendedMetaData(name="RequestIntentEnum:Object", baseType="RequestIntentEnum")
datatype RequestIntentEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A set of related requests that can be used to capture intended activities that have inter-dependencies such as \"give this medication after that one\".
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="RequestOrchestration", kind="elementOnly")
class RequestOrchestration extends DomainResource {

	@GenModel(documentation="Allows a service to provide a unique, business identifier for the request.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="A canonical URL referencing a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this request.")
	@ExtendedMetaData(kind="element", name="instantiatesCanonical", namespace="##targetNamespace")
	!resolve val Canonical[*] instantiatesCanonical;

	@GenModel(documentation="A URL referencing an externally defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this request.")
	@ExtendedMetaData(kind="element", name="instantiatesUri", namespace="##targetNamespace")
	!resolve val Uri[*] instantiatesUri;

	@GenModel(documentation="A plan, proposal or order that is fulfilled in whole or in part by this request.")
	@ExtendedMetaData(kind="element", name="basedOn", namespace="##targetNamespace")
	!resolve val Reference[*] basedOn;

	@GenModel(documentation="Completed or terminated request(s) whose function is taken by this new request.")
	@ExtendedMetaData(kind="element", name="replaces", namespace="##targetNamespace")
	!resolve val Reference[*] replaces;

	@GenModel(documentation="A shared identifier common to multiple independent Request instances that were activated/authorized more or less simultaneously by a single author.  The presence of the same identifier on each request ties those requests together and may have business ramifications in terms of reporting of results, billing, etc.  E.g. a requisition number shared by a set of lab tests ordered together, or a prescription number shared by all meds ordered at one time.")
	@ExtendedMetaData(kind="element", name="groupIdentifier", namespace="##targetNamespace")
	!resolve val Identifier groupIdentifier;

	@GenModel(documentation="The current state of the request. For request orchestrations, the status reflects the status of all the requests in the orchestration.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val RequestStatus[1] status;

	@GenModel(documentation="Indicates the level of authority/intentionality associated with the request and where the request fits into the workflow chain.")
	@ExtendedMetaData(kind="element", name="intent", namespace="##targetNamespace")
	!resolve val RequestIntent[1] intent;

	@GenModel(documentation="Indicates how quickly the request should be addressed with respect to other requests.")
	@ExtendedMetaData(kind="element", name="priority", namespace="##targetNamespace")
	!resolve val RequestPriority priority;

	@GenModel(documentation="A code that identifies what the overall request orchestration is.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@GenModel(documentation="The subject for which the request orchestration was created.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference subject;

	@GenModel(documentation="Describes the context of the request orchestration, if any.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@GenModel(documentation="Indicates when the request orchestration was created.")
	@ExtendedMetaData(kind="element", name="authoredOn", namespace="##targetNamespace")
	!resolve val DateTime authoredOn;

	@GenModel(documentation="Provides a reference to the author of the request orchestration.")
	@ExtendedMetaData(kind="element", name="author", namespace="##targetNamespace")
	!resolve val Reference author;

	@GenModel(documentation="Describes the reason for the request orchestration in coded or textual form.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val CodeableReference[*] reason;

	@GenModel(documentation="Goals that are intended to be achieved by following the requests in this RequestOrchestration.")
	@ExtendedMetaData(kind="element", name="goal", namespace="##targetNamespace")
	!resolve val Reference[*] goal;

	@GenModel(documentation="Provides a mechanism to communicate additional information about the response.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="The actions, if any, produced by the evaluation of the artifact.")
	@ExtendedMetaData(kind="element", name="action", namespace="##targetNamespace")
	!resolve val RequestOrchestrationAction[*] action;
}

@GenModel(documentation="A set of related requests that can be used to capture intended activities that have inter-dependencies such as \"give this medication after that one\".")
@ExtendedMetaData(name="RequestOrchestration.Action", kind="elementOnly")
class RequestOrchestrationAction extends BackboneElement {

	@GenModel(documentation="The linkId of the action from the PlanDefinition that corresponds to this action in the RequestOrchestration resource.")
	@ExtendedMetaData(kind="element", name="linkId", namespace="##targetNamespace")
	!resolve val String linkId;

	@GenModel(documentation="A user-visible prefix for the action. For example a section or item numbering such as 1. or A.")
	@ExtendedMetaData(kind="element", name="prefix", namespace="##targetNamespace")
	!resolve val String prefix;

	@GenModel(documentation="The title of the action displayed to a user.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="A short description of the action used to provide a summary to display to the user.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="A text equivalent of the action to be performed. This provides a human-interpretable description of the action when the definition is consumed by a system that might not be capable of interpreting it dynamically.")
	@ExtendedMetaData(kind="element", name="textEquivalent", namespace="##targetNamespace")
	!resolve val Markdown textEquivalent;

	@GenModel(documentation="Indicates how quickly the action should be addressed with respect to other actions.")
	@ExtendedMetaData(kind="element", name="priority", namespace="##targetNamespace")
	!resolve val RequestPriority priority;

	@GenModel(documentation="A code that provides meaning for the action or action group. For example, a section may have a LOINC code for a section of a documentation template.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] code;

	@GenModel(documentation="Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources.")
	@ExtendedMetaData(kind="element", name="documentation", namespace="##targetNamespace")
	!resolve val RelatedArtifact[*] documentation;

	@GenModel(documentation="Goals that are intended to be achieved by following the requests in this action.")
	@ExtendedMetaData(kind="element", name="goal", namespace="##targetNamespace")
	!resolve val Reference[*] goal;

	@GenModel(documentation="An expression that describes applicability criteria, or start/stop conditions for the action.")
	@ExtendedMetaData(kind="element", name="condition", namespace="##targetNamespace")
	!resolve val RequestOrchestrationCondition[*] condition;

	@GenModel(documentation="Defines input data requirements for the action.")
	@ExtendedMetaData(kind="element", name="input", namespace="##targetNamespace")
	!resolve val RequestOrchestrationInput[*] input;

	@GenModel(documentation="Defines the outputs of the action, if any.")
	@ExtendedMetaData(kind="element", name="output", namespace="##targetNamespace")
	!resolve val RequestOrchestrationOutput[*] output;

	@GenModel(documentation="A relationship to another action such as \"before\" or \"30-60 minutes after start of\".")
	@ExtendedMetaData(kind="element", name="relatedAction", namespace="##targetNamespace")
	!resolve val RequestOrchestrationRelatedAction[*] relatedAction;

	@ExtendedMetaData(kind="element", name="timingDateTime", namespace="##targetNamespace")
	!resolve val DateTime timingDateTime;

	@ExtendedMetaData(kind="element", name="timingAge", namespace="##targetNamespace")
	!resolve val Age timingAge;

	@ExtendedMetaData(kind="element", name="timingPeriod", namespace="##targetNamespace")
	!resolve val Period timingPeriod;

	@ExtendedMetaData(kind="element", name="timingDuration", namespace="##targetNamespace")
	!resolve val Duration timingDuration;

	@ExtendedMetaData(kind="element", name="timingRange", namespace="##targetNamespace")
	!resolve val Range timingRange;

	@ExtendedMetaData(kind="element", name="timingTiming", namespace="##targetNamespace")
	!resolve val Timing timingTiming;

	@GenModel(documentation="Identifies the facility where the action will occur; e.g. home, hospital, specific clinic, etc.")
	@ExtendedMetaData(kind="element", name="location", namespace="##targetNamespace")
	!resolve val CodeableReference location;

	@GenModel(documentation="The participant that should perform or be responsible for this action.")
	@ExtendedMetaData(kind="element", name="participant", namespace="##targetNamespace")
	!resolve val RequestOrchestrationParticipant[*] participant;

	@GenModel(documentation="The type of action to perform (create, update, remove).")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="Defines the grouping behavior for the action and its children.")
	@ExtendedMetaData(kind="element", name="groupingBehavior", namespace="##targetNamespace")
	!resolve val ActionGroupingBehavior groupingBehavior;

	@GenModel(documentation="Defines the selection behavior for the action and its children.")
	@ExtendedMetaData(kind="element", name="selectionBehavior", namespace="##targetNamespace")
	!resolve val ActionSelectionBehavior selectionBehavior;

	@GenModel(documentation="Defines expectations around whether an action is required.")
	@ExtendedMetaData(kind="element", name="requiredBehavior", namespace="##targetNamespace")
	!resolve val ActionRequiredBehavior requiredBehavior;

	@GenModel(documentation="Defines whether the action should usually be preselected.")
	@ExtendedMetaData(kind="element", name="precheckBehavior", namespace="##targetNamespace")
	!resolve val ActionPrecheckBehavior precheckBehavior;

	@GenModel(documentation="Defines whether the action can be selected multiple times.")
	@ExtendedMetaData(kind="element", name="cardinalityBehavior", namespace="##targetNamespace")
	!resolve val ActionCardinalityBehavior cardinalityBehavior;

	@GenModel(documentation="The resource that is the target of the action (e.g. CommunicationRequest).")
	@ExtendedMetaData(kind="element", name="resource", namespace="##targetNamespace")
	!resolve val Reference resource;

	@ExtendedMetaData(kind="element", name="definitionCanonical", namespace="##targetNamespace")
	!resolve val Canonical definitionCanonical;

	@ExtendedMetaData(kind="element", name="definitionUri", namespace="##targetNamespace")
	!resolve val Uri definitionUri;

	@GenModel(documentation="A reference to a StructureMap resource that defines a transform that can be executed to produce the intent resource using the ActivityDefinition instance as the input.")
	@ExtendedMetaData(kind="element", name="transform", namespace="##targetNamespace")
	!resolve val Canonical transform;

	@GenModel(documentation="Customizations that should be applied to the statically defined resource. For example, if the dosage of a medication must be computed based on the patient's weight, a customization would be used to specify an expression that calculated the weight, and the path on the resource that would contain the result.")
	@ExtendedMetaData(kind="element", name="dynamicValue", namespace="##targetNamespace")
	!resolve val RequestOrchestrationDynamicValue[*] dynamicValue;

	@GenModel(documentation="Sub actions.")
	@ExtendedMetaData(kind="element", name="action", namespace="##targetNamespace")
	!resolve val RequestOrchestrationAction[*] action;
}

@GenModel(documentation="A set of related requests that can be used to capture intended activities that have inter-dependencies such as \"give this medication after that one\".")
@ExtendedMetaData(name="RequestOrchestration.Condition", kind="elementOnly")
class RequestOrchestrationCondition extends BackboneElement {

	@GenModel(documentation="The kind of condition.")
	@ExtendedMetaData(kind="element", name="kind", namespace="##targetNamespace")
	!resolve val ActionConditionKind[1] kind;

	@GenModel(documentation="An expression that returns true or false, indicating whether or not the condition is satisfied.")
	@ExtendedMetaData(kind="element", name="expression", namespace="##targetNamespace")
	!resolve val Expression expression;
}

@GenModel(documentation="A set of related requests that can be used to capture intended activities that have inter-dependencies such as \"give this medication after that one\".")
@ExtendedMetaData(name="RequestOrchestration.DynamicValue", kind="elementOnly")
class RequestOrchestrationDynamicValue extends BackboneElement {

	@GenModel(documentation="The path to the element to be customized. This is the path on the resource that will hold the result of the calculation defined by the expression. The specified path SHALL be a FHIRPath resolvable on the specified target type of the ActivityDefinition, and SHALL consist only of identifiers, constant indexers, and a restricted subset of functions. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).")
	@ExtendedMetaData(kind="element", name="path", namespace="##targetNamespace")
	!resolve val String path;

	@GenModel(documentation="An expression specifying the value of the customized element.")
	@ExtendedMetaData(kind="element", name="expression", namespace="##targetNamespace")
	!resolve val Expression expression;
}

@GenModel(documentation="A set of related requests that can be used to capture intended activities that have inter-dependencies such as \"give this medication after that one\".")
@ExtendedMetaData(name="RequestOrchestration.Input", kind="elementOnly")
class RequestOrchestrationInput extends BackboneElement {

	@GenModel(documentation="A human-readable label for the data requirement used to label data flows in BPMN or similar diagrams. Also provides a human readable label when rendering the data requirement that conveys its purpose to human readers.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="Defines the data that is to be provided as input to the action.")
	@ExtendedMetaData(kind="element", name="requirement", namespace="##targetNamespace")
	!resolve val DataRequirement requirement;

	@GenModel(documentation="Points to an existing input or output element that provides data to this input.")
	@ExtendedMetaData(kind="element", name="relatedData", namespace="##targetNamespace")
	!resolve val Id relatedData;
}

@GenModel(documentation="A set of related requests that can be used to capture intended activities that have inter-dependencies such as \"give this medication after that one\".")
@ExtendedMetaData(name="RequestOrchestration.Output", kind="elementOnly")
class RequestOrchestrationOutput extends BackboneElement {

	@GenModel(documentation="A human-readable label for the data requirement used to label data flows in BPMN or similar diagrams. Also provides a human readable label when rendering the data requirement that conveys its purpose to human readers.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="Defines the data that results as output from the action.")
	@ExtendedMetaData(kind="element", name="requirement", namespace="##targetNamespace")
	!resolve val DataRequirement requirement;

	@GenModel(documentation="Points to an existing input or output element that is results as output from the action.")
	@ExtendedMetaData(kind="element", name="relatedData", namespace="##targetNamespace")
	!resolve val String relatedData;
}

@GenModel(documentation="A set of related requests that can be used to capture intended activities that have inter-dependencies such as \"give this medication after that one\".")
@ExtendedMetaData(name="RequestOrchestration.Participant", kind="elementOnly")
class RequestOrchestrationParticipant extends BackboneElement {

	@GenModel(documentation="The type of participant in the action.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val ActionParticipantType type;

	@GenModel(documentation="The type of participant in the action.")
	@ExtendedMetaData(kind="element", name="typeCanonical", namespace="##targetNamespace")
	!resolve val Canonical typeCanonical;

	@GenModel(documentation="The type of participant in the action.")
	@ExtendedMetaData(kind="element", name="typeReference", namespace="##targetNamespace")
	!resolve val Reference typeReference;

	@GenModel(documentation="The role the participant should play in performing the described action.")
	@ExtendedMetaData(kind="element", name="role", namespace="##targetNamespace")
	!resolve val CodeableConcept role;

	@GenModel(documentation="Indicates how the actor will be involved in the action - author, reviewer, witness, etc.")
	@ExtendedMetaData(kind="element", name="function", namespace="##targetNamespace")
	!resolve val CodeableConcept function;

	@ExtendedMetaData(kind="element", name="actorCanonical", namespace="##targetNamespace")
	!resolve val Canonical actorCanonical;

	@ExtendedMetaData(kind="element", name="actorReference", namespace="##targetNamespace")
	!resolve val Reference actorReference;
}

@GenModel(documentation="A set of related requests that can be used to capture intended activities that have inter-dependencies such as \"give this medication after that one\".")
@ExtendedMetaData(name="RequestOrchestration.RelatedAction", kind="elementOnly")
class RequestOrchestrationRelatedAction extends BackboneElement {

	@GenModel(documentation="The element id of the target related action.")
	@ExtendedMetaData(kind="element", name="targetId", namespace="##targetNamespace")
	!resolve val Id[1] targetId;

	@GenModel(documentation="The relationship of this action to the related action.")
	@ExtendedMetaData(kind="element", name="relationship", namespace="##targetNamespace")
	!resolve val ActionRelationshipType[1] relationship;

	@GenModel(documentation="The relationship of the end of this action to the related action.")
	@ExtendedMetaData(kind="element", name="endRelationship", namespace="##targetNamespace")
	!resolve val ActionRelationshipType endRelationship;

	@ExtendedMetaData(kind="element", name="offsetDuration", namespace="##targetNamespace")
	!resolve val Duration offsetDuration;

	@ExtendedMetaData(kind="element", name="offsetRange", namespace="##targetNamespace")
	!resolve val Range offsetRange;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="RequestPriority", kind="elementOnly")
class RequestPriority extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr RequestPriorityEnum value;
}

@ExtendedMetaData(name="RequestPriorityEnum")
enum RequestPriorityEnum {

	@GenModel(documentation="Routine")
	routine = 0;

	@GenModel(documentation="Urgent")
	urgent = 1;

	@GenModel(documentation="ASAP")
	asap = 2;

	@GenModel(documentation="STAT")
	stat = 3;
}

@ExtendedMetaData(name="RequestPriorityEnum:Object", baseType="RequestPriorityEnum")
datatype RequestPriorityEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="RequestResourceTypes", kind="elementOnly")
class RequestResourceTypes extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr RequestResourceTypesEnum value;
}

@ExtendedMetaData(name="RequestResourceTypesEnum")
enum RequestResourceTypesEnum {

	@GenModel(documentation="Appointment")
	Appointment = 0;

	@GenModel(documentation="AppointmentResponse")
	AppointmentResponse = 1;

	@GenModel(documentation="CarePlan")
	CarePlan = 2;

	@GenModel(documentation="Claim")
	Claim = 3;

	@GenModel(documentation="CommunicationRequest")
	CommunicationRequest = 4;

	@GenModel(documentation="CoverageEligibilityRequest")
	CoverageEligibilityRequest = 5;

	@GenModel(documentation="DeviceRequest")
	DeviceRequest = 6;

	@GenModel(documentation="EnrollmentRequest")
	EnrollmentRequest = 7;

	@GenModel(documentation="ImmunizationRecommendation")
	ImmunizationRecommendation = 8;

	@GenModel(documentation="MedicationRequest")
	MedicationRequest = 9;

	@GenModel(documentation="NutritionOrder")
	NutritionOrder = 10;

	@GenModel(documentation="RequestOrchestration")
	RequestOrchestration = 11;

	@GenModel(documentation="ServiceRequest")
	ServiceRequest = 12;

	@GenModel(documentation="SupplyRequest")
	SupplyRequest = 13;

	@GenModel(documentation="Task")
	Task = 14;

	@GenModel(documentation="Transport")
	Transport = 15;

	@GenModel(documentation="VisionPrescription")
	VisionPrescription = 16;
}

@ExtendedMetaData(name="RequestResourceTypesEnum:Object", baseType="RequestResourceTypesEnum")
datatype RequestResourceTypesEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="RequestStatus", kind="elementOnly")
class RequestStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr RequestStatusEnum value;
}

@ExtendedMetaData(name="RequestStatusEnum")
enum RequestStatusEnum {

	@GenModel(documentation="Draft")
	draft = 0;

	@GenModel(documentation="Active")
	active = 1;

	@GenModel(documentation="On Hold")
	onHold = 2;

	@GenModel(documentation="Revoked")
	revoked = 3;

	@GenModel(documentation="Completed")
	completed = 4;

	@GenModel(documentation="Entered in Error")
	enteredInError = 5;

	@GenModel(documentation="Unknown")
	unknown = 6;
}

@ExtendedMetaData(name="RequestStatusEnum:Object", baseType="RequestStatusEnum")
datatype RequestStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A set of requirements - a list of features or behaviors of designed systems that are necessary to achieve organizational or regulatory goals.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Requirements", kind="elementOnly")
class Requirements extends CanonicalResource {

	@GenModel(documentation="An absolute URI that is used to identify this Requirements when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this Requirements is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the Requirements is stored on different servers.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri url;

	@GenModel(documentation="A formal identifier that is used to identify this Requirements when it is represented in other formats, or referenced in a specification, model, design or an instance.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The identifier that is used to identify this version of the Requirements when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the Requirements author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@ExtendedMetaData(kind="element", name="versionAlgorithmString", namespace="##targetNamespace")
	!resolve val String versionAlgorithmString;

	@ExtendedMetaData(kind="element", name="versionAlgorithmCoding", namespace="##targetNamespace")
	!resolve val Coding versionAlgorithmCoding;

	@GenModel(documentation="A natural language name identifying the Requirements. This name should be usable as an identifier for the module by machine processing applications such as code generation.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="A short, descriptive, user-friendly title for the Requirements.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="The status of this Requirements. Enables tracking the life-cycle of the content.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="A Boolean value to indicate that this Requirements is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.")
	@ExtendedMetaData(kind="element", name="experimental", namespace="##targetNamespace")
	!resolve val Boolean experimental;

	@GenModel(documentation="The date  (and optionally time) when the Requirements was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the Requirements changes.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="The name of the organization or individual responsible for the release and ongoing maintenance of the Requirements.")
	@ExtendedMetaData(kind="element", name="publisher", namespace="##targetNamespace")
	!resolve val String publisher;

	@GenModel(documentation="Contact details to assist a user in finding and communicating with the publisher.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactDetail[*] contact;

	@GenModel(documentation="A free text natural language description of the requirements.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate Requirements instances.")
	@ExtendedMetaData(kind="element", name="useContext", namespace="##targetNamespace")
	!resolve val UsageContext[*] useContext;

	@GenModel(documentation="A legal or geographic region in which the Requirements is intended to be used.")
	@ExtendedMetaData(kind="element", name="jurisdiction", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] jurisdiction;

	@GenModel(documentation="Explanation of why this Requirements is needed and why it has been designed as it has.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val Markdown purpose;

	@GenModel(documentation="A copyright statement relating to the Requirements and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the Requirements.")
	@ExtendedMetaData(kind="element", name="copyright", namespace="##targetNamespace")
	!resolve val Markdown copyright;

	@GenModel(documentation="A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').")
	@ExtendedMetaData(kind="element", name="copyrightLabel", namespace="##targetNamespace")
	!resolve val String copyrightLabel;

	@GenModel(documentation="Another set of Requirements that this set of Requirements builds on and updates.")
	@ExtendedMetaData(kind="element", name="derivedFrom", namespace="##targetNamespace")
	!resolve val Canonical[*] derivedFrom;

	@GenModel(documentation="A reference to another artifact that created this set of requirements. This could be a Profile, etc., or external regulation, or business requirements expressed elsewhere.")
	@ExtendedMetaData(kind="element", name="reference", namespace="##targetNamespace")
	!resolve val Url[*] reference;

	@GenModel(documentation="An actor these requirements are in regard to.")
	@ExtendedMetaData(kind="element", name="actor", namespace="##targetNamespace")
	!resolve val Canonical[*] actor;

	@GenModel(documentation="The actual statement of requirement, in markdown format.")
	@ExtendedMetaData(kind="element", name="statement", namespace="##targetNamespace")
	!resolve val RequirementsStatement[*] statement;
}

@GenModel(documentation="A set of requirements - a list of features or behaviors of designed systems that are necessary to achieve organizational or regulatory goals.")
@ExtendedMetaData(name="Requirements.Statement", kind="elementOnly")
class RequirementsStatement extends BackboneElement {

	@GenModel(documentation="Key that identifies this statement (unique within this resource).")
	@ExtendedMetaData(kind="element", name="key", namespace="##targetNamespace")
	!resolve val Id[1] key;

	@GenModel(documentation="A short human usable label for this statement.")
	@ExtendedMetaData(kind="element", name="label", namespace="##targetNamespace")
	!resolve val String label;

	@GenModel(documentation="A short human usable label for this statement.")
	@ExtendedMetaData(kind="element", name="conformance", namespace="##targetNamespace")
	!resolve val ConformanceExpectation[*] conformance;

	@GenModel(documentation="This boolean flag is set to true of the text of the requirement is conditional on something e.g. it includes lanauage like 'if x then y'. This conditionality flag is introduced for purposes of filtering and colour highlighting etc.")
	@ExtendedMetaData(kind="element", name="conditionality", namespace="##targetNamespace")
	!resolve val Boolean conditionality;

	@GenModel(documentation="The actual requirement for human consumption.")
	@ExtendedMetaData(kind="element", name="requirement", namespace="##targetNamespace")
	!resolve val Markdown[1] requirement;

	@GenModel(documentation="Another statement on one of the requirements that this requirement clarifies or restricts.")
	@ExtendedMetaData(kind="element", name="derivedFrom", namespace="##targetNamespace")
	!resolve val String derivedFrom;

	@GenModel(documentation="A larger requirement that this requirement helps to refine and enable.")
	@ExtendedMetaData(kind="element", name="parent", namespace="##targetNamespace")
	!resolve val String parent;

	@GenModel(documentation="A reference to another artifact that satisfies this requirement. This could be a Profile, extension, or an element in one of those, or a CapabilityStatement, OperationDefinition, SearchParameter, CodeSystem(/code), ValueSet, Libary etc.")
	@ExtendedMetaData(kind="element", name="satisfiedBy", namespace="##targetNamespace")
	!resolve val Url[*] satisfiedBy;

	@GenModel(documentation="A reference to another artifact that created this requirement. This could be a Profile, etc., or external regulation, or business requirements expressed elsewhere.")
	@ExtendedMetaData(kind="element", name="reference", namespace="##targetNamespace")
	!resolve val Url[*] reference;

	@GenModel(documentation="Who asked for this statement to be a requirement. By default, it's assumed that the publisher knows who it is if it matters.")
	@ExtendedMetaData(kind="element", name="source", namespace="##targetNamespace")
	!resolve val Reference[*] source;
}

@GenModel(documentation="A scientific study of nature that sometimes includes processes involved in health and disease. For example, clinical trials are research studies that involve people. These studies may be related to new ways to screen, prevent, diagnose, and treat disease. They may also study certain outcomes and certain groups of people by looking at data collected in the past or future.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ResearchStudy", kind="elementOnly")
class ResearchStudy extends DomainResource {

	@GenModel(documentation="Canonical identifier for this study resource, represented as a globally unique URI.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri url;

	@GenModel(documentation="Identifiers assigned to this research study by the sponsor or other systems.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The business version for the study record.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@GenModel(documentation="Name for this study (computer friendly).")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="The human readable name of the research study.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="Additional names for the study.")
	@ExtendedMetaData(kind="element", name="label", namespace="##targetNamespace")
	!resolve val ResearchStudyLabel[*] label;

	@GenModel(documentation="The set of steps expected to be performed as part of the execution of the study.")
	@ExtendedMetaData(kind="element", name="protocol", namespace="##targetNamespace")
	!resolve val Reference[*] protocol;

	@GenModel(documentation="A larger research study of which this particular study is a component or step.")
	@ExtendedMetaData(kind="element", name="partOf", namespace="##targetNamespace")
	!resolve val Reference[*] partOf;

	@GenModel(documentation="Citations, references, URLs and other related documents.  When using relatedArtifact to share URLs, the relatedArtifact.type will often be set to one of \"documentation\" or \"supported-with\" and the URL value will often be in relatedArtifact.document.url but another possible location is relatedArtifact.resource when it is a canonical URL.")
	@ExtendedMetaData(kind="element", name="relatedArtifact", namespace="##targetNamespace")
	!resolve val RelatedArtifact[*] relatedArtifact;

	@GenModel(documentation="The date (and optionally time) when the ResearchStudy Resource was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the ResearchStudy Resource changes.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="The publication state of the resource (not of the study).")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="The type of study based upon the intent of the study activities. A classification of the intent of the study.")
	@ExtendedMetaData(kind="element", name="primaryPurposeType", namespace="##targetNamespace")
	!resolve val CodeableConcept primaryPurposeType;

	@GenModel(documentation="The stage in the progression of a therapy from initial experimental use in humans in clinical trials to post-market evaluation.")
	@ExtendedMetaData(kind="element", name="phase", namespace="##targetNamespace")
	!resolve val CodeableConcept phase;

	@GenModel(documentation="Codes categorizing the type of study such as investigational vs. observational, type of blinding, type of randomization, safety vs. efficacy, etc.")
	@ExtendedMetaData(kind="element", name="studyDesign", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] studyDesign;

	@GenModel(documentation="The medication(s), food(s), therapy(ies), device(s) or other concerns or interventions that the study is seeking to gain more information about.")
	@ExtendedMetaData(kind="element", name="focus", namespace="##targetNamespace")
	!resolve val CodeableReference[*] focus;

	@GenModel(documentation="The condition that is the focus of the study.  For example, In a study to examine risk factors for Lupus, might have as an inclusion criterion \"healthy volunteer\", but the target condition code would be a Lupus SNOMED code.")
	@ExtendedMetaData(kind="element", name="condition", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] condition;

	@GenModel(documentation="Key terms to aid in searching for or filtering the study.")
	@ExtendedMetaData(kind="element", name="keyword", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] keyword;

	@GenModel(documentation="A country, state or other area where the study is taking place rather than its precise geographic location or address.")
	@ExtendedMetaData(kind="element", name="region", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] region;

	@GenModel(documentation="A brief text for explaining the study.")
	@ExtendedMetaData(kind="element", name="descriptionSummary", namespace="##targetNamespace")
	!resolve val Markdown descriptionSummary;

	@GenModel(documentation="A detailed and human-readable narrative of the study. E.g., study abstract.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="Identifies the start date and the expected (or actual, depending on status) end date for the study.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;

	@GenModel(documentation="A facility in which study activities are conducted.")
	@ExtendedMetaData(kind="element", name="site", namespace="##targetNamespace")
	!resolve val Reference[*] site;

	@GenModel(documentation="Comments made about the study by the performer, subject or other participants.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="Additional grouping mechanism or categorization of a research study. Example: FDA regulated device, FDA regulated drug, MPG Paragraph 23b (a German legal requirement), IRB-exempt, etc. Implementation Note: do not use the classifier element to support existing semantics that are already supported thru explicit elements in the resource.")
	@ExtendedMetaData(kind="element", name="classifier", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] classifier;

	@GenModel(documentation="Sponsors, collaborators, and other parties.")
	@ExtendedMetaData(kind="element", name="associatedParty", namespace="##targetNamespace")
	!resolve val ResearchStudyAssociatedParty[*] associatedParty;

	@GenModel(documentation="Status of study with time for that status.")
	@ExtendedMetaData(kind="element", name="progressStatus", namespace="##targetNamespace")
	!resolve val ResearchStudyProgressStatus[*] progressStatus;

	@GenModel(documentation="A description and/or code explaining the premature termination of the study.")
	@ExtendedMetaData(kind="element", name="whyStopped", namespace="##targetNamespace")
	!resolve val CodeableConcept whyStopped;

	@GenModel(documentation="Target or actual group of participants enrolled in study.")
	@ExtendedMetaData(kind="element", name="recruitment", namespace="##targetNamespace")
	!resolve val ResearchStudyRecruitment recruitment;

	@GenModel(documentation="Describes an expected event or sequence of events for one of the subjects of a study. E.g. for a living subject: exposure to drug A, wash-out, exposure to drug B, wash-out, follow-up. E.g. for a stability study: {store sample from lot A at 25 degrees for 1 month}, {store sample from lot A at 40 degrees for 1 month}.")
	@ExtendedMetaData(kind="element", name="comparisonGroup", namespace="##targetNamespace")
	!resolve val ResearchStudyComparisonGroup[*] comparisonGroup;

	@GenModel(documentation="A goal that the study is aiming to achieve in terms of a scientific question to be answered by the analysis of data collected during the study.")
	@ExtendedMetaData(kind="element", name="objective", namespace="##targetNamespace")
	!resolve val ResearchStudyObjective[*] objective;

	@GenModel(documentation="An \"outcome measure\", \"endpoint\", \"effect measure\" or \"measure of effect\" is a specific measurement or observation used to quantify the effect of experimental variables on the participants in a study, or for observational studies, to describe patterns of diseases or traits or associations with exposures, risk factors or treatment.")
	@ExtendedMetaData(kind="element", name="outcomeMeasure", namespace="##targetNamespace")
	!resolve val ResearchStudyOutcomeMeasure[*] outcomeMeasure;

	@GenModel(documentation="Link to one or more sets of results generated by the study.  Could also link to a research registry holding the results such as ClinicalTrials.gov.")
	@ExtendedMetaData(kind="element", name="result", namespace="##targetNamespace")
	!resolve val Reference[*] result;
}

@GenModel(documentation="A scientific study of nature that sometimes includes processes involved in health and disease. For example, clinical trials are research studies that involve people. These studies may be related to new ways to screen, prevent, diagnose, and treat disease. They may also study certain outcomes and certain groups of people by looking at data collected in the past or future.")
@ExtendedMetaData(name="ResearchStudy.AssociatedParty", kind="elementOnly")
class ResearchStudyAssociatedParty extends BackboneElement {

	@GenModel(documentation="Name of associated party.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="Type of association.")
	@ExtendedMetaData(kind="element", name="role", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] role;

	@GenModel(documentation="Identifies the start date and the end date of the associated party in the role.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period[*] period;

	@GenModel(documentation="A categorization other than role for the associated party.")
	@ExtendedMetaData(kind="element", name="classifier", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] classifier;

	@GenModel(documentation="Individual or organization associated with study (use practitionerRole to specify their organisation).")
	@ExtendedMetaData(kind="element", name="party", namespace="##targetNamespace")
	!resolve val Reference party;
}

@GenModel(documentation="A scientific study of nature that sometimes includes processes involved in health and disease. For example, clinical trials are research studies that involve people. These studies may be related to new ways to screen, prevent, diagnose, and treat disease. They may also study certain outcomes and certain groups of people by looking at data collected in the past or future.")
@ExtendedMetaData(name="ResearchStudy.ComparisonGroup", kind="elementOnly")
class ResearchStudyComparisonGroup extends BackboneElement {

	@GenModel(documentation="Allows the comparisonGroup for the study and the comparisonGroup for the subject to be linked easily.")
	@ExtendedMetaData(kind="element", name="linkId", namespace="##targetNamespace")
	!resolve val Id linkId;

	@GenModel(documentation="Unique, human-readable label for this comparisonGroup of the study.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String[1] name;

	@GenModel(documentation="Categorization of study comparisonGroup, e.g. experimental, active comparator, placebo comparater.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="A succinct description of the path through the study that would be followed by a subject adhering to this comparisonGroup.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="Interventions or exposures in this comparisonGroup or cohort.")
	@ExtendedMetaData(kind="element", name="intendedExposure", namespace="##targetNamespace")
	!resolve val Reference[*] intendedExposure;

	@GenModel(documentation="Group of participants who were enrolled in study comparisonGroup.")
	@ExtendedMetaData(kind="element", name="observedGroup", namespace="##targetNamespace")
	!resolve val Reference observedGroup;
}

@GenModel(documentation="A scientific study of nature that sometimes includes processes involved in health and disease. For example, clinical trials are research studies that involve people. These studies may be related to new ways to screen, prevent, diagnose, and treat disease. They may also study certain outcomes and certain groups of people by looking at data collected in the past or future.")
@ExtendedMetaData(name="ResearchStudy.Label", kind="elementOnly")
class ResearchStudyLabel extends BackboneElement {

	@GenModel(documentation="Kind of name.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="The name.")
	@ExtendedMetaData(kind="element", name="value", namespace="##targetNamespace")
	!resolve val String value;
}

@GenModel(documentation="A scientific study of nature that sometimes includes processes involved in health and disease. For example, clinical trials are research studies that involve people. These studies may be related to new ways to screen, prevent, diagnose, and treat disease. They may also study certain outcomes and certain groups of people by looking at data collected in the past or future.")
@ExtendedMetaData(name="ResearchStudy.Objective", kind="elementOnly")
class ResearchStudyObjective extends BackboneElement {

	@GenModel(documentation="Unique, human-readable label for this objective of the study.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="The kind of study objective.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="Free text description of the objective of the study.  This is what the study is trying to achieve rather than how it is going to achieve it (see ResearchStudy.description).")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;
}

@GenModel(documentation="A scientific study of nature that sometimes includes processes involved in health and disease. For example, clinical trials are research studies that involve people. These studies may be related to new ways to screen, prevent, diagnose, and treat disease. They may also study certain outcomes and certain groups of people by looking at data collected in the past or future.")
@ExtendedMetaData(name="ResearchStudy.OutcomeMeasure", kind="elementOnly")
class ResearchStudyOutcomeMeasure extends BackboneElement {

	@GenModel(documentation="Label for the outcome.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="The parameter or characteristic being assessed as one of the values by which the study is assessed.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] type;

	@GenModel(documentation="Description of the outcome.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="Structured outcome definition.")
	@ExtendedMetaData(kind="element", name="reference", namespace="##targetNamespace")
	!resolve val Reference reference;
}

@GenModel(documentation="A scientific study of nature that sometimes includes processes involved in health and disease. For example, clinical trials are research studies that involve people. These studies may be related to new ways to screen, prevent, diagnose, and treat disease. They may also study certain outcomes and certain groups of people by looking at data collected in the past or future.")
@ExtendedMetaData(name="ResearchStudy.ProgressStatus", kind="elementOnly")
class ResearchStudyProgressStatus extends BackboneElement {

	@GenModel(documentation="Label for status or state (e.g. recruitment status).")
	@ExtendedMetaData(kind="element", name="state", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] state;

	@GenModel(documentation="An indication of whether or not the date is a known date when the state changed or will change. A value of true indicates a known date. A value of false indicates an estimated date.")
	@ExtendedMetaData(kind="element", name="actual", namespace="##targetNamespace")
	!resolve val Boolean actual;

	@GenModel(documentation="Date range.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;
}

@GenModel(documentation="A scientific study of nature that sometimes includes processes involved in health and disease. For example, clinical trials are research studies that involve people. These studies may be related to new ways to screen, prevent, diagnose, and treat disease. They may also study certain outcomes and certain groups of people by looking at data collected in the past or future.")
@ExtendedMetaData(name="ResearchStudy.Recruitment", kind="elementOnly")
class ResearchStudyRecruitment extends BackboneElement {

	@GenModel(documentation="Estimated total number of participants to be enrolled.")
	@ExtendedMetaData(kind="element", name="targetNumber", namespace="##targetNamespace")
	!resolve val UnsignedInt targetNumber;

	@GenModel(documentation="Actual total number of participants enrolled in study.")
	@ExtendedMetaData(kind="element", name="actualNumber", namespace="##targetNamespace")
	!resolve val UnsignedInt actualNumber;

	@GenModel(documentation="Inclusion and exclusion criteria.")
	@ExtendedMetaData(kind="element", name="eligibility", namespace="##targetNamespace")
	!resolve val Reference eligibility;

	@GenModel(documentation="Group of participants who were enrolled in study.")
	@ExtendedMetaData(kind="element", name="actualGroup", namespace="##targetNamespace")
	!resolve val Reference actualGroup;
}

@GenModel(documentation="A ResearchSubject is a participant or object which is the recipient of investigative activities in a research study.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ResearchSubject", kind="elementOnly")
class ResearchSubject extends DomainResource {

	@GenModel(documentation="Identifiers assigned to this research subject for a study.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The publication state of the resource (not of the subject).")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="The current state (status) of the subject and resons for status change where appropriate.")
	@ExtendedMetaData(kind="element", name="progress", namespace="##targetNamespace")
	!resolve val ResearchSubjectProgress[*] progress;

	@GenModel(documentation="The dates the subject began and ended their participation in the study.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;

	@GenModel(documentation="Reference to the study the subject is participating in.")
	@ExtendedMetaData(kind="element", name="study", namespace="##targetNamespace")
	!resolve val Reference[1] study;

	@GenModel(documentation="The record of the person, animal or other entity involved in the study.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference[1] subject;

	@GenModel(documentation="The name of the arm in the study the subject is expected to follow as part of this study.")
	@ExtendedMetaData(kind="element", name="assignedComparisonGroup", namespace="##targetNamespace")
	!resolve val Id assignedComparisonGroup;

	@GenModel(documentation="The name of the arm in the study the subject actually followed as part of this study.")
	@ExtendedMetaData(kind="element", name="actualComparisonGroup", namespace="##targetNamespace")
	!resolve val Id actualComparisonGroup;

	@GenModel(documentation="A record of the patient's informed agreement to participate in the study.")
	@ExtendedMetaData(kind="element", name="consent", namespace="##targetNamespace")
	!resolve val Reference[*] consent;
}

@GenModel(documentation="A ResearchSubject is a participant or object which is the recipient of investigative activities in a research study.")
@ExtendedMetaData(name="ResearchSubject.Progress", kind="elementOnly")
class ResearchSubjectProgress extends BackboneElement {

	@GenModel(documentation="Identifies the aspect of the subject's journey that the state refers to.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="The current state of the subject.")
	@ExtendedMetaData(kind="element", name="subjectState", namespace="##targetNamespace")
	!resolve val CodeableConcept subjectState;

	@GenModel(documentation="The milestones the subject has passed through.")
	@ExtendedMetaData(kind="element", name="milestone", namespace="##targetNamespace")
	!resolve val CodeableConcept milestone;

	@GenModel(documentation="The reason for the state change.  If coded it should follow the formal subject state model.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val CodeableConcept reason;

	@GenModel(documentation="The date when the new status started.")
	@ExtendedMetaData(kind="element", name="startDate", namespace="##targetNamespace")
	!resolve val DateTime startDate;

	@GenModel(documentation="The date when the state ended.")
	@ExtendedMetaData(kind="element", name="endDate", namespace="##targetNamespace")
	!resolve val DateTime endDate;
}

@GenModel(documentation="This is the base resource type for everything.")
@ExtendedMetaData(name="Resource", kind="elementOnly")
class Resource extends Base {

	@GenModel(documentation="The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.")
	@ExtendedMetaData(kind="element", name="id", namespace="##targetNamespace")
	!resolve val Id ~id;

	@GenModel(documentation="The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.")
	@ExtendedMetaData(kind="element", name="meta", namespace="##targetNamespace")
	!resolve val Meta meta;

	@GenModel(documentation="A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.")
	@ExtendedMetaData(kind="element", name="implicitRules", namespace="##targetNamespace")
	!resolve val Uri implicitRules;

	@GenModel(documentation="The base language in which the resource is written.")
	@ExtendedMetaData(kind="element", name="language", namespace="##targetNamespace")
	!resolve val Code language;
}

@ExtendedMetaData(name="ResourceContainer", kind="elementOnly")
class ResourceContainer {

	@GenModel(documentation="A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc.")
	@ExtendedMetaData(kind="element", name="Account", namespace="##targetNamespace")
	!resolve val Account account;

	@GenModel(documentation="This resource allows for the definition of some activity to be performed, independent of a particular patient, practitioner, or other performance context.")
	@ExtendedMetaData(kind="element", name="ActivityDefinition", namespace="##targetNamespace")
	!resolve val ActivityDefinition activityDefinition;

	@GenModel(documentation="Describes an actor - a human or an application that plays a role in data exchange, and that may have obligations associated with the role the actor plays.")
	@ExtendedMetaData(kind="element", name="ActorDefinition", namespace="##targetNamespace")
	!resolve val ActorDefinition actorDefinition;

	@GenModel(documentation="A medicinal product in the final form which is suitable for administering to a patient (after any mixing of multiple components, dissolution etc. has been performed).")
	@ExtendedMetaData(kind="element", name="AdministrableProductDefinition", namespace="##targetNamespace")
	!resolve val AdministrableProductDefinition administrableProductDefinition;

	@GenModel(documentation="An event (i.e. any change to current patient status) that may be related to unintended effects on a patient or research participant. The unintended effects may require additional monitoring, treatment, hospitalization, or may result in death. The AdverseEvent resource also extends to potential or avoided events that could have had such effects. There are two major domains where the AdverseEvent resource is expected to be used. One is in clinical care reported adverse events and the other is in reporting adverse events in clinical  research trial management. Adverse events can be reported by healthcare providers, patients, caregivers or by medical products manufacturers. Given the differences between these two concepts, we recommend consulting the domain specific implementation guides when implementing the AdverseEvent Resource. The implementation guides include specific extensions, value sets and constraints.")
	@ExtendedMetaData(kind="element", name="AdverseEvent", namespace="##targetNamespace")
	!resolve val AdverseEvent adverseEvent;

	@GenModel(documentation="Risk of harmful or undesirable physiological response which is specific to an individual and associated with exposure to a substance.")
	@ExtendedMetaData(kind="element", name="AllergyIntolerance", namespace="##targetNamespace")
	!resolve val AllergyIntolerance allergyIntolerance;

	@GenModel(documentation="A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s).")
	@ExtendedMetaData(kind="element", name="Appointment", namespace="##targetNamespace")
	!resolve val Appointment appointment;

	@GenModel(documentation="A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection.")
	@ExtendedMetaData(kind="element", name="AppointmentResponse", namespace="##targetNamespace")
	!resolve val AppointmentResponse appointmentResponse;

	@GenModel(documentation="This Resource provides one or more comments, classifiers or ratings about a Resource and supports attribution and rights management metadata for the added content.")
	@ExtendedMetaData(kind="element", name="ArtifactAssessment", namespace="##targetNamespace")
	!resolve val ArtifactAssessment artifactAssessment;

	@GenModel(documentation="A record of an event relevant for purposes such as operations, privacy, security, maintenance, and performance analysis.")
	@ExtendedMetaData(kind="element", name="AuditEvent", namespace="##targetNamespace")
	!resolve val AuditEvent auditEvent;

	@GenModel(documentation="Basic is used for handling concepts not yet defined in FHIR, narrative-only resources that don't map to an existing resource, and custom resources not appropriate for inclusion in the FHIR specification.")
	@ExtendedMetaData(kind="element", name="Basic", namespace="##targetNamespace")
	!resolve val Basic basic;

	@GenModel(documentation="A resource that represents the data of a single raw artifact as digital content accessible in its native format.  A Binary resource can contain any content, whether text, image, pdf, zip archive, etc.")
	@ExtendedMetaData(kind="element", name="Binary", namespace="##targetNamespace")
	!resolve val Binary binary;

	@GenModel(documentation="This resource reflects an instance of a biologically derived product. A material substance originating from a biological entity intended to be transplanted or infused
into another (possibly the same) biological entity.")
	@ExtendedMetaData(kind="element", name="BiologicallyDerivedProduct", namespace="##targetNamespace")
	!resolve val BiologicallyDerivedProduct biologicallyDerivedProduct;

	@GenModel(documentation="This resource reflects an instance of a biologically derived product dispense. The supply or dispense of a biologically derived product from the supply organization or department (e.g. hospital transfusion laboratory) to the clinical team responsible for clinical application.")
	@ExtendedMetaData(kind="element", name="BiologicallyDerivedProductDispense", namespace="##targetNamespace")
	!resolve val BiologicallyDerivedProductDispense biologicallyDerivedProductDispense;

	@GenModel(documentation="Record details about an anatomical structure.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case.")
	@ExtendedMetaData(kind="element", name="BodyStructure", namespace="##targetNamespace")
	!resolve val BodyStructure bodyStructure;

	@GenModel(documentation="A container for a collection of resources.")
	@ExtendedMetaData(kind="element", name="Bundle", namespace="##targetNamespace")
	!resolve val Bundle bundle;

	@GenModel(documentation="A Capability Statement documents a set of capabilities (behaviors) of a FHIR Server or Client for a particular version of FHIR that may be used as a statement of actual server functionality or a statement of required or desired server implementation.")
	@ExtendedMetaData(kind="element", name="CapabilityStatement", namespace="##targetNamespace")
	!resolve val CapabilityStatement capabilityStatement;

	@GenModel(documentation="Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.")
	@ExtendedMetaData(kind="element", name="CarePlan", namespace="##targetNamespace")
	!resolve val CarePlan carePlan;

	@GenModel(documentation="The Care Team includes all the people and organizations who plan to participate in the coordination and delivery of care.")
	@ExtendedMetaData(kind="element", name="CareTeam", namespace="##targetNamespace")
	!resolve val CareTeam careTeam;

	@GenModel(documentation="The resource ChargeItem describes the provision of healthcare provider products for a certain patient, therefore referring not only to the product, but containing in addition details of the provision, like date, time, amounts and participating organizations and persons. Main Usage of the ChargeItem is to enable the billing process and internal cost allocation.")
	@ExtendedMetaData(kind="element", name="ChargeItem", namespace="##targetNamespace")
	!resolve val ChargeItem chargeItem;

	@GenModel(documentation="The ChargeItemDefinition resource provides the properties that apply to the (billing) codes necessary to calculate costs and prices. The properties may differ largely depending on type and realm, therefore this resource gives only a rough structure and requires profiling for each type of billing code system.")
	@ExtendedMetaData(kind="element", name="ChargeItemDefinition", namespace="##targetNamespace")
	!resolve val ChargeItemDefinition chargeItemDefinition;

	@GenModel(documentation="The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources.")
	@ExtendedMetaData(kind="element", name="Citation", namespace="##targetNamespace")
	!resolve val Citation citation;

	@GenModel(documentation="A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.")
	@ExtendedMetaData(kind="element", name="Claim", namespace="##targetNamespace")
	!resolve val Claim claim;

	@GenModel(documentation="This resource provides the adjudication details from the processing of a Claim resource.")
	@ExtendedMetaData(kind="element", name="ClaimResponse", namespace="##targetNamespace")
	!resolve val ClaimResponse claimResponse;

	@GenModel(documentation="A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient's condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called \"ClinicalImpression\" rather than \"ClinicalAssessment\" to avoid confusion with the recording of assessment tools such as Apgar score.")
	@ExtendedMetaData(kind="element", name="ClinicalImpression", namespace="##targetNamespace")
	!resolve val ClinicalImpression clinicalImpression;

	@GenModel(documentation="A single issue - either an indication, contraindication, interaction or an undesirable effect for a medicinal product, medication, device or procedure.")
	@ExtendedMetaData(kind="element", name="ClinicalUseDefinition", namespace="##targetNamespace")
	!resolve val ClinicalUseDefinition clinicalUseDefinition;

	@GenModel(documentation="The CodeSystem resource is used to declare the existence of and describe a code system or code system supplement and its key properties, and optionally define a part or all of its content.")
	@ExtendedMetaData(kind="element", name="CodeSystem", namespace="##targetNamespace")
	!resolve val CodeSystem codeSystem;

	@GenModel(documentation="A clinical or business level record of information being transmitted or shared; e.g. an alert that was sent to a responsible provider, a public health agency communication to a provider/reporter in response to a case report for a reportable condition.")
	@ExtendedMetaData(kind="element", name="Communication", namespace="##targetNamespace")
	!resolve val Communication communication;

	@GenModel(documentation="A request to convey information; e.g. the CDS system proposes that an alert be sent to a responsible provider, the CDS system proposes that the public health agency be notified about a reportable condition.")
	@ExtendedMetaData(kind="element", name="CommunicationRequest", namespace="##targetNamespace")
	!resolve val CommunicationRequest communicationRequest;

	@GenModel(documentation="A compartment definition that defines how resources are accessed on a server.")
	@ExtendedMetaData(kind="element", name="CompartmentDefinition", namespace="##targetNamespace")
	!resolve val CompartmentDefinition compartmentDefinition;

	@GenModel(documentation="A set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. A Composition defines the structure and narrative content necessary for a document. However, a Composition alone does not constitute a document. Rather, the Composition must be the first entry in a Bundle where Bundle.type=document, and any other resources referenced from Composition must be included as subsequent entries in the Bundle (for example Patient, Practitioner, Encounter, etc.).")
	@ExtendedMetaData(kind="element", name="Composition", namespace="##targetNamespace")
	!resolve val Composition composition;

	@GenModel(documentation="A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models.")
	@ExtendedMetaData(kind="element", name="ConceptMap", namespace="##targetNamespace")
	!resolve val ConceptMap conceptMap;

	@GenModel(documentation="A clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept that has risen to a level of concern.")
	@ExtendedMetaData(kind="element", name="Condition", namespace="##targetNamespace")
	!resolve val Condition condition;

	@GenModel(documentation="A definition of a condition and information relevant to managing it.")
	@ExtendedMetaData(kind="element", name="ConditionDefinition", namespace="##targetNamespace")
	!resolve val ConditionDefinition conditionDefinition;

	@GenModel(documentation="A record of a healthcare consumer’s  choices  or choices made on their behalf by a third party, which permits or denies identified recipient(s) or recipient role(s) to perform one or more actions within a given policy context, for specific purposes and periods of time.")
	@ExtendedMetaData(kind="element", name="Consent", namespace="##targetNamespace")
	!resolve val Consent consent;

	@GenModel(documentation="Legally enforceable, formally recorded unilateral or bilateral directive i.e., a policy or agreement.")
	@ExtendedMetaData(kind="element", name="Contract", namespace="##targetNamespace")
	!resolve val Contract contract;

	@GenModel(documentation="Financial instrument which may be used to reimburse or pay for health care products and services. Includes both insurance and self-payment.")
	@ExtendedMetaData(kind="element", name="Coverage", namespace="##targetNamespace")
	!resolve val Coverage coverage;

	@GenModel(documentation="The CoverageEligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an CoverageEligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy.")
	@ExtendedMetaData(kind="element", name="CoverageEligibilityRequest", namespace="##targetNamespace")
	!resolve val CoverageEligibilityRequest coverageEligibilityRequest;

	@GenModel(documentation="This resource provides eligibility and plan details from the processing of an CoverageEligibilityRequest resource.")
	@ExtendedMetaData(kind="element", name="CoverageEligibilityResponse", namespace="##targetNamespace")
	!resolve val CoverageEligibilityResponse coverageEligibilityResponse;

	@GenModel(documentation="Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, gaps in care, etc.")
	@ExtendedMetaData(kind="element", name="DetectedIssue", namespace="##targetNamespace")
	!resolve val DetectedIssue detectedIssue;

	@GenModel(documentation="A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.")
	@ExtendedMetaData(kind="element", name="Device", namespace="##targetNamespace")
	!resolve val Device device;

	@GenModel(documentation="A record of association or dissociation of a device with a patient.")
	@ExtendedMetaData(kind="element", name="DeviceAssociation", namespace="##targetNamespace")
	!resolve val DeviceAssociation deviceAssociation;

	@GenModel(documentation="The characteristics, operational status and capabilities of a medical-related component of a medical device.")
	@ExtendedMetaData(kind="element", name="DeviceDefinition", namespace="##targetNamespace")
	!resolve val DeviceDefinition deviceDefinition;

	@GenModel(documentation="A record of dispensation of a device - i.e., assigning a device to a patient, or to a professional for their use.")
	@ExtendedMetaData(kind="element", name="DeviceDispense", namespace="##targetNamespace")
	!resolve val DeviceDispense deviceDispense;

	@GenModel(documentation="Describes a measurement, calculation or setting capability of a device.")
	@ExtendedMetaData(kind="element", name="DeviceMetric", namespace="##targetNamespace")
	!resolve val DeviceMetric deviceMetric;

	@GenModel(documentation="Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker.")
	@ExtendedMetaData(kind="element", name="DeviceRequest", namespace="##targetNamespace")
	!resolve val DeviceRequest deviceRequest;

	@GenModel(documentation="A record of a device being used by a patient where the record is the result of a report from the patient or a clinician.")
	@ExtendedMetaData(kind="element", name="DeviceUsage", namespace="##targetNamespace")
	!resolve val DeviceUsage deviceUsage;

	@GenModel(documentation="The findings and interpretation of diagnostic tests performed on patients, groups of patients, products, substances, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports. The report also includes non-clinical context such as batch analysis and stability reporting of products and substances.")
	@ExtendedMetaData(kind="element", name="DiagnosticReport", namespace="##targetNamespace")
	!resolve val DiagnosticReport diagnosticReport;

	@GenModel(documentation="A reference to a document of any kind for any purpose. While the term “document” implies a more narrow focus, for this resource this \"document\" encompasses *any* serialized object with a mime-type, it includes formal patient-centric documents (CDA), clinical notes, scanned paper, non-patient specific documents like policy text, as well as a photo, video, or audio recording acquired or used in healthcare.  The DocumentReference resource provides metadata about the document so that the document can be discovered and managed.  The actual content may be inline base64 encoded data or provided by direct reference.")
	@ExtendedMetaData(kind="element", name="DocumentReference", namespace="##targetNamespace")
	!resolve val DocumentReference documentReference;

	@GenModel(documentation="An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.  Encounter is primarily used to record information about the actual activities that occurred, where Appointment is used to record planned activities.")
	@ExtendedMetaData(kind="element", name="Encounter", namespace="##targetNamespace")
	!resolve val Encounter encounter;

	@GenModel(documentation="A record of significant events/milestones key data throughout the history of an Encounter, often tracked for specific purposes such as billing.")
	@ExtendedMetaData(kind="element", name="EncounterHistory", namespace="##targetNamespace")
	!resolve val EncounterHistory encounterHistory;

	@GenModel(documentation="The technical details of an endpoint that can be used for electronic services, such as for web services providing XDS.b, a REST endpoint for another FHIR server, or a s/Mime email address. This may include any security context information.")
	@ExtendedMetaData(kind="element", name="Endpoint", namespace="##targetNamespace")
	!resolve val Endpoint endpoint;

	@GenModel(documentation="This resource provides the insurance enrollment details to the insurer regarding a specified coverage.")
	@ExtendedMetaData(kind="element", name="EnrollmentRequest", namespace="##targetNamespace")
	!resolve val EnrollmentRequest enrollmentRequest;

	@GenModel(documentation="This resource provides enrollment and plan details from the processing of an EnrollmentRequest resource.")
	@ExtendedMetaData(kind="element", name="EnrollmentResponse", namespace="##targetNamespace")
	!resolve val EnrollmentResponse enrollmentResponse;

	@GenModel(documentation="An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time.")
	@ExtendedMetaData(kind="element", name="EpisodeOfCare", namespace="##targetNamespace")
	!resolve val EpisodeOfCare episodeOfCare;

	@GenModel(documentation="The EventDefinition resource provides a reusable description of when a particular event can occur.")
	@ExtendedMetaData(kind="element", name="EventDefinition", namespace="##targetNamespace")
	!resolve val EventDefinition eventDefinition;

	@GenModel(documentation="The Evidence Resource provides a machine-interpretable expression of an evidence concept including the evidence variables (e.g., population, exposures/interventions, comparators, outcomes, measured variables, confounding variables), the statistics, and the certainty of this evidence.")
	@ExtendedMetaData(kind="element", name="Evidence", namespace="##targetNamespace")
	!resolve val Evidence evidence;

	@GenModel(documentation="The EvidenceReport Resource is a specialized container for a collection of resources and codeable concepts, adapted to support compositions of Evidence, EvidenceVariable, and Citation resources and related concepts.")
	@ExtendedMetaData(kind="element", name="EvidenceReport", namespace="##targetNamespace")
	!resolve val EvidenceReport evidenceReport;

	@GenModel(documentation="The EvidenceVariable resource describes an element that knowledge (Evidence) is about.")
	@ExtendedMetaData(kind="element", name="EvidenceVariable", namespace="##targetNamespace")
	!resolve val EvidenceVariable evidenceVariable;

	@GenModel(documentation="Example of workflow instance.")
	@ExtendedMetaData(kind="element", name="ExampleScenario", namespace="##targetNamespace")
	!resolve val ExampleScenario exampleScenario;

	@GenModel(documentation="This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.")
	@ExtendedMetaData(kind="element", name="ExplanationOfBenefit", namespace="##targetNamespace")
	!resolve val ExplanationOfBenefit explanationOfBenefit;

	@GenModel(documentation="Significant health conditions for a person related to the patient relevant in the context of care for the patient.")
	@ExtendedMetaData(kind="element", name="FamilyMemberHistory", namespace="##targetNamespace")
	!resolve val FamilyMemberHistory familyMemberHistory;

	@GenModel(documentation="Prospective warnings of potential issues when providing care to the patient.")
	@ExtendedMetaData(kind="element", name="Flag", namespace="##targetNamespace")
	!resolve val Flag flag;

	@GenModel(documentation="This resource describes a product or service that is available through a program and includes the conditions and constraints of availability.  All of the information in this resource is specific to the inclusion of the item in the formulary and is not inherent to the item itself.")
	@ExtendedMetaData(kind="element", name="FormularyItem", namespace="##targetNamespace")
	!resolve val FormularyItem formularyItem;

	@GenModel(documentation="A GenomicStudy is a set of analyses performed to analyze and generate genomic data.")
	@ExtendedMetaData(kind="element", name="GenomicStudy", namespace="##targetNamespace")
	!resolve val GenomicStudy genomicStudy;

	@GenModel(documentation="Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.")
	@ExtendedMetaData(kind="element", name="Goal", namespace="##targetNamespace")
	!resolve val Goal goal;

	@GenModel(documentation="A formal computable definition of a graph of resources - that is, a coherent set of resources that form a graph by following references. The Graph Definition resource defines a set and makes rules about the set.")
	@ExtendedMetaData(kind="element", name="GraphDefinition", namespace="##targetNamespace")
	!resolve val GraphDefinition graphDefinition;

	@GenModel(documentation="Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively, and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization.")
	@ExtendedMetaData(kind="element", name="Group", namespace="##targetNamespace")
	!resolve val Group group;

	@GenModel(documentation="A guidance response is the formal response to a guidance request, including any output parameters returned by the evaluation, as well as the description of any proposed actions to be taken.")
	@ExtendedMetaData(kind="element", name="GuidanceResponse", namespace="##targetNamespace")
	!resolve val GuidanceResponse guidanceResponse;

	@GenModel(documentation="The details of a healthcare service available at a location.")
	@ExtendedMetaData(kind="element", name="HealthcareService", namespace="##targetNamespace")
	!resolve val HealthcareService healthcareService;

	@GenModel(documentation="A selection of DICOM SOP instances and/or frames within a single Study and Series. This might include additional specifics such as an image region, an Observation UID or a Segmentation Number, allowing linkage to an Observation Resource or transferring this information along with the ImagingStudy Resource.")
	@ExtendedMetaData(kind="element", name="ImagingSelection", namespace="##targetNamespace")
	!resolve val ImagingSelection imagingSelection;

	@GenModel(documentation="Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.")
	@ExtendedMetaData(kind="element", name="ImagingStudy", namespace="##targetNamespace")
	!resolve val ImagingStudy imagingStudy;

	@GenModel(documentation="Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party.")
	@ExtendedMetaData(kind="element", name="Immunization", namespace="##targetNamespace")
	!resolve val Immunization immunization;

	@GenModel(documentation="Describes a comparison of an immunization event against published recommendations to determine if the administration is \"valid\" in relation to those  recommendations.")
	@ExtendedMetaData(kind="element", name="ImmunizationEvaluation", namespace="##targetNamespace")
	!resolve val ImmunizationEvaluation immunizationEvaluation;

	@GenModel(documentation="A patient's point-in-time set of recommendations (i.e. forecasting) according to a published schedule with optional supporting justification.")
	@ExtendedMetaData(kind="element", name="ImmunizationRecommendation", namespace="##targetNamespace")
	!resolve val ImmunizationRecommendation immunizationRecommendation;

	@GenModel(documentation="A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.")
	@ExtendedMetaData(kind="element", name="ImplementationGuide", namespace="##targetNamespace")
	!resolve val ImplementationGuide implementationGuide;

	@GenModel(documentation="An ingredient of a manufactured item or pharmaceutical product.")
	@ExtendedMetaData(kind="element", name="Ingredient", namespace="##targetNamespace")
	!resolve val Ingredient ingredient;

	@GenModel(documentation="Details of a Health Insurance product/plan provided by an organization.")
	@ExtendedMetaData(kind="element", name="InsurancePlan", namespace="##targetNamespace")
	!resolve val InsurancePlan insurancePlan;

	@GenModel(documentation="A functional description of an inventory item used in inventory and supply-related workflows.")
	@ExtendedMetaData(kind="element", name="InventoryItem", namespace="##targetNamespace")
	!resolve val InventoryItem inventoryItem;

	@GenModel(documentation="A report of inventory or stock items.")
	@ExtendedMetaData(kind="element", name="InventoryReport", namespace="##targetNamespace")
	!resolve val InventoryReport inventoryReport;

	@GenModel(documentation="Invoice containing collected ChargeItems from an Account with calculated individual and total price for Billing purpose.")
	@ExtendedMetaData(kind="element", name="Invoice", namespace="##targetNamespace")
	!resolve val Invoice invoice;

	@GenModel(documentation="The Library resource is a general-purpose container for knowledge asset definitions. It can be used to describe and expose existing knowledge assets such as logic libraries and information model descriptions, as well as to describe a collection of knowledge assets.")
	@ExtendedMetaData(kind="element", name="Library", namespace="##targetNamespace")
	!resolve val Library library;

	@GenModel(documentation="Identifies two or more records (resource instances) that refer to the same real-world \"occurrence\".")
	@ExtendedMetaData(kind="element", name="Linkage", namespace="##targetNamespace")
	!resolve val Linkage linkage;

	@GenModel(documentation="A List is a curated collection of resources, for things such as problem lists, allergy lists, facility list, organization list, etc.")
	@ExtendedMetaData(kind="element", name="List", namespace="##targetNamespace")
	!resolve val List list;

	@GenModel(documentation="Details and position information for a place where services are provided and resources and participants may be stored, found, contained, or accommodated.")
	@ExtendedMetaData(kind="element", name="Location", namespace="##targetNamespace")
	!resolve val Location location;

	@GenModel(documentation="The definition and characteristics of a medicinal manufactured item, such as a tablet or capsule, as contained in a packaged medicinal product.")
	@ExtendedMetaData(kind="element", name="ManufacturedItemDefinition", namespace="##targetNamespace")
	!resolve val ManufacturedItemDefinition manufacturedItemDefinition;

	@GenModel(documentation="The Measure resource provides the definition of a quality measure.")
	@ExtendedMetaData(kind="element", name="Measure", namespace="##targetNamespace")
	!resolve val Measure measure;

	@GenModel(documentation="The MeasureReport resource contains the results of the calculation of a measure; and optionally a reference to the resources involved in that calculation.")
	@ExtendedMetaData(kind="element", name="MeasureReport", namespace="##targetNamespace")
	!resolve val MeasureReport measureReport;

	@GenModel(documentation="This resource is primarily used for the identification and definition of a medication, including ingredients, for the purposes of prescribing, dispensing, and administering a medication as well as for making statements about medication use.")
	@ExtendedMetaData(kind="element", name="Medication", namespace="##targetNamespace")
	!resolve val Medication medication;

	@GenModel(documentation="Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner.")
	@ExtendedMetaData(kind="element", name="MedicationAdministration", namespace="##targetNamespace")
	!resolve val MedicationAdministration medicationAdministration;

	@GenModel(documentation="Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.")
	@ExtendedMetaData(kind="element", name="MedicationDispense", namespace="##targetNamespace")
	!resolve val MedicationDispense medicationDispense;

	@GenModel(documentation="Information about a medication that is used to support knowledge.")
	@ExtendedMetaData(kind="element", name="MedicationKnowledge", namespace="##targetNamespace")
	!resolve val MedicationKnowledge medicationKnowledge;

	@GenModel(documentation="An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called \"MedicationRequest\" rather than \"MedicationPrescription\" or \"MedicationOrder\" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.")
	@ExtendedMetaData(kind="element", name="MedicationRequest", namespace="##targetNamespace")
	!resolve val MedicationRequest medicationRequest;

	@GenModel(documentation="A record of a medication that is being consumed by a patient.   A MedicationStatement may indicate that the patient may be taking the medication now or has taken the medication in the past or will be taking the medication in the future.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay.   The medication information may come from sources such as the patient's memory, from a prescription bottle,  or from a list of medications the patient, clinician or other party maintains. 

The primary difference between a medicationstatement and a medicationadministration is that the medication administration has complete administration information and is based on actual administration information from the person who administered the medication.  A medicationstatement is often, if not always, less specific.  There is no required date/time when the medication was administered, in fact we only know that a source has reported the patient is taking this medication, where details such as time, quantity, or rate or even medication product may be incomplete or missing or less precise.  As stated earlier, the Medication Statement information may come from the patient's memory, from a prescription bottle or from a list of medications the patient, clinician or other party maintains.  Medication administration is more formal and is not missing detailed information.

The MedicationStatement resource was previously called MedicationStatement.")
	@ExtendedMetaData(kind="element", name="MedicationStatement", namespace="##targetNamespace")
	!resolve val MedicationStatement medicationStatement;

	@GenModel(documentation="A medicinal product, being a substance or combination of substances that is intended to treat, prevent or diagnose a disease, or to restore, correct or modify physiological functions by exerting a pharmacological, immunological or metabolic action. This resource is intended to define and detail such products and their properties, for uses other than direct patient care (e.g. regulatory use, or drug catalogs).")
	@ExtendedMetaData(kind="element", name="MedicinalProductDefinition", namespace="##targetNamespace")
	!resolve val MedicinalProductDefinition medicinalProductDefinition;

	@GenModel(documentation="Defines the characteristics of a message that can be shared between systems, including the type of event that initiates the message, the content to be transmitted and what response(s), if any, are permitted.")
	@ExtendedMetaData(kind="element", name="MessageDefinition", namespace="##targetNamespace")
	!resolve val MessageDefinition messageDefinition;

	@GenModel(documentation="The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.")
	@ExtendedMetaData(kind="element", name="MessageHeader", namespace="##targetNamespace")
	!resolve val MessageHeader messageHeader;

	@GenModel(documentation="Representation of a molecular sequence.")
	@ExtendedMetaData(kind="element", name="MolecularSequence", namespace="##targetNamespace")
	!resolve val MolecularSequence molecularSequence;

	@GenModel(documentation="A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a \"System\" used within the Identifier and Coding data types.")
	@ExtendedMetaData(kind="element", name="NamingSystem", namespace="##targetNamespace")
	!resolve val NamingSystem namingSystem;

	@GenModel(documentation="A record of food or fluid that is being consumed by a patient.   A NutritionIntake may indicate that the patient may be consuming the food or fluid now or has consumed the food or fluid in the past.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay or through an app that tracks food or fluids consumed.   The consumption information may come from sources such as the patient's memory, from a nutrition label,  or from a clinician documenting observed intake.")
	@ExtendedMetaData(kind="element", name="NutritionIntake", namespace="##targetNamespace")
	!resolve val NutritionIntake nutritionIntake;

	@GenModel(documentation="A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.")
	@ExtendedMetaData(kind="element", name="NutritionOrder", namespace="##targetNamespace")
	!resolve val NutritionOrder nutritionOrder;

	@GenModel(documentation="A food or supplement that is consumed by patients.")
	@ExtendedMetaData(kind="element", name="NutritionProduct", namespace="##targetNamespace")
	!resolve val NutritionProduct nutritionProduct;

	@GenModel(documentation="Measurements and simple assertions made about a patient, device or other subject.")
	@ExtendedMetaData(kind="element", name="Observation", namespace="##targetNamespace")
	!resolve val Observation observation;

	@GenModel(documentation="Set of definitional characteristics for a kind of observation or measurement produced or consumed by an orderable health care service.")
	@ExtendedMetaData(kind="element", name="ObservationDefinition", namespace="##targetNamespace")
	!resolve val ObservationDefinition observationDefinition;

	@GenModel(documentation="A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).")
	@ExtendedMetaData(kind="element", name="OperationDefinition", namespace="##targetNamespace")
	!resolve val OperationDefinition operationDefinition;

	@GenModel(documentation="A collection of error, warning, or information messages that result from a system action.")
	@ExtendedMetaData(kind="element", name="OperationOutcome", namespace="##targetNamespace")
	!resolve val OperationOutcome operationOutcome;

	@GenModel(documentation="A formally or informally recognized grouping of people or organizations formed for the purpose of achieving some form of collective action.  Includes companies, institutions, corporations, departments, community groups, healthcare practice groups, payer/insurer, etc.")
	@ExtendedMetaData(kind="element", name="Organization", namespace="##targetNamespace")
	!resolve val Organization organization;

	@GenModel(documentation="Defines an affiliation/association/relationship between 2 distinct organizations, that is not a part-of relationship/sub-division relationship.")
	@ExtendedMetaData(kind="element", name="OrganizationAffiliation", namespace="##targetNamespace")
	!resolve val OrganizationAffiliation organizationAffiliation;

	@GenModel(documentation="A medically related item or items, in a container or package.")
	@ExtendedMetaData(kind="element", name="PackagedProductDefinition", namespace="##targetNamespace")
	!resolve val PackagedProductDefinition packagedProductDefinition;

	@GenModel(documentation="Demographics and other administrative information about an individual or animal receiving care or other health-related services.")
	@ExtendedMetaData(kind="element", name="Patient", namespace="##targetNamespace")
	!resolve val Patient patient;

	@GenModel(documentation="This resource provides the status of the payment for goods and services rendered, and the request and response resource references.")
	@ExtendedMetaData(kind="element", name="PaymentNotice", namespace="##targetNamespace")
	!resolve val PaymentNotice paymentNotice;

	@GenModel(documentation="This resource provides the details including amount of a payment and allocates the payment items being paid.")
	@ExtendedMetaData(kind="element", name="PaymentReconciliation", namespace="##targetNamespace")
	!resolve val PaymentReconciliation paymentReconciliation;

	@GenModel(documentation="Permission resource holds access rules for a given data and context.")
	@ExtendedMetaData(kind="element", name="Permission", namespace="##targetNamespace")
	!resolve val Permission permission;

	@GenModel(documentation="Demographics and administrative information about a person independent of a specific health-related context.")
	@ExtendedMetaData(kind="element", name="Person", namespace="##targetNamespace")
	!resolve val Person person;

	@GenModel(documentation="This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical and non-clinical artifacts such as clinical decision support rules, order sets, protocols, and drug quality specifications.")
	@ExtendedMetaData(kind="element", name="PlanDefinition", namespace="##targetNamespace")
	!resolve val PlanDefinition planDefinition;

	@GenModel(documentation="A person who is directly or indirectly involved in the provisioning of healthcare or related services.")
	@ExtendedMetaData(kind="element", name="Practitioner", namespace="##targetNamespace")
	!resolve val Practitioner practitioner;

	@GenModel(documentation="A specific set of Roles/Locations/specialties/services that a practitioner may perform at an organization for a period of time.")
	@ExtendedMetaData(kind="element", name="PractitionerRole", namespace="##targetNamespace")
	!resolve val PractitionerRole practitionerRole;

	@GenModel(documentation="An action that is or was performed on or for a patient, practitioner, device, organization, or location. For example, this can be a physical intervention on a patient like an operation, or less invasive like long term services, counseling, or hypnotherapy.  This can be a quality or safety inspection for a location, organization, or device.  This can be an accreditation procedure on a practitioner for licensing.")
	@ExtendedMetaData(kind="element", name="Procedure", namespace="##targetNamespace")
	!resolve val Procedure procedure;

	@GenModel(documentation="Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.")
	@ExtendedMetaData(kind="element", name="Provenance", namespace="##targetNamespace")
	!resolve val Provenance provenance;

	@GenModel(documentation="A structured set of questions intended to guide the collection of answers from end-users. Questionnaires provide detailed control over order, presentation, phraseology and grouping to allow coherent, consistent data collection.")
	@ExtendedMetaData(kind="element", name="Questionnaire", namespace="##targetNamespace")
	!resolve val Questionnaire questionnaire;

	@GenModel(documentation="A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the questionnaire being responded to.")
	@ExtendedMetaData(kind="element", name="QuestionnaireResponse", namespace="##targetNamespace")
	!resolve val QuestionnaireResponse questionnaireResponse;

	@GenModel(documentation="Regulatory approval, clearance or licencing related to a regulated product, treatment, facility or activity that is cited in a guidance, regulation, rule or legislative act. An example is Market Authorization relating to a Medicinal Product.")
	@ExtendedMetaData(kind="element", name="RegulatedAuthorization", namespace="##targetNamespace")
	!resolve val RegulatedAuthorization regulatedAuthorization;

	@GenModel(documentation="Information about a person that is involved in a patient's health or the care for a patient, but who is not the target of healthcare, nor has a formal responsibility in the care process.")
	@ExtendedMetaData(kind="element", name="RelatedPerson", namespace="##targetNamespace")
	!resolve val RelatedPerson relatedPerson;

	@GenModel(documentation="A set of related requests that can be used to capture intended activities that have inter-dependencies such as \"give this medication after that one\".")
	@ExtendedMetaData(kind="element", name="RequestOrchestration", namespace="##targetNamespace")
	!resolve val RequestOrchestration requestOrchestration;

	@GenModel(documentation="A set of requirements - a list of features or behaviors of designed systems that are necessary to achieve organizational or regulatory goals.")
	@ExtendedMetaData(kind="element", name="Requirements", namespace="##targetNamespace")
	!resolve val Requirements requirements;

	@GenModel(documentation="A scientific study of nature that sometimes includes processes involved in health and disease. For example, clinical trials are research studies that involve people. These studies may be related to new ways to screen, prevent, diagnose, and treat disease. They may also study certain outcomes and certain groups of people by looking at data collected in the past or future.")
	@ExtendedMetaData(kind="element", name="ResearchStudy", namespace="##targetNamespace")
	!resolve val ResearchStudy researchStudy;

	@GenModel(documentation="A ResearchSubject is a participant or object which is the recipient of investigative activities in a research study.")
	@ExtendedMetaData(kind="element", name="ResearchSubject", namespace="##targetNamespace")
	!resolve val ResearchSubject researchSubject;

	@GenModel(documentation="An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome.")
	@ExtendedMetaData(kind="element", name="RiskAssessment", namespace="##targetNamespace")
	!resolve val RiskAssessment riskAssessment;

	@GenModel(documentation="A container for slots of time that may be available for booking appointments.")
	@ExtendedMetaData(kind="element", name="Schedule", namespace="##targetNamespace")
	!resolve val Schedule schedule;

	@GenModel(documentation="A search parameter that defines a named search item that can be used to search/filter on a resource.")
	@ExtendedMetaData(kind="element", name="SearchParameter", namespace="##targetNamespace")
	!resolve val SearchParameter searchParameter;

	@GenModel(documentation="A record of a request for service such as diagnostic investigations, treatments, or operations to be performed.")
	@ExtendedMetaData(kind="element", name="ServiceRequest", namespace="##targetNamespace")
	!resolve val ServiceRequest serviceRequest;

	@GenModel(documentation="A slot of time on a schedule that may be available for booking appointments.")
	@ExtendedMetaData(kind="element", name="Slot", namespace="##targetNamespace")
	!resolve val Slot slot;

	@GenModel(documentation="A sample to be used for analysis.")
	@ExtendedMetaData(kind="element", name="Specimen", namespace="##targetNamespace")
	!resolve val Specimen specimen;

	@GenModel(documentation="A kind of specimen with associated set of requirements.")
	@ExtendedMetaData(kind="element", name="SpecimenDefinition", namespace="##targetNamespace")
	!resolve val SpecimenDefinition specimenDefinition;

	@GenModel(documentation="A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.")
	@ExtendedMetaData(kind="element", name="StructureDefinition", namespace="##targetNamespace")
	!resolve val StructureDefinition structureDefinition;

	@GenModel(documentation="A Map of relationships between 2 structures that can be used to transform data.")
	@ExtendedMetaData(kind="element", name="StructureMap", namespace="##targetNamespace")
	!resolve val StructureMap structureMap;

	@GenModel(documentation="The subscription resource describes a particular client's request to be notified about a SubscriptionTopic.")
	@ExtendedMetaData(kind="element", name="Subscription", namespace="##targetNamespace")
	!resolve val Subscription subscription;

	@GenModel(documentation="The SubscriptionStatus resource describes the state of a Subscription during notifications.")
	@ExtendedMetaData(kind="element", name="SubscriptionStatus", namespace="##targetNamespace")
	!resolve val SubscriptionStatus subscriptionStatus;

	@GenModel(documentation="Describes a stream of resource state changes or events and annotated with labels useful to filter projections from this topic.")
	@ExtendedMetaData(kind="element", name="SubscriptionTopic", namespace="##targetNamespace")
	!resolve val SubscriptionTopic subscriptionTopic;

	@GenModel(documentation="A homogeneous material with a definite composition.")
	@ExtendedMetaData(kind="element", name="Substance", namespace="##targetNamespace")
	!resolve val Substance substance;

	@GenModel(documentation="The detailed description of a substance, typically at a level beyond what is used for prescribing.")
	@ExtendedMetaData(kind="element", name="SubstanceDefinition", namespace="##targetNamespace")
	!resolve val SubstanceDefinition substanceDefinition;

	@GenModel(documentation="Nucleic acids are defined by three distinct elements: the base, sugar and linkage. Individual substance/moiety IDs will be created for each of these elements. The nucleotide sequence will be always entered in the 5’-3’ direction.")
	@ExtendedMetaData(kind="element", name="SubstanceNucleicAcid", namespace="##targetNamespace")
	!resolve val SubstanceNucleicAcid substanceNucleicAcid;

	@GenModel(documentation="Properties of a substance specific to it being a polymer.")
	@ExtendedMetaData(kind="element", name="SubstancePolymer", namespace="##targetNamespace")
	!resolve val SubstancePolymer substancePolymer;

	@GenModel(documentation="A SubstanceProtein is defined as a single unit of a linear amino acid sequence, or a combination of subunits that are either covalently linked or have a defined invariant stoichiometric relationship. This includes all synthetic, recombinant and purified SubstanceProteins of defined sequence, whether the use is therapeutic or prophylactic. This set of elements will be used to describe albumins, coagulation factors, cytokines, growth factors, peptide/SubstanceProtein hormones, enzymes, toxins, toxoids, recombinant vaccines, and immunomodulators.")
	@ExtendedMetaData(kind="element", name="SubstanceProtein", namespace="##targetNamespace")
	!resolve val SubstanceProtein substanceProtein;

	@GenModel(documentation="Todo.")
	@ExtendedMetaData(kind="element", name="SubstanceReferenceInformation", namespace="##targetNamespace")
	!resolve val SubstanceReferenceInformation substanceReferenceInformation;

	@GenModel(documentation="Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex.")
	@ExtendedMetaData(kind="element", name="SubstanceSourceMaterial", namespace="##targetNamespace")
	!resolve val SubstanceSourceMaterial substanceSourceMaterial;

	@GenModel(documentation="Record of delivery of what is supplied.")
	@ExtendedMetaData(kind="element", name="SupplyDelivery", namespace="##targetNamespace")
	!resolve val SupplyDelivery supplyDelivery;

	@GenModel(documentation="A record of a request to deliver a medication, substance or device used in the healthcare setting to a particular destination for a particular person or organization.")
	@ExtendedMetaData(kind="element", name="SupplyRequest", namespace="##targetNamespace")
	!resolve val SupplyRequest supplyRequest;

	@GenModel(documentation="A task to be performed.")
	@ExtendedMetaData(kind="element", name="Task", namespace="##targetNamespace")
	!resolve val Task task;

	@GenModel(documentation="A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.")
	@ExtendedMetaData(kind="element", name="TerminologyCapabilities", namespace="##targetNamespace")
	!resolve val TerminologyCapabilities terminologyCapabilities;

	@GenModel(documentation="A plan for executing testing on an artifact or specifications.")
	@ExtendedMetaData(kind="element", name="TestPlan", namespace="##targetNamespace")
	!resolve val TestPlan testPlan;

	@GenModel(documentation="A summary of information based on the results of executing a TestScript.")
	@ExtendedMetaData(kind="element", name="TestReport", namespace="##targetNamespace")
	!resolve val TestReport testReport;

	@GenModel(documentation="A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.")
	@ExtendedMetaData(kind="element", name="TestScript", namespace="##targetNamespace")
	!resolve val TestScript testScript;

	@GenModel(documentation="Record of transport of item.")
	@ExtendedMetaData(kind="element", name="Transport", namespace="##targetNamespace")
	!resolve val Transport transport;

	@GenModel(documentation="A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) definitions and their use in [coded elements](terminologies.html).")
	@ExtendedMetaData(kind="element", name="ValueSet", namespace="##targetNamespace")
	!resolve val ValueSet valueSet;

	@GenModel(documentation="Describes validation requirements, source(s), status and dates for one or more elements.")
	@ExtendedMetaData(kind="element", name="VerificationResult", namespace="##targetNamespace")
	!resolve val VerificationResult verificationResult;

	@GenModel(documentation="An authorization for the provision of glasses and/or contact lenses to a patient.")
	@ExtendedMetaData(kind="element", name="VisionPrescription", namespace="##targetNamespace")
	!resolve val VisionPrescription visionPrescription;

	@GenModel(documentation="This resource is used to pass information into and back from an operation (whether invoked directly from REST or within a messaging environment).  It is not persisted or allowed to be referenced by other resources.")
	@ExtendedMetaData(kind="element", name="Parameters", namespace="##targetNamespace")
	!resolve val Parameters parameters;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ResourceType", kind="elementOnly")
class ResourceType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ResourceTypeEnum value;
}

@ExtendedMetaData(name="ResourceTypeEnum")
enum ResourceTypeEnum {

	@GenModel(documentation="Account")
	Account = 0;

	@GenModel(documentation="ActivityDefinition")
	ActivityDefinition = 1;

	@GenModel(documentation="ActorDefinition")
	ActorDefinition = 2;

	@GenModel(documentation="AdministrableProductDefinition")
	AdministrableProductDefinition = 3;

	@GenModel(documentation="AdverseEvent")
	AdverseEvent = 4;

	@GenModel(documentation="AllergyIntolerance")
	AllergyIntolerance = 5;

	@GenModel(documentation="Appointment")
	Appointment = 6;

	@GenModel(documentation="AppointmentResponse")
	AppointmentResponse = 7;

	@GenModel(documentation="ArtifactAssessment")
	ArtifactAssessment = 8;

	@GenModel(documentation="AuditEvent")
	AuditEvent = 9;

	@GenModel(documentation="Basic")
	Basic = 10;

	@GenModel(documentation="Binary")
	Binary = 11;

	@GenModel(documentation="BiologicallyDerivedProduct")
	BiologicallyDerivedProduct = 12;

	@GenModel(documentation="BiologicallyDerivedProductDispense")
	BiologicallyDerivedProductDispense = 13;

	@GenModel(documentation="BodyStructure")
	BodyStructure = 14;

	@GenModel(documentation="Bundle")
	Bundle = 15;

	@GenModel(documentation="CapabilityStatement")
	CapabilityStatement = 16;

	@GenModel(documentation="CarePlan")
	CarePlan = 17;

	@GenModel(documentation="CareTeam")
	CareTeam = 18;

	@GenModel(documentation="ChargeItem")
	ChargeItem = 19;

	@GenModel(documentation="ChargeItemDefinition")
	ChargeItemDefinition = 20;

	@GenModel(documentation="Citation")
	Citation = 21;

	@GenModel(documentation="Claim")
	Claim = 22;

	@GenModel(documentation="ClaimResponse")
	ClaimResponse = 23;

	@GenModel(documentation="ClinicalImpression")
	ClinicalImpression = 24;

	@GenModel(documentation="ClinicalUseDefinition")
	ClinicalUseDefinition = 25;

	@GenModel(documentation="CodeSystem")
	CodeSystem = 26;

	@GenModel(documentation="Communication")
	Communication = 27;

	@GenModel(documentation="CommunicationRequest")
	CommunicationRequest = 28;

	@GenModel(documentation="CompartmentDefinition")
	CompartmentDefinition = 29;

	@GenModel(documentation="Composition")
	Composition = 30;

	@GenModel(documentation="ConceptMap")
	ConceptMap = 31;

	@GenModel(documentation="Condition")
	Condition = 32;

	@GenModel(documentation="ConditionDefinition")
	ConditionDefinition = 33;

	@GenModel(documentation="Consent")
	Consent = 34;

	@GenModel(documentation="Contract")
	Contract = 35;

	@GenModel(documentation="Coverage")
	Coverage = 36;

	@GenModel(documentation="CoverageEligibilityRequest")
	CoverageEligibilityRequest = 37;

	@GenModel(documentation="CoverageEligibilityResponse")
	CoverageEligibilityResponse = 38;

	@GenModel(documentation="DetectedIssue")
	DetectedIssue = 39;

	@GenModel(documentation="Device")
	Device = 40;

	@GenModel(documentation="DeviceAssociation")
	DeviceAssociation = 41;

	@GenModel(documentation="DeviceDefinition")
	DeviceDefinition = 42;

	@GenModel(documentation="DeviceDispense")
	DeviceDispense = 43;

	@GenModel(documentation="DeviceMetric")
	DeviceMetric = 44;

	@GenModel(documentation="DeviceRequest")
	DeviceRequest = 45;

	@GenModel(documentation="DeviceUsage")
	DeviceUsage = 46;

	@GenModel(documentation="DiagnosticReport")
	DiagnosticReport = 47;

	@GenModel(documentation="DocumentReference")
	DocumentReference = 48;

	@GenModel(documentation="Encounter")
	Encounter = 49;

	@GenModel(documentation="EncounterHistory")
	EncounterHistory = 50;

	@GenModel(documentation="Endpoint")
	Endpoint = 51;

	@GenModel(documentation="EnrollmentRequest")
	EnrollmentRequest = 52;

	@GenModel(documentation="EnrollmentResponse")
	EnrollmentResponse = 53;

	@GenModel(documentation="EpisodeOfCare")
	EpisodeOfCare = 54;

	@GenModel(documentation="EventDefinition")
	EventDefinition = 55;

	@GenModel(documentation="Evidence")
	Evidence = 56;

	@GenModel(documentation="EvidenceReport")
	EvidenceReport = 57;

	@GenModel(documentation="EvidenceVariable")
	EvidenceVariable = 58;

	@GenModel(documentation="ExampleScenario")
	ExampleScenario = 59;

	@GenModel(documentation="ExplanationOfBenefit")
	ExplanationOfBenefit = 60;

	@GenModel(documentation="FamilyMemberHistory")
	FamilyMemberHistory = 61;

	@GenModel(documentation="Flag")
	Flag = 62;

	@GenModel(documentation="FormularyItem")
	FormularyItem = 63;

	@GenModel(documentation="GenomicStudy")
	GenomicStudy = 64;

	@GenModel(documentation="Goal")
	Goal = 65;

	@GenModel(documentation="GraphDefinition")
	GraphDefinition = 66;

	@GenModel(documentation="Group")
	Group = 67;

	@GenModel(documentation="GuidanceResponse")
	GuidanceResponse = 68;

	@GenModel(documentation="HealthcareService")
	HealthcareService = 69;

	@GenModel(documentation="ImagingSelection")
	ImagingSelection = 70;

	@GenModel(documentation="ImagingStudy")
	ImagingStudy = 71;

	@GenModel(documentation="Immunization")
	Immunization = 72;

	@GenModel(documentation="ImmunizationEvaluation")
	ImmunizationEvaluation = 73;

	@GenModel(documentation="ImmunizationRecommendation")
	ImmunizationRecommendation = 74;

	@GenModel(documentation="ImplementationGuide")
	ImplementationGuide = 75;

	@GenModel(documentation="Ingredient")
	Ingredient = 76;

	@GenModel(documentation="InsurancePlan")
	InsurancePlan = 77;

	@GenModel(documentation="InventoryItem")
	InventoryItem = 78;

	@GenModel(documentation="InventoryReport")
	InventoryReport = 79;

	@GenModel(documentation="Invoice")
	Invoice = 80;

	@GenModel(documentation="Library")
	Library = 81;

	@GenModel(documentation="Linkage")
	Linkage = 82;

	@GenModel(documentation="List")
	List = 83;

	@GenModel(documentation="Location")
	Location = 84;

	@GenModel(documentation="ManufacturedItemDefinition")
	ManufacturedItemDefinition = 85;

	@GenModel(documentation="Measure")
	Measure = 86;

	@GenModel(documentation="MeasureReport")
	MeasureReport = 87;

	@GenModel(documentation="Medication")
	Medication = 88;

	@GenModel(documentation="MedicationAdministration")
	MedicationAdministration = 89;

	@GenModel(documentation="MedicationDispense")
	MedicationDispense = 90;

	@GenModel(documentation="MedicationKnowledge")
	MedicationKnowledge = 91;

	@GenModel(documentation="MedicationRequest")
	MedicationRequest = 92;

	@GenModel(documentation="MedicationStatement")
	MedicationStatement = 93;

	@GenModel(documentation="MedicinalProductDefinition")
	MedicinalProductDefinition = 94;

	@GenModel(documentation="MessageDefinition")
	MessageDefinition = 95;

	@GenModel(documentation="MessageHeader")
	MessageHeader = 96;

	@GenModel(documentation="MolecularSequence")
	MolecularSequence = 97;

	@GenModel(documentation="NamingSystem")
	NamingSystem = 98;

	@GenModel(documentation="NutritionIntake")
	NutritionIntake = 99;

	@GenModel(documentation="NutritionOrder")
	NutritionOrder = 100;

	@GenModel(documentation="NutritionProduct")
	NutritionProduct = 101;

	@GenModel(documentation="Observation")
	Observation = 102;

	@GenModel(documentation="ObservationDefinition")
	ObservationDefinition = 103;

	@GenModel(documentation="OperationDefinition")
	OperationDefinition = 104;

	@GenModel(documentation="OperationOutcome")
	OperationOutcome = 105;

	@GenModel(documentation="Organization")
	Organization = 106;

	@GenModel(documentation="OrganizationAffiliation")
	OrganizationAffiliation = 107;

	@GenModel(documentation="PackagedProductDefinition")
	PackagedProductDefinition = 108;

	@GenModel(documentation="Parameters")
	Parameters = 109;

	@GenModel(documentation="Patient")
	Patient = 110;

	@GenModel(documentation="PaymentNotice")
	PaymentNotice = 111;

	@GenModel(documentation="PaymentReconciliation")
	PaymentReconciliation = 112;

	@GenModel(documentation="Permission")
	Permission = 113;

	@GenModel(documentation="Person")
	Person = 114;

	@GenModel(documentation="PlanDefinition")
	PlanDefinition = 115;

	@GenModel(documentation="Practitioner")
	Practitioner = 116;

	@GenModel(documentation="PractitionerRole")
	PractitionerRole = 117;

	@GenModel(documentation="Procedure")
	Procedure = 118;

	@GenModel(documentation="Provenance")
	Provenance = 119;

	@GenModel(documentation="Questionnaire")
	Questionnaire = 120;

	@GenModel(documentation="QuestionnaireResponse")
	QuestionnaireResponse = 121;

	@GenModel(documentation="RegulatedAuthorization")
	RegulatedAuthorization = 122;

	@GenModel(documentation="RelatedPerson")
	RelatedPerson = 123;

	@GenModel(documentation="RequestOrchestration")
	RequestOrchestration = 124;

	@GenModel(documentation="Requirements")
	Requirements = 125;

	@GenModel(documentation="ResearchStudy")
	ResearchStudy = 126;

	@GenModel(documentation="ResearchSubject")
	ResearchSubject = 127;

	@GenModel(documentation="RiskAssessment")
	RiskAssessment = 128;

	@GenModel(documentation="Schedule")
	Schedule = 129;

	@GenModel(documentation="SearchParameter")
	SearchParameter = 130;

	@GenModel(documentation="ServiceRequest")
	ServiceRequest = 131;

	@GenModel(documentation="Slot")
	Slot = 132;

	@GenModel(documentation="Specimen")
	Specimen = 133;

	@GenModel(documentation="SpecimenDefinition")
	SpecimenDefinition = 134;

	@GenModel(documentation="StructureDefinition")
	StructureDefinition = 135;

	@GenModel(documentation="StructureMap")
	StructureMap = 136;

	@GenModel(documentation="Subscription")
	Subscription = 137;

	@GenModel(documentation="SubscriptionStatus")
	SubscriptionStatus = 138;

	@GenModel(documentation="SubscriptionTopic")
	SubscriptionTopic = 139;

	@GenModel(documentation="Substance")
	Substance = 140;

	@GenModel(documentation="SubstanceDefinition")
	SubstanceDefinition = 141;

	@GenModel(documentation="SubstanceNucleicAcid")
	SubstanceNucleicAcid = 142;

	@GenModel(documentation="SubstancePolymer")
	SubstancePolymer = 143;

	@GenModel(documentation="SubstanceProtein")
	SubstanceProtein = 144;

	@GenModel(documentation="SubstanceReferenceInformation")
	SubstanceReferenceInformation = 145;

	@GenModel(documentation="SubstanceSourceMaterial")
	SubstanceSourceMaterial = 146;

	@GenModel(documentation="SupplyDelivery")
	SupplyDelivery = 147;

	@GenModel(documentation="SupplyRequest")
	SupplyRequest = 148;

	@GenModel(documentation="Task")
	Task = 149;

	@GenModel(documentation="TerminologyCapabilities")
	TerminologyCapabilities = 150;

	@GenModel(documentation="TestPlan")
	TestPlan = 151;

	@GenModel(documentation="TestReport")
	TestReport = 152;

	@GenModel(documentation="TestScript")
	TestScript = 153;

	@GenModel(documentation="Transport")
	Transport = 154;

	@GenModel(documentation="ValueSet")
	ValueSet = 155;

	@GenModel(documentation="VerificationResult")
	VerificationResult = 156;

	@GenModel(documentation="VisionPrescription")
	VisionPrescription = 157;
}

@ExtendedMetaData(name="ResourceTypeEnum:Object", baseType="ResourceTypeEnum")
datatype ResourceTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ResourceVersionPolicy", kind="elementOnly")
class ResourceVersionPolicy extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ResourceVersionPolicyEnum value;
}

@ExtendedMetaData(name="ResourceVersionPolicyEnum")
enum ResourceVersionPolicyEnum {

	@GenModel(documentation="No VersionId Support")
	noVersion = 0;

	@GenModel(documentation="Versioned")
	versioned = 1;

	@GenModel(documentation="VersionId tracked fully")
	versionedUpdate = 2;
}

@ExtendedMetaData(name="ResourceVersionPolicyEnum:Object", baseType="ResourceVersionPolicyEnum")
datatype ResourceVersionPolicyEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ResponseType", kind="elementOnly")
class ResponseType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr ResponseTypeEnum value;
}

@ExtendedMetaData(name="ResponseTypeEnum")
enum ResponseTypeEnum {

	@GenModel(documentation="OK")
	ok = 0;

	@GenModel(documentation="Transient Error")
	transientError = 1;

	@GenModel(documentation="Fatal Error")
	fatalError = 2;
}

@ExtendedMetaData(name="ResponseTypeEnum:Object", baseType="ResponseTypeEnum")
datatype ResponseTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="RestfulCapabilityMode", kind="elementOnly")
class RestfulCapabilityMode extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr RestfulCapabilityModeEnum value;
}

@ExtendedMetaData(name="RestfulCapabilityModeEnum")
enum RestfulCapabilityModeEnum {

	@GenModel(documentation="Client")
	client = 0;

	@GenModel(documentation="Server")
	server = 1;
}

@ExtendedMetaData(name="RestfulCapabilityModeEnum:Object", baseType="RestfulCapabilityModeEnum")
datatype RestfulCapabilityModeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="RiskAssessment", kind="elementOnly")
class RiskAssessment extends DomainResource {

	@GenModel(documentation="Business identifier assigned to the risk assessment.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="A reference to the request that is fulfilled by this risk assessment.")
	@ExtendedMetaData(kind="element", name="basedOn", namespace="##targetNamespace")
	!resolve val Reference basedOn;

	@GenModel(documentation="A reference to a resource that this risk assessment is part of, such as a Procedure.")
	@ExtendedMetaData(kind="element", name="parent", namespace="##targetNamespace")
	!resolve val Reference parent;

	@GenModel(documentation="The status of the RiskAssessment, using the same statuses as an Observation.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val ObservationStatus[1] status;

	@GenModel(documentation="The algorithm, process or mechanism used to evaluate the risk.")
	@ExtendedMetaData(kind="element", name="method", namespace="##targetNamespace")
	!resolve val CodeableConcept method;

	@GenModel(documentation="The type of the risk assessment performed.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@GenModel(documentation="The patient or group the risk assessment applies to.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference[1] subject;

	@GenModel(documentation="The encounter where the assessment was performed.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@ExtendedMetaData(kind="element", name="occurrenceDateTime", namespace="##targetNamespace")
	!resolve val DateTime occurrenceDateTime;

	@ExtendedMetaData(kind="element", name="occurrencePeriod", namespace="##targetNamespace")
	!resolve val Period occurrencePeriod;

	@GenModel(documentation="For assessments or prognosis specific to a particular condition, indicates the condition being assessed.")
	@ExtendedMetaData(kind="element", name="condition", namespace="##targetNamespace")
	!resolve val Reference condition;

	@GenModel(documentation="The provider, patient, related person, or software application that performed the assessment.")
	@ExtendedMetaData(kind="element", name="performer", namespace="##targetNamespace")
	!resolve val Reference performer;

	@GenModel(documentation="The reason the risk assessment was performed.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val CodeableReference[*] reason;

	@GenModel(documentation="Indicates the source data considered as part of the assessment (for example, FamilyHistory, Observations, Procedures, Conditions, etc.).")
	@ExtendedMetaData(kind="element", name="basis", namespace="##targetNamespace")
	!resolve val Reference[*] basis;

	@GenModel(documentation="Describes the expected outcome for the subject.")
	@ExtendedMetaData(kind="element", name="prediction", namespace="##targetNamespace")
	!resolve val RiskAssessmentPrediction[*] prediction;

	@GenModel(documentation="A description of the steps that might be taken to reduce the identified risk(s).")
	@ExtendedMetaData(kind="element", name="mitigation", namespace="##targetNamespace")
	!resolve val String mitigation;

	@GenModel(documentation="Additional comments about the risk assessment.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;
}

@GenModel(documentation="An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome.")
@ExtendedMetaData(name="RiskAssessment.Prediction", kind="elementOnly")
class RiskAssessmentPrediction extends BackboneElement {

	@GenModel(documentation="One of the potential outcomes for the patient (e.g. remission, death,  a particular condition).")
	@ExtendedMetaData(kind="element", name="outcome", namespace="##targetNamespace")
	!resolve val CodeableConcept outcome;

	@ExtendedMetaData(kind="element", name="probabilityDecimal", namespace="##targetNamespace")
	!resolve val Decimal probabilityDecimal;

	@ExtendedMetaData(kind="element", name="probabilityRange", namespace="##targetNamespace")
	!resolve val Range probabilityRange;

	@GenModel(documentation="Indicates how likely the outcome is (in the specified timeframe), expressed as a qualitative value (e.g. low, medium, or high).")
	@ExtendedMetaData(kind="element", name="qualitativeRisk", namespace="##targetNamespace")
	!resolve val CodeableConcept qualitativeRisk;

	@GenModel(documentation="Indicates the risk for this particular subject (with their specific characteristics) divided by the risk of the population in general.  (Numbers greater than 1 = higher risk than the population, numbers less than 1 = lower risk.).")
	@ExtendedMetaData(kind="element", name="relativeRisk", namespace="##targetNamespace")
	!resolve val Decimal relativeRisk;

	@ExtendedMetaData(kind="element", name="whenPeriod", namespace="##targetNamespace")
	!resolve val Period whenPeriod;

	@ExtendedMetaData(kind="element", name="whenRange", namespace="##targetNamespace")
	!resolve val Range whenRange;

	@GenModel(documentation="Additional information explaining the basis for the prediction.")
	@ExtendedMetaData(kind="element", name="rationale", namespace="##targetNamespace")
	!resolve val String rationale;
}

@GenModel(documentation="A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="SampledData", kind="elementOnly")
class SampledData extends DataType {

	@GenModel(documentation="The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series.")
	@ExtendedMetaData(kind="element", name="origin", namespace="##targetNamespace")
	!resolve val Quantity[1] origin;

	@GenModel(documentation="Amount of intervalUnits between samples, e.g. milliseconds for time-based sampling.")
	@ExtendedMetaData(kind="element", name="interval", namespace="##targetNamespace")
	!resolve val Decimal interval;

	@GenModel(documentation="The measurement unit in which the sample interval is expressed.")
	@ExtendedMetaData(kind="element", name="intervalUnit", namespace="##targetNamespace")
	!resolve val Code[1] intervalUnit;

	@GenModel(documentation="A correction factor that is applied to the sampled data points before they are added to the origin.")
	@ExtendedMetaData(kind="element", name="factor", namespace="##targetNamespace")
	!resolve val Decimal factor;

	@GenModel(documentation="The lower limit of detection of the measured points. This is needed if any of the data points have the value \"L\" (lower than detection limit).")
	@ExtendedMetaData(kind="element", name="lowerLimit", namespace="##targetNamespace")
	!resolve val Decimal lowerLimit;

	@GenModel(documentation="The upper limit of detection of the measured points. This is needed if any of the data points have the value \"U\" (higher than detection limit).")
	@ExtendedMetaData(kind="element", name="upperLimit", namespace="##targetNamespace")
	!resolve val Decimal upperLimit;

	@GenModel(documentation="The number of sample points at each time point. If this value is greater than one, then the dimensions will be interlaced - all the sample points for a point in time will be recorded at once.")
	@ExtendedMetaData(kind="element", name="dimensions", namespace="##targetNamespace")
	!resolve val PositiveInt[1] dimensions;

	@GenModel(documentation="Reference to ConceptMap that defines the codes used in the data.")
	@ExtendedMetaData(kind="element", name="codeMap", namespace="##targetNamespace")
	!resolve val Canonical codeMap;

	@GenModel(documentation="A series of data points which are decimal values separated by a single space (character u20).  The units in which the offsets are expressed are found in intervalUnit.  The absolute point at which the measurements begin SHALL be conveyed outside the scope of this datatype, e.g. Observation.effectiveDateTime for a timing offset.")
	@ExtendedMetaData(kind="element", name="offsets", namespace="##targetNamespace")
	!resolve val String offsets;

	@GenModel(documentation="A series of data points which are decimal values or codes separated by a single space (character u20). The special codes \"E\" (error), \"L\" (below detection limit) and \"U\" (above detection limit) are also defined for used in place of decimal values.")
	@ExtendedMetaData(kind="element", name="data", namespace="##targetNamespace")
	!resolve val SampledDataDataType data;
}

@ExtendedMetaData(name="SampledDataDataType", kind="elementOnly")
class SampledDataDataType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	attr SampledDataDataTypePrimitive value;
}

@ExtendedMetaData(name="SampledDataDataType-primitive", baseType="http://www.eclipse.org/emf/2003/XMLType#string", pattern="((-{0,1}\d*\.{0,1}\d+)|[EUL])(%20((-{0,1}\d*\.{0,1}\d+)|[EUL]))*")
datatype SampledDataDataTypePrimitive : java.lang.String;

@GenModel(documentation="A container for slots of time that may be available for booking appointments.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Schedule", kind="elementOnly")
class Schedule extends DomainResource {

	@GenModel(documentation="External Ids for this item.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Whether this schedule record is in active use or should not be used (such as was entered in error).")
	@ExtendedMetaData(kind="element", name="active", namespace="##targetNamespace")
	!resolve val Boolean active;

	@GenModel(documentation="A broad categorization of the service that is to be performed during this appointment.")
	@ExtendedMetaData(kind="element", name="serviceCategory", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] serviceCategory;

	@GenModel(documentation="The specific service that is to be performed during this appointment.")
	@ExtendedMetaData(kind="element", name="serviceType", namespace="##targetNamespace")
	!resolve val CodeableReference[*] serviceType;

	@GenModel(documentation="The specialty of a practitioner that would be required to perform the service requested in this appointment.")
	@ExtendedMetaData(kind="element", name="specialty", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] specialty;

	@GenModel(documentation="Further description of the schedule as it would be presented to a consumer while searching.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="Slots that reference this schedule resource provide the availability details to these referenced resource(s).")
	@ExtendedMetaData(kind="element", name="actor", namespace="##targetNamespace")
	!resolve val Reference[+] actor;

	@GenModel(documentation="The period of time that the slots that reference this Schedule resource cover (even if none exist). These  cover the amount of time that an organization's planning horizon; the interval for which they are currently accepting appointments. This does not define a \"template\" for planning outside these dates.")
	@ExtendedMetaData(kind="element", name="planningHorizon", namespace="##targetNamespace")
	!resolve val Period planningHorizon;

	@GenModel(documentation="Comments on the availability to describe any extended information. Such as custom constraints on the slots that may be associated.")
	@ExtendedMetaData(kind="element", name="comment", namespace="##targetNamespace")
	!resolve val Markdown comment;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="SearchComparator", kind="elementOnly")
class SearchComparator extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr SearchComparatorEnum value;
}

@ExtendedMetaData(name="SearchComparatorEnum")
enum SearchComparatorEnum {

	@GenModel(documentation="Equals")
	eq = 0;

	@GenModel(documentation="Not Equals")
	ne = 1;

	@GenModel(documentation="Greater Than")
	gt = 2;

	@GenModel(documentation="Less Than")
	lt = 3;

	@GenModel(documentation="Greater or Equals")
	ge = 4;

	@GenModel(documentation="Less of Equal")
	le = 5;

	@GenModel(documentation="Starts After")
	sa = 6;

	@GenModel(documentation="Ends Before")
	eb = 7;

	@GenModel(documentation="Approximately")
	ap = 8;
}

@ExtendedMetaData(name="SearchComparatorEnum:Object", baseType="SearchComparatorEnum")
datatype SearchComparatorEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="SearchEntryMode", kind="elementOnly")
class SearchEntryMode extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr SearchEntryModeEnum value;
}

@ExtendedMetaData(name="SearchEntryModeEnum")
enum SearchEntryModeEnum {

	@GenModel(documentation="Match")
	match = 0;

	@GenModel(documentation="Include")
	include = 1;

	@GenModel(documentation="Outcome")
	outcome = 2;
}

@ExtendedMetaData(name="SearchEntryModeEnum:Object", baseType="SearchEntryModeEnum")
datatype SearchEntryModeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="SearchModifierCode", kind="elementOnly")
class SearchModifierCode extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr SearchModifierCodeEnum value;
}

@ExtendedMetaData(name="SearchModifierCodeEnum")
enum SearchModifierCodeEnum {

	@GenModel(documentation="Missing")
	missing = 0;

	@GenModel(documentation="Exact")
	exact = 1;

	@GenModel(documentation="Contains")
	contains = 2;

	@GenModel(documentation="Not")
	not = 3;

	@GenModel(documentation="Text")
	text = 4;

	@GenModel(documentation="In")
	in = 5;

	@GenModel(documentation="Not In")
	notIn = 6;

	@GenModel(documentation="Below")
	below = 7;

	@GenModel(documentation="Above")
	above = 8;

	@GenModel(documentation="Type")
	type = 9;

	@GenModel(documentation="Identifier")
	identifier = 10;

	@GenModel(documentation="Of Type")
	ofType = 11;

	@GenModel(documentation="Code Text")
	codeText = 12;

	@GenModel(documentation="Text Advanced")
	textAdvanced = 13;

	@GenModel(documentation="Iterate")
	iterate = 14;
}

@ExtendedMetaData(name="SearchModifierCodeEnum:Object", baseType="SearchModifierCodeEnum")
datatype SearchModifierCodeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A search parameter that defines a named search item that can be used to search/filter on a resource.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="SearchParameter", kind="elementOnly")
class SearchParameter extends CanonicalResource {

	@GenModel(documentation="An absolute URI that is used to identify this search parameter when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this search parameter is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the search parameter is stored on different servers.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri[1] url;

	@GenModel(documentation="A formal identifier that is used to identify this search parameter when it is represented in other formats, or referenced in a specification, model, design or an instance.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The identifier that is used to identify this version of the search parameter when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the search parameter author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@ExtendedMetaData(kind="element", name="versionAlgorithmString", namespace="##targetNamespace")
	!resolve val String versionAlgorithmString;

	@ExtendedMetaData(kind="element", name="versionAlgorithmCoding", namespace="##targetNamespace")
	!resolve val Coding versionAlgorithmCoding;

	@GenModel(documentation="A natural language name identifying the search parameter. This name should be usable as an identifier for the module by machine processing applications such as code generation.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String[1] name;

	@GenModel(documentation="A short, descriptive, user-friendly title for the search parameter.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="Where this search parameter is originally defined. If a derivedFrom is provided, then the details in the search parameter must be consistent with the definition from which it is defined. i.e. the parameter should have the same meaning, and (usually) the functionality should be a proper subset of the underlying search parameter.")
	@ExtendedMetaData(kind="element", name="derivedFrom", namespace="##targetNamespace")
	!resolve val Canonical derivedFrom;

	@GenModel(documentation="The status of this search parameter. Enables tracking the life-cycle of the content.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="A Boolean value to indicate that this search parameter is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.")
	@ExtendedMetaData(kind="element", name="experimental", namespace="##targetNamespace")
	!resolve val Boolean experimental;

	@GenModel(documentation="The date  (and optionally time) when the search parameter was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the search parameter changes.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="The name of the organization or individual tresponsible for the release and ongoing maintenance of the search parameter.")
	@ExtendedMetaData(kind="element", name="publisher", namespace="##targetNamespace")
	!resolve val String publisher;

	@GenModel(documentation="Contact details to assist a user in finding and communicating with the publisher.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactDetail[*] contact;

	@GenModel(documentation="And how it used.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown[1] description;

	@GenModel(documentation="The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate search parameter instances.")
	@ExtendedMetaData(kind="element", name="useContext", namespace="##targetNamespace")
	!resolve val UsageContext[*] useContext;

	@GenModel(documentation="A legal or geographic region in which the search parameter is intended to be used.")
	@ExtendedMetaData(kind="element", name="jurisdiction", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] jurisdiction;

	@GenModel(documentation="Explanation of why this search parameter is needed and why it has been designed as it has.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val Markdown purpose;

	@GenModel(documentation="A copyright statement relating to the search parameter and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the search parameter.")
	@ExtendedMetaData(kind="element", name="copyright", namespace="##targetNamespace")
	!resolve val Markdown copyright;

	@GenModel(documentation="A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').")
	@ExtendedMetaData(kind="element", name="copyrightLabel", namespace="##targetNamespace")
	!resolve val String copyrightLabel;

	@GenModel(documentation="The label that is recommended to be used in the URL or the parameter name in a parameters resource for this search parameter.  In some cases, servers may need to use a different CapabilityStatement searchParam.name to differentiate between multiple SearchParameters that happen to have the same code.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val Code[1] code;

	@GenModel(documentation="The base resource type(s) that this search parameter can be used against.")
	@ExtendedMetaData(kind="element", name="base", namespace="##targetNamespace")
	!resolve val VersionIndependentResourceTypesAll[+] base;

	@GenModel(documentation="The type of value that a search parameter may contain, and how the content is interpreted.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val SearchParamType[1] type;

	@GenModel(documentation="A FHIRPath expression that returns a set of elements for the search parameter.")
	@ExtendedMetaData(kind="element", name="expression", namespace="##targetNamespace")
	!resolve val String expression;

	@GenModel(documentation="How the search parameter relates to the set of elements returned by evaluating the expression query.")
	@ExtendedMetaData(kind="element", name="processingMode", namespace="##targetNamespace")
	!resolve val SearchProcessingModeType processingMode;

	@GenModel(documentation="FHIRPath expression that defines/sets a complex constraint for when this SearchParameter is applicable.")
	@ExtendedMetaData(kind="element", name="constraint", namespace="##targetNamespace")
	!resolve val String constraint;

	@GenModel(documentation="Types of resource (if a resource is referenced).")
	@ExtendedMetaData(kind="element", name="target", namespace="##targetNamespace")
	!resolve val VersionIndependentResourceTypesAll[*] target;

	@GenModel(documentation="Whether multiple values are allowed for each time the parameter exists. Values are separated by commas, and the parameter matches if any of the values match.")
	@ExtendedMetaData(kind="element", name="multipleOr", namespace="##targetNamespace")
	!resolve val Boolean multipleOr;

	@GenModel(documentation="Whether multiple parameters are allowed - e.g. more than one parameter with the same name. The search matches if all the parameters match.")
	@ExtendedMetaData(kind="element", name="multipleAnd", namespace="##targetNamespace")
	!resolve val Boolean multipleAnd;

	@GenModel(documentation="Comparators supported for the search parameter.")
	@ExtendedMetaData(kind="element", name="comparator", namespace="##targetNamespace")
	!resolve val SearchComparator[*] comparator;

	@GenModel(documentation="A modifier supported for the search parameter.")
	@ExtendedMetaData(kind="element", name="modifier", namespace="##targetNamespace")
	!resolve val SearchModifierCode[*] modifier;

	@GenModel(documentation="Contains the names of any search parameters which may be chained to the containing search parameter. Chained parameters may be added to search parameters of type reference and specify that resources will only be returned if they contain a reference to a resource which matches the chained parameter value. Values for this field should be drawn from SearchParameter.code for a parameter on the target resource type.")
	@ExtendedMetaData(kind="element", name="chain", namespace="##targetNamespace")
	!resolve val String[*] chain;

	@GenModel(documentation="Used to define the parts of a composite search parameter.")
	@ExtendedMetaData(kind="element", name="component", namespace="##targetNamespace")
	!resolve val SearchParameterComponent[*] component;
}

@GenModel(documentation="A search parameter that defines a named search item that can be used to search/filter on a resource.")
@ExtendedMetaData(name="SearchParameter.Component", kind="elementOnly")
class SearchParameterComponent extends BackboneElement {

	@GenModel(documentation="The definition of the search parameter that describes this part.")
	@ExtendedMetaData(kind="element", name="definition", namespace="##targetNamespace")
	!resolve val Canonical[1] definition;

	@GenModel(documentation="A sub-expression that defines how to extract values for this component from the output of the main SearchParameter.expression.")
	@ExtendedMetaData(kind="element", name="expression", namespace="##targetNamespace")
	!resolve val String[1] expression;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="SearchParamType", kind="elementOnly")
class SearchParamType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr SearchParamTypeEnum value;
}

@ExtendedMetaData(name="SearchParamTypeEnum")
enum SearchParamTypeEnum {

	@GenModel(documentation="Number")
	number = 0;

	@GenModel(documentation="Date/DateTime")
	date = 1;

	@GenModel(documentation="String")
	string = 2;

	@GenModel(documentation="Token")
	token = 3;

	@GenModel(documentation="Reference")
	reference = 4;

	@GenModel(documentation="Composite")
	composite = 5;

	@GenModel(documentation="Quantity")
	quantity = 6;

	@GenModel(documentation="URI")
	uri = 7;

	@GenModel(documentation="Special")
	special = 8;
}

@ExtendedMetaData(name="SearchParamTypeEnum:Object", baseType="SearchParamTypeEnum")
datatype SearchParamTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="SearchProcessingModeType", kind="elementOnly")
class SearchProcessingModeType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr SearchProcessingModeTypeEnum value;
}

@ExtendedMetaData(name="SearchProcessingModeTypeEnum")
enum SearchProcessingModeTypeEnum {

	@GenModel(documentation="Normal")
	normal = 0;

	@GenModel(documentation="Phonetic")
	phonetic = 1;

	@GenModel(documentation="Other")
	other = 2;
}

@ExtendedMetaData(name="SearchProcessingModeTypeEnum:Object", baseType="SearchProcessingModeTypeEnum")
datatype SearchProcessingModeTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="SequenceType", kind="elementOnly")
class SequenceType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr SequenceTypeEnum value;
}

@ExtendedMetaData(name="SequenceTypeEnum")
enum SequenceTypeEnum {

	@GenModel(documentation="AA Sequence")
	aa = 0;

	@GenModel(documentation="DNA Sequence")
	dna = 1;

	@GenModel(documentation="RNA Sequence")
	rna = 2;
}

@ExtendedMetaData(name="SequenceTypeEnum:Object", baseType="SequenceTypeEnum")
datatype SequenceTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A record of a request for service such as diagnostic investigations, treatments, or operations to be performed.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ServiceRequest", kind="elementOnly")
class ServiceRequest extends DomainResource {

	@GenModel(documentation="Identifiers assigned to this order instance by the orderer and/or the receiver and/or order fulfiller.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this ServiceRequest.")
	@ExtendedMetaData(kind="element", name="instantiatesCanonical", namespace="##targetNamespace")
	!resolve val Canonical[*] instantiatesCanonical;

	@GenModel(documentation="The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this ServiceRequest.")
	@ExtendedMetaData(kind="element", name="instantiatesUri", namespace="##targetNamespace")
	!resolve val Uri[*] instantiatesUri;

	@GenModel(documentation="Plan/proposal/order fulfilled by this request.")
	@ExtendedMetaData(kind="element", name="basedOn", namespace="##targetNamespace")
	!resolve val Reference[*] basedOn;

	@GenModel(documentation="The request takes the place of the referenced completed or terminated request(s).")
	@ExtendedMetaData(kind="element", name="replaces", namespace="##targetNamespace")
	!resolve val Reference[*] replaces;

	@GenModel(documentation="A shared identifier common to all service requests that were authorized more or less simultaneously by a single author, representing the composite or group identifier.")
	@ExtendedMetaData(kind="element", name="requisition", namespace="##targetNamespace")
	!resolve val Identifier requisition;

	@GenModel(documentation="The status of the order.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val RequestStatus[1] status;

	@GenModel(documentation="Whether the request is a proposal, plan, an original order or a reflex order.")
	@ExtendedMetaData(kind="element", name="intent", namespace="##targetNamespace")
	!resolve val RequestIntent[1] intent;

	@GenModel(documentation="A code that classifies the service for searching, sorting and display purposes (e.g. \"Surgical Procedure\").")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] category;

	@GenModel(documentation="Indicates how quickly the ServiceRequest should be addressed with respect to other requests.")
	@ExtendedMetaData(kind="element", name="priority", namespace="##targetNamespace")
	!resolve val RequestPriority priority;

	@GenModel(documentation="Set this to true if the record is saying that the service/procedure should NOT be performed.")
	@ExtendedMetaData(kind="element", name="doNotPerform", namespace="##targetNamespace")
	!resolve val Boolean doNotPerform;

	@GenModel(documentation="A code or reference that identifies a particular service (i.e., procedure, diagnostic investigation, or panel of investigations) that have been requested.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableReference code;

	@GenModel(documentation="Additional details and instructions about the how the services are to be delivered.   For example, and order for a urinary catheter may have an order detail for an external or indwelling catheter, or an order for a bandage may require additional instructions specifying how the bandage should be applied.")
	@ExtendedMetaData(kind="element", name="orderDetail", namespace="##targetNamespace")
	!resolve val ServiceRequestOrderDetail[*] orderDetail;

	@ExtendedMetaData(kind="element", name="quantityQuantity", namespace="##targetNamespace")
	!resolve val Quantity quantityQuantity;

	@ExtendedMetaData(kind="element", name="quantityRatio", namespace="##targetNamespace")
	!resolve val Ratio quantityRatio;

	@ExtendedMetaData(kind="element", name="quantityRange", namespace="##targetNamespace")
	!resolve val Range quantityRange;

	@GenModel(documentation="On whom or what the service is to be performed. This is usually a human patient, but can also be requested on animals, groups of humans or animals, devices such as dialysis machines, or even locations (typically for environmental scans).")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference[1] subject;

	@GenModel(documentation="The actual focus of a service request when it is not the subject of record representing something or someone associated with the subject such as a spouse, parent, fetus, or donor. The focus of a service request could also be an existing condition,  an intervention, the subject's diet,  another service request on the subject,  or a body structure such as tumor or implanted device.")
	@ExtendedMetaData(kind="element", name="focus", namespace="##targetNamespace")
	!resolve val Reference[*] focus;

	@GenModel(documentation="An encounter that provides additional information about the healthcare context in which this request is made.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@ExtendedMetaData(kind="element", name="occurrenceDateTime", namespace="##targetNamespace")
	!resolve val DateTime occurrenceDateTime;

	@ExtendedMetaData(kind="element", name="occurrencePeriod", namespace="##targetNamespace")
	!resolve val Period occurrencePeriod;

	@ExtendedMetaData(kind="element", name="occurrenceTiming", namespace="##targetNamespace")
	!resolve val Timing occurrenceTiming;

	@ExtendedMetaData(kind="element", name="asNeededBoolean", namespace="##targetNamespace")
	!resolve val Boolean asNeededBoolean;

	@ExtendedMetaData(kind="element", name="asNeededCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept asNeededCodeableConcept;

	@GenModel(documentation="When the request transitioned to being actionable.")
	@ExtendedMetaData(kind="element", name="authoredOn", namespace="##targetNamespace")
	!resolve val DateTime authoredOn;

	@GenModel(documentation="The individual who initiated the request and has responsibility for its activation.")
	@ExtendedMetaData(kind="element", name="requester", namespace="##targetNamespace")
	!resolve val Reference requester;

	@GenModel(documentation="Desired type of performer for doing the requested service.")
	@ExtendedMetaData(kind="element", name="performerType", namespace="##targetNamespace")
	!resolve val CodeableConcept performerType;

	@GenModel(documentation="The desired performer for doing the requested service.  For example, the surgeon, dermatopathologist, endoscopist, etc.")
	@ExtendedMetaData(kind="element", name="performer", namespace="##targetNamespace")
	!resolve val Reference[*] performer;

	@GenModel(documentation="The preferred location(s) where the procedure should actually happen in coded or free text form. E.g. at home or nursing day care center.")
	@ExtendedMetaData(kind="element", name="location", namespace="##targetNamespace")
	!resolve val CodeableReference[*] location;

	@GenModel(documentation="An explanation or justification for why this service is being requested in coded or textual form.   This is often for billing purposes.  May relate to the resources referred to in `supportingInfo`.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val CodeableReference[*] reason;

	@GenModel(documentation="Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be needed for delivering the requested service.")
	@ExtendedMetaData(kind="element", name="insurance", namespace="##targetNamespace")
	!resolve val Reference[*] insurance;

	@GenModel(documentation="Additional clinical information about the patient or specimen that may influence the services or their interpretations.     This information includes diagnosis, clinical findings and other observations.  In laboratory ordering these are typically referred to as \"ask at order entry questions (AOEs)\".  This includes observations explicitly requested by the producer (filler) to provide context or supporting information needed to complete the order. For example,  reporting the amount of inspired oxygen for blood gas measurements.")
	@ExtendedMetaData(kind="element", name="supportingInfo", namespace="##targetNamespace")
	!resolve val CodeableReference[*] supportingInfo;

	@GenModel(documentation="One or more specimens that the laboratory procedure will use.")
	@ExtendedMetaData(kind="element", name="specimen", namespace="##targetNamespace")
	!resolve val Reference[*] specimen;

	@GenModel(documentation="Anatomic location where the procedure should be performed. This is the target site.")
	@ExtendedMetaData(kind="element", name="bodySite", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] bodySite;

	@GenModel(documentation="Anatomic location where the procedure should be performed. This is the target site.")
	@ExtendedMetaData(kind="element", name="bodyStructure", namespace="##targetNamespace")
	!resolve val Reference bodyStructure;

	@GenModel(documentation="Any other notes and comments made about the service request. For example, internal billing notes.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="Instructions in terms that are understood by the patient or consumer.")
	@ExtendedMetaData(kind="element", name="patientInstruction", namespace="##targetNamespace")
	!resolve val ServiceRequestPatientInstruction[*] patientInstruction;

	@GenModel(documentation="Key events in the history of the request.")
	@ExtendedMetaData(kind="element", name="relevantHistory", namespace="##targetNamespace")
	!resolve val Reference[*] relevantHistory;
}

@GenModel(documentation="A record of a request for service such as diagnostic investigations, treatments, or operations to be performed.")
@ExtendedMetaData(name="ServiceRequest.OrderDetail", kind="elementOnly")
class ServiceRequestOrderDetail extends BackboneElement {

	@GenModel(documentation="Indicates the context of the order details by reference.")
	@ExtendedMetaData(kind="element", name="parameterFocus", namespace="##targetNamespace")
	!resolve val CodeableReference parameterFocus;

	@GenModel(documentation="The parameter details for the service being requested.")
	@ExtendedMetaData(kind="element", name="parameter", namespace="##targetNamespace")
	!resolve val ServiceRequestParameter[+] parameter;
}

@GenModel(documentation="A record of a request for service such as diagnostic investigations, treatments, or operations to be performed.")
@ExtendedMetaData(name="ServiceRequest.Parameter", kind="elementOnly")
class ServiceRequestParameter extends BackboneElement {

	@GenModel(documentation="A value representing the additional detail or instructions for the order (e.g., catheter insertion, body elevation, descriptive device configuration and/or setting instructions).")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] code;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueRatio", namespace="##targetNamespace")
	!resolve val Ratio valueRatio;

	@ExtendedMetaData(kind="element", name="valueRange", namespace="##targetNamespace")
	!resolve val Range valueRange;

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;

	@ExtendedMetaData(kind="element", name="valueCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept valueCodeableConcept;

	@ExtendedMetaData(kind="element", name="valueString", namespace="##targetNamespace")
	!resolve val String valueString;

	@ExtendedMetaData(kind="element", name="valuePeriod", namespace="##targetNamespace")
	!resolve val Period valuePeriod;
}

@GenModel(documentation="A record of a request for service such as diagnostic investigations, treatments, or operations to be performed.")
@ExtendedMetaData(name="ServiceRequest.PatientInstruction", kind="elementOnly")
class ServiceRequestPatientInstruction extends BackboneElement {

	@ExtendedMetaData(kind="element", name="instructionMarkdown", namespace="##targetNamespace")
	!resolve val Markdown instructionMarkdown;

	@ExtendedMetaData(kind="element", name="instructionReference", namespace="##targetNamespace")
	!resolve val Reference instructionReference;
}

@GenModel(documentation="A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="Signature", kind="elementOnly")
class Signature extends DataType {

	@GenModel(documentation="An indication of the reason that the entity signed this document. This may be explicitly included as part of the signature information and can be used when determining accountability for various actions concerning the document.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val Coding[*] type;

	@GenModel(documentation="When the digital signature was signed.")
	@ExtendedMetaData(kind="element", name="when", namespace="##targetNamespace")
	!resolve val Instant when;

	@GenModel(documentation="A reference to an application-usable description of the identity that signed  (e.g. the signature used their private key).")
	@ExtendedMetaData(kind="element", name="who", namespace="##targetNamespace")
	!resolve val Reference who;

	@GenModel(documentation="A reference to an application-usable description of the identity that is represented by the signature.")
	@ExtendedMetaData(kind="element", name="onBehalfOf", namespace="##targetNamespace")
	!resolve val Reference onBehalfOf;

	@GenModel(documentation="A mime type that indicates the technical format of the target resources signed by the signature.")
	@ExtendedMetaData(kind="element", name="targetFormat", namespace="##targetNamespace")
	!resolve val Code targetFormat;

	@GenModel(documentation="A mime type that indicates the technical format of the signature. Important mime types are application/signature+xml for X ML DigSig, application/jose for JWS, and image/* for a graphical image of a signature, etc.")
	@ExtendedMetaData(kind="element", name="sigFormat", namespace="##targetNamespace")
	!resolve val Code sigFormat;

	@GenModel(documentation="The base64 encoding of the Signature content. When signature is not recorded electronically this element would be empty.")
	@ExtendedMetaData(kind="element", name="data", namespace="##targetNamespace")
	!resolve val Base64Binary data;
}

@GenModel(documentation="How slices are interpreted when evaluating an instance.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="SlicingRules", kind="elementOnly")
class SlicingRules extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr SlicingRulesEnum value;
}

@ExtendedMetaData(name="SlicingRulesEnum")
enum SlicingRulesEnum {

	@GenModel(documentation="Closed")
	closed = 0;

	@GenModel(documentation="Open")
	open = 1;

	@GenModel(documentation="Open at End")
	openAtEnd = 2;
}

@ExtendedMetaData(name="SlicingRulesEnum:Object", baseType="SlicingRulesEnum")
datatype SlicingRulesEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A slot of time on a schedule that may be available for booking appointments.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Slot", kind="elementOnly")
class Slot extends DomainResource {

	@GenModel(documentation="External Ids for this item.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="A broad categorization of the service that is to be performed during this appointment.")
	@ExtendedMetaData(kind="element", name="serviceCategory", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] serviceCategory;

	@GenModel(documentation="The type of appointments that can be booked into this slot (ideally this would be an identifiable service - which is at a location, rather than the location itself). If provided then this overrides the value provided on the Schedule resource.")
	@ExtendedMetaData(kind="element", name="serviceType", namespace="##targetNamespace")
	!resolve val CodeableReference[*] serviceType;

	@GenModel(documentation="The specialty of a practitioner that would be required to perform the service requested in this appointment.")
	@ExtendedMetaData(kind="element", name="specialty", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] specialty;

	@GenModel(documentation="The style of appointment or patient that may be booked in the slot (not service type).")
	@ExtendedMetaData(kind="element", name="appointmentType", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] appointmentType;

	@GenModel(documentation="The schedule resource that this slot defines an interval of status information.")
	@ExtendedMetaData(kind="element", name="schedule", namespace="##targetNamespace")
	!resolve val Reference[1] schedule;

	@GenModel(documentation="busy | free | busy-unavailable | busy-tentative | entered-in-error.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val SlotStatus[1] status;

	@GenModel(documentation="Date/Time that the slot is to begin.")
	@ExtendedMetaData(kind="element", name="start", namespace="##targetNamespace")
	!resolve val Instant[1] start;

	@GenModel(documentation="Date/Time that the slot is to conclude.")
	@ExtendedMetaData(kind="element", name="end", namespace="##targetNamespace")
	!resolve val Instant[1] end;

	@GenModel(documentation="This slot has already been overbooked, appointments are unlikely to be accepted for this time.")
	@ExtendedMetaData(kind="element", name="overbooked", namespace="##targetNamespace")
	!resolve val Boolean overbooked;

	@GenModel(documentation="Comments on the slot to describe any extended information. Such as custom constraints on the slot.")
	@ExtendedMetaData(kind="element", name="comment", namespace="##targetNamespace")
	!resolve val String comment;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="SlotStatus", kind="elementOnly")
class SlotStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr SlotStatusEnum value;
}

@ExtendedMetaData(name="SlotStatusEnum")
enum SlotStatusEnum {

	@GenModel(documentation="Busy")
	busy = 0;

	@GenModel(documentation="Free")
	free = 1;

	@GenModel(documentation="Busy (Unavailable)")
	busyUnavailable = 2;

	@GenModel(documentation="Busy (Tentative)")
	busyTentative = 3;

	@GenModel(documentation="Entered in error")
	enteredInError = 4;
}

@ExtendedMetaData(name="SlotStatusEnum:Object", baseType="SlotStatusEnum")
datatype SlotStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="The possible sort directions, ascending or descending.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="SortDirection", kind="elementOnly")
class SortDirection extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr SortDirectionEnum value;
}

@ExtendedMetaData(name="SortDirectionEnum")
enum SortDirectionEnum {

	@GenModel(documentation="Ascending")
	ascending = 0;

	@GenModel(documentation="Descending")
	descending = 1;
}

@ExtendedMetaData(name="SortDirectionEnum:Object", baseType="SortDirectionEnum")
datatype SortDirectionEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="SPDXLicense", kind="elementOnly")
class SPDXLicense extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr SPDXLicenseEnum value;
}

@ExtendedMetaData(name="SPDXLicenseEnum")
enum SPDXLicenseEnum {

	@GenModel(documentation="Not open source")
	notOpenSource = 0;

	@GenModel(documentation="BSD Zero Clause License")
	_0BSD = 1;

	@GenModel(documentation="Attribution Assurance License")
	AAL = 2;

	@GenModel(documentation="Abstyles License")
	Abstyles = 3;

	@GenModel(documentation="Adobe Systems Incorporated Source Code License Agreement")
	Adobe2006 = 4;

	@GenModel(documentation="Adobe Glyph List License")
	AdobeGlyph = 5;

	@GenModel(documentation="Amazon Digital Services License")
	ADSL = 6;

	@GenModel(documentation="Academic Free License v1.1")
	AFL11 = 7;

	@GenModel(documentation="Academic Free License v1.2")
	AFL12 = 8;

	@GenModel(documentation="Academic Free License v2.0")
	AFL20 = 9;

	@GenModel(documentation="Academic Free License v2.1")
	AFL21 = 10;

	@GenModel(documentation="Academic Free License v3.0")
	AFL30 = 11;

	@GenModel(documentation="Afmparse License")
	Afmparse = 12;

	@GenModel(documentation="Affero General Public License v1.0 only")
	AGPL10Only = 13;

	@GenModel(documentation="Affero General Public License v1.0 or later")
	AGPL10OrLater = 14;

	@GenModel(documentation="GNU Affero General Public License v3.0 only")
	AGPL30Only = 15;

	@GenModel(documentation="GNU Affero General Public License v3.0 or later")
	AGPL30OrLater = 16;

	@GenModel(documentation="Aladdin Free Public License")
	Aladdin = 17;

	@GenModel(documentation="AMD's plpa_map.c License")
	AMDPLPA = 18;

	@GenModel(documentation="Apple MIT License")
	AML = 19;

	@GenModel(documentation="Academy of Motion Picture Arts and Sciences BSD")
	AMPAS = 20;

	@GenModel(documentation="ANTLR Software Rights Notice")
	ANTLRPD = 21;

	@GenModel(documentation="Apache License 1.0")
	Apache10 = 22;

	@GenModel(documentation="Apache License 1.1")
	Apache11 = 23;

	@GenModel(documentation="Apache License 2.0")
	Apache20 = 24;

	@GenModel(documentation="Adobe Postscript AFM License")
	APAFML = 25;

	@GenModel(documentation="Adaptive Public License 1.0")
	APL10 = 26;

	@GenModel(documentation="Apple Public Source License 1.0")
	APSL10 = 27;

	@GenModel(documentation="Apple Public Source License 1.1")
	APSL11 = 28;

	@GenModel(documentation="Apple Public Source License 1.2")
	APSL12 = 29;

	@GenModel(documentation="Apple Public Source License 2.0")
	APSL20 = 30;

	@GenModel(documentation="Artistic License 1.0 w/clause 8")
	Artistic10Cl8 = 31;

	@GenModel(documentation="Artistic License 1.0 (Perl)")
	Artistic10Perl = 32;

	@GenModel(documentation="Artistic License 1.0")
	Artistic10 = 33;

	@GenModel(documentation="Artistic License 2.0")
	Artistic20 = 34;

	@GenModel(documentation="Bahyph License")
	Bahyph = 35;

	@GenModel(documentation="Barr License")
	Barr = 36;

	@GenModel(documentation="Beerware License")
	Beerware = 37;

	@GenModel(documentation="BitTorrent Open Source License v1.0")
	BitTorrent10 = 38;

	@GenModel(documentation="BitTorrent Open Source License v1.1")
	BitTorrent11 = 39;

	@GenModel(documentation="Borceux license")
	Borceux = 40;

	@GenModel(documentation="BSD 1-Clause License")
	BSD1Clause = 41;

	@GenModel(documentation="BSD 2-Clause FreeBSD License")
	BSD2ClauseFreeBSD = 42;

	@GenModel(documentation="BSD 2-Clause NetBSD License")
	BSD2ClauseNetBSD = 43;

	@GenModel(documentation="BSD-2-Clause Plus Patent License")
	BSD2ClausePatent = 44;

	@GenModel(documentation="BSD 2-Clause \"Simplified\" License")
	BSD2Clause = 45;

	@GenModel(documentation="BSD with attribution")
	BSD3ClauseAttribution = 46;

	@GenModel(documentation="BSD 3-Clause Clear License")
	BSD3ClauseClear = 47;

	@GenModel(documentation="Lawrence Berkeley National Labs BSD variant license")
	BSD3ClauseLBNL = 48;

	@GenModel(documentation="BSD 3-Clause No Nuclear License 2014")
	BSD3ClauseNoNuclearLicense2014 = 49;

	@GenModel(documentation="BSD 3-Clause No Nuclear License")
	BSD3ClauseNoNuclearLicense = 50;

	@GenModel(documentation="BSD 3-Clause No Nuclear Warranty")
	BSD3ClauseNoNuclearWarranty = 51;

	@GenModel(documentation="BSD 3-Clause \"New\" or \"Revised\" License")
	BSD3Clause = 52;

	@GenModel(documentation="BSD-4-Clause (University of California-Specific)")
	BSD4ClauseUC = 53;

	@GenModel(documentation="BSD 4-Clause \"Original\" or \"Old\" License")
	BSD4Clause = 54;

	@GenModel(documentation="BSD Protection License")
	BSDProtection = 55;

	@GenModel(documentation="BSD Source Code Attribution")
	BSDSourceCode = 56;

	@GenModel(documentation="Boost Software License 1.0")
	BSL10 = 57;

	@GenModel(documentation="bzip2 and libbzip2 License v1.0.5")
	bzip2105 = 58;

	@GenModel(documentation="bzip2 and libbzip2 License v1.0.6")
	bzip2106 = 59;

	@GenModel(documentation="Caldera License")
	Caldera = 60;

	@GenModel(documentation="Computer Associates Trusted Open Source License 1.1")
	CATOSL11 = 61;

	@GenModel(documentation="Creative Commons Attribution 1.0 Generic")
	CCBY10 = 62;

	@GenModel(documentation="Creative Commons Attribution 2.0 Generic")
	CCBY20 = 63;

	@GenModel(documentation="Creative Commons Attribution 2.5 Generic")
	CCBY25 = 64;

	@GenModel(documentation="Creative Commons Attribution 3.0 Unported")
	CCBY30 = 65;

	@GenModel(documentation="Creative Commons Attribution 4.0 International")
	CCBY40 = 66;

	@GenModel(documentation="Creative Commons Attribution Non Commercial 1.0 Generic")
	CCBYNC10 = 67;

	@GenModel(documentation="Creative Commons Attribution Non Commercial 2.0 Generic")
	CCBYNC20 = 68;

	@GenModel(documentation="Creative Commons Attribution Non Commercial 2.5 Generic")
	CCBYNC25 = 69;

	@GenModel(documentation="Creative Commons Attribution Non Commercial 3.0 Unported")
	CCBYNC30 = 70;

	@GenModel(documentation="Creative Commons Attribution Non Commercial 4.0 International")
	CCBYNC40 = 71;

	@GenModel(documentation="Creative Commons Attribution Non Commercial No Derivatives 1.0 Generic")
	CCBYNCND10 = 72;

	@GenModel(documentation="Creative Commons Attribution Non Commercial No Derivatives 2.0 Generic")
	CCBYNCND20 = 73;

	@GenModel(documentation="Creative Commons Attribution Non Commercial No Derivatives 2.5 Generic")
	CCBYNCND25 = 74;

	@GenModel(documentation="Creative Commons Attribution Non Commercial No Derivatives 3.0 Unported")
	CCBYNCND30 = 75;

	@GenModel(documentation="Creative Commons Attribution Non Commercial No Derivatives 4.0 International")
	CCBYNCND40 = 76;

	@GenModel(documentation="Creative Commons Attribution Non Commercial Share Alike 1.0 Generic")
	CCBYNCSA10 = 77;

	@GenModel(documentation="Creative Commons Attribution Non Commercial Share Alike 2.0 Generic")
	CCBYNCSA20 = 78;

	@GenModel(documentation="Creative Commons Attribution Non Commercial Share Alike 2.5 Generic")
	CCBYNCSA25 = 79;

	@GenModel(documentation="Creative Commons Attribution Non Commercial Share Alike 3.0 Unported")
	CCBYNCSA30 = 80;

	@GenModel(documentation="Creative Commons Attribution Non Commercial Share Alike 4.0 International")
	CCBYNCSA40 = 81;

	@GenModel(documentation="Creative Commons Attribution No Derivatives 1.0 Generic")
	CCBYND10 = 82;

	@GenModel(documentation="Creative Commons Attribution No Derivatives 2.0 Generic")
	CCBYND20 = 83;

	@GenModel(documentation="Creative Commons Attribution No Derivatives 2.5 Generic")
	CCBYND25 = 84;

	@GenModel(documentation="Creative Commons Attribution No Derivatives 3.0 Unported")
	CCBYND30 = 85;

	@GenModel(documentation="Creative Commons Attribution No Derivatives 4.0 International")
	CCBYND40 = 86;

	@GenModel(documentation="Creative Commons Attribution Share Alike 1.0 Generic")
	CCBYSA10 = 87;

	@GenModel(documentation="Creative Commons Attribution Share Alike 2.0 Generic")
	CCBYSA20 = 88;

	@GenModel(documentation="Creative Commons Attribution Share Alike 2.5 Generic")
	CCBYSA25 = 89;

	@GenModel(documentation="Creative Commons Attribution Share Alike 3.0 Unported")
	CCBYSA30 = 90;

	@GenModel(documentation="Creative Commons Attribution Share Alike 4.0 International")
	CCBYSA40 = 91;

	@GenModel(documentation="Creative Commons Zero v1.0 Universal")
	CC010 = 92;

	@GenModel(documentation="Common Development and Distribution License 1.0")
	CDDL10 = 93;

	@GenModel(documentation="Common Development and Distribution License 1.1")
	CDDL11 = 94;

	@GenModel(documentation="Community Data License Agreement Permissive 1.0")
	CDLAPermissive10 = 95;

	@GenModel(documentation="Community Data License Agreement Sharing 1.0")
	CDLASharing10 = 96;

	@GenModel(documentation="CeCILL Free Software License Agreement v1.0")
	CECILL10 = 97;

	@GenModel(documentation="CeCILL Free Software License Agreement v1.1")
	CECILL11 = 98;

	@GenModel(documentation="CeCILL Free Software License Agreement v2.0")
	CECILL20 = 99;

	@GenModel(documentation="CeCILL Free Software License Agreement v2.1")
	CECILL21 = 100;

	@GenModel(documentation="CeCILL-B Free Software License Agreement")
	CECILLB = 101;

	@GenModel(documentation="CeCILL-C Free Software License Agreement")
	CECILLC = 102;

	@GenModel(documentation="Clarified Artistic License")
	ClArtistic = 103;

	@GenModel(documentation="CNRI Jython License")
	CNRIJython = 104;

	@GenModel(documentation="CNRI Python Open Source GPL Compatible License Agreement")
	CNRIPythonGPLCompatible = 105;

	@GenModel(documentation="CNRI Python License")
	CNRIPython = 106;

	@GenModel(documentation="Condor Public License v1.1")
	Condor11 = 107;

	@GenModel(documentation="Common Public Attribution License 1.0")
	CPAL10 = 108;

	@GenModel(documentation="Common Public License 1.0")
	CPL10 = 109;

	@GenModel(documentation="Code Project Open License 1.02")
	CPOL102 = 110;

	@GenModel(documentation="Crossword License")
	Crossword = 111;

	@GenModel(documentation="CrystalStacker License")
	CrystalStacker = 112;

	@GenModel(documentation="CUA Office Public License v1.0")
	CUAOPL10 = 113;

	@GenModel(documentation="Cube License")
	Cube = 114;

	@GenModel(documentation="curl License")
	curl = 115;

	@GenModel(documentation="Deutsche Freie Software Lizenz")
	DFSL10 = 116;

	@GenModel(documentation="diffmark license")
	diffmark = 117;

	@GenModel(documentation="DOC License")
	DOC = 118;

	@GenModel(documentation="Dotseqn License")
	Dotseqn = 119;

	@GenModel(documentation="DSDP License")
	DSDP = 120;

	@GenModel(documentation="dvipdfm License")
	dvipdfm = 121;

	@GenModel(documentation="Educational Community License v1.0")
	ECL10 = 122;

	@GenModel(documentation="Educational Community License v2.0")
	ECL20 = 123;

	@GenModel(documentation="Eiffel Forum License v1.0")
	EFL10 = 124;

	@GenModel(documentation="Eiffel Forum License v2.0")
	EFL20 = 125;

	@GenModel(documentation="eGenix.com Public License 1.1.0")
	eGenix = 126;

	@GenModel(documentation="Entessa Public License v1.0")
	Entessa = 127;

	@GenModel(documentation="Eclipse Public License 1.0")
	EPL10 = 128;

	@GenModel(documentation="Eclipse Public License 2.0")
	EPL20 = 129;

	@GenModel(documentation="Erlang Public License v1.1")
	ErlPL11 = 130;

	@GenModel(documentation="EU DataGrid Software License")
	EUDatagrid = 131;

	@GenModel(documentation="European Union Public License 1.0")
	EUPL10 = 132;

	@GenModel(documentation="European Union Public License 1.1")
	EUPL11 = 133;

	@GenModel(documentation="European Union Public License 1.2")
	EUPL12 = 134;

	@GenModel(documentation="Eurosym License")
	Eurosym = 135;

	@GenModel(documentation="Fair License")
	Fair = 136;

	@GenModel(documentation="Frameworx Open License 1.0")
	Frameworx10 = 137;

	@GenModel(documentation="FreeImage Public License v1.0")
	FreeImage = 138;

	@GenModel(documentation="FSF All Permissive License")
	FSFAP = 139;

	@GenModel(documentation="FSF Unlimited License")
	FSFUL = 140;

	@GenModel(documentation="FSF Unlimited License (with License Retention)")
	FSFULLR = 141;

	@GenModel(documentation="Freetype Project License")
	FTL = 142;

	@GenModel(documentation="GNU Free Documentation License v1.1 only")
	GFDL11Only = 143;

	@GenModel(documentation="GNU Free Documentation License v1.1 or later")
	GFDL11OrLater = 144;

	@GenModel(documentation="GNU Free Documentation License v1.2 only")
	GFDL12Only = 145;

	@GenModel(documentation="GNU Free Documentation License v1.2 or later")
	GFDL12OrLater = 146;

	@GenModel(documentation="GNU Free Documentation License v1.3 only")
	GFDL13Only = 147;

	@GenModel(documentation="GNU Free Documentation License v1.3 or later")
	GFDL13OrLater = 148;

	@GenModel(documentation="Giftware License")
	Giftware = 149;

	@GenModel(documentation="GL2PS License")
	GL2PS = 150;

	@GenModel(documentation="3dfx Glide License")
	Glide = 151;

	@GenModel(documentation="Glulxe License")
	Glulxe = 152;

	@GenModel(documentation="gnuplot License")
	gnuplot = 153;

	@GenModel(documentation="GNU General Public License v1.0 only")
	GPL10Only = 154;

	@GenModel(documentation="GNU General Public License v1.0 or later")
	GPL10OrLater = 155;

	@GenModel(documentation="GNU General Public License v2.0 only")
	GPL20Only = 156;

	@GenModel(documentation="GNU General Public License v2.0 or later")
	GPL20OrLater = 157;

	@GenModel(documentation="GNU General Public License v3.0 only")
	GPL30Only = 158;

	@GenModel(documentation="GNU General Public License v3.0 or later")
	GPL30OrLater = 159;

	@GenModel(documentation="gSOAP Public License v1.3b")
	gSOAP13b = 160;

	@GenModel(documentation="Haskell Language Report License")
	HaskellReport = 161;

	@GenModel(documentation="Historical Permission Notice and Disclaimer")
	HPND = 162;

	@GenModel(documentation="IBM PowerPC Initialization and Boot Software")
	IBMPibs = 163;

	@GenModel(documentation="ICU License")
	ICU = 164;

	@GenModel(documentation="Independent JPEG Group License")
	IJG = 165;

	@GenModel(documentation="ImageMagick License")
	ImageMagick = 166;

	@GenModel(documentation="iMatix Standard Function Library Agreement")
	iMatix = 167;

	@GenModel(documentation="Imlib2 License")
	Imlib2 = 168;

	@GenModel(documentation="Info-ZIP License")
	InfoZIP = 169;

	@GenModel(documentation="Intel ACPI Software License Agreement")
	IntelACPI = 170;

	@GenModel(documentation="Intel Open Source License")
	Intel = 171;

	@GenModel(documentation="Interbase Public License v1.0")
	Interbase10 = 172;

	@GenModel(documentation="IPA Font License")
	IPA = 173;

	@GenModel(documentation="IBM Public License v1.0")
	IPL10 = 174;

	@GenModel(documentation="ISC License")
	ISC = 175;

	@GenModel(documentation="JasPer License")
	JasPer20 = 176;

	@GenModel(documentation="JSON License")
	JSON = 177;

	@GenModel(documentation="Licence Art Libre 1.2")
	LAL12 = 178;

	@GenModel(documentation="Licence Art Libre 1.3")
	LAL13 = 179;

	@GenModel(documentation="Latex2e License")
	Latex2e = 180;

	@GenModel(documentation="Leptonica License")
	Leptonica = 181;

	@GenModel(documentation="GNU Library General Public License v2 only")
	LGPL20Only = 182;

	@GenModel(documentation="GNU Library General Public License v2 or later")
	LGPL20OrLater = 183;

	@GenModel(documentation="GNU Lesser General Public License v2.1 only")
	LGPL21Only = 184;

	@GenModel(documentation="GNU Lesser General Public License v2.1 or later")
	LGPL21OrLater = 185;

	@GenModel(documentation="GNU Lesser General Public License v3.0 only")
	LGPL30Only = 186;

	@GenModel(documentation="GNU Lesser General Public License v3.0 or later")
	LGPL30OrLater = 187;

	@GenModel(documentation="Lesser General Public License For Linguistic Resources")
	LGPLLR = 188;

	@GenModel(documentation="libpng License")
	Libpng = 189;

	@GenModel(documentation="libtiff License")
	libtiff = 190;

	@GenModel(documentation="Licence Libre du Québec – Permissive version 1.1")
	LiLiQP11 = 191;

	@GenModel(documentation="Licence Libre du Québec – Réciprocité version 1.1")
	LiLiQR11 = 192;

	@GenModel(documentation="Licence Libre du Québec – Réciprocité forte version 1.1")
	LiLiQRplus11 = 193;

	@GenModel(documentation="Linux Kernel Variant of OpenIB.org license")
	LinuxOpenIB = 194;

	@GenModel(documentation="Lucent Public License Version 1.0")
	LPL10 = 195;

	@GenModel(documentation="Lucent Public License v1.02")
	LPL102 = 196;

	@GenModel(documentation="LaTeX Project Public License v1.0")
	LPPL10 = 197;

	@GenModel(documentation="LaTeX Project Public License v1.1")
	LPPL11 = 198;

	@GenModel(documentation="LaTeX Project Public License v1.2")
	LPPL12 = 199;

	@GenModel(documentation="LaTeX Project Public License v1.3a")
	LPPL13a = 200;

	@GenModel(documentation="LaTeX Project Public License v1.3c")
	LPPL13c = 201;

	@GenModel(documentation="MakeIndex License")
	MakeIndex = 202;

	@GenModel(documentation="MirOS License")
	MirOS = 203;

	@GenModel(documentation="MIT No Attribution")
	MIT0 = 204;

	@GenModel(documentation="Enlightenment License (e16)")
	MITAdvertising = 205;

	@GenModel(documentation="CMU License")
	MITCMU = 206;

	@GenModel(documentation="enna License")
	MITEnna = 207;

	@GenModel(documentation="feh License")
	MITFeh = 208;

	@GenModel(documentation="MIT License")
	MIT = 209;

	@GenModel(documentation="MIT +no-false-attribs license")
	MITNFA = 210;

	@GenModel(documentation="Motosoto License")
	Motosoto = 211;

	@GenModel(documentation="mpich2 License")
	mpich2 = 212;

	@GenModel(documentation="Mozilla Public License 1.0")
	MPL10 = 213;

	@GenModel(documentation="Mozilla Public License 1.1")
	MPL11 = 214;

	@GenModel(documentation="Mozilla Public License 2.0 (no copyleft exception)")
	MPL20NoCopyleftException = 215;

	@GenModel(documentation="Mozilla Public License 2.0")
	MPL20 = 216;

	@GenModel(documentation="Microsoft Public License")
	MSPL = 217;

	@GenModel(documentation="Microsoft Reciprocal License")
	MSRL = 218;

	@GenModel(documentation="Matrix Template Library License")
	MTLL = 219;

	@GenModel(documentation="Multics License")
	Multics = 220;

	@GenModel(documentation="Mup License")
	Mup = 221;

	@GenModel(documentation="NASA Open Source Agreement 1.3")
	NASA13 = 222;

	@GenModel(documentation="Naumen Public License")
	Naumen = 223;

	@GenModel(documentation="Net Boolean Public License v1")
	NBPL10 = 224;

	@GenModel(documentation="University of Illinois/NCSA Open Source License")
	NCSA = 225;

	@GenModel(documentation="Net-SNMP License")
	NetSNMP = 226;

	@GenModel(documentation="NetCDF license")
	NetCDF = 227;

	@GenModel(documentation="Newsletr License")
	Newsletr = 228;

	@GenModel(documentation="Nethack General Public License")
	NGPL = 229;

	@GenModel(documentation="Norwegian Licence for Open Government Data")
	NLOD10 = 230;

	@GenModel(documentation="No Limit Public License")
	NLPL = 231;

	@GenModel(documentation="Nokia Open Source License")
	Nokia = 232;

	@GenModel(documentation="Netizen Open Source License")
	NOSL = 233;

	@GenModel(documentation="Noweb License")
	Noweb = 234;

	@GenModel(documentation="Netscape Public License v1.0")
	NPL10 = 235;

	@GenModel(documentation="Netscape Public License v1.1")
	NPL11 = 236;

	@GenModel(documentation="Non-Profit Open Software License 3.0")
	NPOSL30 = 237;

	@GenModel(documentation="NRL License")
	NRL = 238;

	@GenModel(documentation="NTP License")
	NTP = 239;

	@GenModel(documentation="Open CASCADE Technology Public License")
	OCCTPL = 240;

	@GenModel(documentation="OCLC Research Public License 2.0")
	OCLC20 = 241;

	@GenModel(documentation="ODC Open Database License v1.0")
	ODbL10 = 242;

	@GenModel(documentation="SIL Open Font License 1.0")
	OFL10 = 243;

	@GenModel(documentation="SIL Open Font License 1.1")
	OFL11 = 244;

	@GenModel(documentation="Open Group Test Suite License")
	OGTSL = 245;

	@GenModel(documentation="Open LDAP Public License v1.1")
	OLDAP11 = 246;

	@GenModel(documentation="Open LDAP Public License v1.2")
	OLDAP12 = 247;

	@GenModel(documentation="Open LDAP Public License v1.3")
	OLDAP13 = 248;

	@GenModel(documentation="Open LDAP Public License v1.4")
	OLDAP14 = 249;

	@GenModel(documentation="Open LDAP Public License v2.0.1")
	OLDAP201 = 250;

	@GenModel(documentation="Open LDAP Public License v2.0 (or possibly 2.0A and 2.0B)")
	OLDAP20 = 251;

	@GenModel(documentation="Open LDAP Public License v2.1")
	OLDAP21 = 252;

	@GenModel(documentation="Open LDAP Public License v2.2.1")
	OLDAP221 = 253;

	@GenModel(documentation="Open LDAP Public License 2.2.2")
	OLDAP222 = 254;

	@GenModel(documentation="Open LDAP Public License v2.2")
	OLDAP22 = 255;

	@GenModel(documentation="Open LDAP Public License v2.3")
	OLDAP23 = 256;

	@GenModel(documentation="Open LDAP Public License v2.4")
	OLDAP24 = 257;

	@GenModel(documentation="Open LDAP Public License v2.5")
	OLDAP25 = 258;

	@GenModel(documentation="Open LDAP Public License v2.6")
	OLDAP26 = 259;

	@GenModel(documentation="Open LDAP Public License v2.7")
	OLDAP27 = 260;

	@GenModel(documentation="Open LDAP Public License v2.8")
	OLDAP28 = 261;

	@GenModel(documentation="Open Market License")
	OML = 262;

	@GenModel(documentation="OpenSSL License")
	OpenSSL = 263;

	@GenModel(documentation="Open Public License v1.0")
	OPL10 = 264;

	@GenModel(documentation="OSET Public License version 2.1")
	OSETPL21 = 265;

	@GenModel(documentation="Open Software License 1.0")
	OSL10 = 266;

	@GenModel(documentation="Open Software License 1.1")
	OSL11 = 267;

	@GenModel(documentation="Open Software License 2.0")
	OSL20 = 268;

	@GenModel(documentation="Open Software License 2.1")
	OSL21 = 269;

	@GenModel(documentation="Open Software License 3.0")
	OSL30 = 270;

	@GenModel(documentation="ODC Public Domain Dedication & License 1.0")
	PDDL10 = 271;

	@GenModel(documentation="PHP License v3.0")
	PHP30 = 272;

	@GenModel(documentation="PHP License v3.01")
	PHP301 = 273;

	@GenModel(documentation="Plexus Classworlds License")
	Plexus = 274;

	@GenModel(documentation="PostgreSQL License")
	PostgreSQL = 275;

	@GenModel(documentation="psfrag License")
	psfrag = 276;

	@GenModel(documentation="psutils License")
	psutils = 277;

	@GenModel(documentation="Python License 2.0")
	Python20 = 278;

	@GenModel(documentation="Qhull License")
	Qhull = 279;

	@GenModel(documentation="Q Public License 1.0")
	QPL10 = 280;

	@GenModel(documentation="Rdisc License")
	Rdisc = 281;

	@GenModel(documentation="Red Hat eCos Public License v1.1")
	RHeCos11 = 282;

	@GenModel(documentation="Reciprocal Public License 1.1")
	RPL11 = 283;

	@GenModel(documentation="Reciprocal Public License 1.5")
	RPL15 = 284;

	@GenModel(documentation="RealNetworks Public Source License v1.0")
	RPSL10 = 285;

	@GenModel(documentation="RSA Message-Digest License")
	RSAMD = 286;

	@GenModel(documentation="Ricoh Source Code Public License")
	RSCPL = 287;

	@GenModel(documentation="Ruby License")
	Ruby = 288;

	@GenModel(documentation="Sax Public Domain Notice")
	SAXPD = 289;

	@GenModel(documentation="Saxpath License")
	Saxpath = 290;

	@GenModel(documentation="SCEA Shared Source License")
	SCEA = 291;

	@GenModel(documentation="Sendmail License")
	Sendmail = 292;

	@GenModel(documentation="SGI Free Software License B v1.0")
	SGIB10 = 293;

	@GenModel(documentation="SGI Free Software License B v1.1")
	SGIB11 = 294;

	@GenModel(documentation="SGI Free Software License B v2.0")
	SGIB20 = 295;

	@GenModel(documentation="Simple Public License 2.0")
	SimPL20 = 296;

	@GenModel(documentation="Sun Industry Standards Source License v1.2")
	SISSL12 = 297;

	@GenModel(documentation="Sun Industry Standards Source License v1.1")
	SISSL = 298;

	@GenModel(documentation="Sleepycat License")
	Sleepycat = 299;

	@GenModel(documentation="Standard ML of New Jersey License")
	SMLNJ = 300;

	@GenModel(documentation="Secure Messaging Protocol Public License")
	SMPPL = 301;

	@GenModel(documentation="SNIA Public License 1.1")
	SNIA = 302;

	@GenModel(documentation="Spencer License 86")
	Spencer86 = 303;

	@GenModel(documentation="Spencer License 94")
	Spencer94 = 304;

	@GenModel(documentation="Spencer License 99")
	Spencer99 = 305;

	@GenModel(documentation="Sun Public License v1.0")
	SPL10 = 306;

	@GenModel(documentation="SugarCRM Public License v1.1.3")
	SugarCRM113 = 307;

	@GenModel(documentation="Scheme Widget Library (SWL) Software License Agreement")
	SWL = 308;

	@GenModel(documentation="TCL/TK License")
	TCL = 309;

	@GenModel(documentation="TCP Wrappers License")
	TCPWrappers = 310;

	@GenModel(documentation="TMate Open Source License")
	TMate = 311;

	@GenModel(documentation="TORQUE v2.5+ Software License v1.1")
	TORQUE11 = 312;

	@GenModel(documentation="Trusster Open Source License")
	TOSL = 313;

	@GenModel(documentation="Unicode License Agreement - Data Files and Software (2015)")
	UnicodeDFS2015 = 314;

	@GenModel(documentation="Unicode License Agreement - Data Files and Software (2016)")
	UnicodeDFS2016 = 315;

	@GenModel(documentation="Unicode Terms of Use")
	UnicodeTOU = 316;

	@GenModel(documentation="The Unlicense")
	Unlicense = 317;

	@GenModel(documentation="Universal Permissive License v1.0")
	UPL10 = 318;

	@GenModel(documentation="Vim License")
	Vim = 319;

	@GenModel(documentation="VOSTROM Public License for Open Source")
	VOSTROM = 320;

	@GenModel(documentation="Vovida Software License v1.0")
	VSL10 = 321;

	@GenModel(documentation="W3C Software Notice and License (1998-07-20)")
	W3C19980720 = 322;

	@GenModel(documentation="W3C Software Notice and Document License (2015-05-13)")
	W3C20150513 = 323;

	@GenModel(documentation="W3C Software Notice and License (2002-12-31)")
	W3C = 324;

	@GenModel(documentation="Sybase Open Watcom Public License 1.0")
	Watcom10 = 325;

	@GenModel(documentation="Wsuipa License")
	Wsuipa = 326;

	@GenModel(documentation="Do What The F*ck You Want To Public License")
	WTFPL = 327;

	@GenModel(documentation="X11 License")
	X11 = 328;

	@GenModel(documentation="Xerox License")
	Xerox = 329;

	@GenModel(documentation="XFree86 License 1.1")
	XFree8611 = 330;

	@GenModel(documentation="xinetd License")
	xinetd = 331;

	@GenModel(documentation="X.Net License")
	Xnet = 332;

	@GenModel(documentation="XPP License")
	xpp = 333;

	@GenModel(documentation="XSkat License")
	XSkat = 334;

	@GenModel(documentation="Yahoo! Public License v1.0")
	YPL10 = 335;

	@GenModel(documentation="Yahoo! Public License v1.1")
	YPL11 = 336;

	@GenModel(documentation="Zed License")
	Zed = 337;

	@GenModel(documentation="Zend License v2.0")
	Zend20 = 338;

	@GenModel(documentation="Zimbra Public License v1.3")
	Zimbra13 = 339;

	@GenModel(documentation="Zimbra Public License v1.4")
	Zimbra14 = 340;

	@GenModel(documentation="zlib/libpng License with Acknowledgement")
	zlibAcknowledgement = 341;

	@GenModel(documentation="zlib License")
	Zlib = 342;

	@GenModel(documentation="Zope Public License 1.1")
	ZPL11 = 343;

	@GenModel(documentation="Zope Public License 2.0")
	ZPL20 = 344;

	@GenModel(documentation="Zope Public License 2.1")
	ZPL21 = 345;
}

@ExtendedMetaData(name="SPDXLicenseEnum:Object", baseType="SPDXLicenseEnum")
datatype SPDXLicenseEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A sample to be used for analysis.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Specimen", kind="elementOnly")
class Specimen extends DomainResource {

	@GenModel(documentation="Id for specimen.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The identifier assigned by the lab when accessioning specimen(s). This is not necessarily the same as the specimen identifier, depending on local lab procedures.")
	@ExtendedMetaData(kind="element", name="accessionIdentifier", namespace="##targetNamespace")
	!resolve val Identifier accessionIdentifier;

	@GenModel(documentation="The availability of the specimen.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val SpecimenStatus status;

	@GenModel(documentation="The kind of material that forms the specimen.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="Where the specimen came from. This may be from patient(s), from a location (e.g., the source of an environmental sample), or a sampling of a substance, a biologically-derived product, or a device.")
	@ExtendedMetaData(kind="element", name="subject", namespace="##targetNamespace")
	!resolve val Reference subject;

	@GenModel(documentation="Time when specimen is received by the testing laboratory for processing or testing.")
	@ExtendedMetaData(kind="element", name="receivedTime", namespace="##targetNamespace")
	!resolve val DateTime receivedTime;

	@GenModel(documentation="Reference to the parent (source) specimen which is used when the specimen was either derived from or a component of another specimen.")
	@ExtendedMetaData(kind="element", name="parent", namespace="##targetNamespace")
	!resolve val Reference[*] parent;

	@GenModel(documentation="Details concerning a service request that required a specimen to be collected.")
	@ExtendedMetaData(kind="element", name="request", namespace="##targetNamespace")
	!resolve val Reference[*] request;

	@GenModel(documentation="This element signifies if the specimen is part of a group or pooled.")
	@ExtendedMetaData(kind="element", name="combined", namespace="##targetNamespace")
	!resolve val SpecimenCombined combined;

	@GenModel(documentation="The role or reason for the specimen in the testing workflow.")
	@ExtendedMetaData(kind="element", name="role", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] role;

	@GenModel(documentation="A physical feature or landmark on a specimen, highlighted for context by the collector of the specimen (e.g. surgeon), that identifies the type of feature as well as its meaning (e.g. the red ink indicating the resection margin of the right lobe of the excised prostate tissue or wire loop at radiologically suspected tumor location).")
	@ExtendedMetaData(kind="element", name="feature", namespace="##targetNamespace")
	!resolve val SpecimenFeature[*] feature;

	@GenModel(documentation="Details concerning the specimen collection.")
	@ExtendedMetaData(kind="element", name="collection", namespace="##targetNamespace")
	!resolve val SpecimenCollection collection;

	@GenModel(documentation="Details concerning processing and processing steps for the specimen.")
	@ExtendedMetaData(kind="element", name="processing", namespace="##targetNamespace")
	!resolve val SpecimenProcessing[*] processing;

	@GenModel(documentation="The container holding the specimen.  The recursive nature of containers; i.e. blood in tube in tray in rack is not addressed here.")
	@ExtendedMetaData(kind="element", name="container", namespace="##targetNamespace")
	!resolve val SpecimenContainer[*] container;

	@GenModel(documentation="A mode or state of being that describes the nature of the specimen.")
	@ExtendedMetaData(kind="element", name="condition", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] condition;

	@GenModel(documentation="To communicate any details or issues about the specimen or during the specimen collection. (for example: broken vial, sent with patient, frozen).")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;
}

@GenModel(documentation="A sample to be used for analysis.")
@ExtendedMetaData(name="Specimen.Collection", kind="elementOnly")
class SpecimenCollection extends BackboneElement {

	@GenModel(documentation="Person who collected the specimen.")
	@ExtendedMetaData(kind="element", name="collector", namespace="##targetNamespace")
	!resolve val Reference collector;

	@ExtendedMetaData(kind="element", name="collectedDateTime", namespace="##targetNamespace")
	!resolve val DateTime collectedDateTime;

	@ExtendedMetaData(kind="element", name="collectedPeriod", namespace="##targetNamespace")
	!resolve val Period collectedPeriod;

	@GenModel(documentation="The span of time over which the collection of a specimen occurred.")
	@ExtendedMetaData(kind="element", name="duration", namespace="##targetNamespace")
	!resolve val Duration duration;

	@GenModel(documentation="The quantity of specimen collected; for instance the volume of a blood sample, or the physical measurement of an anatomic pathology sample.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Quantity quantity;

	@GenModel(documentation="A coded value specifying the technique that is used to perform the procedure.")
	@ExtendedMetaData(kind="element", name="method", namespace="##targetNamespace")
	!resolve val CodeableConcept method;

	@GenModel(documentation="A coded value specifying the technique that is used to perform the procedure.")
	@ExtendedMetaData(kind="element", name="device", namespace="##targetNamespace")
	!resolve val CodeableReference device;

	@GenModel(documentation="The procedure event during which the specimen was collected (e.g. the surgery leading to the collection of a pathology sample).")
	@ExtendedMetaData(kind="element", name="procedure", namespace="##targetNamespace")
	!resolve val Reference procedure;

	@GenModel(documentation="Anatomical location from which the specimen was collected (if subject is a patient). This is the target site.  This element is not used for environmental specimens.")
	@ExtendedMetaData(kind="element", name="bodySite", namespace="##targetNamespace")
	!resolve val CodeableReference bodySite;

	@ExtendedMetaData(kind="element", name="fastingStatusCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept fastingStatusCodeableConcept;

	@ExtendedMetaData(kind="element", name="fastingStatusDuration", namespace="##targetNamespace")
	!resolve val Duration fastingStatusDuration;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="SpecimenCombined", kind="elementOnly")
class SpecimenCombined extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr SpecimenCombinedEnum value;
}

@ExtendedMetaData(name="SpecimenCombinedEnum")
enum SpecimenCombinedEnum {

	@GenModel(documentation="Grouped")
	grouped = 0;

	@GenModel(documentation="Pooled")
	pooled = 1;
}

@ExtendedMetaData(name="SpecimenCombinedEnum:Object", baseType="SpecimenCombinedEnum")
datatype SpecimenCombinedEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="SpecimenContainedPreference", kind="elementOnly")
class SpecimenContainedPreference extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr SpecimenContainedPreferenceEnum value;
}

@ExtendedMetaData(name="SpecimenContainedPreferenceEnum")
enum SpecimenContainedPreferenceEnum {

	@GenModel(documentation="Preferred")
	preferred = 0;

	@GenModel(documentation="Alternate")
	alternate = 1;
}

@ExtendedMetaData(name="SpecimenContainedPreferenceEnum:Object", baseType="SpecimenContainedPreferenceEnum")
datatype SpecimenContainedPreferenceEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A sample to be used for analysis.")
@ExtendedMetaData(name="Specimen.Container", kind="elementOnly")
class SpecimenContainer extends BackboneElement {

	@GenModel(documentation="The device resource for the the container holding the specimen. If the container is in a holder then the referenced device will point to a parent device.")
	@ExtendedMetaData(kind="element", name="device", namespace="##targetNamespace")
	!resolve val Reference[1] device;

	@GenModel(documentation="The location of the container holding the specimen.")
	@ExtendedMetaData(kind="element", name="location", namespace="##targetNamespace")
	!resolve val Reference location;

	@GenModel(documentation="The quantity of specimen in the container; may be volume, dimensions, or other appropriate measurements, depending on the specimen type.")
	@ExtendedMetaData(kind="element", name="specimenQuantity", namespace="##targetNamespace")
	!resolve val Quantity specimenQuantity;
}

@GenModel(documentation="A kind of specimen with associated set of requirements.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="SpecimenDefinition", kind="elementOnly")
class SpecimenDefinition extends MetadataResource {

	@GenModel(documentation="An absolute URL that is used to identify this SpecimenDefinition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this SpecimenDefinition is (or will be) published. The URL SHOULD include the major version of the SpecimenDefinition. For more information see Technical and Business Versions.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri url;

	@GenModel(documentation="A business identifier assigned to this SpecimenDefinition.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier identifier;

	@GenModel(documentation="The identifier that is used to identify this version of the SpecimenDefinition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the SpecimenDefinition author and is not expected to be globally unique.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@ExtendedMetaData(kind="element", name="versionAlgorithmString", namespace="##targetNamespace")
	!resolve val String versionAlgorithmString;

	@ExtendedMetaData(kind="element", name="versionAlgorithmCoding", namespace="##targetNamespace")
	!resolve val Coding versionAlgorithmCoding;

	@GenModel(documentation="A natural language name identifying the {{title}}. This name should be usable as an identifier for the module by machine processing applications such as code generation.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="A short, descriptive, user-friendly title for the SpecimenDefinition.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="The canonical URL pointing to another FHIR-defined SpecimenDefinition that is adhered to in whole or in part by this definition.")
	@ExtendedMetaData(kind="element", name="derivedFromCanonical", namespace="##targetNamespace")
	!resolve val Canonical[*] derivedFromCanonical;

	@GenModel(documentation="The URL pointing to an externally-defined type of specimen, guideline or other definition that is adhered to in whole or in part by this definition.")
	@ExtendedMetaData(kind="element", name="derivedFromUri", namespace="##targetNamespace")
	!resolve val Uri[*] derivedFromUri;

	@GenModel(documentation="The current state of theSpecimenDefinition.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="A flag to indicate that this SpecimenDefinition is not authored for  genuine usage.")
	@ExtendedMetaData(kind="element", name="experimental", namespace="##targetNamespace")
	!resolve val Boolean experimental;

	@ExtendedMetaData(kind="element", name="subjectCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept subjectCodeableConcept;

	@ExtendedMetaData(kind="element", name="subjectReference", namespace="##targetNamespace")
	!resolve val Reference subjectReference;

	@GenModel(documentation="For draft definitions, indicates the date of initial creation. For active definitions, represents the date of activation. For withdrawn definitions, indicates the date of withdrawal.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="Helps establish the \"authority/credibility\" of the SpecimenDefinition. May also allow for contact.")
	@ExtendedMetaData(kind="element", name="publisher", namespace="##targetNamespace")
	!resolve val String publisher;

	@GenModel(documentation="Contact details to assist a user in finding and communicating with the publisher.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactDetail[*] contact;

	@GenModel(documentation="A free text natural language description of the SpecimenDefinition from the consumer's perspective.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of specimen definitions.")
	@ExtendedMetaData(kind="element", name="useContext", namespace="##targetNamespace")
	!resolve val UsageContext[*] useContext;

	@GenModel(documentation="A jurisdiction in which the SpecimenDefinition is intended to be used.")
	@ExtendedMetaData(kind="element", name="jurisdiction", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] jurisdiction;

	@GenModel(documentation="Explains why this SpecimeDefinition is needed and why it has been designed as it has.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val Markdown purpose;

	@GenModel(documentation="Copyright statement relating to the SpecimenDefinition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the SpecimenDefinition.")
	@ExtendedMetaData(kind="element", name="copyright", namespace="##targetNamespace")
	!resolve val Markdown copyright;

	@GenModel(documentation="A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').")
	@ExtendedMetaData(kind="element", name="copyrightLabel", namespace="##targetNamespace")
	!resolve val String copyrightLabel;

	@GenModel(documentation="The date on which the asset content was approved by the publisher. Approval happens once when the content is officially approved for usage.")
	@ExtendedMetaData(kind="element", name="approvalDate", namespace="##targetNamespace")
	!resolve val Date approvalDate;

	@GenModel(documentation="The date on which the asset content was last reviewed. Review happens periodically after that, but doesn't change the original approval date.")
	@ExtendedMetaData(kind="element", name="lastReviewDate", namespace="##targetNamespace")
	!resolve val Date lastReviewDate;

	@GenModel(documentation="The period during which the SpecimenDefinition content was or is planned to be effective.")
	@ExtendedMetaData(kind="element", name="effectivePeriod", namespace="##targetNamespace")
	!resolve val Period effectivePeriod;

	@GenModel(documentation="The kind of material to be collected.")
	@ExtendedMetaData(kind="element", name="typeCollected", namespace="##targetNamespace")
	!resolve val CodeableConcept typeCollected;

	@GenModel(documentation="Preparation of the patient for specimen collection.")
	@ExtendedMetaData(kind="element", name="patientPreparation", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] patientPreparation;

	@GenModel(documentation="Time aspect of specimen collection (duration or offset).")
	@ExtendedMetaData(kind="element", name="timeAspect", namespace="##targetNamespace")
	!resolve val String timeAspect;

	@GenModel(documentation="The action to be performed for collecting the specimen.")
	@ExtendedMetaData(kind="element", name="collection", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] collection;

	@GenModel(documentation="Specimen conditioned in a container as expected by the testing laboratory.")
	@ExtendedMetaData(kind="element", name="typeTested", namespace="##targetNamespace")
	!resolve val SpecimenDefinitionTypeTested[*] typeTested;
}

@GenModel(documentation="A kind of specimen with associated set of requirements.")
@ExtendedMetaData(name="SpecimenDefinition.Additive", kind="elementOnly")
class SpecimenDefinitionAdditive extends BackboneElement {

	@ExtendedMetaData(kind="element", name="additiveCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept additiveCodeableConcept;

	@ExtendedMetaData(kind="element", name="additiveReference", namespace="##targetNamespace")
	!resolve val Reference additiveReference;
}

@GenModel(documentation="A kind of specimen with associated set of requirements.")
@ExtendedMetaData(name="SpecimenDefinition.Container", kind="elementOnly")
class SpecimenDefinitionContainer extends BackboneElement {

	@GenModel(documentation="The type of material of the container.")
	@ExtendedMetaData(kind="element", name="material", namespace="##targetNamespace")
	!resolve val CodeableConcept material;

	@GenModel(documentation="The type of container used to contain this kind of specimen.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="Color of container cap.")
	@ExtendedMetaData(kind="element", name="cap", namespace="##targetNamespace")
	!resolve val CodeableConcept cap;

	@GenModel(documentation="The textual description of the kind of container.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The capacity (volume or other measure) of this kind of container.")
	@ExtendedMetaData(kind="element", name="capacity", namespace="##targetNamespace")
	!resolve val Quantity capacity;

	@ExtendedMetaData(kind="element", name="minimumVolumeQuantity", namespace="##targetNamespace")
	!resolve val Quantity minimumVolumeQuantity;

	@ExtendedMetaData(kind="element", name="minimumVolumeString", namespace="##targetNamespace")
	!resolve val String minimumVolumeString;

	@GenModel(documentation="Substance introduced in the kind of container to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.")
	@ExtendedMetaData(kind="element", name="additive", namespace="##targetNamespace")
	!resolve val SpecimenDefinitionAdditive[*] additive;

	@GenModel(documentation="Special processing that should be applied to the container for this kind of specimen.")
	@ExtendedMetaData(kind="element", name="preparation", namespace="##targetNamespace")
	!resolve val Markdown preparation;
}

@GenModel(documentation="A kind of specimen with associated set of requirements.")
@ExtendedMetaData(name="SpecimenDefinition.Handling", kind="elementOnly")
class SpecimenDefinitionHandling extends BackboneElement {

	@GenModel(documentation="It qualifies the interval of temperature, which characterizes an occurrence of handling. Conditions that are not related to temperature may be handled in the instruction element.")
	@ExtendedMetaData(kind="element", name="temperatureQualifier", namespace="##targetNamespace")
	!resolve val CodeableConcept temperatureQualifier;

	@GenModel(documentation="The temperature interval for this set of handling instructions.")
	@ExtendedMetaData(kind="element", name="temperatureRange", namespace="##targetNamespace")
	!resolve val Range temperatureRange;

	@GenModel(documentation="The maximum time interval of preservation of the specimen with these conditions.")
	@ExtendedMetaData(kind="element", name="maxDuration", namespace="##targetNamespace")
	!resolve val Duration maxDuration;

	@GenModel(documentation="Additional textual instructions for the preservation or transport of the specimen. For instance, 'Protect from light exposure'.")
	@ExtendedMetaData(kind="element", name="instruction", namespace="##targetNamespace")
	!resolve val Markdown instruction;
}

@GenModel(documentation="A kind of specimen with associated set of requirements.")
@ExtendedMetaData(name="SpecimenDefinition.TypeTested", kind="elementOnly")
class SpecimenDefinitionTypeTested extends BackboneElement {

	@GenModel(documentation="Primary of secondary specimen.")
	@ExtendedMetaData(kind="element", name="isDerived", namespace="##targetNamespace")
	!resolve val Boolean isDerived;

	@GenModel(documentation="The kind of specimen conditioned for testing expected by lab.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="The preference for this type of conditioned specimen.")
	@ExtendedMetaData(kind="element", name="preference", namespace="##targetNamespace")
	!resolve val SpecimenContainedPreference[1] preference;

	@GenModel(documentation="The specimen's container.")
	@ExtendedMetaData(kind="element", name="container", namespace="##targetNamespace")
	!resolve val SpecimenDefinitionContainer container;

	@GenModel(documentation="Requirements for delivery and special handling of this kind of conditioned specimen.")
	@ExtendedMetaData(kind="element", name="requirement", namespace="##targetNamespace")
	!resolve val Markdown requirement;

	@GenModel(documentation="The usual time that a specimen of this kind is retained after the ordered tests are completed, for the purpose of additional testing.")
	@ExtendedMetaData(kind="element", name="retentionTime", namespace="##targetNamespace")
	!resolve val Duration retentionTime;

	@GenModel(documentation="Specimen can be used by only one test or panel if the value is \"true\".")
	@ExtendedMetaData(kind="element", name="singleUse", namespace="##targetNamespace")
	!resolve val Boolean singleUse;

	@GenModel(documentation="Criterion for rejection of the specimen in its container by the laboratory.")
	@ExtendedMetaData(kind="element", name="rejectionCriterion", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] rejectionCriterion;

	@GenModel(documentation="Set of instructions for preservation/transport of the specimen at a defined temperature interval, prior the testing process.")
	@ExtendedMetaData(kind="element", name="handling", namespace="##targetNamespace")
	!resolve val SpecimenDefinitionHandling[*] handling;

	@GenModel(documentation="Where the specimen will be tested: e.g., lab, sector, device or any combination of these.")
	@ExtendedMetaData(kind="element", name="testingDestination", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] testingDestination;
}

@GenModel(documentation="A sample to be used for analysis.")
@ExtendedMetaData(name="Specimen.Feature", kind="elementOnly")
class SpecimenFeature extends BackboneElement {

	@GenModel(documentation="The landmark or feature being highlighted.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@GenModel(documentation="Description of the feature of the specimen.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val String[1] description;
}

@GenModel(documentation="A sample to be used for analysis.")
@ExtendedMetaData(name="Specimen.Processing", kind="elementOnly")
class SpecimenProcessing extends BackboneElement {

	@GenModel(documentation="Textual description of procedure.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val String description;

	@GenModel(documentation="A coded value specifying the method used to process the specimen.")
	@ExtendedMetaData(kind="element", name="method", namespace="##targetNamespace")
	!resolve val CodeableConcept method;

	@GenModel(documentation="Material used in the processing step.")
	@ExtendedMetaData(kind="element", name="additive", namespace="##targetNamespace")
	!resolve val Reference[*] additive;

	@ExtendedMetaData(kind="element", name="timeDateTime", namespace="##targetNamespace")
	!resolve val DateTime timeDateTime;

	@ExtendedMetaData(kind="element", name="timePeriod", namespace="##targetNamespace")
	!resolve val Period timePeriod;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="SpecimenStatus", kind="elementOnly")
class SpecimenStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr SpecimenStatusEnum value;
}

@ExtendedMetaData(name="SpecimenStatusEnum")
enum SpecimenStatusEnum {

	@GenModel(documentation="Available")
	available = 0;

	@GenModel(documentation="Unavailable")
	unavailable = 1;

	@GenModel(documentation="Unsatisfactory")
	unsatisfactory = 2;

	@GenModel(documentation="Entered in Error")
	enteredInError = 3;
}

@ExtendedMetaData(name="SpecimenStatusEnum:Object", baseType="SpecimenStatusEnum")
datatype SpecimenStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="StrandType", kind="elementOnly")
class StrandType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr StrandTypeEnum value;
}

@ExtendedMetaData(name="StrandTypeEnum")
enum StrandTypeEnum {

	@GenModel(documentation="Watson strand of starting sequence")
	watson = 0;

	@GenModel(documentation="Crick strand of starting sequence")
	crick = 1;
}

@ExtendedMetaData(name="StrandTypeEnum:Object", baseType="StrandTypeEnum")
datatype StrandTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A sequence of Unicode characters
Note that FHIR strings SHALL NOT exceed 1,048,576 (1024*1024) characters in size
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="string", kind="elementOnly")
class String extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	attr StringPrimitive value;
}

@ExtendedMetaData(name="string-primitive", baseType="http://www.eclipse.org/emf/2003/XMLType#string", minLength="1")
datatype StringPrimitive : java.lang.String;

@GenModel(documentation="A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="StructureDefinition", kind="elementOnly")
class StructureDefinition extends CanonicalResource {

	@GenModel(documentation="An absolute URI that is used to identify this structure definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this structure definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the structure definition is stored on different servers.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri[1] url;

	@GenModel(documentation="A formal identifier that is used to identify this structure definition when it is represented in other formats, or referenced in a specification, model, design or an instance.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The identifier that is used to identify this version of the structure definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the structure definition author and is not expected to be globally unique. There is no expectation that versions can be placed in a lexicographical sequence, so authors are encouraged to populate the StructureDefinition.versionAlgorithm[x] element to enable comparisons. If there is no managed version available, authors can consider using ISO date/time syntax (e.g., '2023-01-01').")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@ExtendedMetaData(kind="element", name="versionAlgorithmString", namespace="##targetNamespace")
	!resolve val String versionAlgorithmString;

	@ExtendedMetaData(kind="element", name="versionAlgorithmCoding", namespace="##targetNamespace")
	!resolve val Coding versionAlgorithmCoding;

	@GenModel(documentation="A natural language name identifying the structure definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String[1] name;

	@GenModel(documentation="A short, descriptive, user-friendly title for the structure definition.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="The status of this structure definition. Enables tracking the life-cycle of the content.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="A Boolean value to indicate that this structure definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.")
	@ExtendedMetaData(kind="element", name="experimental", namespace="##targetNamespace")
	!resolve val Boolean experimental;

	@GenModel(documentation="The date  (and optionally time) when the structure definition was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the structure definition changes.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="The name of the organization or individual responsible for the release and ongoing maintenance of the structure definition.")
	@ExtendedMetaData(kind="element", name="publisher", namespace="##targetNamespace")
	!resolve val String publisher;

	@GenModel(documentation="Contact details to assist a user in finding and communicating with the publisher.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactDetail[*] contact;

	@GenModel(documentation="A free text natural language description of the structure definition from a consumer's perspective.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate structure definition instances.")
	@ExtendedMetaData(kind="element", name="useContext", namespace="##targetNamespace")
	!resolve val UsageContext[*] useContext;

	@GenModel(documentation="A legal or geographic region in which the structure definition is intended to be used.")
	@ExtendedMetaData(kind="element", name="jurisdiction", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] jurisdiction;

	@GenModel(documentation="Explanation of why this structure definition is needed and why it has been designed as it has.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val Markdown purpose;

	@GenModel(documentation="A copyright statement relating to the structure definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the structure definition.  The short copyright declaration (e.g. (c) '2015+ xyz organization' should be sent in the copyrightLabel element.")
	@ExtendedMetaData(kind="element", name="copyright", namespace="##targetNamespace")
	!resolve val Markdown copyright;

	@GenModel(documentation="A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').")
	@ExtendedMetaData(kind="element", name="copyrightLabel", namespace="##targetNamespace")
	!resolve val String copyrightLabel;

	@GenModel(documentation="(DEPRECATED) A set of key words or terms from external terminologies that may be used to assist with indexing and searching of templates nby describing the use of this structure definition, or the content it describes.")
	@ExtendedMetaData(kind="element", name="keyword", namespace="##targetNamespace")
	!resolve val Coding[*] keyword;

	@GenModel(documentation="The version of the FHIR specification on which this StructureDefinition is based - this is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 4.6.0. for this version.")
	@ExtendedMetaData(kind="element", name="fhirVersion", namespace="##targetNamespace")
	!resolve val FHIRVersion fhirVersion;

	@GenModel(documentation="An external specification that the content is mapped to.")
	@ExtendedMetaData(kind="element", name="mapping", namespace="##targetNamespace")
	!resolve val StructureDefinitionMapping[*] mapping;

	@GenModel(documentation="Defines the kind of structure that this definition is describing.")
	@ExtendedMetaData(kind="element", name="kind", namespace="##targetNamespace")
	!resolve val StructureDefinitionKind[1] kind;

	@GenModel(documentation="Whether structure this definition describes is abstract or not  - that is, whether the structure is not intended to be instantiated. For Resources and Data types, abstract types will never be exchanged  between systems.")
	@ExtendedMetaData(kind="element", name="abstract", namespace="##targetNamespace")
	!resolve val Boolean[1] ~abstract;

	@GenModel(documentation="Identifies the types of resource or data type elements to which the extension can be applied. For more guidance on using the 'context' element, see the [defining extensions page](defining-extensions.html#context).")
	@ExtendedMetaData(kind="element", name="context", namespace="##targetNamespace")
	!resolve val StructureDefinitionContext[*] context;

	@GenModel(documentation="A set of rules as FHIRPath Invariants about when the extension can be used (e.g. co-occurrence variants for the extension). All the rules must be true.")
	@ExtendedMetaData(kind="element", name="contextInvariant", namespace="##targetNamespace")
	!resolve val String[*] contextInvariant;

	@GenModel(documentation="The type this structure describes. If the derivation kind is 'specialization' then this is the master definition for a type, and there is always one of these (a data type, an extension, a resource, including abstract ones). Otherwise the structure definition is a constraint on the stated type (and in this case, the type cannot be an abstract type).  References are URLs that are relative to http://hl7.org/fhir/StructureDefinition e.g. \"string\" is a reference to http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed in logical models, where they are required.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val Uri[1] type;

	@GenModel(documentation="An absolute URI that is the base structure from which this type is derived, either by specialization or constraint.")
	@ExtendedMetaData(kind="element", name="baseDefinition", namespace="##targetNamespace")
	!resolve val Canonical baseDefinition;

	@GenModel(documentation="How the type relates to the baseDefinition.")
	@ExtendedMetaData(kind="element", name="derivation", namespace="##targetNamespace")
	!resolve val TypeDerivationRule derivation;

	@GenModel(documentation="A snapshot view is expressed in a standalone form that can be used and interpreted without considering the base StructureDefinition.")
	@ExtendedMetaData(kind="element", name="snapshot", namespace="##targetNamespace")
	!resolve val StructureDefinitionSnapshot snapshot;

	@GenModel(documentation="A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.")
	@ExtendedMetaData(kind="element", name="differential", namespace="##targetNamespace")
	!resolve val StructureDefinitionDifferential differential;
}

@GenModel(documentation="A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.")
@ExtendedMetaData(name="StructureDefinition.Context", kind="elementOnly")
class StructureDefinitionContext extends BackboneElement {

	@GenModel(documentation="Defines how to interpret the expression that defines what the context of the extension is.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val ExtensionContextType[1] type;

	@GenModel(documentation="An expression that defines where an extension can be used in resources.")
	@ExtendedMetaData(kind="element", name="expression", namespace="##targetNamespace")
	!resolve val String[1] expression;
}

@GenModel(documentation="A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.")
@ExtendedMetaData(name="StructureDefinition.Differential", kind="elementOnly")
class StructureDefinitionDifferential extends BackboneElement {

	@GenModel(documentation="Captures constraints on each element within the resource.")
	@ExtendedMetaData(kind="element", name="element", namespace="##targetNamespace")
	!resolve val ElementDefinition[+] element;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="StructureDefinitionKind", kind="elementOnly")
class StructureDefinitionKind extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr StructureDefinitionKindEnum value;
}

@ExtendedMetaData(name="StructureDefinitionKindEnum")
enum StructureDefinitionKindEnum {

	@GenModel(documentation="Primitive Data Type")
	primitiveType = 0;

	@GenModel(documentation="Complex Data Type")
	complexType = 1;

	@GenModel(documentation="Resource")
	resource = 2;

	@GenModel(documentation="Logical")
	logical = 3;
}

@ExtendedMetaData(name="StructureDefinitionKindEnum:Object", baseType="StructureDefinitionKindEnum")
datatype StructureDefinitionKindEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.")
@ExtendedMetaData(name="StructureDefinition.Mapping", kind="elementOnly")
class StructureDefinitionMapping extends BackboneElement {

	@GenModel(documentation="An Internal id that is used to identify this mapping set when specific mappings are made.")
	@ExtendedMetaData(kind="element", name="identity", namespace="##targetNamespace")
	!resolve val Id[1] identity;

	@GenModel(documentation="An absolute URI that identifies the specification that this mapping is expressed to.")
	@ExtendedMetaData(kind="element", name="uri", namespace="##targetNamespace")
	!resolve val Uri uri;

	@GenModel(documentation="A name for the specification that is being mapped to.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="Comments about this mapping, including version notes, issues, scope limitations, and other important notes for usage.")
	@ExtendedMetaData(kind="element", name="comment", namespace="##targetNamespace")
	!resolve val String comment;
}

@GenModel(documentation="A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.")
@ExtendedMetaData(name="StructureDefinition.Snapshot", kind="elementOnly")
class StructureDefinitionSnapshot extends BackboneElement {

	@GenModel(documentation="Captures constraints on each element within the resource.")
	@ExtendedMetaData(kind="element", name="element", namespace="##targetNamespace")
	!resolve val ElementDefinition[+] element;
}

@GenModel(documentation="A Map of relationships between 2 structures that can be used to transform data.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="StructureMap", kind="elementOnly")
class StructureMap extends CanonicalResource {

	@GenModel(documentation="An absolute URI that is used to identify this structure map when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this structure map is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the structure map is stored on different servers.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri[1] url;

	@GenModel(documentation="A formal identifier that is used to identify this structure map when it is represented in other formats, or referenced in a specification, model, design or an instance.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The identifier that is used to identify this version of the structure map when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the structure map author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@ExtendedMetaData(kind="element", name="versionAlgorithmString", namespace="##targetNamespace")
	!resolve val String versionAlgorithmString;

	@ExtendedMetaData(kind="element", name="versionAlgorithmCoding", namespace="##targetNamespace")
	!resolve val Coding versionAlgorithmCoding;

	@GenModel(documentation="A natural language name identifying the structure map. This name should be usable as an identifier for the module by machine processing applications such as code generation.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String[1] name;

	@GenModel(documentation="A short, descriptive, user-friendly title for the structure map.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="The status of this structure map. Enables tracking the life-cycle of the content.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="A Boolean value to indicate that this structure map is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.")
	@ExtendedMetaData(kind="element", name="experimental", namespace="##targetNamespace")
	!resolve val Boolean experimental;

	@GenModel(documentation="The date  (and optionally time) when the structure map was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the structure map changes.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="The name of the organization or individual responsible for the release and ongoing maintenance of the structure map.")
	@ExtendedMetaData(kind="element", name="publisher", namespace="##targetNamespace")
	!resolve val String publisher;

	@GenModel(documentation="Contact details to assist a user in finding and communicating with the publisher.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactDetail[*] contact;

	@GenModel(documentation="A free text natural language description of the structure map from a consumer's perspective.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate structure map instances.")
	@ExtendedMetaData(kind="element", name="useContext", namespace="##targetNamespace")
	!resolve val UsageContext[*] useContext;

	@GenModel(documentation="A legal or geographic region in which the structure map is intended to be used.")
	@ExtendedMetaData(kind="element", name="jurisdiction", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] jurisdiction;

	@GenModel(documentation="Explanation of why this structure map is needed and why it has been designed as it has.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val Markdown purpose;

	@GenModel(documentation="A copyright statement relating to the structure map and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the structure map.")
	@ExtendedMetaData(kind="element", name="copyright", namespace="##targetNamespace")
	!resolve val Markdown copyright;

	@GenModel(documentation="A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').")
	@ExtendedMetaData(kind="element", name="copyrightLabel", namespace="##targetNamespace")
	!resolve val String copyrightLabel;

	@GenModel(documentation="A structure definition used by this map. The structure definition may describe instances that are converted, or the instances that are produced.")
	@ExtendedMetaData(kind="element", name="structure", namespace="##targetNamespace")
	!resolve val StructureMapStructure[*] structure;

	@GenModel(documentation="Other maps used by this map (canonical URLs).")
	@ExtendedMetaData(kind="element", name="import", namespace="##targetNamespace")
	!resolve val Canonical[*] ~import;

	@GenModel(documentation="Definition of a constant value used in the map rules.")
	@ExtendedMetaData(kind="element", name="const", namespace="##targetNamespace")
	!resolve val StructureMapConst[*] const;

	@GenModel(documentation="Organizes the mapping into managable chunks for human review/ease of maintenance.")
	@ExtendedMetaData(kind="element", name="group", namespace="##targetNamespace")
	!resolve val StructureMapGroup[+] group;
}

@GenModel(documentation="A Map of relationships between 2 structures that can be used to transform data.")
@ExtendedMetaData(name="StructureMap.Const", kind="elementOnly")
class StructureMapConst extends BackboneElement {

	@GenModel(documentation="Other maps used by this map (canonical URLs).")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val Id name;

	@GenModel(documentation="A FHIRPath expression that is the value of this variable.")
	@ExtendedMetaData(kind="element", name="value", namespace="##targetNamespace")
	!resolve val String value;
}

@GenModel(documentation="A Map of relationships between 2 structures that can be used to transform data.")
@ExtendedMetaData(name="StructureMap.Dependent", kind="elementOnly")
class StructureMapDependent extends BackboneElement {

	@GenModel(documentation="Name of a rule or group to apply.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val Id[1] name;

	@GenModel(documentation="Parameter to pass to the rule or group.")
	@ExtendedMetaData(kind="element", name="parameter", namespace="##targetNamespace")
	!resolve val StructureMapParameter[+] parameter;
}

@GenModel(documentation="A Map of relationships between 2 structures that can be used to transform data.")
@ExtendedMetaData(name="StructureMap.Group", kind="elementOnly")
class StructureMapGroup extends BackboneElement {

	@GenModel(documentation="A unique name for the group for the convenience of human readers.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val Id[1] name;

	@GenModel(documentation="Another group that this group adds rules to.")
	@ExtendedMetaData(kind="element", name="extends", namespace="##targetNamespace")
	!resolve val Id ~extends;

	@GenModel(documentation="If this is the default rule set to apply for the source type or this combination of types.")
	@ExtendedMetaData(kind="element", name="typeMode", namespace="##targetNamespace")
	!resolve val StructureMapGroupTypeMode typeMode;

	@GenModel(documentation="Additional supporting documentation that explains the purpose of the group and the types of mappings within it.")
	@ExtendedMetaData(kind="element", name="documentation", namespace="##targetNamespace")
	!resolve val String documentation;

	@GenModel(documentation="A name assigned to an instance of data. The instance must be provided when the mapping is invoked.")
	@ExtendedMetaData(kind="element", name="input", namespace="##targetNamespace")
	!resolve val StructureMapInput[+] input;

	@GenModel(documentation="Transform Rule from source to target.")
	@ExtendedMetaData(kind="element", name="rule", namespace="##targetNamespace")
	!resolve val StructureMapRule[*] rule;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="StructureMapGroupTypeMode", kind="elementOnly")
class StructureMapGroupTypeMode extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr StructureMapGroupTypeModeEnum value;
}

@ExtendedMetaData(name="StructureMapGroupTypeModeEnum")
enum StructureMapGroupTypeModeEnum {

	@GenModel(documentation="Default for Type Combination")
	types = 0;

	@GenModel(documentation="Default for type + combination")
	typeAndTypes = 1;
}

@ExtendedMetaData(name="StructureMapGroupTypeModeEnum:Object", baseType="StructureMapGroupTypeModeEnum")
datatype StructureMapGroupTypeModeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A Map of relationships between 2 structures that can be used to transform data.")
@ExtendedMetaData(name="StructureMap.Input", kind="elementOnly")
class StructureMapInput extends BackboneElement {

	@GenModel(documentation="Name for this instance of data.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val Id[1] name;

	@GenModel(documentation="Type for this instance of data.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val String type;

	@GenModel(documentation="Mode for this instance of data.")
	@ExtendedMetaData(kind="element", name="mode", namespace="##targetNamespace")
	!resolve val StructureMapInputMode[1] mode;

	@GenModel(documentation="Documentation for this instance of data.")
	@ExtendedMetaData(kind="element", name="documentation", namespace="##targetNamespace")
	!resolve val String documentation;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="StructureMapInputMode", kind="elementOnly")
class StructureMapInputMode extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr StructureMapInputModeEnum value;
}

@ExtendedMetaData(name="StructureMapInputModeEnum")
enum StructureMapInputModeEnum {

	@GenModel(documentation="Source Instance")
	source = 0;

	@GenModel(documentation="Target Instance")
	target = 1;
}

@ExtendedMetaData(name="StructureMapInputModeEnum:Object", baseType="StructureMapInputModeEnum")
datatype StructureMapInputModeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="StructureMapModelMode", kind="elementOnly")
class StructureMapModelMode extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr StructureMapModelModeEnum value;
}

@ExtendedMetaData(name="StructureMapModelModeEnum")
enum StructureMapModelModeEnum {

	@GenModel(documentation="Source Structure Definition")
	source = 0;

	@GenModel(documentation="Queried Structure Definition")
	queried = 1;

	@GenModel(documentation="Target Structure Definition")
	target = 2;

	@GenModel(documentation="Produced Structure Definition")
	produced = 3;
}

@ExtendedMetaData(name="StructureMapModelModeEnum:Object", baseType="StructureMapModelModeEnum")
datatype StructureMapModelModeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A Map of relationships between 2 structures that can be used to transform data.")
@ExtendedMetaData(name="StructureMap.Parameter", kind="elementOnly")
class StructureMapParameter extends BackboneElement {

	@ExtendedMetaData(kind="element", name="valueId", namespace="##targetNamespace")
	!resolve val Id valueId;

	@ExtendedMetaData(kind="element", name="valueString", namespace="##targetNamespace")
	!resolve val String valueString;

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;

	@ExtendedMetaData(kind="element", name="valueInteger", namespace="##targetNamespace")
	!resolve val Integer valueInteger;

	@ExtendedMetaData(kind="element", name="valueDecimal", namespace="##targetNamespace")
	!resolve val Decimal valueDecimal;

	@ExtendedMetaData(kind="element", name="valueDate", namespace="##targetNamespace")
	!resolve val Date valueDate;

	@ExtendedMetaData(kind="element", name="valueTime", namespace="##targetNamespace")
	!resolve val Time valueTime;

	@ExtendedMetaData(kind="element", name="valueDateTime", namespace="##targetNamespace")
	!resolve val DateTime valueDateTime;
}

@GenModel(documentation="A Map of relationships between 2 structures that can be used to transform data.")
@ExtendedMetaData(name="StructureMap.Rule", kind="elementOnly")
class StructureMapRule extends BackboneElement {

	@GenModel(documentation="Name of the rule for internal references.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val Id name;

	@GenModel(documentation="Source inputs to the mapping.")
	@ExtendedMetaData(kind="element", name="source", namespace="##targetNamespace")
	!resolve val StructureMapSource[+] source;

	@GenModel(documentation="Content to create because of this mapping rule.")
	@ExtendedMetaData(kind="element", name="target", namespace="##targetNamespace")
	!resolve val StructureMapTarget[*] target;

	@GenModel(documentation="Rules contained in this rule.")
	@ExtendedMetaData(kind="element", name="rule", namespace="##targetNamespace")
	!resolve val StructureMapRule[*] rule;

	@GenModel(documentation="Which other rules to apply in the context of this rule.")
	@ExtendedMetaData(kind="element", name="dependent", namespace="##targetNamespace")
	!resolve val StructureMapDependent[*] dependent;

	@GenModel(documentation="Documentation for this instance of data.")
	@ExtendedMetaData(kind="element", name="documentation", namespace="##targetNamespace")
	!resolve val String documentation;
}

@GenModel(documentation="A Map of relationships between 2 structures that can be used to transform data.")
@ExtendedMetaData(name="StructureMap.Source", kind="elementOnly")
class StructureMapSource extends BackboneElement {

	@GenModel(documentation="Type or variable this rule applies to.")
	@ExtendedMetaData(kind="element", name="context", namespace="##targetNamespace")
	!resolve val Id[1] context;

	@GenModel(documentation="Specified minimum cardinality for the element. This is optional; if present, it acts an implicit check on the input content.")
	@ExtendedMetaData(kind="element", name="min", namespace="##targetNamespace")
	!resolve val Integer min;

	@GenModel(documentation="Specified maximum cardinality for the element - a number or a \"*\". This is optional; if present, it acts an implicit check on the input content (* just serves as documentation; it's the default value).")
	@ExtendedMetaData(kind="element", name="max", namespace="##targetNamespace")
	!resolve val String max;

	@GenModel(documentation="Specified type for the element. This works as a condition on the mapping - use for polymorphic elements.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val String type;

	@GenModel(documentation="A value to use if there is no existing value in the source object.")
	@ExtendedMetaData(kind="element", name="defaultValue", namespace="##targetNamespace")
	!resolve val String defaultValue;

	@GenModel(documentation="Optional field for this source.")
	@ExtendedMetaData(kind="element", name="element", namespace="##targetNamespace")
	!resolve val String element;

	@GenModel(documentation="How to handle the list mode for this element.")
	@ExtendedMetaData(kind="element", name="listMode", namespace="##targetNamespace")
	!resolve val StructureMapSourceListMode listMode;

	@GenModel(documentation="Named context for field, if a field is specified.")
	@ExtendedMetaData(kind="element", name="variable", namespace="##targetNamespace")
	!resolve val Id variable;

	@GenModel(documentation="FHIRPath expression  - must be true or the rule does not apply.")
	@ExtendedMetaData(kind="element", name="condition", namespace="##targetNamespace")
	!resolve val String condition;

	@GenModel(documentation="FHIRPath expression  - must be true or the mapping engine throws an error instead of completing.")
	@ExtendedMetaData(kind="element", name="check", namespace="##targetNamespace")
	!resolve val String check;

	@GenModel(documentation="A FHIRPath expression which specifies a message to put in the transform log when content matching the source rule is found.")
	@ExtendedMetaData(kind="element", name="logMessage", namespace="##targetNamespace")
	!resolve val String logMessage;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="StructureMapSourceListMode", kind="elementOnly")
class StructureMapSourceListMode extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr StructureMapSourceListModeEnum value;
}

@ExtendedMetaData(name="StructureMapSourceListModeEnum")
enum StructureMapSourceListModeEnum {

	@GenModel(documentation="First")
	first = 0;

	@GenModel(documentation="All but the first")
	notFirst = 1;

	@GenModel(documentation="Last")
	last = 2;

	@GenModel(documentation="All but the last")
	notLast = 3;

	@GenModel(documentation="Enforce only one")
	onlyOne = 4;
}

@ExtendedMetaData(name="StructureMapSourceListModeEnum:Object", baseType="StructureMapSourceListModeEnum")
datatype StructureMapSourceListModeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A Map of relationships between 2 structures that can be used to transform data.")
@ExtendedMetaData(name="StructureMap.Structure", kind="elementOnly")
class StructureMapStructure extends BackboneElement {

	@GenModel(documentation="The canonical reference to the structure.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Canonical[1] url;

	@GenModel(documentation="How the referenced structure is used in this mapping.")
	@ExtendedMetaData(kind="element", name="mode", namespace="##targetNamespace")
	!resolve val StructureMapModelMode[1] mode;

	@GenModel(documentation="The name used for this type in the map.")
	@ExtendedMetaData(kind="element", name="alias", namespace="##targetNamespace")
	!resolve val String alias;

	@GenModel(documentation="Documentation that describes how the structure is used in the mapping.")
	@ExtendedMetaData(kind="element", name="documentation", namespace="##targetNamespace")
	!resolve val String documentation;
}

@GenModel(documentation="A Map of relationships between 2 structures that can be used to transform data.")
@ExtendedMetaData(name="StructureMap.Target", kind="elementOnly")
class StructureMapTarget extends BackboneElement {

	@GenModel(documentation="Variable this rule applies to.")
	@ExtendedMetaData(kind="element", name="context", namespace="##targetNamespace")
	!resolve val String context;

	@GenModel(documentation="Field to create in the context.")
	@ExtendedMetaData(kind="element", name="element", namespace="##targetNamespace")
	!resolve val String element;

	@GenModel(documentation="Named context for field, if desired, and a field is specified.")
	@ExtendedMetaData(kind="element", name="variable", namespace="##targetNamespace")
	!resolve val Id variable;

	@GenModel(documentation="If field is a list, how to manage the list.")
	@ExtendedMetaData(kind="element", name="listMode", namespace="##targetNamespace")
	!resolve val StructureMapTargetListMode[*] listMode;

	@GenModel(documentation="Internal rule reference for shared list items.")
	@ExtendedMetaData(kind="element", name="listRuleId", namespace="##targetNamespace")
	!resolve val Id listRuleId;

	@GenModel(documentation="How the data is copied / created.")
	@ExtendedMetaData(kind="element", name="transform", namespace="##targetNamespace")
	!resolve val StructureMapTransform transform;

	@GenModel(documentation="Parameters to the transform.")
	@ExtendedMetaData(kind="element", name="parameter", namespace="##targetNamespace")
	!resolve val StructureMapParameter[*] parameter;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="StructureMapTargetListMode", kind="elementOnly")
class StructureMapTargetListMode extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr StructureMapTargetListModeEnum value;
}

@ExtendedMetaData(name="StructureMapTargetListModeEnum")
enum StructureMapTargetListModeEnum {

	@GenModel(documentation="First")
	first = 0;

	@GenModel(documentation="Share")
	share = 1;

	@GenModel(documentation="Last")
	last = 2;

	@GenModel(documentation="single")
	single = 3;
}

@ExtendedMetaData(name="StructureMapTargetListModeEnum:Object", baseType="StructureMapTargetListModeEnum")
datatype StructureMapTargetListModeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="StructureMapTransform", kind="elementOnly")
class StructureMapTransform extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr StructureMapTransformEnum value;
}

@ExtendedMetaData(name="StructureMapTransformEnum")
enum StructureMapTransformEnum {

	@GenModel(documentation="create")
	create = 0;

	@GenModel(documentation="copy")
	copy = 1;

	@GenModel(documentation="truncate")
	truncate = 2;

	@GenModel(documentation="escape")
	escape = 3;

	@GenModel(documentation="cast")
	cast = 4;

	@GenModel(documentation="append")
	append = 5;

	@GenModel(documentation="translate")
	translate = 6;

	@GenModel(documentation="reference")
	reference = 7;

	@GenModel(documentation="dateOp")
	dateOp = 8;

	@GenModel(documentation="uuid")
	uuid = 9;

	@GenModel(documentation="pointer")
	pointer = 10;

	@GenModel(documentation="evaluate")
	evaluate = 11;

	@GenModel(documentation="cc")
	cc = 12;

	@GenModel(documentation="c")
	c = 13;

	@GenModel(documentation="qty")
	qty = 14;

	@GenModel(documentation="id")
	~id = 15;

	@GenModel(documentation="cp")
	cp = 16;
}

@ExtendedMetaData(name="StructureMapTransformEnum:Object", baseType="StructureMapTransformEnum")
datatype StructureMapTransformEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="SubmitDataUpdateType", kind="elementOnly")
class SubmitDataUpdateType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr SubmitDataUpdateTypeEnum value;
}

@ExtendedMetaData(name="SubmitDataUpdateTypeEnum")
enum SubmitDataUpdateTypeEnum {

	@GenModel(documentation="Incremental")
	incremental = 0;

	@GenModel(documentation="Snapshot")
	snapshot = 1;
}

@ExtendedMetaData(name="SubmitDataUpdateTypeEnum:Object", baseType="SubmitDataUpdateTypeEnum")
datatype SubmitDataUpdateTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="The subscription resource describes a particular client's request to be notified about a SubscriptionTopic.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Subscription", kind="elementOnly")
class Subscription extends DomainResource {

	@GenModel(documentation="A formal identifier that is used to identify this code system when it is represented in other formats, or referenced in a specification, model, design or an instance.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="A natural language name identifying the subscription.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="The status of the subscription, which marks the server state for managing the subscription.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val SubscriptionStatusCodes[1] status;

	@GenModel(documentation="The reference to the subscription topic to be notified about.")
	@ExtendedMetaData(kind="element", name="topic", namespace="##targetNamespace")
	!resolve val Canonical[1] topic;

	@GenModel(documentation="Contact details for a human to contact about the subscription. The primary use of this for system administrator troubleshooting.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactPoint[*] contact;

	@GenModel(documentation="The time for the server to turn the subscription off.")
	@ExtendedMetaData(kind="element", name="end", namespace="##targetNamespace")
	!resolve val Instant end;

	@GenModel(documentation="Entity with authorization to make subsequent revisions to the Subscription and also determines what data the subscription is authorized to disclose.")
	@ExtendedMetaData(kind="element", name="managingEntity", namespace="##targetNamespace")
	!resolve val Reference managingEntity;

	@GenModel(documentation="A description of why this subscription is defined.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val String reason;

	@GenModel(documentation="The filter properties to be applied to narrow the subscription topic stream.  When multiple filters are applied, evaluates to true if all the conditions applicable to that resource are met; otherwise it returns false (i.e., logical AND).")
	@ExtendedMetaData(kind="element", name="filterBy", namespace="##targetNamespace")
	!resolve val SubscriptionFilterBy[*] filterBy;

	@GenModel(documentation="The type of channel to send notifications on.")
	@ExtendedMetaData(kind="element", name="channelType", namespace="##targetNamespace")
	!resolve val Coding[1] channelType;

	@GenModel(documentation="The url that describes the actual end-point to send notifications to.")
	@ExtendedMetaData(kind="element", name="endpoint", namespace="##targetNamespace")
	!resolve val Url endpoint;

	@GenModel(documentation="Channel-dependent information to send as part of the notification (e.g., HTTP Headers).")
	@ExtendedMetaData(kind="element", name="parameter", namespace="##targetNamespace")
	!resolve val SubscriptionParameter[*] parameter;

	@GenModel(documentation="If present, a 'heartbeat' notification (keep-alive) is sent via this channel with an interval period equal to this elements integer value in seconds.  If not present, a heartbeat notification is not sent.")
	@ExtendedMetaData(kind="element", name="heartbeatPeriod", namespace="##targetNamespace")
	!resolve val UnsignedInt heartbeatPeriod;

	@GenModel(documentation="If present, the maximum amount of time a server will allow before failing a notification attempt.")
	@ExtendedMetaData(kind="element", name="timeout", namespace="##targetNamespace")
	!resolve val UnsignedInt timeout;

	@GenModel(documentation="The MIME type to send the payload in - e.g., `application/fhir+xml` or `application/fhir+json`. Note that:

* clients may request notifications in a specific FHIR version by using the [FHIR Version Parameter](http.html#version-parameter) - e.g., `application/fhir+json; fhirVersion=4.0`.

* additional MIME types can be allowed by channels - e.g., `text/plain` and `text/html` are defined by the Email channel.")
	@ExtendedMetaData(kind="element", name="contentType", namespace="##targetNamespace")
	!resolve val Code contentType;

	@GenModel(documentation="How much of the resource content to deliver in the notification payload. The choices are an empty payload, only the resource id, or the full resource content.")
	@ExtendedMetaData(kind="element", name="content", namespace="##targetNamespace")
	!resolve val SubscriptionPayloadContent content;

	@GenModel(documentation="If present, the maximum number of events that will be included in a notification bundle. Note that this is not a strict limit on the number of entries in a bundle, as dependent resources can be included.")
	@ExtendedMetaData(kind="element", name="maxCount", namespace="##targetNamespace")
	!resolve val PositiveInt maxCount;
}

@GenModel(documentation="The subscription resource describes a particular client's request to be notified about a SubscriptionTopic.")
@ExtendedMetaData(name="Subscription.FilterBy", kind="elementOnly")
class SubscriptionFilterBy extends BackboneElement {

	@GenModel(documentation="A resource listed in the `SubscriptionTopic` this `Subscription` references (`SubscriptionTopic.canFilterBy.resource`). This element can be used to differentiate filters for topics that include more than one resource type.")
	@ExtendedMetaData(kind="element", name="resourceType", namespace="##targetNamespace")
	!resolve val Uri resourceType;

	@GenModel(documentation="The filter as defined in the `SubscriptionTopic.canFilterBy.filterParameter` element.")
	@ExtendedMetaData(kind="element", name="filterParameter", namespace="##targetNamespace")
	!resolve val String[1] filterParameter;

	@GenModel(documentation="Comparator applied to this filter parameter.")
	@ExtendedMetaData(kind="element", name="comparator", namespace="##targetNamespace")
	!resolve val SearchComparator comparator;

	@GenModel(documentation="Modifier applied to this filter parameter.")
	@ExtendedMetaData(kind="element", name="modifier", namespace="##targetNamespace")
	!resolve val SearchModifierCode modifier;

	@GenModel(documentation="The literal value or resource path as is legal in search - for example, `Patient/123` or `le1950`.")
	@ExtendedMetaData(kind="element", name="value", namespace="##targetNamespace")
	!resolve val String[1] value;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="SubscriptionNotificationType", kind="elementOnly")
class SubscriptionNotificationType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr SubscriptionNotificationTypeEnum value;
}

@ExtendedMetaData(name="SubscriptionNotificationTypeEnum")
enum SubscriptionNotificationTypeEnum {

	@GenModel(documentation="Handshake")
	handshake = 0;

	@GenModel(documentation="Heartbeat")
	heartbeat = 1;

	@GenModel(documentation="Event Notification")
	eventNotification = 2;

	@GenModel(documentation="Query Status")
	queryStatus = 3;

	@GenModel(documentation="Query Event")
	queryEvent = 4;
}

@ExtendedMetaData(name="SubscriptionNotificationTypeEnum:Object", baseType="SubscriptionNotificationTypeEnum")
datatype SubscriptionNotificationTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="The subscription resource describes a particular client's request to be notified about a SubscriptionTopic.")
@ExtendedMetaData(name="Subscription.Parameter", kind="elementOnly")
class SubscriptionParameter extends BackboneElement {

	@GenModel(documentation="Parameter name for information passed to the channel for notifications, for example in the case of a REST hook wanting to pass through an authorization header, the name would be Authorization.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String[1] name;

	@GenModel(documentation="Parameter value for information passed to the channel for notifications, for example in the case of a REST hook wanting to pass through an authorization header, the value would be `Bearer 0193...`.")
	@ExtendedMetaData(kind="element", name="value", namespace="##targetNamespace")
	!resolve val String[1] value;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="SubscriptionPayloadContent", kind="elementOnly")
class SubscriptionPayloadContent extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr SubscriptionPayloadContentEnum value;
}

@ExtendedMetaData(name="SubscriptionPayloadContentEnum")
enum SubscriptionPayloadContentEnum {

	@GenModel(documentation="Empty")
	empty = 0;

	@GenModel(documentation="Id-only")
	idOnly = 1;

	@GenModel(documentation="Full-resource")
	fullResource = 2;
}

@ExtendedMetaData(name="SubscriptionPayloadContentEnum:Object", baseType="SubscriptionPayloadContentEnum")
datatype SubscriptionPayloadContentEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="The SubscriptionStatus resource describes the state of a Subscription during notifications.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="SubscriptionStatus", kind="elementOnly")
class SubscriptionStatus extends DomainResource {

	@GenModel(documentation="The status of the subscription, which marks the server state for managing the subscription.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val SubscriptionStatusCodes status;

	@GenModel(documentation="The type of event being conveyed with this notification.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val SubscriptionNotificationType[1] type;

	@GenModel(documentation="The total number of actual events which have been generated since the Subscription was created (inclusive of this notification) - regardless of how many have been successfully communicated.  This number is NOT incremented for handshake and heartbeat notifications.")
	@ExtendedMetaData(kind="element", name="eventsSinceSubscriptionStart", namespace="##targetNamespace")
	!resolve val Integer64 eventsSinceSubscriptionStart;

	@GenModel(documentation="Detailed information about events relevant to this subscription notification.")
	@ExtendedMetaData(kind="element", name="notificationEvent", namespace="##targetNamespace")
	!resolve val SubscriptionStatusNotificationEvent[*] notificationEvent;

	@GenModel(documentation="The reference to the Subscription which generated this notification.")
	@ExtendedMetaData(kind="element", name="subscription", namespace="##targetNamespace")
	!resolve val Reference[1] subscription;

	@GenModel(documentation="The reference to the SubscriptionTopic for the Subscription which generated this notification.")
	@ExtendedMetaData(kind="element", name="topic", namespace="##targetNamespace")
	!resolve val Canonical topic;

	@GenModel(documentation="A record of errors that occurred when the server processed a notification.")
	@ExtendedMetaData(kind="element", name="error", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] error;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="SubscriptionStatusCodes", kind="elementOnly")
class SubscriptionStatusCodes extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr SubscriptionStatusCodesEnum value;
}

@ExtendedMetaData(name="SubscriptionStatusCodesEnum")
enum SubscriptionStatusCodesEnum {

	@GenModel(documentation="Requested")
	requested = 0;

	@GenModel(documentation="Active")
	active = 1;

	@GenModel(documentation="Error")
	error = 2;

	@GenModel(documentation="Off")
	off = 3;

	@GenModel(documentation="Entered in Error")
	enteredInError = 4;
}

@ExtendedMetaData(name="SubscriptionStatusCodesEnum:Object", baseType="SubscriptionStatusCodesEnum")
datatype SubscriptionStatusCodesEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="The SubscriptionStatus resource describes the state of a Subscription during notifications.")
@ExtendedMetaData(name="SubscriptionStatus.NotificationEvent", kind="elementOnly")
class SubscriptionStatusNotificationEvent extends BackboneElement {

	@GenModel(documentation="Either the sequential number of this event in this subscription context or a relative event number for this notification.")
	@ExtendedMetaData(kind="element", name="eventNumber", namespace="##targetNamespace")
	!resolve val Integer64[1] eventNumber;

	@GenModel(documentation="The actual time this event occurred on the server.")
	@ExtendedMetaData(kind="element", name="timestamp", namespace="##targetNamespace")
	!resolve val Instant timestamp;

	@GenModel(documentation="The focus of this event. While this will usually be a reference to the focus resource of the event, it MAY contain a reference to a non-FHIR object.")
	@ExtendedMetaData(kind="element", name="focus", namespace="##targetNamespace")
	!resolve val Reference focus;

	@GenModel(documentation="Additional context information for this event. Generally, this will contain references to additional resources included with the event (e.g., the Patient relevant to an Encounter), however it MAY refer to non-FHIR objects.")
	@ExtendedMetaData(kind="element", name="additionalContext", namespace="##targetNamespace")
	!resolve val Reference[*] additionalContext;
}

@GenModel(documentation="Describes a stream of resource state changes or events and annotated with labels useful to filter projections from this topic.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="SubscriptionTopic", kind="elementOnly")
class SubscriptionTopic extends CanonicalResource {

	@GenModel(documentation="An absolute URI that is used to identify this subscription topic when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this subscription topic is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the subscription topic is stored on different servers.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri[1] url;

	@GenModel(documentation="Business identifiers assigned to this subscription topic by the performer and/or other systems.  These identifiers remain constant as the resource is updated and propagates from server to server.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The identifier that is used to identify this version of the subscription topic when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the Topic author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions are orderable.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@ExtendedMetaData(kind="element", name="versionAlgorithmString", namespace="##targetNamespace")
	!resolve val String versionAlgorithmString;

	@ExtendedMetaData(kind="element", name="versionAlgorithmCoding", namespace="##targetNamespace")
	!resolve val Coding versionAlgorithmCoding;

	@GenModel(documentation="A natural language name identifying the subscription topic This name should be usable as an identifier for the module by machine processing applications such as code generation.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="A short, descriptive, user-friendly title for the subscription topic.  For example, \"admission\".")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="The canonical URL pointing to another FHIR-defined SubscriptionTopic that is adhered to in whole or in part by this SubscriptionTopic.")
	@ExtendedMetaData(kind="element", name="derivedFrom", namespace="##targetNamespace")
	!resolve val Canonical[*] derivedFrom;

	@GenModel(documentation="The current state of the SubscriptionTopic.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="A flag to indicate that this TopSubscriptionTopicic is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.")
	@ExtendedMetaData(kind="element", name="experimental", namespace="##targetNamespace")
	!resolve val Boolean experimental;

	@GenModel(documentation="The date (and optionally time) when the subscription topic was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the subscription topic changes.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="Helps establish the \"authority/credibility\" of the SubscriptionTopic.  May also allow for contact.")
	@ExtendedMetaData(kind="element", name="publisher", namespace="##targetNamespace")
	!resolve val String publisher;

	@GenModel(documentation="Contact details to assist a user in finding and communicating with the publisher.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactDetail[*] contact;

	@GenModel(documentation="A free text natural language description of the Topic from the consumer's perspective.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of code system definitions.")
	@ExtendedMetaData(kind="element", name="useContext", namespace="##targetNamespace")
	!resolve val UsageContext[*] useContext;

	@GenModel(documentation="A jurisdiction in which the Topic is intended to be used.")
	@ExtendedMetaData(kind="element", name="jurisdiction", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] jurisdiction;

	@GenModel(documentation="Explains why this Topic is needed and why it has been designed as it has.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val Markdown purpose;

	@GenModel(documentation="A copyright statement relating to the SubscriptionTopic and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the SubscriptionTopic.")
	@ExtendedMetaData(kind="element", name="copyright", namespace="##targetNamespace")
	!resolve val Markdown copyright;

	@GenModel(documentation="A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').")
	@ExtendedMetaData(kind="element", name="copyrightLabel", namespace="##targetNamespace")
	!resolve val String copyrightLabel;

	@GenModel(documentation="The date on which the asset content was approved by the publisher. Approval happens once when the content is officially approved for usage.")
	@ExtendedMetaData(kind="element", name="approvalDate", namespace="##targetNamespace")
	!resolve val Date approvalDate;

	@GenModel(documentation="The date on which the asset content was last reviewed. Review happens periodically after that, but doesn't change the original approval date.")
	@ExtendedMetaData(kind="element", name="lastReviewDate", namespace="##targetNamespace")
	!resolve val Date lastReviewDate;

	@GenModel(documentation="The period during which the SubscriptionTopic content was or is planned to be effective.")
	@ExtendedMetaData(kind="element", name="effectivePeriod", namespace="##targetNamespace")
	!resolve val Period effectivePeriod;

	@GenModel(documentation="A definition of a resource-based event that triggers a notification based on the SubscriptionTopic. The criteria may be just a human readable description and/or a full FHIR search string or FHIRPath expression. Multiple triggers are considered OR joined (e.g., a resource update matching ANY of the definitions will trigger a notification).")
	@ExtendedMetaData(kind="element", name="resourceTrigger", namespace="##targetNamespace")
	!resolve val SubscriptionTopicResourceTrigger[*] resourceTrigger;

	@GenModel(documentation="Event definition which can be used to trigger the SubscriptionTopic.")
	@ExtendedMetaData(kind="element", name="eventTrigger", namespace="##targetNamespace")
	!resolve val SubscriptionTopicEventTrigger[*] eventTrigger;

	@GenModel(documentation="List of properties by which Subscriptions on the SubscriptionTopic can be filtered. May be defined Search Parameters (e.g., Encounter.patient) or parameters defined within this SubscriptionTopic context (e.g., hub.event).")
	@ExtendedMetaData(kind="element", name="canFilterBy", namespace="##targetNamespace")
	!resolve val SubscriptionTopicCanFilterBy[*] canFilterBy;

	@GenModel(documentation="List of properties to describe the shape (e.g., resources) included in notifications from this Subscription Topic.")
	@ExtendedMetaData(kind="element", name="notificationShape", namespace="##targetNamespace")
	!resolve val SubscriptionTopicNotificationShape[*] notificationShape;
}

@GenModel(documentation="Describes a stream of resource state changes or events and annotated with labels useful to filter projections from this topic.")
@ExtendedMetaData(name="SubscriptionTopic.CanFilterBy", kind="elementOnly")
class SubscriptionTopicCanFilterBy extends BackboneElement {

	@GenModel(documentation="Description of how this filtering parameter is intended to be used.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="URL of the Resource that is the type used in this filter. This is the \"focus\" of the topic (or one of them if there are more than one). It will be the same, a generality, or a specificity of SubscriptionTopic.resourceTrigger.resource or SubscriptionTopic.eventTrigger.resource when they are present.")
	@ExtendedMetaData(kind="element", name="resource", namespace="##targetNamespace")
	!resolve val Uri resource;

	@GenModel(documentation="Either the canonical URL to a search parameter (like \"http://hl7.org/fhir/SearchParameter/encounter-patient\") or topic-defined parameter (like \"hub.event\") which is a label for the filter.")
	@ExtendedMetaData(kind="element", name="filterParameter", namespace="##targetNamespace")
	!resolve val String[1] filterParameter;

	@GenModel(documentation="Either the canonical URL to a search parameter (like \"http://hl7.org/fhir/SearchParameter/encounter-patient\") or the officially-defined URI for a shared filter concept (like \"http://example.org/concepts/shared-common-event\").")
	@ExtendedMetaData(kind="element", name="filterDefinition", namespace="##targetNamespace")
	!resolve val Uri filterDefinition;

	@GenModel(documentation="Comparators allowed for the filter parameter.")
	@ExtendedMetaData(kind="element", name="comparator", namespace="##targetNamespace")
	!resolve val SearchComparator[*] comparator;

	@GenModel(documentation="Modifiers allowed for the filter parameter.")
	@ExtendedMetaData(kind="element", name="modifier", namespace="##targetNamespace")
	!resolve val SearchModifierCode[*] modifier;
}

@GenModel(documentation="Describes a stream of resource state changes or events and annotated with labels useful to filter projections from this topic.")
@ExtendedMetaData(name="SubscriptionTopic.EventTrigger", kind="elementOnly")
class SubscriptionTopicEventTrigger extends BackboneElement {

	@GenModel(documentation="The human readable description of an event to trigger a notification for the SubscriptionTopic - for example, \"Patient Admission, as defined in HL7v2 via message ADT^A01\". Multiple values are considered OR joined (e.g., matching any single event listed).")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="A well-defined event which can be used to trigger notifications from the SubscriptionTopic.")
	@ExtendedMetaData(kind="element", name="event", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] event;

	@GenModel(documentation="URL of the Resource that is the focus type used in this event trigger.  Relative URLs are relative to the StructureDefinition root of the implemented FHIR version (e.g., http://hl7.org/fhir/StructureDefinition). For example, \"Patient\" maps to http://hl7.org/fhir/StructureDefinition/Patient.  For more information, see <a href=\"elementdefinition-definitions.html#ElementDefinition.type.code\">ElementDefinition.type.code</a>.")
	@ExtendedMetaData(kind="element", name="resource", namespace="##targetNamespace")
	!resolve val Uri[1] resource;
}

@GenModel(documentation="Describes a stream of resource state changes or events and annotated with labels useful to filter projections from this topic.")
@ExtendedMetaData(name="SubscriptionTopic.NotificationShape", kind="elementOnly")
class SubscriptionTopicNotificationShape extends BackboneElement {

	@GenModel(documentation="URL of the Resource that is the type used in this shape. This is the 'focus' resource of the topic (or one of them if there are more than one) and the root resource for this shape definition. It will be the same, a generality, or a specificity of SubscriptionTopic.resourceTrigger.resource or SubscriptionTopic.eventTrigger.resource when they are present.")
	@ExtendedMetaData(kind="element", name="resource", namespace="##targetNamespace")
	!resolve val Uri[1] resource;

	@GenModel(documentation="Search-style _include directives, rooted in the resource for this shape. Servers SHOULD include resources listed here, if they exist and the user is authorized to receive them.  Clients SHOULD be prepared to receive these additional resources, but SHALL function properly without them.")
	@ExtendedMetaData(kind="element", name="include", namespace="##targetNamespace")
	!resolve val String[*] include;

	@GenModel(documentation="Search-style _revinclude directives, rooted in the resource for this shape. Servers SHOULD include resources listed here, if they exist and the user is authorized to receive them.  Clients SHOULD be prepared to receive these additional resources, but SHALL function properly without them.")
	@ExtendedMetaData(kind="element", name="revInclude", namespace="##targetNamespace")
	!resolve val String[*] revInclude;
}

@GenModel(documentation="Describes a stream of resource state changes or events and annotated with labels useful to filter projections from this topic.")
@ExtendedMetaData(name="SubscriptionTopic.QueryCriteria", kind="elementOnly")
class SubscriptionTopicQueryCriteria extends BackboneElement {

	@GenModel(documentation="The FHIR query based rules are applied to the previous resource state (e.g., state before an update).")
	@ExtendedMetaData(kind="element", name="previous", namespace="##targetNamespace")
	!resolve val String previous;

	@GenModel(documentation="For `create` interactions, should the `previous` criteria count as an automatic pass or an automatic fail. If not present, the testing behavior during `create` interactions is unspecified (server discretion).")
	@ExtendedMetaData(kind="element", name="resultForCreate", namespace="##targetNamespace")
	!resolve val CriteriaNotExistsBehavior resultForCreate;

	@GenModel(documentation="The FHIR query based rules are applied to the current resource state (e.g., state after an update).")
	@ExtendedMetaData(kind="element", name="current", namespace="##targetNamespace")
	!resolve val String current;

	@GenModel(documentation="For 'delete' interactions, should the 'current' query criteria count as an automatic pass or an automatic fail. If not present, the testing behavior during `delete` interactions is unspecified (server discretion).")
	@ExtendedMetaData(kind="element", name="resultForDelete", namespace="##targetNamespace")
	!resolve val CriteriaNotExistsBehavior resultForDelete;

	@GenModel(documentation="If set to `true`, both the `current` and `previous` query criteria must evaluate `true` to trigger a notification for this topic.  If set to `false` or not present, a notification for this topic will be triggered if either the `current` or `previous` tests evaluate to `true`.")
	@ExtendedMetaData(kind="element", name="requireBoth", namespace="##targetNamespace")
	!resolve val Boolean requireBoth;
}

@GenModel(documentation="Describes a stream of resource state changes or events and annotated with labels useful to filter projections from this topic.")
@ExtendedMetaData(name="SubscriptionTopic.ResourceTrigger", kind="elementOnly")
class SubscriptionTopicResourceTrigger extends BackboneElement {

	@GenModel(documentation="The human readable description of this resource trigger for the SubscriptionTopic -  for example, \"An Encounter enters the 'in-progress' state\".")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="URL of the Resource that is the type used in this resource trigger.  Relative URLs are relative to the StructureDefinition root of the implemented FHIR version (e.g., http://hl7.org/fhir/StructureDefinition). For example, \"Patient\" maps to http://hl7.org/fhir/StructureDefinition/Patient.  For more information, see <a href=\"elementdefinition-definitions.html#ElementDefinition.type.code\">ElementDefinition.type.code</a>.")
	@ExtendedMetaData(kind="element", name="resource", namespace="##targetNamespace")
	!resolve val Uri[1] resource;

	@GenModel(documentation="The FHIR RESTful interaction which can be used to trigger a notification for the SubscriptionTopic. Multiple values are considered OR joined (e.g., CREATE or UPDATE). If not present, all supported interactions are assumed.")
	@ExtendedMetaData(kind="element", name="supportedInteraction", namespace="##targetNamespace")
	!resolve val InteractionTrigger[*] supportedInteraction;

	@GenModel(documentation="The FHIR query based rules that the server should use to determine when to trigger a notification for this subscription topic.")
	@ExtendedMetaData(kind="element", name="queryCriteria", namespace="##targetNamespace")
	!resolve val SubscriptionTopicQueryCriteria queryCriteria;

	@GenModel(documentation="The FHIRPath based rules that the server should use to determine when to trigger a notification for this topic.")
	@ExtendedMetaData(kind="element", name="fhirPathCriteria", namespace="##targetNamespace")
	!resolve val String fhirPathCriteria;
}

@GenModel(documentation="A homogeneous material with a definite composition.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Substance", kind="elementOnly")
class Substance extends DomainResource {

	@GenModel(documentation="Unique identifier for the substance. For an instance, an identifier associated with the package/container (usually a label affixed directly).")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="A boolean to indicate if this an instance of a substance or a kind of one (a definition).")
	@ExtendedMetaData(kind="element", name="instance", namespace="##targetNamespace")
	!resolve val Boolean[1] instance;

	@GenModel(documentation="A code to indicate if the substance is actively used.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val FHIRSubstanceStatus status;

	@GenModel(documentation="A code that classifies the general type of substance.  This is used  for searching, sorting and display purposes.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] category;

	@GenModel(documentation="A code (or set of codes) that identify this substance.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableReference[1] code;

	@GenModel(documentation="A description of the substance - its appearance, handling requirements, and other usage notes.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="When the substance is no longer valid to use. For some substances, a single arbitrary date is used for expiry.")
	@ExtendedMetaData(kind="element", name="expiry", namespace="##targetNamespace")
	!resolve val DateTime expiry;

	@GenModel(documentation="The amount of the substance.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Quantity quantity;

	@GenModel(documentation="A substance can be composed of other substances.")
	@ExtendedMetaData(kind="element", name="ingredient", namespace="##targetNamespace")
	!resolve val SubstanceIngredient[*] ingredient;
}

@GenModel(documentation="The detailed description of a substance, typically at a level beyond what is used for prescribing.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="SubstanceDefinition", kind="elementOnly")
class SubstanceDefinition extends DomainResource {

	@GenModel(documentation="Identifier by which this substance is known.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="A business level version identifier of the substance.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@GenModel(documentation="Status of substance within the catalogue e.g. active, retired.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val CodeableConcept status;

	@GenModel(documentation="A high level categorization, e.g. polymer or nucleic acid, or food, chemical, biological, or a lower level such as the general types of polymer (linear or branch chain) or type of impurity (process related or contaminant).")
	@ExtendedMetaData(kind="element", name="classification", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] classification;

	@GenModel(documentation="If the substance applies to human or veterinary use.")
	@ExtendedMetaData(kind="element", name="domain", namespace="##targetNamespace")
	!resolve val CodeableConcept domain;

	@GenModel(documentation="The quality standard, established benchmark, to which substance complies (e.g. USP/NF, Ph. Eur, JP, BP, Company Standard).")
	@ExtendedMetaData(kind="element", name="grade", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] grade;

	@GenModel(documentation="Textual description of the substance.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="Supporting literature.")
	@ExtendedMetaData(kind="element", name="informationSource", namespace="##targetNamespace")
	!resolve val Reference[*] informationSource;

	@GenModel(documentation="Textual comment about the substance's catalogue or registry record.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="The entity that creates, makes, produces or fabricates the substance. This is a set of potential manufacturers but is not necessarily comprehensive.")
	@ExtendedMetaData(kind="element", name="manufacturer", namespace="##targetNamespace")
	!resolve val Reference[*] manufacturer;

	@GenModel(documentation="An entity that is the source for the substance. It may be different from the manufacturer. Supplier is synonymous to a distributor.")
	@ExtendedMetaData(kind="element", name="supplier", namespace="##targetNamespace")
	!resolve val Reference[*] supplier;

	@GenModel(documentation="Moiety, for structural modifications.")
	@ExtendedMetaData(kind="element", name="moiety", namespace="##targetNamespace")
	!resolve val SubstanceDefinitionMoiety[*] moiety;

	@GenModel(documentation="General specifications for this substance.")
	@ExtendedMetaData(kind="element", name="characterization", namespace="##targetNamespace")
	!resolve val SubstanceDefinitionCharacterization[*] characterization;

	@GenModel(documentation="General specifications for this substance.")
	@ExtendedMetaData(kind="element", name="property", namespace="##targetNamespace")
	!resolve val SubstanceDefinitionProperty[*] property;

	@GenModel(documentation="General information detailing this substance.")
	@ExtendedMetaData(kind="element", name="referenceInformation", namespace="##targetNamespace")
	!resolve val Reference referenceInformation;

	@GenModel(documentation="The average mass of a molecule of a compound compared to 1/12 the mass of carbon 12 and calculated as the sum of the atomic weights of the constituent atoms.")
	@ExtendedMetaData(kind="element", name="molecularWeight", namespace="##targetNamespace")
	!resolve val SubstanceDefinitionMolecularWeight[*] molecularWeight;

	@GenModel(documentation="Structural information.")
	@ExtendedMetaData(kind="element", name="structure", namespace="##targetNamespace")
	!resolve val SubstanceDefinitionStructure structure;

	@GenModel(documentation="Codes associated with the substance.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val SubstanceDefinitionCode[*] code;

	@GenModel(documentation="Names applicable to this substance.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val SubstanceDefinitionName[*] name;

	@GenModel(documentation="A link between this substance and another, with details of the relationship.")
	@ExtendedMetaData(kind="element", name="relationship", namespace="##targetNamespace")
	!resolve val SubstanceDefinitionRelationship[*] relationship;

	@GenModel(documentation="Data items specific to nucleic acids.")
	@ExtendedMetaData(kind="element", name="nucleicAcid", namespace="##targetNamespace")
	!resolve val Reference nucleicAcid;

	@GenModel(documentation="Data items specific to polymers.")
	@ExtendedMetaData(kind="element", name="polymer", namespace="##targetNamespace")
	!resolve val Reference polymer;

	@GenModel(documentation="Data items specific to proteins.")
	@ExtendedMetaData(kind="element", name="protein", namespace="##targetNamespace")
	!resolve val Reference protein;

	@GenModel(documentation="Material or taxonomic/anatomical source for the substance.")
	@ExtendedMetaData(kind="element", name="sourceMaterial", namespace="##targetNamespace")
	!resolve val SubstanceDefinitionSourceMaterial sourceMaterial;
}

@GenModel(documentation="The detailed description of a substance, typically at a level beyond what is used for prescribing.")
@ExtendedMetaData(name="SubstanceDefinition.Characterization", kind="elementOnly")
class SubstanceDefinitionCharacterization extends BackboneElement {

	@GenModel(documentation="The method used to elucidate the characterization of the drug substance. Example: HPLC.")
	@ExtendedMetaData(kind="element", name="technique", namespace="##targetNamespace")
	!resolve val CodeableConcept technique;

	@GenModel(documentation="Describes the nature of the chemical entity and explains, for instance, whether this is a base or a salt form.")
	@ExtendedMetaData(kind="element", name="form", namespace="##targetNamespace")
	!resolve val CodeableConcept form;

	@GenModel(documentation="The description or justification in support of the interpretation of the data file.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The data produced by the analytical instrument or a pictorial representation of that data. Examples: a JCAMP, JDX, or ADX file, or a chromatogram or spectrum analysis.")
	@ExtendedMetaData(kind="element", name="file", namespace="##targetNamespace")
	!resolve val Attachment[*] file;
}

@GenModel(documentation="The detailed description of a substance, typically at a level beyond what is used for prescribing.")
@ExtendedMetaData(name="SubstanceDefinition.Code", kind="elementOnly")
class SubstanceDefinitionCode extends BackboneElement {

	@GenModel(documentation="The specific code.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@GenModel(documentation="Status of the code assignment, for example 'provisional', 'approved'.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val CodeableConcept status;

	@GenModel(documentation="The date at which the code status was changed as part of the terminology maintenance.")
	@ExtendedMetaData(kind="element", name="statusDate", namespace="##targetNamespace")
	!resolve val DateTime statusDate;

	@GenModel(documentation="Any comment can be provided in this field, if necessary.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="Supporting literature.")
	@ExtendedMetaData(kind="element", name="source", namespace="##targetNamespace")
	!resolve val Reference[*] source;
}

@GenModel(documentation="The detailed description of a substance, typically at a level beyond what is used for prescribing.")
@ExtendedMetaData(name="SubstanceDefinition.Moiety", kind="elementOnly")
class SubstanceDefinitionMoiety extends BackboneElement {

	@GenModel(documentation="Role that the moiety is playing.")
	@ExtendedMetaData(kind="element", name="role", namespace="##targetNamespace")
	!resolve val CodeableConcept role;

	@GenModel(documentation="Identifier by which this moiety substance is known.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier identifier;

	@GenModel(documentation="Textual name for this moiety substance.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="Stereochemistry type.")
	@ExtendedMetaData(kind="element", name="stereochemistry", namespace="##targetNamespace")
	!resolve val CodeableConcept stereochemistry;

	@GenModel(documentation="Optical activity type.")
	@ExtendedMetaData(kind="element", name="opticalActivity", namespace="##targetNamespace")
	!resolve val CodeableConcept opticalActivity;

	@GenModel(documentation="Molecular formula for this moiety of this substance, typically using the Hill system.")
	@ExtendedMetaData(kind="element", name="molecularFormula", namespace="##targetNamespace")
	!resolve val String molecularFormula;

	@ExtendedMetaData(kind="element", name="amountQuantity", namespace="##targetNamespace")
	!resolve val Quantity amountQuantity;

	@ExtendedMetaData(kind="element", name="amountString", namespace="##targetNamespace")
	!resolve val String amountString;

	@GenModel(documentation="The measurement type of the quantitative value. In capturing the actual relative amounts of substances or molecular fragments it may be necessary to indicate whether the amount refers to, for example, a mole ratio or weight ratio.")
	@ExtendedMetaData(kind="element", name="measurementType", namespace="##targetNamespace")
	!resolve val CodeableConcept measurementType;
}

@GenModel(documentation="The detailed description of a substance, typically at a level beyond what is used for prescribing.")
@ExtendedMetaData(name="SubstanceDefinition.MolecularWeight", kind="elementOnly")
class SubstanceDefinitionMolecularWeight extends BackboneElement {

	@GenModel(documentation="The method by which the molecular weight was determined.")
	@ExtendedMetaData(kind="element", name="method", namespace="##targetNamespace")
	!resolve val CodeableConcept method;

	@GenModel(documentation="Type of molecular weight such as exact, average (also known as. number average), weight average.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field.")
	@ExtendedMetaData(kind="element", name="amount", namespace="##targetNamespace")
	!resolve val Quantity[1] amount;
}

@GenModel(documentation="The detailed description of a substance, typically at a level beyond what is used for prescribing.")
@ExtendedMetaData(name="SubstanceDefinition.Name", kind="elementOnly")
class SubstanceDefinitionName extends BackboneElement {

	@GenModel(documentation="The actual name.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String[1] name;

	@GenModel(documentation="Name type, for example 'systematic',  'scientific, 'brand'.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="The status of the name, for example 'current', 'proposed'.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val CodeableConcept status;

	@GenModel(documentation="If this is the preferred name for this substance.")
	@ExtendedMetaData(kind="element", name="preferred", namespace="##targetNamespace")
	!resolve val Boolean preferred;

	@GenModel(documentation="Human language that the name is written in.")
	@ExtendedMetaData(kind="element", name="language", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] language;

	@GenModel(documentation="The use context of this name for example if there is a different name a drug active ingredient as opposed to a food colour additive.")
	@ExtendedMetaData(kind="element", name="domain", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] domain;

	@GenModel(documentation="The jurisdiction where this name applies.")
	@ExtendedMetaData(kind="element", name="jurisdiction", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] jurisdiction;

	@GenModel(documentation="A synonym of this particular name, by which the substance is also known.")
	@ExtendedMetaData(kind="element", name="synonym", namespace="##targetNamespace")
	!resolve val SubstanceDefinitionName[*] synonym;

	@GenModel(documentation="A translation for this name into another human language.")
	@ExtendedMetaData(kind="element", name="translation", namespace="##targetNamespace")
	!resolve val SubstanceDefinitionName[*] translation;

	@GenModel(documentation="Details of the official nature of this name.")
	@ExtendedMetaData(kind="element", name="official", namespace="##targetNamespace")
	!resolve val SubstanceDefinitionOfficial[*] official;

	@GenModel(documentation="Supporting literature.")
	@ExtendedMetaData(kind="element", name="source", namespace="##targetNamespace")
	!resolve val Reference[*] source;
}

@GenModel(documentation="The detailed description of a substance, typically at a level beyond what is used for prescribing.")
@ExtendedMetaData(name="SubstanceDefinition.Official", kind="elementOnly")
class SubstanceDefinitionOfficial extends BackboneElement {

	@GenModel(documentation="Which authority uses this official name.")
	@ExtendedMetaData(kind="element", name="authority", namespace="##targetNamespace")
	!resolve val CodeableConcept authority;

	@GenModel(documentation="The status of the official name, for example 'draft', 'active', 'retired'.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val CodeableConcept status;

	@GenModel(documentation="Date of the official name change.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;
}

@GenModel(documentation="The detailed description of a substance, typically at a level beyond what is used for prescribing.")
@ExtendedMetaData(name="SubstanceDefinition.Property", kind="elementOnly")
class SubstanceDefinitionProperty extends BackboneElement {

	@GenModel(documentation="A code expressing the type of property.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@ExtendedMetaData(kind="element", name="valueCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept valueCodeableConcept;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueDate", namespace="##targetNamespace")
	!resolve val Date valueDate;

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;

	@ExtendedMetaData(kind="element", name="valueAttachment", namespace="##targetNamespace")
	!resolve val Attachment valueAttachment;
}

@GenModel(documentation="The detailed description of a substance, typically at a level beyond what is used for prescribing.")
@ExtendedMetaData(name="SubstanceDefinition.Relationship", kind="elementOnly")
class SubstanceDefinitionRelationship extends BackboneElement {

	@ExtendedMetaData(kind="element", name="substanceDefinitionReference", namespace="##targetNamespace")
	!resolve val Reference substanceDefinitionReference;

	@ExtendedMetaData(kind="element", name="substanceDefinitionCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept substanceDefinitionCodeableConcept;

	@GenModel(documentation="For example \"salt to parent\", \"active moiety\", \"starting material\", \"polymorph\", \"impurity of\".")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@GenModel(documentation="For example where an enzyme strongly bonds with a particular substance, this is a defining relationship for that enzyme, out of several possible substance relationships.")
	@ExtendedMetaData(kind="element", name="isDefining", namespace="##targetNamespace")
	!resolve val Boolean isDefining;

	@ExtendedMetaData(kind="element", name="amountQuantity", namespace="##targetNamespace")
	!resolve val Quantity amountQuantity;

	@ExtendedMetaData(kind="element", name="amountRatio", namespace="##targetNamespace")
	!resolve val Ratio amountRatio;

	@ExtendedMetaData(kind="element", name="amountString", namespace="##targetNamespace")
	!resolve val String amountString;

	@GenModel(documentation="For use when the numeric has an uncertain range.")
	@ExtendedMetaData(kind="element", name="ratioHighLimitAmount", namespace="##targetNamespace")
	!resolve val Ratio ratioHighLimitAmount;

	@GenModel(documentation="An operator for the amount, for example \"average\", \"approximately\", \"less than\".")
	@ExtendedMetaData(kind="element", name="comparator", namespace="##targetNamespace")
	!resolve val CodeableConcept comparator;

	@GenModel(documentation="Supporting literature.")
	@ExtendedMetaData(kind="element", name="source", namespace="##targetNamespace")
	!resolve val Reference[*] source;
}

@GenModel(documentation="The detailed description of a substance, typically at a level beyond what is used for prescribing.")
@ExtendedMetaData(name="SubstanceDefinition.Representation", kind="elementOnly")
class SubstanceDefinitionRepresentation extends BackboneElement {

	@GenModel(documentation="The kind of structural representation (e.g. full, partial).")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="The structural representation as a text string in a standard format.")
	@ExtendedMetaData(kind="element", name="representation", namespace="##targetNamespace")
	!resolve val String representation;

	@GenModel(documentation="The format of the representation e.g. InChI, SMILES, MOLFILE, CDX, SDF, PDB, mmCIF. The logical content type rather than the physical file format of a document.")
	@ExtendedMetaData(kind="element", name="format", namespace="##targetNamespace")
	!resolve val CodeableConcept format;

	@GenModel(documentation="An attached file with the structural representation e.g. a molecular structure graphic of the substance, a JCAMP or AnIML file.")
	@ExtendedMetaData(kind="element", name="document", namespace="##targetNamespace")
	!resolve val Reference document;
}

@GenModel(documentation="The detailed description of a substance, typically at a level beyond what is used for prescribing.")
@ExtendedMetaData(name="SubstanceDefinition.SourceMaterial", kind="elementOnly")
class SubstanceDefinitionSourceMaterial extends BackboneElement {

	@GenModel(documentation="A classification that provides the origin of the raw material. Example: cat hair would be an Animal source type.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="The genus of an organism, typically referring to the Latin epithet of the genus element of the plant/animal scientific name.")
	@ExtendedMetaData(kind="element", name="genus", namespace="##targetNamespace")
	!resolve val CodeableConcept genus;

	@GenModel(documentation="The species of an organism, typically referring to the Latin epithet of the species of the plant/animal.")
	@ExtendedMetaData(kind="element", name="species", namespace="##targetNamespace")
	!resolve val CodeableConcept species;

	@GenModel(documentation="An anatomical origin of the source material within an organism.")
	@ExtendedMetaData(kind="element", name="part", namespace="##targetNamespace")
	!resolve val CodeableConcept part;

	@GenModel(documentation="The country or countries where the material is harvested.")
	@ExtendedMetaData(kind="element", name="countryOfOrigin", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] countryOfOrigin;
}

@GenModel(documentation="The detailed description of a substance, typically at a level beyond what is used for prescribing.")
@ExtendedMetaData(name="SubstanceDefinition.Structure", kind="elementOnly")
class SubstanceDefinitionStructure extends BackboneElement {

	@GenModel(documentation="Stereochemistry type.")
	@ExtendedMetaData(kind="element", name="stereochemistry", namespace="##targetNamespace")
	!resolve val CodeableConcept stereochemistry;

	@GenModel(documentation="Optical activity type.")
	@ExtendedMetaData(kind="element", name="opticalActivity", namespace="##targetNamespace")
	!resolve val CodeableConcept opticalActivity;

	@GenModel(documentation="An expression which states the number and type of atoms present in a molecule of a substance.")
	@ExtendedMetaData(kind="element", name="molecularFormula", namespace="##targetNamespace")
	!resolve val String molecularFormula;

	@GenModel(documentation="Specified per moiety according to the Hill system, i.e. first C, then H, then alphabetical, each moiety separated by a dot.")
	@ExtendedMetaData(kind="element", name="molecularFormulaByMoiety", namespace="##targetNamespace")
	!resolve val String molecularFormulaByMoiety;

	@GenModel(documentation="The molecular weight or weight range (for proteins, polymers or nucleic acids).")
	@ExtendedMetaData(kind="element", name="molecularWeight", namespace="##targetNamespace")
	!resolve val SubstanceDefinitionMolecularWeight molecularWeight;

	@GenModel(documentation="The method used to elucidate the structure of the drug substance. Examples: X-ray, NMR, Peptide mapping, Ligand binding assay.")
	@ExtendedMetaData(kind="element", name="technique", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] technique;

	@GenModel(documentation="The source of information about the structure.")
	@ExtendedMetaData(kind="element", name="sourceDocument", namespace="##targetNamespace")
	!resolve val Reference[*] sourceDocument;

	@GenModel(documentation="A depiction of the structure of the substance.")
	@ExtendedMetaData(kind="element", name="representation", namespace="##targetNamespace")
	!resolve val SubstanceDefinitionRepresentation[*] representation;
}

@GenModel(documentation="A homogeneous material with a definite composition.")
@ExtendedMetaData(name="Substance.Ingredient", kind="elementOnly")
class SubstanceIngredient extends BackboneElement {

	@GenModel(documentation="The amount of the ingredient in the substance - a concentration ratio.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Ratio quantity;

	@ExtendedMetaData(kind="element", name="substanceCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept substanceCodeableConcept;

	@ExtendedMetaData(kind="element", name="substanceReference", namespace="##targetNamespace")
	!resolve val Reference substanceReference;
}

@GenModel(documentation="Nucleic acids are defined by three distinct elements: the base, sugar and linkage. Individual substance/moiety IDs will be created for each of these elements. The nucleotide sequence will be always entered in the 5’-3’ direction.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="SubstanceNucleicAcid", kind="elementOnly")
class SubstanceNucleicAcid extends DomainResource {

	@GenModel(documentation="The type of the sequence shall be specified based on a controlled vocabulary.")
	@ExtendedMetaData(kind="element", name="sequenceType", namespace="##targetNamespace")
	!resolve val CodeableConcept sequenceType;

	@GenModel(documentation="The number of linear sequences of nucleotides linked through phosphodiester bonds shall be described. Subunits would be strands of nucleic acids that are tightly associated typically through Watson-Crick base pairing. NOTE: If not specified in the reference source, the assumption is that there is 1 subunit.")
	@ExtendedMetaData(kind="element", name="numberOfSubunits", namespace="##targetNamespace")
	!resolve val Integer numberOfSubunits;

	@GenModel(documentation="The area of hybridisation shall be described if applicable for double stranded RNA or DNA. The number associated with the subunit followed by the number associated to the residue shall be specified in increasing order. The underscore “” shall be used as separator as follows: “Subunitnumber Residue”.")
	@ExtendedMetaData(kind="element", name="areaOfHybridisation", namespace="##targetNamespace")
	!resolve val String areaOfHybridisation;

	@GenModel(documentation="(TBC).")
	@ExtendedMetaData(kind="element", name="oligoNucleotideType", namespace="##targetNamespace")
	!resolve val CodeableConcept oligoNucleotideType;

	@GenModel(documentation="Subunits are listed in order of decreasing length; sequences of the same length will be ordered by molecular weight; subunits that have identical sequences will be repeated multiple times.")
	@ExtendedMetaData(kind="element", name="subunit", namespace="##targetNamespace")
	!resolve val SubstanceNucleicAcidSubunit[*] subunit;
}

@GenModel(documentation="Nucleic acids are defined by three distinct elements: the base, sugar and linkage. Individual substance/moiety IDs will be created for each of these elements. The nucleotide sequence will be always entered in the 5’-3’ direction.")
@ExtendedMetaData(name="SubstanceNucleicAcid.Linkage", kind="elementOnly")
class SubstanceNucleicAcidLinkage extends BackboneElement {

	@GenModel(documentation="The entity that links the sugar residues together should also be captured for nearly all naturally occurring nucleic acid the linkage is a phosphate group. For many synthetic oligonucleotides phosphorothioate linkages are often seen. Linkage connectivity is assumed to be 3’-5’. If the linkage is either 3’-3’ or 5’-5’ this should be specified.")
	@ExtendedMetaData(kind="element", name="connectivity", namespace="##targetNamespace")
	!resolve val String connectivity;

	@GenModel(documentation="Each linkage will be registered as a fragment and have an ID.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier identifier;

	@GenModel(documentation="Each linkage will be registered as a fragment and have at least one name. A single name shall be assigned to each linkage.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="Residues shall be captured as described in 5.3.6.8.3.")
	@ExtendedMetaData(kind="element", name="residueSite", namespace="##targetNamespace")
	!resolve val String residueSite;
}

@GenModel(documentation="Nucleic acids are defined by three distinct elements: the base, sugar and linkage. Individual substance/moiety IDs will be created for each of these elements. The nucleotide sequence will be always entered in the 5’-3’ direction.")
@ExtendedMetaData(name="SubstanceNucleicAcid.Subunit", kind="elementOnly")
class SubstanceNucleicAcidSubunit extends BackboneElement {

	@GenModel(documentation="Index of linear sequences of nucleic acids in order of decreasing length. Sequences of the same length will be ordered by molecular weight. Subunits that have identical sequences will be repeated and have sequential subscripts.")
	@ExtendedMetaData(kind="element", name="subunit", namespace="##targetNamespace")
	!resolve val Integer subunit;

	@GenModel(documentation="Actual nucleotide sequence notation from 5' to 3' end using standard single letter codes. In addition to the base sequence, sugar and type of phosphate or non-phosphate linkage should also be captured.")
	@ExtendedMetaData(kind="element", name="sequence", namespace="##targetNamespace")
	!resolve val String sequence;

	@GenModel(documentation="The length of the sequence shall be captured.")
	@ExtendedMetaData(kind="element", name="length", namespace="##targetNamespace")
	!resolve val Integer length;

	@GenModel(documentation="(TBC).")
	@ExtendedMetaData(kind="element", name="sequenceAttachment", namespace="##targetNamespace")
	!resolve val Attachment sequenceAttachment;

	@GenModel(documentation="The nucleotide present at the 5’ terminal shall be specified based on a controlled vocabulary. Since the sequence is represented from the 5' to the 3' end, the 5’ prime nucleotide is the letter at the first position in the sequence. A separate representation would be redundant.")
	@ExtendedMetaData(kind="element", name="fivePrime", namespace="##targetNamespace")
	!resolve val CodeableConcept fivePrime;

	@GenModel(documentation="The nucleotide present at the 3’ terminal shall be specified based on a controlled vocabulary. Since the sequence is represented from the 5' to the 3' end, the 5’ prime nucleotide is the letter at the last position in the sequence. A separate representation would be redundant.")
	@ExtendedMetaData(kind="element", name="threePrime", namespace="##targetNamespace")
	!resolve val CodeableConcept threePrime;

	@GenModel(documentation="The linkages between sugar residues will also be captured.")
	@ExtendedMetaData(kind="element", name="linkage", namespace="##targetNamespace")
	!resolve val SubstanceNucleicAcidLinkage[*] linkage;

	@GenModel(documentation="5.3.6.8.1 Sugar ID (Mandatory).")
	@ExtendedMetaData(kind="element", name="sugar", namespace="##targetNamespace")
	!resolve val SubstanceNucleicAcidSugar[*] sugar;
}

@GenModel(documentation="Nucleic acids are defined by three distinct elements: the base, sugar and linkage. Individual substance/moiety IDs will be created for each of these elements. The nucleotide sequence will be always entered in the 5’-3’ direction.")
@ExtendedMetaData(name="SubstanceNucleicAcid.Sugar", kind="elementOnly")
class SubstanceNucleicAcidSugar extends BackboneElement {

	@GenModel(documentation="The Substance ID of the sugar or sugar-like component that make up the nucleotide.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier identifier;

	@GenModel(documentation="The name of the sugar or sugar-like component that make up the nucleotide.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="The residues that contain a given sugar will be captured. The order of given residues will be captured in the 5‘-3‘direction consistent with the base sequences listed above.")
	@ExtendedMetaData(kind="element", name="residueSite", namespace="##targetNamespace")
	!resolve val String residueSite;
}

@GenModel(documentation="Properties of a substance specific to it being a polymer.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="SubstancePolymer", kind="elementOnly")
class SubstancePolymer extends DomainResource {

	@GenModel(documentation="A business idenfier for this polymer, but typically this is handled by a SubstanceDefinition identifier.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier identifier;

	@GenModel(documentation="Overall type of the polymer.")
	@ExtendedMetaData(kind="element", name="class", namespace="##targetNamespace")
	!resolve val CodeableConcept ~class;

	@GenModel(documentation="Polymer geometry, e.g. linear, branched, cross-linked, network or dendritic.")
	@ExtendedMetaData(kind="element", name="geometry", namespace="##targetNamespace")
	!resolve val CodeableConcept geometry;

	@GenModel(documentation="Descrtibes the copolymer sequence type (polymer connectivity).")
	@ExtendedMetaData(kind="element", name="copolymerConnectivity", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] copolymerConnectivity;

	@GenModel(documentation="Todo - this is intended to connect to a repeating full modification structure, also used by Protein and Nucleic Acid . String is just a placeholder.")
	@ExtendedMetaData(kind="element", name="modification", namespace="##targetNamespace")
	!resolve val String modification;

	@GenModel(documentation="Todo.")
	@ExtendedMetaData(kind="element", name="monomerSet", namespace="##targetNamespace")
	!resolve val SubstancePolymerMonomerSet[*] monomerSet;

	@GenModel(documentation="Specifies and quantifies the repeated units and their configuration.")
	@ExtendedMetaData(kind="element", name="repeat", namespace="##targetNamespace")
	!resolve val SubstancePolymerRepeat[*] repeat;
}

@GenModel(documentation="Properties of a substance specific to it being a polymer.")
@ExtendedMetaData(name="SubstancePolymer.DegreeOfPolymerisation", kind="elementOnly")
class SubstancePolymerDegreeOfPolymerisation extends BackboneElement {

	@GenModel(documentation="The type of the degree of polymerisation shall be described, e.g. SRU/Polymer Ratio.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="An average amount of polymerisation.")
	@ExtendedMetaData(kind="element", name="average", namespace="##targetNamespace")
	!resolve val Integer average;

	@GenModel(documentation="A low expected limit of the amount.")
	@ExtendedMetaData(kind="element", name="low", namespace="##targetNamespace")
	!resolve val Integer low;

	@GenModel(documentation="A high expected limit of the amount.")
	@ExtendedMetaData(kind="element", name="high", namespace="##targetNamespace")
	!resolve val Integer high;
}

@GenModel(documentation="Properties of a substance specific to it being a polymer.")
@ExtendedMetaData(name="SubstancePolymer.MonomerSet", kind="elementOnly")
class SubstancePolymerMonomerSet extends BackboneElement {

	@GenModel(documentation="Captures the type of ratio to the entire polymer, e.g. Monomer/Polymer ratio, SRU/Polymer Ratio.")
	@ExtendedMetaData(kind="element", name="ratioType", namespace="##targetNamespace")
	!resolve val CodeableConcept ratioType;

	@GenModel(documentation="The starting materials - monomer(s) used in the synthesis of the polymer.")
	@ExtendedMetaData(kind="element", name="startingMaterial", namespace="##targetNamespace")
	!resolve val SubstancePolymerStartingMaterial[*] startingMaterial;
}

@GenModel(documentation="Properties of a substance specific to it being a polymer.")
@ExtendedMetaData(name="SubstancePolymer.Repeat", kind="elementOnly")
class SubstancePolymerRepeat extends BackboneElement {

	@GenModel(documentation="A representation of an (average) molecular formula from a polymer.")
	@ExtendedMetaData(kind="element", name="averageMolecularFormula", namespace="##targetNamespace")
	!resolve val String averageMolecularFormula;

	@GenModel(documentation="How the quantitative amount of Structural Repeat Units is captured (e.g. Exact, Numeric, Average).")
	@ExtendedMetaData(kind="element", name="repeatUnitAmountType", namespace="##targetNamespace")
	!resolve val CodeableConcept repeatUnitAmountType;

	@GenModel(documentation="An SRU - Structural Repeat Unit.")
	@ExtendedMetaData(kind="element", name="repeatUnit", namespace="##targetNamespace")
	!resolve val SubstancePolymerRepeatUnit[*] repeatUnit;
}

@GenModel(documentation="Properties of a substance specific to it being a polymer.")
@ExtendedMetaData(name="SubstancePolymer.RepeatUnit", kind="elementOnly")
class SubstancePolymerRepeatUnit extends BackboneElement {

	@GenModel(documentation="Structural repeat units are essential elements for defining polymers.")
	@ExtendedMetaData(kind="element", name="unit", namespace="##targetNamespace")
	!resolve val String unit;

	@GenModel(documentation="The orientation of the polymerisation, e.g. head-tail, head-head, random.")
	@ExtendedMetaData(kind="element", name="orientation", namespace="##targetNamespace")
	!resolve val CodeableConcept orientation;

	@GenModel(documentation="Number of repeats of this unit.")
	@ExtendedMetaData(kind="element", name="amount", namespace="##targetNamespace")
	!resolve val Integer amount;

	@GenModel(documentation="Applies to homopolymer and block co-polymers where the degree of polymerisation within a block can be described.")
	@ExtendedMetaData(kind="element", name="degreeOfPolymerisation", namespace="##targetNamespace")
	!resolve val SubstancePolymerDegreeOfPolymerisation[*] degreeOfPolymerisation;

	@GenModel(documentation="A graphical structure for this SRU.")
	@ExtendedMetaData(kind="element", name="structuralRepresentation", namespace="##targetNamespace")
	!resolve val SubstancePolymerStructuralRepresentation[*] structuralRepresentation;
}

@GenModel(documentation="Properties of a substance specific to it being a polymer.")
@ExtendedMetaData(name="SubstancePolymer.StartingMaterial", kind="elementOnly")
class SubstancePolymerStartingMaterial extends BackboneElement {

	@GenModel(documentation="The type of substance for this starting material.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@GenModel(documentation="Substance high level category, e.g. chemical substance.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept category;

	@GenModel(documentation="Used to specify whether the attribute described is a defining element for the unique identification of the polymer.")
	@ExtendedMetaData(kind="element", name="isDefining", namespace="##targetNamespace")
	!resolve val Boolean isDefining;

	@GenModel(documentation="A percentage.")
	@ExtendedMetaData(kind="element", name="amount", namespace="##targetNamespace")
	!resolve val Quantity amount;
}

@GenModel(documentation="Properties of a substance specific to it being a polymer.")
@ExtendedMetaData(name="SubstancePolymer.StructuralRepresentation", kind="elementOnly")
class SubstancePolymerStructuralRepresentation extends BackboneElement {

	@GenModel(documentation="The type of structure (e.g. Full, Partial, Representative).")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="The structural representation as text string in a standard format e.g. InChI, SMILES, MOLFILE, CDX, SDF, PDB, mmCIF.")
	@ExtendedMetaData(kind="element", name="representation", namespace="##targetNamespace")
	!resolve val String representation;

	@GenModel(documentation="The format of the representation e.g. InChI, SMILES, MOLFILE, CDX, SDF, PDB, mmCIF.")
	@ExtendedMetaData(kind="element", name="format", namespace="##targetNamespace")
	!resolve val CodeableConcept format;

	@GenModel(documentation="An attached file with the structural representation.")
	@ExtendedMetaData(kind="element", name="attachment", namespace="##targetNamespace")
	!resolve val Attachment attachment;
}

@GenModel(documentation="A SubstanceProtein is defined as a single unit of a linear amino acid sequence, or a combination of subunits that are either covalently linked or have a defined invariant stoichiometric relationship. This includes all synthetic, recombinant and purified SubstanceProteins of defined sequence, whether the use is therapeutic or prophylactic. This set of elements will be used to describe albumins, coagulation factors, cytokines, growth factors, peptide/SubstanceProtein hormones, enzymes, toxins, toxoids, recombinant vaccines, and immunomodulators.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="SubstanceProtein", kind="elementOnly")
class SubstanceProtein extends DomainResource {

	@GenModel(documentation="The SubstanceProtein descriptive elements will only be used when a complete or partial amino acid sequence is available or derivable from a nucleic acid sequence.")
	@ExtendedMetaData(kind="element", name="sequenceType", namespace="##targetNamespace")
	!resolve val CodeableConcept sequenceType;

	@GenModel(documentation="Number of linear sequences of amino acids linked through peptide bonds. The number of subunits constituting the SubstanceProtein shall be described. It is possible that the number of subunits can be variable.")
	@ExtendedMetaData(kind="element", name="numberOfSubunits", namespace="##targetNamespace")
	!resolve val Integer numberOfSubunits;

	@GenModel(documentation="The disulphide bond between two cysteine residues either on the same subunit or on two different subunits shall be described. The position of the disulfide bonds in the SubstanceProtein shall be listed in increasing order of subunit number and position within subunit followed by the abbreviation of the amino acids involved. The disulfide linkage positions shall actually contain the amino acid Cysteine at the respective positions.")
	@ExtendedMetaData(kind="element", name="disulfideLinkage", namespace="##targetNamespace")
	!resolve val String[*] disulfideLinkage;

	@GenModel(documentation="This subclause refers to the description of each subunit constituting the SubstanceProtein. A subunit is a linear sequence of amino acids linked through peptide bonds. The Subunit information shall be provided when the finished SubstanceProtein is a complex of multiple sequences; subunits are not used to delineate domains within a single sequence. Subunits are listed in order of decreasing length; sequences of the same length will be ordered by decreasing molecular weight; subunits that have identical sequences will be repeated multiple times.")
	@ExtendedMetaData(kind="element", name="subunit", namespace="##targetNamespace")
	!resolve val SubstanceProteinSubunit[*] subunit;
}

@GenModel(documentation="A SubstanceProtein is defined as a single unit of a linear amino acid sequence, or a combination of subunits that are either covalently linked or have a defined invariant stoichiometric relationship. This includes all synthetic, recombinant and purified SubstanceProteins of defined sequence, whether the use is therapeutic or prophylactic. This set of elements will be used to describe albumins, coagulation factors, cytokines, growth factors, peptide/SubstanceProtein hormones, enzymes, toxins, toxoids, recombinant vaccines, and immunomodulators.")
@ExtendedMetaData(name="SubstanceProtein.Subunit", kind="elementOnly")
class SubstanceProteinSubunit extends BackboneElement {

	@GenModel(documentation="Index of primary sequences of amino acids linked through peptide bonds in order of decreasing length. Sequences of the same length will be ordered by molecular weight. Subunits that have identical sequences will be repeated and have sequential subscripts.")
	@ExtendedMetaData(kind="element", name="subunit", namespace="##targetNamespace")
	!resolve val Integer subunit;

	@GenModel(documentation="The sequence information shall be provided enumerating the amino acids from N- to C-terminal end using standard single-letter amino acid codes. Uppercase shall be used for L-amino acids and lowercase for D-amino acids. Transcribed SubstanceProteins will always be described using the translated sequence; for synthetic peptide containing amino acids that are not represented with a single letter code an X should be used within the sequence. The modified amino acids will be distinguished by their position in the sequence.")
	@ExtendedMetaData(kind="element", name="sequence", namespace="##targetNamespace")
	!resolve val String sequence;

	@GenModel(documentation="Length of linear sequences of amino acids contained in the subunit.")
	@ExtendedMetaData(kind="element", name="length", namespace="##targetNamespace")
	!resolve val Integer length;

	@GenModel(documentation="The sequence information shall be provided enumerating the amino acids from N- to C-terminal end using standard single-letter amino acid codes. Uppercase shall be used for L-amino acids and lowercase for D-amino acids. Transcribed SubstanceProteins will always be described using the translated sequence; for synthetic peptide containing amino acids that are not represented with a single letter code an X should be used within the sequence. The modified amino acids will be distinguished by their position in the sequence.")
	@ExtendedMetaData(kind="element", name="sequenceAttachment", namespace="##targetNamespace")
	!resolve val Attachment sequenceAttachment;

	@GenModel(documentation="Unique identifier for molecular fragment modification based on the ISO 11238 Substance ID.")
	@ExtendedMetaData(kind="element", name="nTerminalModificationId", namespace="##targetNamespace")
	!resolve val Identifier nTerminalModificationId;

	@GenModel(documentation="The name of the fragment modified at the N-terminal of the SubstanceProtein shall be specified.")
	@ExtendedMetaData(kind="element", name="nTerminalModification", namespace="##targetNamespace")
	!resolve val String nTerminalModification;

	@GenModel(documentation="Unique identifier for molecular fragment modification based on the ISO 11238 Substance ID.")
	@ExtendedMetaData(kind="element", name="cTerminalModificationId", namespace="##targetNamespace")
	!resolve val Identifier cTerminalModificationId;

	@GenModel(documentation="The modification at the C-terminal shall be specified.")
	@ExtendedMetaData(kind="element", name="cTerminalModification", namespace="##targetNamespace")
	!resolve val String cTerminalModification;
}

@GenModel(documentation="Todo.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="SubstanceReferenceInformation", kind="elementOnly")
class SubstanceReferenceInformation extends DomainResource {

	@GenModel(documentation="Todo.")
	@ExtendedMetaData(kind="element", name="comment", namespace="##targetNamespace")
	!resolve val String comment;

	@GenModel(documentation="Todo.")
	@ExtendedMetaData(kind="element", name="gene", namespace="##targetNamespace")
	!resolve val SubstanceReferenceInformationGene[*] gene;

	@GenModel(documentation="Todo.")
	@ExtendedMetaData(kind="element", name="geneElement", namespace="##targetNamespace")
	!resolve val SubstanceReferenceInformationGeneElement[*] geneElement;

	@GenModel(documentation="Todo.")
	@ExtendedMetaData(kind="element", name="target", namespace="##targetNamespace")
	!resolve val SubstanceReferenceInformationTarget[*] target;
}

@GenModel(documentation="Todo.")
@ExtendedMetaData(name="SubstanceReferenceInformation.Gene", kind="elementOnly")
class SubstanceReferenceInformationGene extends BackboneElement {

	@GenModel(documentation="Todo.")
	@ExtendedMetaData(kind="element", name="geneSequenceOrigin", namespace="##targetNamespace")
	!resolve val CodeableConcept geneSequenceOrigin;

	@GenModel(documentation="Todo.")
	@ExtendedMetaData(kind="element", name="gene", namespace="##targetNamespace")
	!resolve val CodeableConcept gene;

	@GenModel(documentation="Todo.")
	@ExtendedMetaData(kind="element", name="source", namespace="##targetNamespace")
	!resolve val Reference[*] source;
}

@GenModel(documentation="Todo.")
@ExtendedMetaData(name="SubstanceReferenceInformation.GeneElement", kind="elementOnly")
class SubstanceReferenceInformationGeneElement extends BackboneElement {

	@GenModel(documentation="Todo.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="Todo.")
	@ExtendedMetaData(kind="element", name="element", namespace="##targetNamespace")
	!resolve val Identifier element;

	@GenModel(documentation="Todo.")
	@ExtendedMetaData(kind="element", name="source", namespace="##targetNamespace")
	!resolve val Reference[*] source;
}

@GenModel(documentation="Todo.")
@ExtendedMetaData(name="SubstanceReferenceInformation.Target", kind="elementOnly")
class SubstanceReferenceInformationTarget extends BackboneElement {

	@GenModel(documentation="Todo.")
	@ExtendedMetaData(kind="element", name="target", namespace="##targetNamespace")
	!resolve val Identifier target;

	@GenModel(documentation="Todo.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="Todo.")
	@ExtendedMetaData(kind="element", name="interaction", namespace="##targetNamespace")
	!resolve val CodeableConcept interaction;

	@GenModel(documentation="Todo.")
	@ExtendedMetaData(kind="element", name="organism", namespace="##targetNamespace")
	!resolve val CodeableConcept organism;

	@GenModel(documentation="Todo.")
	@ExtendedMetaData(kind="element", name="organismType", namespace="##targetNamespace")
	!resolve val CodeableConcept organismType;

	@ExtendedMetaData(kind="element", name="amountQuantity", namespace="##targetNamespace")
	!resolve val Quantity amountQuantity;

	@ExtendedMetaData(kind="element", name="amountRange", namespace="##targetNamespace")
	!resolve val Range amountRange;

	@ExtendedMetaData(kind="element", name="amountString", namespace="##targetNamespace")
	!resolve val String amountString;

	@GenModel(documentation="Todo.")
	@ExtendedMetaData(kind="element", name="amountType", namespace="##targetNamespace")
	!resolve val CodeableConcept amountType;

	@GenModel(documentation="Todo.")
	@ExtendedMetaData(kind="element", name="source", namespace="##targetNamespace")
	!resolve val Reference[*] source;
}

@GenModel(documentation="Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="SubstanceSourceMaterial", kind="elementOnly")
class SubstanceSourceMaterial extends DomainResource {

	@GenModel(documentation="General high level classification of the source material specific to the origin of the material.")
	@ExtendedMetaData(kind="element", name="sourceMaterialClass", namespace="##targetNamespace")
	!resolve val CodeableConcept sourceMaterialClass;

	@GenModel(documentation="The type of the source material shall be specified based on a controlled vocabulary. For vaccines, this subclause refers to the class of infectious agent.")
	@ExtendedMetaData(kind="element", name="sourceMaterialType", namespace="##targetNamespace")
	!resolve val CodeableConcept sourceMaterialType;

	@GenModel(documentation="The state of the source material when extracted.")
	@ExtendedMetaData(kind="element", name="sourceMaterialState", namespace="##targetNamespace")
	!resolve val CodeableConcept sourceMaterialState;

	@GenModel(documentation="The unique identifier associated with the source material parent organism shall be specified.")
	@ExtendedMetaData(kind="element", name="organismId", namespace="##targetNamespace")
	!resolve val Identifier organismId;

	@GenModel(documentation="The organism accepted Scientific name shall be provided based on the organism taxonomy.")
	@ExtendedMetaData(kind="element", name="organismName", namespace="##targetNamespace")
	!resolve val String organismName;

	@GenModel(documentation="The parent of the herbal drug Ginkgo biloba, Leaf is the substance ID of the substance (fresh) of Ginkgo biloba L. or Ginkgo biloba L. (Whole plant).")
	@ExtendedMetaData(kind="element", name="parentSubstanceId", namespace="##targetNamespace")
	!resolve val Identifier[*] parentSubstanceId;

	@GenModel(documentation="The parent substance of the Herbal Drug, or Herbal preparation.")
	@ExtendedMetaData(kind="element", name="parentSubstanceName", namespace="##targetNamespace")
	!resolve val String[*] parentSubstanceName;

	@GenModel(documentation="The country where the plant material is harvested or the countries where the plasma is sourced from as laid down in accordance with the Plasma Master File. For “Plasma-derived substances” the attribute country of origin provides information about the countries used for the manufacturing of the Cryopoor plama or Crioprecipitate.")
	@ExtendedMetaData(kind="element", name="countryOfOrigin", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] countryOfOrigin;

	@GenModel(documentation="The place/region where the plant is harvested or the places/regions where the animal source material has its habitat.")
	@ExtendedMetaData(kind="element", name="geographicalLocation", namespace="##targetNamespace")
	!resolve val String[*] geographicalLocation;

	@GenModel(documentation="Stage of life for animals, plants, insects and microorganisms. This information shall be provided only when the substance is significantly different in these stages (e.g. foetal bovine serum).")
	@ExtendedMetaData(kind="element", name="developmentStage", namespace="##targetNamespace")
	!resolve val CodeableConcept developmentStage;

	@GenModel(documentation="Many complex materials are fractions of parts of plants, animals, or minerals. Fraction elements are often necessary to define both Substances and Specified Group 1 Substances. For substances derived from Plants, fraction information will be captured at the Substance information level ( . Oils, Juices and Exudates). Additional information for Extracts, such as extraction solvent composition, will be captured at the Specified Substance Group 1 information level. For plasma-derived products fraction information will be captured at the Substance and the Specified Substance Group 1 levels.")
	@ExtendedMetaData(kind="element", name="fractionDescription", namespace="##targetNamespace")
	!resolve val SubstanceSourceMaterialFractionDescription[*] fractionDescription;

	@GenModel(documentation="This subclause describes the organism which the substance is derived from. For vaccines, the parent organism shall be specified based on these subclause elements. As an example, full taxonomy will be described for the Substance Name: ., Leaf.")
	@ExtendedMetaData(kind="element", name="organism", namespace="##targetNamespace")
	!resolve val SubstanceSourceMaterialOrganism organism;

	@GenModel(documentation="To do.")
	@ExtendedMetaData(kind="element", name="partDescription", namespace="##targetNamespace")
	!resolve val SubstanceSourceMaterialPartDescription[*] partDescription;
}

@GenModel(documentation="Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex.")
@ExtendedMetaData(name="SubstanceSourceMaterial.Author", kind="elementOnly")
class SubstanceSourceMaterialAuthor extends BackboneElement {

	@GenModel(documentation="The type of author of an organism species shall be specified. The parenthetical author of an organism species refers to the first author who published the plant/animal name (of any rank). The primary author of an organism species refers to the first author(s), who validly published the plant/animal name.")
	@ExtendedMetaData(kind="element", name="authorType", namespace="##targetNamespace")
	!resolve val CodeableConcept authorType;

	@GenModel(documentation="The author of an organism species shall be specified. The author year of an organism shall also be specified when applicable; refers to the year in which the first author(s) published the infraspecific plant/animal name (of any rank).")
	@ExtendedMetaData(kind="element", name="authorDescription", namespace="##targetNamespace")
	!resolve val String authorDescription;
}

@GenModel(documentation="Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex.")
@ExtendedMetaData(name="SubstanceSourceMaterial.FractionDescription", kind="elementOnly")
class SubstanceSourceMaterialFractionDescription extends BackboneElement {

	@GenModel(documentation="This element is capturing information about the fraction of a plant part, or human plasma for fractionation.")
	@ExtendedMetaData(kind="element", name="fraction", namespace="##targetNamespace")
	!resolve val String fraction;

	@GenModel(documentation="The specific type of the material constituting the component. For Herbal preparations the particulars of the extracts (liquid/dry) is described in Specified Substance Group 1.")
	@ExtendedMetaData(kind="element", name="materialType", namespace="##targetNamespace")
	!resolve val CodeableConcept materialType;
}

@GenModel(documentation="Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex.")
@ExtendedMetaData(name="SubstanceSourceMaterial.Hybrid", kind="elementOnly")
class SubstanceSourceMaterialHybrid extends BackboneElement {

	@GenModel(documentation="The identifier of the maternal species constituting the hybrid organism shall be specified based on a controlled vocabulary. For plants, the parents aren’t always known, and it is unlikely that it will be known which is maternal and which is paternal.")
	@ExtendedMetaData(kind="element", name="maternalOrganismId", namespace="##targetNamespace")
	!resolve val String maternalOrganismId;

	@GenModel(documentation="The name of the maternal species constituting the hybrid organism shall be specified. For plants, the parents aren’t always known, and it is unlikely that it will be known which is maternal and which is paternal.")
	@ExtendedMetaData(kind="element", name="maternalOrganismName", namespace="##targetNamespace")
	!resolve val String maternalOrganismName;

	@GenModel(documentation="The identifier of the paternal species constituting the hybrid organism shall be specified based on a controlled vocabulary.")
	@ExtendedMetaData(kind="element", name="paternalOrganismId", namespace="##targetNamespace")
	!resolve val String paternalOrganismId;

	@GenModel(documentation="The name of the paternal species constituting the hybrid organism shall be specified.")
	@ExtendedMetaData(kind="element", name="paternalOrganismName", namespace="##targetNamespace")
	!resolve val String paternalOrganismName;

	@GenModel(documentation="The hybrid type of an organism shall be specified.")
	@ExtendedMetaData(kind="element", name="hybridType", namespace="##targetNamespace")
	!resolve val CodeableConcept hybridType;
}

@GenModel(documentation="Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex.")
@ExtendedMetaData(name="SubstanceSourceMaterial.Organism", kind="elementOnly")
class SubstanceSourceMaterialOrganism extends BackboneElement {

	@GenModel(documentation="The family of an organism shall be specified.")
	@ExtendedMetaData(kind="element", name="family", namespace="##targetNamespace")
	!resolve val CodeableConcept family;

	@GenModel(documentation="The genus of an organism shall be specified; refers to the Latin epithet of the genus element of the plant/animal scientific name; it is present in names for genera, species and infraspecies.")
	@ExtendedMetaData(kind="element", name="genus", namespace="##targetNamespace")
	!resolve val CodeableConcept genus;

	@GenModel(documentation="The species of an organism shall be specified; refers to the Latin epithet of the species of the plant/animal; it is present in names for species and infraspecies.")
	@ExtendedMetaData(kind="element", name="species", namespace="##targetNamespace")
	!resolve val CodeableConcept species;

	@GenModel(documentation="The Intraspecific type of an organism shall be specified.")
	@ExtendedMetaData(kind="element", name="intraspecificType", namespace="##targetNamespace")
	!resolve val CodeableConcept intraspecificType;

	@GenModel(documentation="The intraspecific description of an organism shall be specified based on a controlled vocabulary. For Influenza Vaccine, the intraspecific description shall contain the syntax of the antigen in line with the WHO convention.")
	@ExtendedMetaData(kind="element", name="intraspecificDescription", namespace="##targetNamespace")
	!resolve val String intraspecificDescription;

	@GenModel(documentation="4.9.13.6.1 Author type (Conditional).")
	@ExtendedMetaData(kind="element", name="author", namespace="##targetNamespace")
	!resolve val SubstanceSourceMaterialAuthor[*] author;

	@GenModel(documentation="4.9.13.8.1 Hybrid species maternal organism ID (Optional).")
	@ExtendedMetaData(kind="element", name="hybrid", namespace="##targetNamespace")
	!resolve val SubstanceSourceMaterialHybrid hybrid;

	@GenModel(documentation="4.9.13.7.1 Kingdom (Conditional).")
	@ExtendedMetaData(kind="element", name="organismGeneral", namespace="##targetNamespace")
	!resolve val SubstanceSourceMaterialOrganismGeneral organismGeneral;
}

@GenModel(documentation="Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex.")
@ExtendedMetaData(name="SubstanceSourceMaterial.OrganismGeneral", kind="elementOnly")
class SubstanceSourceMaterialOrganismGeneral extends BackboneElement {

	@GenModel(documentation="The kingdom of an organism shall be specified.")
	@ExtendedMetaData(kind="element", name="kingdom", namespace="##targetNamespace")
	!resolve val CodeableConcept kingdom;

	@GenModel(documentation="The phylum of an organism shall be specified.")
	@ExtendedMetaData(kind="element", name="phylum", namespace="##targetNamespace")
	!resolve val CodeableConcept phylum;

	@GenModel(documentation="The class of an organism shall be specified.")
	@ExtendedMetaData(kind="element", name="class", namespace="##targetNamespace")
	!resolve val CodeableConcept ~class;

	@GenModel(documentation="The order of an organism shall be specified,.")
	@ExtendedMetaData(kind="element", name="order", namespace="##targetNamespace")
	!resolve val CodeableConcept order;
}

@GenModel(documentation="Source material shall capture information on the taxonomic and anatomical origins as well as the fraction of a material that can result in or can be modified to form a substance. This set of data elements shall be used to define polymer substances isolated from biological matrices. Taxonomic and anatomical origins shall be described using a controlled vocabulary as required. This information is captured for naturally derived polymers ( . starch) and structurally diverse substances. For Organisms belonging to the Kingdom Plantae the Substance level defines the fresh material of a single species or infraspecies, the Herbal Drug and the Herbal preparation. For Herbal preparations, the fraction information will be captured at the Substance information level and additional information for herbal extracts will be captured at the Specified Substance Group 1 information level. See for further explanation the Substance Class: Structurally Diverse and the herbal annex.")
@ExtendedMetaData(name="SubstanceSourceMaterial.PartDescription", kind="elementOnly")
class SubstanceSourceMaterialPartDescription extends BackboneElement {

	@GenModel(documentation="Entity of anatomical origin of source material within an organism.")
	@ExtendedMetaData(kind="element", name="part", namespace="##targetNamespace")
	!resolve val CodeableConcept part;

	@GenModel(documentation="The detailed anatomic location when the part can be extracted from different anatomical locations of the organism. Multiple alternative locations may apply.")
	@ExtendedMetaData(kind="element", name="partLocation", namespace="##targetNamespace")
	!resolve val CodeableConcept partLocation;
}

@GenModel(documentation="Record of delivery of what is supplied.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="SupplyDelivery", kind="elementOnly")
class SupplyDelivery extends DomainResource {

	@GenModel(documentation="Identifier for the supply delivery event that is used to identify it across multiple disparate systems.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="A plan, proposal or order that is fulfilled in whole or in part by this event.")
	@ExtendedMetaData(kind="element", name="basedOn", namespace="##targetNamespace")
	!resolve val Reference[*] basedOn;

	@GenModel(documentation="A larger event of which this particular event is a component or step.")
	@ExtendedMetaData(kind="element", name="partOf", namespace="##targetNamespace")
	!resolve val Reference[*] partOf;

	@GenModel(documentation="A code specifying the state of the dispense event.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val SupplyDeliveryStatus status;

	@GenModel(documentation="A link to a resource representing the person whom the delivered item is for.")
	@ExtendedMetaData(kind="element", name="patient", namespace="##targetNamespace")
	!resolve val Reference patient;

	@GenModel(documentation="Indicates the type of supply being provided.  Examples include: Medication, Device, Biologically Derived Product.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept type;

	@GenModel(documentation="The item that is being delivered or has been supplied.")
	@ExtendedMetaData(kind="element", name="suppliedItem", namespace="##targetNamespace")
	!resolve val SupplyDeliverySuppliedItem[*] suppliedItem;

	@ExtendedMetaData(kind="element", name="occurrenceDateTime", namespace="##targetNamespace")
	!resolve val DateTime occurrenceDateTime;

	@ExtendedMetaData(kind="element", name="occurrencePeriod", namespace="##targetNamespace")
	!resolve val Period occurrencePeriod;

	@ExtendedMetaData(kind="element", name="occurrenceTiming", namespace="##targetNamespace")
	!resolve val Timing occurrenceTiming;

	@GenModel(documentation="The individual or organization responsible for supplying the delivery.")
	@ExtendedMetaData(kind="element", name="supplier", namespace="##targetNamespace")
	!resolve val Reference supplier;

	@GenModel(documentation="Identification of the facility/location where the delivery was shipped to.")
	@ExtendedMetaData(kind="element", name="destination", namespace="##targetNamespace")
	!resolve val Reference destination;

	@GenModel(documentation="Identifies the individual or organization that received the delivery.")
	@ExtendedMetaData(kind="element", name="receiver", namespace="##targetNamespace")
	!resolve val Reference[*] receiver;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="SupplyDeliveryStatus", kind="elementOnly")
class SupplyDeliveryStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr SupplyDeliveryStatusEnum value;
}

@ExtendedMetaData(name="SupplyDeliveryStatusEnum")
enum SupplyDeliveryStatusEnum {

	@GenModel(documentation="In Progress")
	inProgress = 0;

	@GenModel(documentation="Delivered")
	completed = 1;

	@GenModel(documentation="Abandoned")
	abandoned = 2;

	@GenModel(documentation="Entered In Error")
	enteredInError = 3;
}

@ExtendedMetaData(name="SupplyDeliveryStatusEnum:Object", baseType="SupplyDeliveryStatusEnum")
datatype SupplyDeliveryStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="Record of delivery of what is supplied.")
@ExtendedMetaData(name="SupplyDelivery.SuppliedItem", kind="elementOnly")
class SupplyDeliverySuppliedItem extends BackboneElement {

	@GenModel(documentation="The amount of the item that has been supplied.  Unit of measure may be included.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Quantity quantity;

	@ExtendedMetaData(kind="element", name="itemCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept itemCodeableConcept;

	@ExtendedMetaData(kind="element", name="itemReference", namespace="##targetNamespace")
	!resolve val Reference itemReference;
}

@GenModel(documentation="A record of a request to deliver a medication, substance or device used in the healthcare setting to a particular destination for a particular person or organization.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="SupplyRequest", kind="elementOnly")
class SupplyRequest extends DomainResource {

	@GenModel(documentation="Business identifiers assigned to this SupplyRequest by the author and/or other systems. These identifiers remain constant as the resource is updated and propagates from server to server.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="Status of the supply request.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val SupplyRequestStatus status;

	@GenModel(documentation="Plan/proposal/order fulfilled by this request.")
	@ExtendedMetaData(kind="element", name="basedOn", namespace="##targetNamespace")
	!resolve val Reference[*] basedOn;

	@GenModel(documentation="Category of supply, e.g.  central, non-stock, etc. This is used to support work flows associated with the supply process.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept category;

	@GenModel(documentation="Indicates how quickly this SupplyRequest should be addressed with respect to other requests.")
	@ExtendedMetaData(kind="element", name="priority", namespace="##targetNamespace")
	!resolve val RequestPriority priority;

	@GenModel(documentation="The patient to whom the supply will be given or for whom they will be used.")
	@ExtendedMetaData(kind="element", name="deliverFor", namespace="##targetNamespace")
	!resolve val Reference deliverFor;

	@GenModel(documentation="The item that is requested to be supplied. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.")
	@ExtendedMetaData(kind="element", name="item", namespace="##targetNamespace")
	!resolve val CodeableReference[1] item;

	@GenModel(documentation="The amount that is being ordered of the indicated item.")
	@ExtendedMetaData(kind="element", name="quantity", namespace="##targetNamespace")
	!resolve val Quantity[1] quantity;

	@GenModel(documentation="Specific parameters for the ordered item.  For example, the size of the indicated item.")
	@ExtendedMetaData(kind="element", name="parameter", namespace="##targetNamespace")
	!resolve val SupplyRequestParameter[*] parameter;

	@ExtendedMetaData(kind="element", name="occurrenceDateTime", namespace="##targetNamespace")
	!resolve val DateTime occurrenceDateTime;

	@ExtendedMetaData(kind="element", name="occurrencePeriod", namespace="##targetNamespace")
	!resolve val Period occurrencePeriod;

	@ExtendedMetaData(kind="element", name="occurrenceTiming", namespace="##targetNamespace")
	!resolve val Timing occurrenceTiming;

	@GenModel(documentation="When the request was made.")
	@ExtendedMetaData(kind="element", name="authoredOn", namespace="##targetNamespace")
	!resolve val DateTime authoredOn;

	@GenModel(documentation="The device, practitioner, etc. who initiated the request.")
	@ExtendedMetaData(kind="element", name="requester", namespace="##targetNamespace")
	!resolve val Reference requester;

	@GenModel(documentation="Who is intended to fulfill the request.")
	@ExtendedMetaData(kind="element", name="supplier", namespace="##targetNamespace")
	!resolve val Reference[*] supplier;

	@GenModel(documentation="The reason why the supply item was requested.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val CodeableReference[*] reason;

	@GenModel(documentation="Where the supply is expected to come from.")
	@ExtendedMetaData(kind="element", name="deliverFrom", namespace="##targetNamespace")
	!resolve val Reference deliverFrom;

	@GenModel(documentation="Where the supply is destined to go.")
	@ExtendedMetaData(kind="element", name="deliverTo", namespace="##targetNamespace")
	!resolve val Reference deliverTo;
}

@GenModel(documentation="A record of a request to deliver a medication, substance or device used in the healthcare setting to a particular destination for a particular person or organization.")
@ExtendedMetaData(name="SupplyRequest.Parameter", kind="elementOnly")
class SupplyRequestParameter extends BackboneElement {

	@GenModel(documentation="A code or string that identifies the device detail being asserted.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@ExtendedMetaData(kind="element", name="valueCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept valueCodeableConcept;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueRange", namespace="##targetNamespace")
	!resolve val Range valueRange;

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="SupplyRequestStatus", kind="elementOnly")
class SupplyRequestStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr SupplyRequestStatusEnum value;
}

@ExtendedMetaData(name="SupplyRequestStatusEnum")
enum SupplyRequestStatusEnum {

	@GenModel(documentation="Draft")
	draft = 0;

	@GenModel(documentation="Active")
	active = 1;

	@GenModel(documentation="Suspended")
	suspended = 2;

	@GenModel(documentation="Cancelled")
	cancelled = 3;

	@GenModel(documentation="Completed")
	completed = 4;

	@GenModel(documentation="Entered in Error")
	enteredInError = 5;

	@GenModel(documentation="Unknown")
	unknown = 6;
}

@ExtendedMetaData(name="SupplyRequestStatusEnum:Object", baseType="SupplyRequestStatusEnum")
datatype SupplyRequestStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="SystemRestfulInteraction", kind="elementOnly")
class SystemRestfulInteraction extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr SystemRestfulInteractionEnum value;
}

@ExtendedMetaData(name="SystemRestfulInteractionEnum")
enum SystemRestfulInteractionEnum {

	@GenModel(documentation="transaction")
	transaction = 0;

	@GenModel(documentation="batch")
	batch = 1;

	@GenModel(documentation="search-system")
	searchSystem = 2;

	@GenModel(documentation="history-system")
	historySystem = 3;
}

@ExtendedMetaData(name="SystemRestfulInteractionEnum:Object", baseType="SystemRestfulInteractionEnum")
datatype SystemRestfulInteractionEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A task to be performed.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Task", kind="elementOnly")
class Task extends DomainResource {

	@GenModel(documentation="The business identifier for this task.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The URL pointing to a *FHIR*-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Task.")
	@ExtendedMetaData(kind="element", name="instantiatesCanonical", namespace="##targetNamespace")
	!resolve val Canonical instantiatesCanonical;

	@GenModel(documentation="The URL pointing to an *externally* maintained  protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Task.")
	@ExtendedMetaData(kind="element", name="instantiatesUri", namespace="##targetNamespace")
	!resolve val Uri instantiatesUri;

	@GenModel(documentation="BasedOn refers to a higher-level authorization that triggered the creation of the task.  It references a \"request\" resource such as a ServiceRequest, MedicationRequest, CarePlan, etc. which is distinct from the \"request\" resource the task is seeking to fulfill.  This latter resource is referenced by focus.  For example, based on a CarePlan (= basedOn), a task is created to fulfill a ServiceRequest ( = focus ) to collect a specimen from a patient.")
	@ExtendedMetaData(kind="element", name="basedOn", namespace="##targetNamespace")
	!resolve val Reference[*] basedOn;

	@GenModel(documentation="A shared identifier common to multiple independent Task and Request instances that were activated/authorized more or less simultaneously by a single author.  The presence of the same identifier on each request ties those requests together and may have business ramifications in terms of reporting of results, billing, etc.  E.g. a requisition number shared by a set of lab tests ordered together, or a prescription number shared by all meds ordered at one time.")
	@ExtendedMetaData(kind="element", name="groupIdentifier", namespace="##targetNamespace")
	!resolve val Identifier groupIdentifier;

	@GenModel(documentation="Task that this particular task is part of.")
	@ExtendedMetaData(kind="element", name="partOf", namespace="##targetNamespace")
	!resolve val Reference[*] partOf;

	@GenModel(documentation="The current status of the task.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val TaskStatus[1] status;

	@GenModel(documentation="An explanation as to why this task is held, failed, was refused, etc.")
	@ExtendedMetaData(kind="element", name="statusReason", namespace="##targetNamespace")
	!resolve val CodeableReference statusReason;

	@GenModel(documentation="Contains business-specific nuances of the business state.")
	@ExtendedMetaData(kind="element", name="businessStatus", namespace="##targetNamespace")
	!resolve val CodeableConcept businessStatus;

	@GenModel(documentation="Indicates the \"level\" of actionability associated with the Task, i.e. i+R[9]Cs this a proposed task, a planned task, an actionable task, etc.")
	@ExtendedMetaData(kind="element", name="intent", namespace="##targetNamespace")
	!resolve val TaskIntent[1] intent;

	@GenModel(documentation="Indicates how quickly the Task should be addressed with respect to other requests.")
	@ExtendedMetaData(kind="element", name="priority", namespace="##targetNamespace")
	!resolve val RequestPriority priority;

	@GenModel(documentation="If true indicates that the Task is asking for the specified action to *not* occur.")
	@ExtendedMetaData(kind="element", name="doNotPerform", namespace="##targetNamespace")
	!resolve val Boolean doNotPerform;

	@GenModel(documentation="A name or code (or both) briefly describing what the task involves.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@GenModel(documentation="A free-text description of what is to be performed.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val String description;

	@GenModel(documentation="The request being fulfilled or the resource being manipulated (changed, suspended, etc.) by this task.")
	@ExtendedMetaData(kind="element", name="focus", namespace="##targetNamespace")
	!resolve val Reference focus;

	@GenModel(documentation="The entity who benefits from the performance of the service specified in the task (e.g., the patient).")
	@ExtendedMetaData(kind="element", name="for", namespace="##targetNamespace")
	!resolve val Reference for;

	@GenModel(documentation="The healthcare event  (e.g. a patient and healthcare provider interaction) during which this task was created.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@GenModel(documentation="Indicates the start and/or end of the period of time when completion of the task is desired to take place.")
	@ExtendedMetaData(kind="element", name="requestedPeriod", namespace="##targetNamespace")
	!resolve val Period requestedPeriod;

	@GenModel(documentation="Identifies the time action was first taken against the task (start) and/or the time final action was taken against the task prior to marking it as completed (end).")
	@ExtendedMetaData(kind="element", name="executionPeriod", namespace="##targetNamespace")
	!resolve val Period executionPeriod;

	@GenModel(documentation="The date and time this task was created.")
	@ExtendedMetaData(kind="element", name="authoredOn", namespace="##targetNamespace")
	!resolve val DateTime authoredOn;

	@GenModel(documentation="The date and time of last modification to this task.")
	@ExtendedMetaData(kind="element", name="lastModified", namespace="##targetNamespace")
	!resolve val DateTime lastModified;

	@GenModel(documentation="The creator of the task.")
	@ExtendedMetaData(kind="element", name="requester", namespace="##targetNamespace")
	!resolve val Reference requester;

	@GenModel(documentation="The kind of participant or specific participant that should perform the task.")
	@ExtendedMetaData(kind="element", name="requestedPerformer", namespace="##targetNamespace")
	!resolve val CodeableReference[*] requestedPerformer;

	@GenModel(documentation="Party responsible for managing task execution.")
	@ExtendedMetaData(kind="element", name="owner", namespace="##targetNamespace")
	!resolve val Reference owner;

	@GenModel(documentation="The entity who performed the requested task.")
	@ExtendedMetaData(kind="element", name="performer", namespace="##targetNamespace")
	!resolve val TaskPerformer[*] performer;

	@GenModel(documentation="Principal physical location where this task is performed.")
	@ExtendedMetaData(kind="element", name="location", namespace="##targetNamespace")
	!resolve val Reference location;

	@GenModel(documentation="A description, code, or reference indicating why this task needs to be performed.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val CodeableReference[*] reason;

	@GenModel(documentation="Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be relevant to the Task.")
	@ExtendedMetaData(kind="element", name="insurance", namespace="##targetNamespace")
	!resolve val Reference[*] insurance;

	@GenModel(documentation="Free-text information captured about the task as it progresses.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="Links to Provenance records for past versions of this Task that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the task.")
	@ExtendedMetaData(kind="element", name="relevantHistory", namespace="##targetNamespace")
	!resolve val Reference[*] relevantHistory;

	@GenModel(documentation="If the Task.focus is a request resource and the task is seeking fulfillment (i.e. is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned.")
	@ExtendedMetaData(kind="element", name="restriction", namespace="##targetNamespace")
	!resolve val TaskRestriction restriction;

	@GenModel(documentation="Additional information that may be needed in the execution of the task.")
	@ExtendedMetaData(kind="element", name="input", namespace="##targetNamespace")
	!resolve val TaskInput[*] input;

	@GenModel(documentation="Outputs produced by the Task.")
	@ExtendedMetaData(kind="element", name="output", namespace="##targetNamespace")
	!resolve val TaskOutput[*] output;
}

@GenModel(documentation="A task to be performed.")
@ExtendedMetaData(name="Task.Input", kind="elementOnly")
class TaskInput extends BackboneElement {

	@GenModel(documentation="A code or description indicating how the input is intended to be used as part of the task execution.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@ExtendedMetaData(kind="element", name="valueBase64Binary", namespace="##targetNamespace")
	!resolve val Base64Binary valueBase64Binary;

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;

	@ExtendedMetaData(kind="element", name="valueCanonical", namespace="##targetNamespace")
	!resolve val Canonical valueCanonical;

	@ExtendedMetaData(kind="element", name="valueCode", namespace="##targetNamespace")
	!resolve val Code valueCode;

	@ExtendedMetaData(kind="element", name="valueDate", namespace="##targetNamespace")
	!resolve val Date valueDate;

	@ExtendedMetaData(kind="element", name="valueDateTime", namespace="##targetNamespace")
	!resolve val DateTime valueDateTime;

	@ExtendedMetaData(kind="element", name="valueDecimal", namespace="##targetNamespace")
	!resolve val Decimal valueDecimal;

	@ExtendedMetaData(kind="element", name="valueId", namespace="##targetNamespace")
	!resolve val Id valueId;

	@ExtendedMetaData(kind="element", name="valueInstant", namespace="##targetNamespace")
	!resolve val Instant valueInstant;

	@ExtendedMetaData(kind="element", name="valueInteger", namespace="##targetNamespace")
	!resolve val Integer valueInteger;

	@ExtendedMetaData(kind="element", name="valueInteger64", namespace="##targetNamespace")
	!resolve val Integer64 valueInteger64;

	@ExtendedMetaData(kind="element", name="valueMarkdown", namespace="##targetNamespace")
	!resolve val Markdown valueMarkdown;

	@ExtendedMetaData(kind="element", name="valueOid", namespace="##targetNamespace")
	!resolve val Oid valueOid;

	@ExtendedMetaData(kind="element", name="valuePositiveInt", namespace="##targetNamespace")
	!resolve val PositiveInt valuePositiveInt;

	@ExtendedMetaData(kind="element", name="valueString", namespace="##targetNamespace")
	!resolve val String valueString;

	@ExtendedMetaData(kind="element", name="valueTime", namespace="##targetNamespace")
	!resolve val Time valueTime;

	@ExtendedMetaData(kind="element", name="valueUnsignedInt", namespace="##targetNamespace")
	!resolve val UnsignedInt valueUnsignedInt;

	@ExtendedMetaData(kind="element", name="valueUri", namespace="##targetNamespace")
	!resolve val Uri valueUri;

	@ExtendedMetaData(kind="element", name="valueUrl", namespace="##targetNamespace")
	!resolve val Url valueUrl;

	@ExtendedMetaData(kind="element", name="valueUuid", namespace="##targetNamespace")
	!resolve val Uuid valueUuid;

	@ExtendedMetaData(kind="element", name="valueAddress", namespace="##targetNamespace")
	!resolve val Address valueAddress;

	@ExtendedMetaData(kind="element", name="valueAge", namespace="##targetNamespace")
	!resolve val Age valueAge;

	@ExtendedMetaData(kind="element", name="valueAnnotation", namespace="##targetNamespace")
	!resolve val Annotation valueAnnotation;

	@ExtendedMetaData(kind="element", name="valueAttachment", namespace="##targetNamespace")
	!resolve val Attachment valueAttachment;

	@ExtendedMetaData(kind="element", name="valueCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept valueCodeableConcept;

	@ExtendedMetaData(kind="element", name="valueCodeableReference", namespace="##targetNamespace")
	!resolve val CodeableReference valueCodeableReference;

	@ExtendedMetaData(kind="element", name="valueCoding", namespace="##targetNamespace")
	!resolve val Coding valueCoding;

	@ExtendedMetaData(kind="element", name="valueContactPoint", namespace="##targetNamespace")
	!resolve val ContactPoint valueContactPoint;

	@ExtendedMetaData(kind="element", name="valueCount", namespace="##targetNamespace")
	!resolve val Count valueCount;

	@ExtendedMetaData(kind="element", name="valueDistance", namespace="##targetNamespace")
	!resolve val Distance valueDistance;

	@ExtendedMetaData(kind="element", name="valueDuration", namespace="##targetNamespace")
	!resolve val Duration valueDuration;

	@ExtendedMetaData(kind="element", name="valueHumanName", namespace="##targetNamespace")
	!resolve val HumanName valueHumanName;

	@ExtendedMetaData(kind="element", name="valueIdentifier", namespace="##targetNamespace")
	!resolve val Identifier valueIdentifier;

	@ExtendedMetaData(kind="element", name="valueMoney", namespace="##targetNamespace")
	!resolve val Money valueMoney;

	@ExtendedMetaData(kind="element", name="valuePeriod", namespace="##targetNamespace")
	!resolve val Period valuePeriod;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueRange", namespace="##targetNamespace")
	!resolve val Range valueRange;

	@ExtendedMetaData(kind="element", name="valueRatio", namespace="##targetNamespace")
	!resolve val Ratio valueRatio;

	@ExtendedMetaData(kind="element", name="valueRatioRange", namespace="##targetNamespace")
	!resolve val RatioRange valueRatioRange;

	@ExtendedMetaData(kind="element", name="valueReference", namespace="##targetNamespace")
	!resolve val Reference valueReference;

	@ExtendedMetaData(kind="element", name="valueSampledData", namespace="##targetNamespace")
	!resolve val SampledData valueSampledData;

	@ExtendedMetaData(kind="element", name="valueSignature", namespace="##targetNamespace")
	!resolve val Signature valueSignature;

	@ExtendedMetaData(kind="element", name="valueTiming", namespace="##targetNamespace")
	!resolve val Timing valueTiming;

	@ExtendedMetaData(kind="element", name="valueContactDetail", namespace="##targetNamespace")
	!resolve val ContactDetail valueContactDetail;

	@ExtendedMetaData(kind="element", name="valueDataRequirement", namespace="##targetNamespace")
	!resolve val DataRequirement valueDataRequirement;

	@ExtendedMetaData(kind="element", name="valueExpression", namespace="##targetNamespace")
	!resolve val Expression valueExpression;

	@ExtendedMetaData(kind="element", name="valueParameterDefinition", namespace="##targetNamespace")
	!resolve val ParameterDefinition valueParameterDefinition;

	@ExtendedMetaData(kind="element", name="valueRelatedArtifact", namespace="##targetNamespace")
	!resolve val RelatedArtifact valueRelatedArtifact;

	@ExtendedMetaData(kind="element", name="valueTriggerDefinition", namespace="##targetNamespace")
	!resolve val TriggerDefinition valueTriggerDefinition;

	@ExtendedMetaData(kind="element", name="valueUsageContext", namespace="##targetNamespace")
	!resolve val UsageContext valueUsageContext;

	@ExtendedMetaData(kind="element", name="valueAvailability", namespace="##targetNamespace")
	!resolve val Availability valueAvailability;

	@ExtendedMetaData(kind="element", name="valueExtendedContactDetail", namespace="##targetNamespace")
	!resolve val ExtendedContactDetail valueExtendedContactDetail;

	@ExtendedMetaData(kind="element", name="valueDosage", namespace="##targetNamespace")
	!resolve val Dosage valueDosage;

	@ExtendedMetaData(kind="element", name="valueMeta", namespace="##targetNamespace")
	!resolve val Meta valueMeta;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="TaskIntent", kind="elementOnly")
class TaskIntent extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr TaskIntentEnum value;
}

@ExtendedMetaData(name="TaskIntentEnum")
enum TaskIntentEnum {

	@GenModel(documentation="Unknown")
	unknown = 0;

	@GenModel(documentation="Proposal")
	proposal = 1;

	@GenModel(documentation="Plan")
	plan = 2;

	@GenModel(documentation="Order")
	order = 3;

	@GenModel(documentation="Original Order")
	originalOrder = 4;

	@GenModel(documentation="Reflex Order")
	reflexOrder = 5;

	@GenModel(documentation="Filler Order")
	fillerOrder = 6;

	@GenModel(documentation="Instance Order")
	instanceOrder = 7;

	@GenModel(documentation="Option")
	option = 8;
}

@ExtendedMetaData(name="TaskIntentEnum:Object", baseType="TaskIntentEnum")
datatype TaskIntentEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A task to be performed.")
@ExtendedMetaData(name="Task.Output", kind="elementOnly")
class TaskOutput extends BackboneElement {

	@GenModel(documentation="The name of the Output parameter.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@ExtendedMetaData(kind="element", name="valueBase64Binary", namespace="##targetNamespace")
	!resolve val Base64Binary valueBase64Binary;

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;

	@ExtendedMetaData(kind="element", name="valueCanonical", namespace="##targetNamespace")
	!resolve val Canonical valueCanonical;

	@ExtendedMetaData(kind="element", name="valueCode", namespace="##targetNamespace")
	!resolve val Code valueCode;

	@ExtendedMetaData(kind="element", name="valueDate", namespace="##targetNamespace")
	!resolve val Date valueDate;

	@ExtendedMetaData(kind="element", name="valueDateTime", namespace="##targetNamespace")
	!resolve val DateTime valueDateTime;

	@ExtendedMetaData(kind="element", name="valueDecimal", namespace="##targetNamespace")
	!resolve val Decimal valueDecimal;

	@ExtendedMetaData(kind="element", name="valueId", namespace="##targetNamespace")
	!resolve val Id valueId;

	@ExtendedMetaData(kind="element", name="valueInstant", namespace="##targetNamespace")
	!resolve val Instant valueInstant;

	@ExtendedMetaData(kind="element", name="valueInteger", namespace="##targetNamespace")
	!resolve val Integer valueInteger;

	@ExtendedMetaData(kind="element", name="valueInteger64", namespace="##targetNamespace")
	!resolve val Integer64 valueInteger64;

	@ExtendedMetaData(kind="element", name="valueMarkdown", namespace="##targetNamespace")
	!resolve val Markdown valueMarkdown;

	@ExtendedMetaData(kind="element", name="valueOid", namespace="##targetNamespace")
	!resolve val Oid valueOid;

	@ExtendedMetaData(kind="element", name="valuePositiveInt", namespace="##targetNamespace")
	!resolve val PositiveInt valuePositiveInt;

	@ExtendedMetaData(kind="element", name="valueString", namespace="##targetNamespace")
	!resolve val String valueString;

	@ExtendedMetaData(kind="element", name="valueTime", namespace="##targetNamespace")
	!resolve val Time valueTime;

	@ExtendedMetaData(kind="element", name="valueUnsignedInt", namespace="##targetNamespace")
	!resolve val UnsignedInt valueUnsignedInt;

	@ExtendedMetaData(kind="element", name="valueUri", namespace="##targetNamespace")
	!resolve val Uri valueUri;

	@ExtendedMetaData(kind="element", name="valueUrl", namespace="##targetNamespace")
	!resolve val Url valueUrl;

	@ExtendedMetaData(kind="element", name="valueUuid", namespace="##targetNamespace")
	!resolve val Uuid valueUuid;

	@ExtendedMetaData(kind="element", name="valueAddress", namespace="##targetNamespace")
	!resolve val Address valueAddress;

	@ExtendedMetaData(kind="element", name="valueAge", namespace="##targetNamespace")
	!resolve val Age valueAge;

	@ExtendedMetaData(kind="element", name="valueAnnotation", namespace="##targetNamespace")
	!resolve val Annotation valueAnnotation;

	@ExtendedMetaData(kind="element", name="valueAttachment", namespace="##targetNamespace")
	!resolve val Attachment valueAttachment;

	@ExtendedMetaData(kind="element", name="valueCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept valueCodeableConcept;

	@ExtendedMetaData(kind="element", name="valueCodeableReference", namespace="##targetNamespace")
	!resolve val CodeableReference valueCodeableReference;

	@ExtendedMetaData(kind="element", name="valueCoding", namespace="##targetNamespace")
	!resolve val Coding valueCoding;

	@ExtendedMetaData(kind="element", name="valueContactPoint", namespace="##targetNamespace")
	!resolve val ContactPoint valueContactPoint;

	@ExtendedMetaData(kind="element", name="valueCount", namespace="##targetNamespace")
	!resolve val Count valueCount;

	@ExtendedMetaData(kind="element", name="valueDistance", namespace="##targetNamespace")
	!resolve val Distance valueDistance;

	@ExtendedMetaData(kind="element", name="valueDuration", namespace="##targetNamespace")
	!resolve val Duration valueDuration;

	@ExtendedMetaData(kind="element", name="valueHumanName", namespace="##targetNamespace")
	!resolve val HumanName valueHumanName;

	@ExtendedMetaData(kind="element", name="valueIdentifier", namespace="##targetNamespace")
	!resolve val Identifier valueIdentifier;

	@ExtendedMetaData(kind="element", name="valueMoney", namespace="##targetNamespace")
	!resolve val Money valueMoney;

	@ExtendedMetaData(kind="element", name="valuePeriod", namespace="##targetNamespace")
	!resolve val Period valuePeriod;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueRange", namespace="##targetNamespace")
	!resolve val Range valueRange;

	@ExtendedMetaData(kind="element", name="valueRatio", namespace="##targetNamespace")
	!resolve val Ratio valueRatio;

	@ExtendedMetaData(kind="element", name="valueRatioRange", namespace="##targetNamespace")
	!resolve val RatioRange valueRatioRange;

	@ExtendedMetaData(kind="element", name="valueReference", namespace="##targetNamespace")
	!resolve val Reference valueReference;

	@ExtendedMetaData(kind="element", name="valueSampledData", namespace="##targetNamespace")
	!resolve val SampledData valueSampledData;

	@ExtendedMetaData(kind="element", name="valueSignature", namespace="##targetNamespace")
	!resolve val Signature valueSignature;

	@ExtendedMetaData(kind="element", name="valueTiming", namespace="##targetNamespace")
	!resolve val Timing valueTiming;

	@ExtendedMetaData(kind="element", name="valueContactDetail", namespace="##targetNamespace")
	!resolve val ContactDetail valueContactDetail;

	@ExtendedMetaData(kind="element", name="valueDataRequirement", namespace="##targetNamespace")
	!resolve val DataRequirement valueDataRequirement;

	@ExtendedMetaData(kind="element", name="valueExpression", namespace="##targetNamespace")
	!resolve val Expression valueExpression;

	@ExtendedMetaData(kind="element", name="valueParameterDefinition", namespace="##targetNamespace")
	!resolve val ParameterDefinition valueParameterDefinition;

	@ExtendedMetaData(kind="element", name="valueRelatedArtifact", namespace="##targetNamespace")
	!resolve val RelatedArtifact valueRelatedArtifact;

	@ExtendedMetaData(kind="element", name="valueTriggerDefinition", namespace="##targetNamespace")
	!resolve val TriggerDefinition valueTriggerDefinition;

	@ExtendedMetaData(kind="element", name="valueUsageContext", namespace="##targetNamespace")
	!resolve val UsageContext valueUsageContext;

	@ExtendedMetaData(kind="element", name="valueAvailability", namespace="##targetNamespace")
	!resolve val Availability valueAvailability;

	@ExtendedMetaData(kind="element", name="valueExtendedContactDetail", namespace="##targetNamespace")
	!resolve val ExtendedContactDetail valueExtendedContactDetail;

	@ExtendedMetaData(kind="element", name="valueDosage", namespace="##targetNamespace")
	!resolve val Dosage valueDosage;

	@ExtendedMetaData(kind="element", name="valueMeta", namespace="##targetNamespace")
	!resolve val Meta valueMeta;
}

@GenModel(documentation="A task to be performed.")
@ExtendedMetaData(name="Task.Performer", kind="elementOnly")
class TaskPerformer extends BackboneElement {

	@GenModel(documentation="A code or description of the performer of the task.")
	@ExtendedMetaData(kind="element", name="function", namespace="##targetNamespace")
	!resolve val CodeableConcept function;

	@GenModel(documentation="The actor or entity who performed the task.")
	@ExtendedMetaData(kind="element", name="actor", namespace="##targetNamespace")
	!resolve val Reference[1] actor;
}

@GenModel(documentation="A task to be performed.")
@ExtendedMetaData(name="Task.Restriction", kind="elementOnly")
class TaskRestriction extends BackboneElement {

	@GenModel(documentation="Indicates the number of times the requested action should occur.")
	@ExtendedMetaData(kind="element", name="repetitions", namespace="##targetNamespace")
	!resolve val PositiveInt repetitions;

	@GenModel(documentation="The time-period for which fulfillment is sought. This must fall within the overall time period authorized in the referenced request.  E.g. ServiceRequest.occurance[x].")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;

	@GenModel(documentation="For requests that are targeted to more than one potential recipient/target, to identify who is fulfillment is sought for.")
	@ExtendedMetaData(kind="element", name="recipient", namespace="##targetNamespace")
	!resolve val Reference[*] recipient;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="TaskStatus", kind="elementOnly")
class TaskStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr TaskStatusEnum value;
}

@ExtendedMetaData(name="TaskStatusEnum")
enum TaskStatusEnum {

	@GenModel(documentation="Draft")
	draft = 0;

	@GenModel(documentation="Requested")
	requested = 1;

	@GenModel(documentation="Received")
	received = 2;

	@GenModel(documentation="Accepted")
	accepted = 3;

	@GenModel(documentation="Rejected")
	rejected = 4;

	@GenModel(documentation="Ready")
	ready = 5;

	@GenModel(documentation="Cancelled")
	cancelled = 6;

	@GenModel(documentation="In Progress")
	inProgress = 7;

	@GenModel(documentation="On Hold")
	onHold = 8;

	@GenModel(documentation="Failed")
	failed = 9;

	@GenModel(documentation="Completed")
	completed = 10;

	@GenModel(documentation="Entered in Error")
	enteredInError = 11;
}

@ExtendedMetaData(name="TaskStatusEnum:Object", baseType="TaskStatusEnum")
datatype TaskStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="TerminologyCapabilities", kind="elementOnly")
class TerminologyCapabilities extends CanonicalResource {

	@GenModel(documentation="An absolute URI that is used to identify this terminology capabilities when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this terminology capabilities is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the terminology capabilities is stored on different servers.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri url;

	@GenModel(documentation="A formal identifier that is used to identify this terminology capabilities when it is represented in other formats, or referenced in a specification, model, design or an instance.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The identifier that is used to identify this version of the terminology capabilities when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the terminology capabilities author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@ExtendedMetaData(kind="element", name="versionAlgorithmString", namespace="##targetNamespace")
	!resolve val String versionAlgorithmString;

	@ExtendedMetaData(kind="element", name="versionAlgorithmCoding", namespace="##targetNamespace")
	!resolve val Coding versionAlgorithmCoding;

	@GenModel(documentation="A natural language name identifying the terminology capabilities. This name should be usable as an identifier for the module by machine processing applications such as code generation.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="A short, descriptive, user-friendly title for the terminology capabilities.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="The status of this terminology capabilities. Enables tracking the life-cycle of the content.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="A Boolean value to indicate that this terminology capabilities is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.")
	@ExtendedMetaData(kind="element", name="experimental", namespace="##targetNamespace")
	!resolve val Boolean experimental;

	@GenModel(documentation="The date  (and optionally time) when the terminology capabilities was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the terminology capabilities changes.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime[1] date;

	@GenModel(documentation="The name of the organization or individual responsible for the release and ongoing maintenance of the terminology capabilities.")
	@ExtendedMetaData(kind="element", name="publisher", namespace="##targetNamespace")
	!resolve val String publisher;

	@GenModel(documentation="Contact details to assist a user in finding and communicating with the publisher.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactDetail[*] contact;

	@GenModel(documentation="A free text natural language description of the terminology capabilities from a consumer's perspective. Typically, this is used when the capability statement describes a desired rather than an actual solution, for example as a formal expression of requirements as part of an RFP.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate terminology capabilities instances.")
	@ExtendedMetaData(kind="element", name="useContext", namespace="##targetNamespace")
	!resolve val UsageContext[*] useContext;

	@GenModel(documentation="A legal or geographic region in which the terminology capabilities is intended to be used.")
	@ExtendedMetaData(kind="element", name="jurisdiction", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] jurisdiction;

	@GenModel(documentation="Explanation of why this terminology capabilities is needed and why it has been designed as it has.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val Markdown purpose;

	@GenModel(documentation="A copyright statement relating to the terminology capabilities and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the terminology capabilities.")
	@ExtendedMetaData(kind="element", name="copyright", namespace="##targetNamespace")
	!resolve val Markdown copyright;

	@GenModel(documentation="A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').")
	@ExtendedMetaData(kind="element", name="copyrightLabel", namespace="##targetNamespace")
	!resolve val String copyrightLabel;

	@GenModel(documentation="The way that this statement is intended to be used, to describe an actual running instance of software, a particular product (kind, not instance of software) or a class of implementation (e.g. a desired purchase).")
	@ExtendedMetaData(kind="element", name="kind", namespace="##targetNamespace")
	!resolve val CapabilityStatementKind[1] kind;

	@GenModel(documentation="Software that is covered by this terminology capability statement.  It is used when the statement describes the capabilities of a particular software version, independent of an installation.")
	@ExtendedMetaData(kind="element", name="software", namespace="##targetNamespace")
	!resolve val TerminologyCapabilitiesSoftware software;

	@GenModel(documentation="Identifies a specific implementation instance that is described by the terminology capability statement - i.e. a particular installation, rather than the capabilities of a software program.")
	@ExtendedMetaData(kind="element", name="implementation", namespace="##targetNamespace")
	!resolve val TerminologyCapabilitiesImplementation implementation;

	@GenModel(documentation="Whether the server supports lockedDate.")
	@ExtendedMetaData(kind="element", name="lockedDate", namespace="##targetNamespace")
	!resolve val Boolean lockedDate;

	@GenModel(documentation="Identifies a code system that is supported by the server. If there is a no code system URL, then this declares the general assumptions a client can make about support for any CodeSystem resource.")
	@ExtendedMetaData(kind="element", name="codeSystem", namespace="##targetNamespace")
	!resolve val TerminologyCapabilitiesCodeSystem[*] codeSystem;

	@GenModel(documentation="Information about the [ValueSet/$expand](valueset-operation-expand.html) operation.")
	@ExtendedMetaData(kind="element", name="expansion", namespace="##targetNamespace")
	!resolve val TerminologyCapabilitiesExpansion expansion;

	@GenModel(documentation="The degree to which the server supports the code search parameter on ValueSet, if it is supported.")
	@ExtendedMetaData(kind="element", name="codeSearch", namespace="##targetNamespace")
	!resolve val CodeSearchSupport codeSearch;

	@GenModel(documentation="Information about the [ValueSet/$validate-code](valueset-operation-validate-code.html) operation.")
	@ExtendedMetaData(kind="element", name="validateCode", namespace="##targetNamespace")
	!resolve val TerminologyCapabilitiesValidateCode validateCode;

	@GenModel(documentation="Information about the [ConceptMap/$translate](conceptmap-operation-translate.html) operation.")
	@ExtendedMetaData(kind="element", name="translation", namespace="##targetNamespace")
	!resolve val TerminologyCapabilitiesTranslation translation;

	@GenModel(documentation="Whether the $closure operation is supported.")
	@ExtendedMetaData(kind="element", name="closure", namespace="##targetNamespace")
	!resolve val TerminologyCapabilitiesClosure closure;
}

@GenModel(documentation="A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.")
@ExtendedMetaData(name="TerminologyCapabilities.Closure", kind="elementOnly")
class TerminologyCapabilitiesClosure extends BackboneElement {

	@GenModel(documentation="If cross-system closure is supported.")
	@ExtendedMetaData(kind="element", name="translation", namespace="##targetNamespace")
	!resolve val Boolean translation;
}

@GenModel(documentation="A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.")
@ExtendedMetaData(name="TerminologyCapabilities.CodeSystem", kind="elementOnly")
class TerminologyCapabilitiesCodeSystem extends BackboneElement {

	@GenModel(documentation="Canonical identifier for the code system, represented as a URI.")
	@ExtendedMetaData(kind="element", name="uri", namespace="##targetNamespace")
	!resolve val Canonical uri;

	@GenModel(documentation="For the code system, a list of versions that are supported by the server.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val TerminologyCapabilitiesVersion[*] version;

	@GenModel(documentation="The extent of the content of the code system (the concepts and codes it defines) are represented in this resource instance.")
	@ExtendedMetaData(kind="element", name="content", namespace="##targetNamespace")
	!resolve val CodeSystemContentMode[1] content;

	@GenModel(documentation="True if subsumption is supported for this version of the code system.")
	@ExtendedMetaData(kind="element", name="subsumption", namespace="##targetNamespace")
	!resolve val Boolean subsumption;
}

@GenModel(documentation="A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.")
@ExtendedMetaData(name="TerminologyCapabilities.Expansion", kind="elementOnly")
class TerminologyCapabilitiesExpansion extends BackboneElement {

	@GenModel(documentation="Whether the server can return nested value sets.")
	@ExtendedMetaData(kind="element", name="hierarchical", namespace="##targetNamespace")
	!resolve val Boolean hierarchical;

	@GenModel(documentation="Whether the server supports paging on expansion.")
	@ExtendedMetaData(kind="element", name="paging", namespace="##targetNamespace")
	!resolve val Boolean paging;

	@GenModel(documentation="True if requests for incomplete expansions are allowed.")
	@ExtendedMetaData(kind="element", name="incomplete", namespace="##targetNamespace")
	!resolve val Boolean incomplete;

	@GenModel(documentation="Supported expansion parameter.")
	@ExtendedMetaData(kind="element", name="parameter", namespace="##targetNamespace")
	!resolve val TerminologyCapabilitiesParameter[*] parameter;

	@GenModel(documentation="Documentation about text searching works.")
	@ExtendedMetaData(kind="element", name="textFilter", namespace="##targetNamespace")
	!resolve val Markdown textFilter;
}

@GenModel(documentation="A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.")
@ExtendedMetaData(name="TerminologyCapabilities.Filter", kind="elementOnly")
class TerminologyCapabilitiesFilter extends BackboneElement {

	@GenModel(documentation="Code of the property supported.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val Code[1] code;

	@GenModel(documentation="Operations supported for the property.")
	@ExtendedMetaData(kind="element", name="op", namespace="##targetNamespace")
	!resolve val Code[+] ~op;
}

@GenModel(documentation="A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.")
@ExtendedMetaData(name="TerminologyCapabilities.Implementation", kind="elementOnly")
class TerminologyCapabilitiesImplementation extends BackboneElement {

	@GenModel(documentation="Information about the specific installation that this terminology capability statement relates to.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val String[1] description;

	@GenModel(documentation="An absolute base URL for the implementation.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Url url;
}

@GenModel(documentation="A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.")
@ExtendedMetaData(name="TerminologyCapabilities.Parameter", kind="elementOnly")
class TerminologyCapabilitiesParameter extends BackboneElement {

	@GenModel(documentation="Name of the supported expansion parameter.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val Code[1] name;

	@GenModel(documentation="Description of support for parameter.")
	@ExtendedMetaData(kind="element", name="documentation", namespace="##targetNamespace")
	!resolve val String documentation;
}

@GenModel(documentation="A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.")
@ExtendedMetaData(name="TerminologyCapabilities.Software", kind="elementOnly")
class TerminologyCapabilitiesSoftware extends BackboneElement {

	@GenModel(documentation="Name the software is known by.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String[1] name;

	@GenModel(documentation="The version identifier for the software covered by this statement.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;
}

@GenModel(documentation="A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.")
@ExtendedMetaData(name="TerminologyCapabilities.Translation", kind="elementOnly")
class TerminologyCapabilitiesTranslation extends BackboneElement {

	@GenModel(documentation="Whether the client must identify the map.")
	@ExtendedMetaData(kind="element", name="needsMap", namespace="##targetNamespace")
	!resolve val Boolean[1] needsMap;
}

@GenModel(documentation="A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.")
@ExtendedMetaData(name="TerminologyCapabilities.ValidateCode", kind="elementOnly")
class TerminologyCapabilitiesValidateCode extends BackboneElement {

	@GenModel(documentation="Whether translations are validated.")
	@ExtendedMetaData(kind="element", name="translations", namespace="##targetNamespace")
	!resolve val Boolean[1] translations;
}

@GenModel(documentation="A TerminologyCapabilities resource documents a set of capabilities (behaviors) of a FHIR Terminology Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.")
@ExtendedMetaData(name="TerminologyCapabilities.Version", kind="elementOnly")
class TerminologyCapabilitiesVersion extends BackboneElement {

	@GenModel(documentation="For version-less code systems, there should be a single version with no identifier.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val String code;

	@GenModel(documentation="If this is the default version for this code system.")
	@ExtendedMetaData(kind="element", name="isDefault", namespace="##targetNamespace")
	!resolve val Boolean isDefault;

	@GenModel(documentation="If the compositional grammar defined by the code system is supported.")
	@ExtendedMetaData(kind="element", name="compositional", namespace="##targetNamespace")
	!resolve val Boolean compositional;

	@GenModel(documentation="Language Displays supported.")
	@ExtendedMetaData(kind="element", name="language", namespace="##targetNamespace")
	!resolve val CommonLanguages[*] language;

	@GenModel(documentation="Filter Properties supported.")
	@ExtendedMetaData(kind="element", name="filter", namespace="##targetNamespace")
	!resolve val TerminologyCapabilitiesFilter[*] filter;

	@GenModel(documentation="Properties supported for $lookup.")
	@ExtendedMetaData(kind="element", name="property", namespace="##targetNamespace")
	!resolve val Code[*] property;
}

@GenModel(documentation="A plan for executing testing on an artifact or specifications.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="TestPlan", kind="elementOnly")
class TestPlan extends CanonicalResource {

	@GenModel(documentation="An absolute URI that is used to identify this test plan when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this test plan is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the test plan is stored on different servers.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri url;

	@GenModel(documentation="A formal identifier that is used to identify this test plan when it is represented in other formats, or referenced in a specification, model, design or an instance.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The identifier that is used to identify this version of the test plan when it is referenced in a specification, model, design or instance.  This is an arbitrary value managed by the test plan author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@ExtendedMetaData(kind="element", name="versionAlgorithmString", namespace="##targetNamespace")
	!resolve val String versionAlgorithmString;

	@ExtendedMetaData(kind="element", name="versionAlgorithmCoding", namespace="##targetNamespace")
	!resolve val Coding versionAlgorithmCoding;

	@GenModel(documentation="A natural language name identifying the test plan. This name should be usable as an identifier for the module by machine processing applications such as code generation.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="A short, descriptive, user-friendly title for the test plan.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="The status of this test plan. Enables tracking the life-cycle of the content.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="A Boolean value to indicate that this test plan is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.")
	@ExtendedMetaData(kind="element", name="experimental", namespace="##targetNamespace")
	!resolve val Boolean experimental;

	@GenModel(documentation="The date (and optionally time) when the test plan was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the test plan changes.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="The name of the organization or individual responsible for the release and ongoing maintenance of the test plan.")
	@ExtendedMetaData(kind="element", name="publisher", namespace="##targetNamespace")
	!resolve val String publisher;

	@GenModel(documentation="Contact details to assist a user in finding and communicating with the publisher.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactDetail[*] contact;

	@GenModel(documentation="A free text natural language description of the test plan from a consumer's perspective.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate test plan instances.")
	@ExtendedMetaData(kind="element", name="useContext", namespace="##targetNamespace")
	!resolve val UsageContext[*] useContext;

	@GenModel(documentation="A legal or geographic region in which the test plan is intended to be used.")
	@ExtendedMetaData(kind="element", name="jurisdiction", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] jurisdiction;

	@GenModel(documentation="Explanation of why this test plan is needed and why it has been designed as it has.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val Markdown purpose;

	@GenModel(documentation="A copyright statement relating to the test plan and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the test plan. The short copyright declaration (e.g. (c) '2015+ xyz organization' should be sent in the copyrightLabel element.")
	@ExtendedMetaData(kind="element", name="copyright", namespace="##targetNamespace")
	!resolve val Markdown copyright;

	@GenModel(documentation="A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').")
	@ExtendedMetaData(kind="element", name="copyrightLabel", namespace="##targetNamespace")
	!resolve val String copyrightLabel;

	@GenModel(documentation="The category of the Test Plan - can be acceptance, unit, performance, etc.")
	@ExtendedMetaData(kind="element", name="category", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] category;

	@GenModel(documentation="What is being tested with this Test Plan - a conformance resource, or narrative criteria, or an external reference...")
	@ExtendedMetaData(kind="element", name="scope", namespace="##targetNamespace")
	!resolve val Reference[*] scope;

	@GenModel(documentation="A description of test tools to be used in the test plan.")
	@ExtendedMetaData(kind="element", name="testTools", namespace="##targetNamespace")
	!resolve val Markdown testTools;

	@GenModel(documentation="The required criteria to execute the test plan - e.g. preconditions, previous tests...")
	@ExtendedMetaData(kind="element", name="dependency", namespace="##targetNamespace")
	!resolve val TestPlanDependency[*] dependency;

	@GenModel(documentation="The threshold or criteria for the test plan to be considered successfully executed - narrative.")
	@ExtendedMetaData(kind="element", name="exitCriteria", namespace="##targetNamespace")
	!resolve val Markdown exitCriteria;

	@GenModel(documentation="The individual test cases that are part of this plan, when they they are made explicit.")
	@ExtendedMetaData(kind="element", name="testCase", namespace="##targetNamespace")
	!resolve val TestPlanTestCase[*] testCase;
}

@GenModel(documentation="A plan for executing testing on an artifact or specifications.")
@ExtendedMetaData(name="TestPlan.Assertion", kind="elementOnly")
class TestPlanAssertion extends BackboneElement {

	@GenModel(documentation="The test assertion type - this can be used to group assertions as 'required' or 'optional', or can be used for other classification of the assertion.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] type;

	@GenModel(documentation="The focus or object of the assertion i.e. a resource.")
	@ExtendedMetaData(kind="element", name="object", namespace="##targetNamespace")
	!resolve val CodeableReference[*] object;

	@GenModel(documentation="The test assertion - the expected outcome from the test case execution.")
	@ExtendedMetaData(kind="element", name="result", namespace="##targetNamespace")
	!resolve val CodeableReference[*] result;
}

@GenModel(documentation="A plan for executing testing on an artifact or specifications.")
@ExtendedMetaData(name="TestPlan.Dependency", kind="elementOnly")
class TestPlanDependency extends BackboneElement {

	@GenModel(documentation="A textual description of the criterium - what is needed for the dependency to be considered met.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="Predecessor test plans - those that are expected to be successfully performed as a dependency for the execution of this test plan.")
	@ExtendedMetaData(kind="element", name="predecessor", namespace="##targetNamespace")
	!resolve val Reference predecessor;
}

@GenModel(documentation="A plan for executing testing on an artifact or specifications.")
@ExtendedMetaData(name="TestPlan.Dependency1", kind="elementOnly")
class TestPlanDependency1 extends BackboneElement {

	@GenModel(documentation="Description of the criteria.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="Link to predecessor test plans.")
	@ExtendedMetaData(kind="element", name="predecessor", namespace="##targetNamespace")
	!resolve val Reference predecessor;
}

@GenModel(documentation="A plan for executing testing on an artifact or specifications.")
@ExtendedMetaData(name="TestPlan.Script", kind="elementOnly")
class TestPlanScript extends BackboneElement {

	@GenModel(documentation="The language for the test cases e.g. 'gherkin', 'testscript'.")
	@ExtendedMetaData(kind="element", name="language", namespace="##targetNamespace")
	!resolve val CodeableConcept language;

	@ExtendedMetaData(kind="element", name="sourceString", namespace="##targetNamespace")
	!resolve val String sourceString;

	@ExtendedMetaData(kind="element", name="sourceReference", namespace="##targetNamespace")
	!resolve val Reference sourceReference;
}

@GenModel(documentation="A plan for executing testing on an artifact or specifications.")
@ExtendedMetaData(name="TestPlan.TestCase", kind="elementOnly")
class TestPlanTestCase extends BackboneElement {

	@GenModel(documentation="Sequence of test case - an ordinal number that indicates the order for the present test case in the test plan.")
	@ExtendedMetaData(kind="element", name="sequence", namespace="##targetNamespace")
	!resolve val Integer sequence;

	@GenModel(documentation="The scope or artifact covered by the case, when the individual test case is associated with a testable artifact.")
	@ExtendedMetaData(kind="element", name="scope", namespace="##targetNamespace")
	!resolve val Reference[*] scope;

	@GenModel(documentation="The required criteria to execute the test case - e.g. preconditions, previous tests.")
	@ExtendedMetaData(kind="element", name="dependency", namespace="##targetNamespace")
	!resolve val TestPlanDependency1[*] dependency;

	@GenModel(documentation="The actual test to be executed.")
	@ExtendedMetaData(kind="element", name="testRun", namespace="##targetNamespace")
	!resolve val TestPlanTestRun[*] testRun;

	@GenModel(documentation="The test data used in the test case.")
	@ExtendedMetaData(kind="element", name="testData", namespace="##targetNamespace")
	!resolve val TestPlanTestData[*] testData;

	@GenModel(documentation="The test assertions - the expectations of test results from the execution of the test case.")
	@ExtendedMetaData(kind="element", name="assertion", namespace="##targetNamespace")
	!resolve val TestPlanAssertion[*] assertion;
}

@GenModel(documentation="A plan for executing testing on an artifact or specifications.")
@ExtendedMetaData(name="TestPlan.TestData", kind="elementOnly")
class TestPlanTestData extends BackboneElement {

	@GenModel(documentation="The type of test data description, e.g. 'synthea'.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val Coding[1] type;

	@GenModel(documentation="The actual test resources when they exist.")
	@ExtendedMetaData(kind="element", name="content", namespace="##targetNamespace")
	!resolve val Reference content;

	@ExtendedMetaData(kind="element", name="sourceString", namespace="##targetNamespace")
	!resolve val String sourceString;

	@ExtendedMetaData(kind="element", name="sourceReference", namespace="##targetNamespace")
	!resolve val Reference sourceReference;
}

@GenModel(documentation="A plan for executing testing on an artifact or specifications.")
@ExtendedMetaData(name="TestPlan.TestRun", kind="elementOnly")
class TestPlanTestRun extends BackboneElement {

	@GenModel(documentation="The narrative description of the tests.")
	@ExtendedMetaData(kind="element", name="narrative", namespace="##targetNamespace")
	!resolve val Markdown narrative;

	@GenModel(documentation="The test cases in a structured language e.g. gherkin, Postman, or FHIR TestScript.")
	@ExtendedMetaData(kind="element", name="script", namespace="##targetNamespace")
	!resolve val TestPlanScript script;
}

@GenModel(documentation="A summary of information based on the results of executing a TestScript.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="TestReport", kind="elementOnly")
class TestReport extends DomainResource {

	@GenModel(documentation="Identifier for the TestReport assigned for external purposes outside the context of FHIR.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier identifier;

	@GenModel(documentation="A free text natural language name identifying the executed TestReport.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="The current state of this test report.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val TestReportStatus[1] status;

	@GenModel(documentation="Ideally this is an absolute URL that is used to identify the version-specific TestScript that was executed, matching the `TestScript.url`.")
	@ExtendedMetaData(kind="element", name="testScript", namespace="##targetNamespace")
	!resolve val Canonical[1] testScript;

	@GenModel(documentation="The overall result from the execution of the TestScript.")
	@ExtendedMetaData(kind="element", name="result", namespace="##targetNamespace")
	!resolve val TestReportResult[1] result;

	@GenModel(documentation="The final score (percentage of tests passed) resulting from the execution of the TestScript.")
	@ExtendedMetaData(kind="element", name="score", namespace="##targetNamespace")
	!resolve val Decimal score;

	@GenModel(documentation="Name of the tester producing this report (Organization or individual).")
	@ExtendedMetaData(kind="element", name="tester", namespace="##targetNamespace")
	!resolve val String tester;

	@GenModel(documentation="When the TestScript was executed and this TestReport was generated.")
	@ExtendedMetaData(kind="element", name="issued", namespace="##targetNamespace")
	!resolve val DateTime issued;

	@GenModel(documentation="A participant in the test execution, either the execution engine, a client, or a server.")
	@ExtendedMetaData(kind="element", name="participant", namespace="##targetNamespace")
	!resolve val TestReportParticipant[*] participant;

	@GenModel(documentation="The results of the series of required setup operations before the tests were executed.")
	@ExtendedMetaData(kind="element", name="setup", namespace="##targetNamespace")
	!resolve val TestReportSetup setup;

	@GenModel(documentation="A test executed from the test script.")
	@ExtendedMetaData(kind="element", name="test", namespace="##targetNamespace")
	!resolve val TestReportTest[*] test;

	@GenModel(documentation="The results of the series of operations required to clean up after all the tests were executed (successfully or otherwise).")
	@ExtendedMetaData(kind="element", name="teardown", namespace="##targetNamespace")
	!resolve val TestReportTeardown teardown;
}

@GenModel(documentation="A summary of information based on the results of executing a TestScript.")
@ExtendedMetaData(name="TestReport.Action", kind="elementOnly")
class TestReportAction extends BackboneElement {

	@GenModel(documentation="The operation performed.")
	@ExtendedMetaData(kind="element", name="operation", namespace="##targetNamespace")
	!resolve val TestReportOperation operation;

	@GenModel(documentation="The results of the assertion performed on the previous operations.")
	@ExtendedMetaData(kind="element", name="assert", namespace="##targetNamespace")
	!resolve val TestReportAssert assert;
}

@GenModel(documentation="A summary of information based on the results of executing a TestScript.")
@ExtendedMetaData(name="TestReport.Action1", kind="elementOnly")
class TestReportAction1 extends BackboneElement {

	@GenModel(documentation="An operation would involve a REST request to a server.")
	@ExtendedMetaData(kind="element", name="operation", namespace="##targetNamespace")
	!resolve val TestReportOperation operation;

	@GenModel(documentation="The results of the assertion performed on the previous operations.")
	@ExtendedMetaData(kind="element", name="assert", namespace="##targetNamespace")
	!resolve val TestReportAssert assert;
}

@GenModel(documentation="A summary of information based on the results of executing a TestScript.")
@ExtendedMetaData(name="TestReport.Action2", kind="elementOnly")
class TestReportAction2 extends BackboneElement {

	@GenModel(documentation="An operation would involve a REST request to a server.")
	@ExtendedMetaData(kind="element", name="operation", namespace="##targetNamespace")
	!resolve val TestReportOperation[1] operation;
}

@GenModel(documentation="The results of executing an action.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="TestReportActionResult", kind="elementOnly")
class TestReportActionResult extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr TestReportActionResultEnum value;
}

@ExtendedMetaData(name="TestReportActionResultEnum")
enum TestReportActionResultEnum {

	@GenModel(documentation="Pass")
	pass = 0;

	@GenModel(documentation="Skip")
	skip = 1;

	@GenModel(documentation="Fail")
	fail = 2;

	@GenModel(documentation="Warning")
	warning = 3;

	@GenModel(documentation="Error")
	error = 4;
}

@ExtendedMetaData(name="TestReportActionResultEnum:Object", baseType="TestReportActionResultEnum")
datatype TestReportActionResultEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A summary of information based on the results of executing a TestScript.")
@ExtendedMetaData(name="TestReport.Assert", kind="elementOnly")
class TestReportAssert extends BackboneElement {

	@GenModel(documentation="The result of this assertion.")
	@ExtendedMetaData(kind="element", name="result", namespace="##targetNamespace")
	!resolve val TestReportActionResult[1] result;

	@GenModel(documentation="An explanatory message associated with the result.")
	@ExtendedMetaData(kind="element", name="message", namespace="##targetNamespace")
	!resolve val Markdown message;

	@GenModel(documentation="A link to further details on the result.")
	@ExtendedMetaData(kind="element", name="detail", namespace="##targetNamespace")
	!resolve val String detail;

	@GenModel(documentation="Links or references providing traceability to the testing requirements for this assert.")
	@ExtendedMetaData(kind="element", name="requirement", namespace="##targetNamespace")
	!resolve val TestReportRequirement[*] requirement;
}

@GenModel(documentation="A summary of information based on the results of executing a TestScript.")
@ExtendedMetaData(name="TestReport.Operation", kind="elementOnly")
class TestReportOperation extends BackboneElement {

	@GenModel(documentation="The result of this operation.")
	@ExtendedMetaData(kind="element", name="result", namespace="##targetNamespace")
	!resolve val TestReportActionResult[1] result;

	@GenModel(documentation="An explanatory message associated with the result.")
	@ExtendedMetaData(kind="element", name="message", namespace="##targetNamespace")
	!resolve val Markdown message;

	@GenModel(documentation="A link to further details on the result.")
	@ExtendedMetaData(kind="element", name="detail", namespace="##targetNamespace")
	!resolve val Uri detail;
}

@GenModel(documentation="A summary of information based on the results of executing a TestScript.")
@ExtendedMetaData(name="TestReport.Participant", kind="elementOnly")
class TestReportParticipant extends BackboneElement {

	@GenModel(documentation="The type of participant.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val TestReportParticipantType[1] type;

	@GenModel(documentation="The uri of the participant. An absolute URL is preferred.")
	@ExtendedMetaData(kind="element", name="uri", namespace="##targetNamespace")
	!resolve val Uri[1] uri;

	@GenModel(documentation="The display name of the participant.")
	@ExtendedMetaData(kind="element", name="display", namespace="##targetNamespace")
	!resolve val String display;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="TestReportParticipantType", kind="elementOnly")
class TestReportParticipantType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr TestReportParticipantTypeEnum value;
}

@ExtendedMetaData(name="TestReportParticipantTypeEnum")
enum TestReportParticipantTypeEnum {

	@GenModel(documentation="Test Engine")
	testEngine = 0;

	@GenModel(documentation="Client")
	client = 1;

	@GenModel(documentation="Server")
	server = 2;
}

@ExtendedMetaData(name="TestReportParticipantTypeEnum:Object", baseType="TestReportParticipantTypeEnum")
datatype TestReportParticipantTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A summary of information based on the results of executing a TestScript.")
@ExtendedMetaData(name="TestReport.Requirement", kind="elementOnly")
class TestReportRequirement extends BackboneElement {

	@ExtendedMetaData(kind="element", name="linkUri", namespace="##targetNamespace")
	!resolve val Uri linkUri;

	@ExtendedMetaData(kind="element", name="linkCanonical", namespace="##targetNamespace")
	!resolve val Canonical linkCanonical;
}

@GenModel(documentation="The reported execution result.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="TestReportResult", kind="elementOnly")
class TestReportResult extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr TestReportResultEnum value;
}

@ExtendedMetaData(name="TestReportResultEnum")
enum TestReportResultEnum {

	@GenModel(documentation="Pass")
	pass = 0;

	@GenModel(documentation="Fail")
	fail = 1;

	@GenModel(documentation="Pending")
	pending = 2;
}

@ExtendedMetaData(name="TestReportResultEnum:Object", baseType="TestReportResultEnum")
datatype TestReportResultEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A summary of information based on the results of executing a TestScript.")
@ExtendedMetaData(name="TestReport.Setup", kind="elementOnly")
class TestReportSetup extends BackboneElement {

	@GenModel(documentation="Action would contain either an operation or an assertion.")
	@ExtendedMetaData(kind="element", name="action", namespace="##targetNamespace")
	!resolve val TestReportAction[+] action;
}

@GenModel(documentation="The current status of the test report.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="TestReportStatus", kind="elementOnly")
class TestReportStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr TestReportStatusEnum value;
}

@ExtendedMetaData(name="TestReportStatusEnum")
enum TestReportStatusEnum {

	@GenModel(documentation="Completed")
	completed = 0;

	@GenModel(documentation="In Progress")
	inProgress = 1;

	@GenModel(documentation="Waiting")
	waiting = 2;

	@GenModel(documentation="Stopped")
	stopped = 3;

	@GenModel(documentation="Entered In Error")
	enteredInError = 4;
}

@ExtendedMetaData(name="TestReportStatusEnum:Object", baseType="TestReportStatusEnum")
datatype TestReportStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A summary of information based on the results of executing a TestScript.")
@ExtendedMetaData(name="TestReport.Teardown", kind="elementOnly")
class TestReportTeardown extends BackboneElement {

	@GenModel(documentation="The teardown action will only contain an operation.")
	@ExtendedMetaData(kind="element", name="action", namespace="##targetNamespace")
	!resolve val TestReportAction2[+] action;
}

@GenModel(documentation="A summary of information based on the results of executing a TestScript.")
@ExtendedMetaData(name="TestReport.Test", kind="elementOnly")
class TestReportTest extends BackboneElement {

	@GenModel(documentation="The name of this test used for tracking/logging purposes by test engines.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="A short description of the test used by test engines for tracking and reporting purposes.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val String description;

	@GenModel(documentation="Action would contain either an operation or an assertion.")
	@ExtendedMetaData(kind="element", name="action", namespace="##targetNamespace")
	!resolve val TestReportAction1[+] action;
}

@GenModel(documentation="A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="TestScript", kind="elementOnly")
class TestScript extends CanonicalResource {

	@GenModel(documentation="An absolute URI that is used to identify this test script when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this test script is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the test script is stored on different servers.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri url;

	@GenModel(documentation="A formal identifier that is used to identify this test script when it is represented in other formats, or referenced in a specification, model, design or an instance.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The identifier that is used to identify this version of the test script when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the test script author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@ExtendedMetaData(kind="element", name="versionAlgorithmString", namespace="##targetNamespace")
	!resolve val String versionAlgorithmString;

	@ExtendedMetaData(kind="element", name="versionAlgorithmCoding", namespace="##targetNamespace")
	!resolve val Coding versionAlgorithmCoding;

	@GenModel(documentation="A natural language name identifying the test script. This name should be usable as an identifier for the module by machine processing applications such as code generation.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String[1] name;

	@GenModel(documentation="A short, descriptive, user-friendly title for the test script.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="The status of this test script. Enables tracking the life-cycle of the content.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="A Boolean value to indicate that this test script is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.")
	@ExtendedMetaData(kind="element", name="experimental", namespace="##targetNamespace")
	!resolve val Boolean experimental;

	@GenModel(documentation="The date (and optionally time) when the test script was last significantly changed. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the test script changes.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="The name of the organization or individual responsible for the release and ongoing maintenance of the test script.")
	@ExtendedMetaData(kind="element", name="publisher", namespace="##targetNamespace")
	!resolve val String publisher;

	@GenModel(documentation="Contact details to assist a user in finding and communicating with the publisher.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactDetail[*] contact;

	@GenModel(documentation="A free text natural language description of the test script from a consumer's perspective.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate test script instances.")
	@ExtendedMetaData(kind="element", name="useContext", namespace="##targetNamespace")
	!resolve val UsageContext[*] useContext;

	@GenModel(documentation="A legal or geographic region in which the test script is intended to be used.")
	@ExtendedMetaData(kind="element", name="jurisdiction", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] jurisdiction;

	@GenModel(documentation="Explanation of why this test script is needed and why it has been designed as it has.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val Markdown purpose;

	@GenModel(documentation="A copyright statement relating to the test script and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the test script.")
	@ExtendedMetaData(kind="element", name="copyright", namespace="##targetNamespace")
	!resolve val Markdown copyright;

	@GenModel(documentation="A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').")
	@ExtendedMetaData(kind="element", name="copyrightLabel", namespace="##targetNamespace")
	!resolve val String copyrightLabel;

	@GenModel(documentation="An abstract server used in operations within this test script in the origin element.")
	@ExtendedMetaData(kind="element", name="origin", namespace="##targetNamespace")
	!resolve val TestScriptOrigin[*] origin;

	@GenModel(documentation="An abstract server used in operations within this test script in the destination element.")
	@ExtendedMetaData(kind="element", name="destination", namespace="##targetNamespace")
	!resolve val TestScriptDestination[*] destination;

	@GenModel(documentation="The required capability must exist and are assumed to function correctly on the FHIR server being tested.")
	@ExtendedMetaData(kind="element", name="metadata", namespace="##targetNamespace")
	!resolve val TestScriptMetadata metadata;

	@GenModel(documentation="The scope indicates a conformance artifact that is tested by the test(s) within this test case and the expectation of the test outcome(s) as well as the intended test phase inclusion.")
	@ExtendedMetaData(kind="element", name="scope", namespace="##targetNamespace")
	!resolve val TestScriptScope[*] scope;

	@GenModel(documentation="Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.")
	@ExtendedMetaData(kind="element", name="fixture", namespace="##targetNamespace")
	!resolve val TestScriptFixture[*] fixture;

	@GenModel(documentation="Reference to the profile to be used for validation.")
	@ExtendedMetaData(kind="element", name="profile", namespace="##targetNamespace")
	!resolve val Canonical[*] profile;

	@GenModel(documentation="Variable is set based either on element value in response body or on header field value in the response headers.")
	@ExtendedMetaData(kind="element", name="variable", namespace="##targetNamespace")
	!resolve val TestScriptVariable[*] variable;

	@GenModel(documentation="A series of required setup operations before tests are executed.")
	@ExtendedMetaData(kind="element", name="setup", namespace="##targetNamespace")
	!resolve val TestScriptSetup setup;

	@GenModel(documentation="A test in this script.")
	@ExtendedMetaData(kind="element", name="test", namespace="##targetNamespace")
	!resolve val TestScriptTest[*] test;

	@GenModel(documentation="A series of operations required to clean up after all the tests are executed (successfully or otherwise).")
	@ExtendedMetaData(kind="element", name="teardown", namespace="##targetNamespace")
	!resolve val TestScriptTeardown teardown;
}

@GenModel(documentation="A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.")
@ExtendedMetaData(name="TestScript.Action", kind="elementOnly")
class TestScriptAction extends BackboneElement {

	@GenModel(documentation="The operation to perform.")
	@ExtendedMetaData(kind="element", name="operation", namespace="##targetNamespace")
	!resolve val TestScriptOperation operation;

	@GenModel(documentation="Evaluates the results of previous operations to determine if the server under test behaves appropriately.")
	@ExtendedMetaData(kind="element", name="assert", namespace="##targetNamespace")
	!resolve val TestScriptAssert assert;
}

@GenModel(documentation="A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.")
@ExtendedMetaData(name="TestScript.Action1", kind="elementOnly")
class TestScriptAction1 extends BackboneElement {

	@GenModel(documentation="An operation would involve a REST request to a server.")
	@ExtendedMetaData(kind="element", name="operation", namespace="##targetNamespace")
	!resolve val TestScriptOperation operation;

	@GenModel(documentation="Evaluates the results of previous operations to determine if the server under test behaves appropriately.")
	@ExtendedMetaData(kind="element", name="assert", namespace="##targetNamespace")
	!resolve val TestScriptAssert assert;
}

@GenModel(documentation="A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.")
@ExtendedMetaData(name="TestScript.Action2", kind="elementOnly")
class TestScriptAction2 extends BackboneElement {

	@GenModel(documentation="An operation would involve a REST request to a server.")
	@ExtendedMetaData(kind="element", name="operation", namespace="##targetNamespace")
	!resolve val TestScriptOperation[1] operation;
}

@GenModel(documentation="A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.")
@ExtendedMetaData(name="TestScript.Assert", kind="elementOnly")
class TestScriptAssert extends BackboneElement {

	@GenModel(documentation="The label would be used for tracking/logging purposes by test engines.")
	@ExtendedMetaData(kind="element", name="label", namespace="##targetNamespace")
	!resolve val String label;

	@GenModel(documentation="The description would be used by test engines for tracking and reporting purposes.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val String description;

	@GenModel(documentation="The direction to use for the assertion.")
	@ExtendedMetaData(kind="element", name="direction", namespace="##targetNamespace")
	!resolve val AssertionDirectionType direction;

	@GenModel(documentation="Id of the source fixture used as the contents to be evaluated by either the \"source/expression\" or \"sourceId/path\" definition.")
	@ExtendedMetaData(kind="element", name="compareToSourceId", namespace="##targetNamespace")
	!resolve val String compareToSourceId;

	@GenModel(documentation="The FHIRPath expression for a specific value to evaluate against the source fixture. When compareToSourceId is defined, either compareToSourceExpression or compareToSourcePath must be defined, but not both.")
	@ExtendedMetaData(kind="element", name="compareToSourceExpression", namespace="##targetNamespace")
	!resolve val String compareToSourceExpression;

	@GenModel(documentation="XPath or JSONPath expression to evaluate against the source fixture. When compareToSourceId is defined, either compareToSourceExpression or compareToSourcePath must be defined, but not both.")
	@ExtendedMetaData(kind="element", name="compareToSourcePath", namespace="##targetNamespace")
	!resolve val String compareToSourcePath;

	@GenModel(documentation="The mime-type contents to compare against the request or response message 'Content-Type' header.")
	@ExtendedMetaData(kind="element", name="contentType", namespace="##targetNamespace")
	!resolve val Code contentType;

	@GenModel(documentation="The default manual completion outcome applied to this assertion.")
	@ExtendedMetaData(kind="element", name="defaultManualCompletion", namespace="##targetNamespace")
	!resolve val AssertionManualCompletionType defaultManualCompletion;

	@GenModel(documentation="The FHIRPath expression to be evaluated against the request or response message contents - HTTP headers and payload.")
	@ExtendedMetaData(kind="element", name="expression", namespace="##targetNamespace")
	!resolve val String expression;

	@GenModel(documentation="The HTTP header field name e.g. 'Location'.")
	@ExtendedMetaData(kind="element", name="headerField", namespace="##targetNamespace")
	!resolve val String headerField;

	@GenModel(documentation="The ID of a fixture. Asserts that the response contains at a minimum the fixture specified by minimumId.")
	@ExtendedMetaData(kind="element", name="minimumId", namespace="##targetNamespace")
	!resolve val String minimumId;

	@GenModel(documentation="Whether or not the test execution performs validation on the bundle navigation links.")
	@ExtendedMetaData(kind="element", name="navigationLinks", namespace="##targetNamespace")
	!resolve val Boolean navigationLinks;

	@GenModel(documentation="The operator type defines the conditional behavior of the assert.")
	@ExtendedMetaData(kind="element", name="operator", namespace="##targetNamespace")
	!resolve val AssertionOperatorType operator;

	@GenModel(documentation="The XPath or JSONPath expression to be evaluated against the fixture representing the response received from server.")
	@ExtendedMetaData(kind="element", name="path", namespace="##targetNamespace")
	!resolve val String path;

	@GenModel(documentation="The request method or HTTP operation code to compare against that used by the client system under test.")
	@ExtendedMetaData(kind="element", name="requestMethod", namespace="##targetNamespace")
	!resolve val TestScriptRequestMethodCode requestMethod;

	@GenModel(documentation="The value to use in a comparison against the request URL path string.")
	@ExtendedMetaData(kind="element", name="requestURL", namespace="##targetNamespace")
	!resolve val String requestURL;

	@GenModel(documentation="The type of the resource.  See the [resource list](resourcelist.html).")
	@ExtendedMetaData(kind="element", name="resource", namespace="##targetNamespace")
	!resolve val Uri resource;

	@GenModel(documentation="continue | switchingProtocols | okay | created | accepted | nonAuthoritativeInformation | noContent | resetContent | partialContent | multipleChoices | movedPermanently | found | seeOther | notModified | useProxy | temporaryRedirect | permanentRedirect | badRequest | unauthorized | paymentRequired | forbidden | notFound | methodNotAllowed | notAcceptable | proxyAuthenticationRequired | requestTimeout | conflict | gone | lengthRequired | preconditionFailed | contentTooLarge | uriTooLong | unsupportedMediaType | rangeNotSatisfiable | expectationFailed | misdirectedRequest | unprocessableContent | upgradeRequired | internalServerError | notImplemented | badGateway | serviceUnavailable | gatewayTimeout | httpVersionNotSupported.")
	@ExtendedMetaData(kind="element", name="response", namespace="##targetNamespace")
	!resolve val AssertionResponseTypes response;

	@GenModel(documentation="The value of the HTTP response code to be tested.")
	@ExtendedMetaData(kind="element", name="responseCode", namespace="##targetNamespace")
	!resolve val String responseCode;

	@GenModel(documentation="Fixture to evaluate the XPath/JSONPath expression or the headerField  against.")
	@ExtendedMetaData(kind="element", name="sourceId", namespace="##targetNamespace")
	!resolve val Id sourceId;

	@GenModel(documentation="Whether or not the current test execution will stop on failure for this assert.")
	@ExtendedMetaData(kind="element", name="stopTestOnFail", namespace="##targetNamespace")
	!resolve val Boolean[1] stopTestOnFail;

	@GenModel(documentation="The ID of the Profile to validate against.")
	@ExtendedMetaData(kind="element", name="validateProfileId", namespace="##targetNamespace")
	!resolve val Id validateProfileId;

	@GenModel(documentation="The value to compare to.")
	@ExtendedMetaData(kind="element", name="value", namespace="##targetNamespace")
	!resolve val String value;

	@GenModel(documentation="Whether or not the test execution will produce a warning only on error for this assert.")
	@ExtendedMetaData(kind="element", name="warningOnly", namespace="##targetNamespace")
	!resolve val Boolean[1] warningOnly;

	@GenModel(documentation="Links or references providing traceability to the testing requirements for this assert.")
	@ExtendedMetaData(kind="element", name="requirement", namespace="##targetNamespace")
	!resolve val TestScriptRequirement[*] requirement;
}

@GenModel(documentation="A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.")
@ExtendedMetaData(name="TestScript.Capability", kind="elementOnly")
class TestScriptCapability extends BackboneElement {

	@GenModel(documentation="Whether or not the test execution will require the given capabilities of the server in order for this test script to execute.")
	@ExtendedMetaData(kind="element", name="required", namespace="##targetNamespace")
	!resolve val Boolean[1] required;

	@GenModel(documentation="Whether or not the test execution will validate the given capabilities of the server in order for this test script to execute.")
	@ExtendedMetaData(kind="element", name="validated", namespace="##targetNamespace")
	!resolve val Boolean[1] validated;

	@GenModel(documentation="Description of the capabilities that this test script is requiring the server to support.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val String description;

	@GenModel(documentation="Which origin server these requirements apply to.")
	@ExtendedMetaData(kind="element", name="origin", namespace="##targetNamespace")
	!resolve val Integer[*] origin;

	@GenModel(documentation="Which server these requirements apply to.")
	@ExtendedMetaData(kind="element", name="destination", namespace="##targetNamespace")
	!resolve val Integer destination;

	@GenModel(documentation="Links to the FHIR specification that describes this interaction and the resources involved in more detail.")
	@ExtendedMetaData(kind="element", name="link", namespace="##targetNamespace")
	!resolve val Uri[*] link;

	@GenModel(documentation="Minimum capabilities required of server for test script to execute successfully.   If server does not meet at a minimum the referenced capability statement, then all tests in this script are skipped.")
	@ExtendedMetaData(kind="element", name="capabilities", namespace="##targetNamespace")
	!resolve val Canonical[1] capabilities;
}

@GenModel(documentation="A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.")
@ExtendedMetaData(name="TestScript.Destination", kind="elementOnly")
class TestScriptDestination extends BackboneElement {

	@GenModel(documentation="Abstract name given to a destination server in this test script.  The name is provided as a number starting at 1.")
	@ExtendedMetaData(kind="element", name="index", namespace="##targetNamespace")
	!resolve val Integer[1] index;

	@GenModel(documentation="The type of destination profile the test system supports.")
	@ExtendedMetaData(kind="element", name="profile", namespace="##targetNamespace")
	!resolve val Coding[1] profile;

	@GenModel(documentation="The explicit url path of the destination server used in this test script.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Url url;
}

@GenModel(documentation="A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.")
@ExtendedMetaData(name="TestScript.Fixture", kind="elementOnly")
class TestScriptFixture extends BackboneElement {

	@GenModel(documentation="Whether or not to implicitly create the fixture during setup. If true, the fixture is automatically created on each server being tested during setup, therefore no create operation is required for this fixture in the TestScript.setup section.")
	@ExtendedMetaData(kind="element", name="autocreate", namespace="##targetNamespace")
	!resolve val Boolean[1] autocreate;

	@GenModel(documentation="Whether or not to implicitly delete the fixture during teardown. If true, the fixture is automatically deleted on each server being tested during teardown, therefore no delete operation is required for this fixture in the TestScript.teardown section.")
	@ExtendedMetaData(kind="element", name="autodelete", namespace="##targetNamespace")
	!resolve val Boolean[1] autodelete;

	@GenModel(documentation="Reference to the resource (containing the contents of the resource needed for operations). This is allowed to be a Parameters resource.")
	@ExtendedMetaData(kind="element", name="resource", namespace="##targetNamespace")
	!resolve val Reference resource;
}

@GenModel(documentation="A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.")
@ExtendedMetaData(name="TestScript.Link", kind="elementOnly")
class TestScriptLink extends BackboneElement {

	@GenModel(documentation="URL to a particular requirement or feature within the FHIR specification.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri[1] url;

	@GenModel(documentation="Short description of the link.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val String description;
}

@GenModel(documentation="A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.")
@ExtendedMetaData(name="TestScript.Metadata", kind="elementOnly")
class TestScriptMetadata extends BackboneElement {

	@GenModel(documentation="A link to the FHIR specification that this test is covering.")
	@ExtendedMetaData(kind="element", name="link", namespace="##targetNamespace")
	!resolve val TestScriptLink[*] link;

	@GenModel(documentation="Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.")
	@ExtendedMetaData(kind="element", name="capability", namespace="##targetNamespace")
	!resolve val TestScriptCapability[+] capability;
}

@GenModel(documentation="A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.")
@ExtendedMetaData(name="TestScript.Operation", kind="elementOnly")
class TestScriptOperation extends BackboneElement {

	@GenModel(documentation="Server interaction or operation type.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val Coding type;

	@GenModel(documentation="The type of the FHIR resource. See the [resource list](resourcelist.html). Data type of uri is needed when non-HL7 artifacts are identified.")
	@ExtendedMetaData(kind="element", name="resource", namespace="##targetNamespace")
	!resolve val Uri resource;

	@GenModel(documentation="The label would be used for tracking/logging purposes by test engines.")
	@ExtendedMetaData(kind="element", name="label", namespace="##targetNamespace")
	!resolve val String label;

	@GenModel(documentation="The description would be used by test engines for tracking and reporting purposes.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val String description;

	@GenModel(documentation="The mime-type to use for RESTful operation in the 'Accept' header.")
	@ExtendedMetaData(kind="element", name="accept", namespace="##targetNamespace")
	!resolve val Code accept;

	@GenModel(documentation="The mime-type to use for RESTful operation in the 'Content-Type' header.")
	@ExtendedMetaData(kind="element", name="contentType", namespace="##targetNamespace")
	!resolve val Code contentType;

	@GenModel(documentation="The server where the request message is destined for.  Must be one of the server numbers listed in TestScript.destination section.")
	@ExtendedMetaData(kind="element", name="destination", namespace="##targetNamespace")
	!resolve val Integer destination;

	@GenModel(documentation="Whether or not to implicitly send the request url in encoded format. The default is true to match the standard RESTful client behavior. Set to false when communicating with a server that does not support encoded url paths.")
	@ExtendedMetaData(kind="element", name="encodeRequestUrl", namespace="##targetNamespace")
	!resolve val Boolean[1] encodeRequestUrl;

	@GenModel(documentation="The HTTP method the test engine MUST use for this operation regardless of any other operation details.")
	@ExtendedMetaData(kind="element", name="method", namespace="##targetNamespace")
	!resolve val TestScriptRequestMethodCode method;

	@GenModel(documentation="The server where the request message originates from.  Must be one of the server numbers listed in TestScript.origin section.")
	@ExtendedMetaData(kind="element", name="origin", namespace="##targetNamespace")
	!resolve val Integer origin;

	@GenModel(documentation="Path plus parameters after [type].  Used to set parts of the request URL explicitly.")
	@ExtendedMetaData(kind="element", name="params", namespace="##targetNamespace")
	!resolve val String params;

	@GenModel(documentation="Header elements would be used to set HTTP headers.")
	@ExtendedMetaData(kind="element", name="requestHeader", namespace="##targetNamespace")
	!resolve val TestScriptRequestHeader[*] requestHeader;

	@GenModel(documentation="The fixture id (maybe new) to map to the request.")
	@ExtendedMetaData(kind="element", name="requestId", namespace="##targetNamespace")
	!resolve val Id requestId;

	@GenModel(documentation="The fixture id (maybe new) to map to the response.")
	@ExtendedMetaData(kind="element", name="responseId", namespace="##targetNamespace")
	!resolve val Id responseId;

	@GenModel(documentation="The id of the fixture used as the body of a PUT or POST request.")
	@ExtendedMetaData(kind="element", name="sourceId", namespace="##targetNamespace")
	!resolve val Id sourceId;

	@GenModel(documentation="Id of fixture used for extracting the [id],  [type], and [vid] for GET requests.")
	@ExtendedMetaData(kind="element", name="targetId", namespace="##targetNamespace")
	!resolve val Id targetId;

	@GenModel(documentation="Complete request URL.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val String url;
}

@GenModel(documentation="A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.")
@ExtendedMetaData(name="TestScript.Origin", kind="elementOnly")
class TestScriptOrigin extends BackboneElement {

	@GenModel(documentation="Abstract name given to an origin server in this test script.  The name is provided as a number starting at 1.")
	@ExtendedMetaData(kind="element", name="index", namespace="##targetNamespace")
	!resolve val Integer[1] index;

	@GenModel(documentation="The type of origin profile the test system supports.")
	@ExtendedMetaData(kind="element", name="profile", namespace="##targetNamespace")
	!resolve val Coding[1] profile;

	@GenModel(documentation="The explicit url path of the origin server used in this test script.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Url url;
}

@GenModel(documentation="A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.")
@ExtendedMetaData(name="TestScript.RequestHeader", kind="elementOnly")
class TestScriptRequestHeader extends BackboneElement {

	@GenModel(documentation="The HTTP header field e.g. \"Accept\".")
	@ExtendedMetaData(kind="element", name="field", namespace="##targetNamespace")
	!resolve val String[1] field;

	@GenModel(documentation="The value of the header e.g. \"application/fhir+xml\".")
	@ExtendedMetaData(kind="element", name="value", namespace="##targetNamespace")
	!resolve val String[1] value;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="TestScriptRequestMethodCode", kind="elementOnly")
class TestScriptRequestMethodCode extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr TestScriptRequestMethodCodeEnum value;
}

@ExtendedMetaData(name="TestScriptRequestMethodCodeEnum")
enum TestScriptRequestMethodCodeEnum {

	@GenModel(documentation="DELETE")
	delete = 0;

	@GenModel(documentation="GET")
	get = 1;

	@GenModel(documentation="OPTIONS")
	options = 2;

	@GenModel(documentation="PATCH")
	patch = 3;

	@GenModel(documentation="POST")
	post = 4;

	@GenModel(documentation="PUT")
	put = 5;

	@GenModel(documentation="HEAD")
	head = 6;
}

@ExtendedMetaData(name="TestScriptRequestMethodCodeEnum:Object", baseType="TestScriptRequestMethodCodeEnum")
datatype TestScriptRequestMethodCodeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.")
@ExtendedMetaData(name="TestScript.Requirement", kind="elementOnly")
class TestScriptRequirement extends BackboneElement {

	@ExtendedMetaData(kind="element", name="linkUri", namespace="##targetNamespace")
	!resolve val Uri linkUri;

	@ExtendedMetaData(kind="element", name="linkCanonical", namespace="##targetNamespace")
	!resolve val Canonical linkCanonical;
}

@GenModel(documentation="A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.")
@ExtendedMetaData(name="TestScript.Scope", kind="elementOnly")
class TestScriptScope extends BackboneElement {

	@GenModel(documentation="The specific conformance artifact being tested. The canonical reference can be version-specific.")
	@ExtendedMetaData(kind="element", name="artifact", namespace="##targetNamespace")
	!resolve val Canonical[1] artifact;

	@GenModel(documentation="The expectation of whether the test must pass for the system to be considered conformant with the artifact: required - all tests are expected to pass, optional - all test are expected to pass but non-pass status may be allowed, strict - all tests are expected to pass and warnings are treated as a failure.")
	@ExtendedMetaData(kind="element", name="conformance", namespace="##targetNamespace")
	!resolve val CodeableConcept conformance;

	@GenModel(documentation="The phase of testing for this artifact: unit - development / implementation phase, integration - internal system to system phase, production - live system to system phase (Note, this may involve pii/phi data).")
	@ExtendedMetaData(kind="element", name="phase", namespace="##targetNamespace")
	!resolve val CodeableConcept phase;
}

@GenModel(documentation="A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.")
@ExtendedMetaData(name="TestScript.Setup", kind="elementOnly")
class TestScriptSetup extends BackboneElement {

	@GenModel(documentation="Action would contain either an operation or an assertion.")
	@ExtendedMetaData(kind="element", name="action", namespace="##targetNamespace")
	!resolve val TestScriptAction[+] action;
}

@GenModel(documentation="A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.")
@ExtendedMetaData(name="TestScript.Teardown", kind="elementOnly")
class TestScriptTeardown extends BackboneElement {

	@GenModel(documentation="The teardown action will only contain an operation.")
	@ExtendedMetaData(kind="element", name="action", namespace="##targetNamespace")
	!resolve val TestScriptAction2[+] action;
}

@GenModel(documentation="A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.")
@ExtendedMetaData(name="TestScript.Test", kind="elementOnly")
class TestScriptTest extends BackboneElement {

	@GenModel(documentation="The name of this test used for tracking/logging purposes by test engines.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="A short description of the test used by test engines for tracking and reporting purposes.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val String description;

	@GenModel(documentation="Action would contain either an operation or an assertion.")
	@ExtendedMetaData(kind="element", name="action", namespace="##targetNamespace")
	!resolve val TestScriptAction1[+] action;
}

@GenModel(documentation="A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.")
@ExtendedMetaData(name="TestScript.Variable", kind="elementOnly")
class TestScriptVariable extends BackboneElement {

	@GenModel(documentation="Descriptive name for this variable.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String[1] name;

	@GenModel(documentation="A default, hard-coded, or user-defined value for this variable.")
	@ExtendedMetaData(kind="element", name="defaultValue", namespace="##targetNamespace")
	!resolve val String defaultValue;

	@GenModel(documentation="A free text natural language description of the variable and its purpose.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val String description;

	@GenModel(documentation="The FHIRPath expression for a specific value to evaluate against the fixture body. When variables are defined, only one of either expression, headerField or path must be specified.")
	@ExtendedMetaData(kind="element", name="expression", namespace="##targetNamespace")
	!resolve val String expression;

	@GenModel(documentation="Will be used to grab the HTTP header field value from the headers that sourceId is pointing to.")
	@ExtendedMetaData(kind="element", name="headerField", namespace="##targetNamespace")
	!resolve val String headerField;

	@GenModel(documentation="Displayable text string with hint help information to the user when entering a default value.")
	@ExtendedMetaData(kind="element", name="hint", namespace="##targetNamespace")
	!resolve val String hint;

	@GenModel(documentation="XPath or JSONPath to evaluate against the fixture body.  When variables are defined, only one of either expression, headerField or path must be specified.")
	@ExtendedMetaData(kind="element", name="path", namespace="##targetNamespace")
	!resolve val String path;

	@GenModel(documentation="Fixture to evaluate the XPath/JSONPath expression or the headerField  against within this variable.")
	@ExtendedMetaData(kind="element", name="sourceId", namespace="##targetNamespace")
	!resolve val Id sourceId;
}

@GenModel(documentation="A time during the day, with no date specified
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="time", kind="elementOnly")
class Time extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	attr TimePrimitive value;
}

@ExtendedMetaData(name="time-primitive", baseType="http://www.eclipse.org/emf/2003/XMLType#time", pattern="([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\.[0-9]+)?")
datatype TimePrimitive : javax.xml.datatype.XMLGregorianCalendar;

@GenModel(documentation="Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="Timing", kind="elementOnly")
class Timing extends BackboneType {

	@GenModel(documentation="Identifies specific times when the event occurs.")
	@ExtendedMetaData(kind="element", name="event", namespace="##targetNamespace")
	!resolve val DateTime[*] event;

	@GenModel(documentation="A set of rules that describe when the event is scheduled.")
	@ExtendedMetaData(kind="element", name="repeat", namespace="##targetNamespace")
	!resolve val TimingRepeat repeat;

	@GenModel(documentation="A code for the timing schedule (or just text in code.text). Some codes such as BID are ubiquitous, but many institutions define their own additional codes. If a code is provided, the code is understood to be a complete statement of whatever is specified in the structured timing data, and either the code or the data may be used to interpret the Timing, with the exception that .repeat.bounds still applies over the code (and is not contained in the code).")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;
}

@GenModel(documentation="Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="Timing.Repeat", kind="elementOnly")
class TimingRepeat extends BackboneType {

	@ExtendedMetaData(kind="element", name="boundsDuration", namespace="##targetNamespace")
	!resolve val Duration boundsDuration;

	@ExtendedMetaData(kind="element", name="boundsRange", namespace="##targetNamespace")
	!resolve val Range boundsRange;

	@ExtendedMetaData(kind="element", name="boundsPeriod", namespace="##targetNamespace")
	!resolve val Period boundsPeriod;

	@GenModel(documentation="A total count of the desired number of repetitions across the duration of the entire timing specification. If countMax is present, this element indicates the lower bound of the allowed range of count values.")
	@ExtendedMetaData(kind="element", name="count", namespace="##targetNamespace")
	!resolve val PositiveInt count;

	@GenModel(documentation="If present, indicates that the count is a range - so to perform the action between [count] and [countMax] times.")
	@ExtendedMetaData(kind="element", name="countMax", namespace="##targetNamespace")
	!resolve val PositiveInt countMax;

	@GenModel(documentation="How long this thing happens for when it happens. If durationMax is present, this element indicates the lower bound of the allowed range of the duration.")
	@ExtendedMetaData(kind="element", name="duration", namespace="##targetNamespace")
	!resolve val Decimal duration;

	@GenModel(documentation="If present, indicates that the duration is a range - so to perform the action between [duration] and [durationMax] time length.")
	@ExtendedMetaData(kind="element", name="durationMax", namespace="##targetNamespace")
	!resolve val Decimal durationMax;

	@GenModel(documentation="The units of time for the duration, in UCUM units
Normal practice is to use the 'mo' code as a calendar month when calculating the next occurrence.")
	@ExtendedMetaData(kind="element", name="durationUnit", namespace="##targetNamespace")
	!resolve val UnitsOfTime durationUnit;

	@GenModel(documentation="The number of times to repeat the action within the specified period. If frequencyMax is present, this element indicates the lower bound of the allowed range of the frequency.")
	@ExtendedMetaData(kind="element", name="frequency", namespace="##targetNamespace")
	!resolve val PositiveInt frequency;

	@GenModel(documentation="If present, indicates that the frequency is a range - so to repeat between [frequency] and [frequencyMax] times within the period or period range.")
	@ExtendedMetaData(kind="element", name="frequencyMax", namespace="##targetNamespace")
	!resolve val PositiveInt frequencyMax;

	@GenModel(documentation="Indicates the duration of time over which repetitions are to occur; e.g. to express \"3 times per day\", 3 would be the frequency and \"1 day\" would be the period. If periodMax is present, this element indicates the lower bound of the allowed range of the period length.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Decimal period;

	@GenModel(documentation="If present, indicates that the period is a range from [period] to [periodMax], allowing expressing concepts such as \"do this once every 3-5 days.")
	@ExtendedMetaData(kind="element", name="periodMax", namespace="##targetNamespace")
	!resolve val Decimal periodMax;

	@GenModel(documentation="The units of time for the period in UCUM units
Normal practice is to use the 'mo' code as a calendar month when calculating the next occurrence.")
	@ExtendedMetaData(kind="element", name="periodUnit", namespace="##targetNamespace")
	!resolve val UnitsOfTime periodUnit;

	@GenModel(documentation="If one or more days of week is provided, then the action happens only on the specified day(s).")
	@ExtendedMetaData(kind="element", name="dayOfWeek", namespace="##targetNamespace")
	!resolve val Code[*] dayOfWeek;

	@GenModel(documentation="Specified time of day for action to take place.")
	@ExtendedMetaData(kind="element", name="timeOfDay", namespace="##targetNamespace")
	!resolve val Time[*] timeOfDay;

	@GenModel(documentation="An approximate time period during the day, potentially linked to an event of daily living that indicates when the action should occur.")
	@ExtendedMetaData(kind="element", name="when", namespace="##targetNamespace")
	!resolve val EventTiming[*] when;

	@GenModel(documentation="The number of minutes from the event. If the event code does not indicate whether the minutes is before or after the event, then the offset is assumed to be after the event.")
	@ExtendedMetaData(kind="element", name="offset", namespace="##targetNamespace")
	!resolve val UnsignedInt offset;
}

@GenModel(documentation="Record of transport of item.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Transport", kind="elementOnly")
class Transport extends DomainResource {

	@GenModel(documentation="Identifier for the transport event that is used to identify it across multiple disparate systems.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The URL pointing to a *FHIR*-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Transport.")
	@ExtendedMetaData(kind="element", name="instantiatesCanonical", namespace="##targetNamespace")
	!resolve val Canonical instantiatesCanonical;

	@GenModel(documentation="The URL pointing to an *externally* maintained  protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Transport.")
	@ExtendedMetaData(kind="element", name="instantiatesUri", namespace="##targetNamespace")
	!resolve val Uri instantiatesUri;

	@GenModel(documentation="BasedOn refers to a higher-level authorization that triggered the creation of the transport.  It references a \"request\" resource such as a ServiceRequest or Transport, which is distinct from the \"request\" resource the Transport is seeking to fulfill.  This latter resource is referenced by FocusOn.  For example, based on a ServiceRequest (= BasedOn), a transport is created to fulfill a procedureRequest ( = FocusOn ) to transport a specimen to the lab.")
	@ExtendedMetaData(kind="element", name="basedOn", namespace="##targetNamespace")
	!resolve val Reference[*] basedOn;

	@GenModel(documentation="A shared identifier common to multiple independent Request instances that were activated/authorized more or less simultaneously by a single author.  The presence of the same identifier on each request ties those requests together and may have business ramifications in terms of reporting of results, billing, etc.  E.g. a requisition number shared by a set of lab tests ordered together, or a prescription number shared by all meds ordered at one time.")
	@ExtendedMetaData(kind="element", name="groupIdentifier", namespace="##targetNamespace")
	!resolve val Identifier groupIdentifier;

	@GenModel(documentation="A larger event of which this particular event is a component or step.")
	@ExtendedMetaData(kind="element", name="partOf", namespace="##targetNamespace")
	!resolve val Reference[*] partOf;

	@GenModel(documentation="A code specifying the state of the transport event.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val TransportStatus status;

	@GenModel(documentation="An explanation as to why this transport is held, failed, was refused, etc.")
	@ExtendedMetaData(kind="element", name="statusReason", namespace="##targetNamespace")
	!resolve val CodeableConcept statusReason;

	@GenModel(documentation="Indicates the \"level\" of actionability associated with the Transport, i.e. i+R[9]Cs this a proposed transport, a planned transport, an actionable transport, etc.")
	@ExtendedMetaData(kind="element", name="intent", namespace="##targetNamespace")
	!resolve val TransportIntent[1] intent;

	@GenModel(documentation="Indicates how quickly the Transport should be addressed with respect to other requests.")
	@ExtendedMetaData(kind="element", name="priority", namespace="##targetNamespace")
	!resolve val RequestPriority priority;

	@GenModel(documentation="A name or code (or both) briefly describing what the transport involves.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@GenModel(documentation="A free-text description of what is to be performed.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val String description;

	@GenModel(documentation="The request being actioned or the resource being manipulated by this transport.")
	@ExtendedMetaData(kind="element", name="focus", namespace="##targetNamespace")
	!resolve val Reference focus;

	@GenModel(documentation="The entity who benefits from the performance of the service specified in the transport (e.g., the patient).")
	@ExtendedMetaData(kind="element", name="for", namespace="##targetNamespace")
	!resolve val Reference for;

	@GenModel(documentation="The healthcare event  (e.g. a patient and healthcare provider interaction) during which this transport was created.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@GenModel(documentation="Identifies the completion time of the event (the occurrence).")
	@ExtendedMetaData(kind="element", name="completionTime", namespace="##targetNamespace")
	!resolve val DateTime completionTime;

	@GenModel(documentation="The date and time this transport was created.")
	@ExtendedMetaData(kind="element", name="authoredOn", namespace="##targetNamespace")
	!resolve val DateTime authoredOn;

	@GenModel(documentation="The date and time of last modification to this transport.")
	@ExtendedMetaData(kind="element", name="lastModified", namespace="##targetNamespace")
	!resolve val DateTime lastModified;

	@GenModel(documentation="The creator of the transport.")
	@ExtendedMetaData(kind="element", name="requester", namespace="##targetNamespace")
	!resolve val Reference requester;

	@GenModel(documentation="The kind of participant that should perform the transport.")
	@ExtendedMetaData(kind="element", name="performerType", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] performerType;

	@GenModel(documentation="Individual organization or Device currently responsible for transport execution.")
	@ExtendedMetaData(kind="element", name="owner", namespace="##targetNamespace")
	!resolve val Reference owner;

	@GenModel(documentation="Principal physical location where this transport is performed.")
	@ExtendedMetaData(kind="element", name="location", namespace="##targetNamespace")
	!resolve val Reference location;

	@GenModel(documentation="Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be relevant to the Transport.")
	@ExtendedMetaData(kind="element", name="insurance", namespace="##targetNamespace")
	!resolve val Reference[*] insurance;

	@GenModel(documentation="Free-text information captured about the transport as it progresses.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;

	@GenModel(documentation="Links to Provenance records for past versions of this Transport that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the transport.")
	@ExtendedMetaData(kind="element", name="relevantHistory", namespace="##targetNamespace")
	!resolve val Reference[*] relevantHistory;

	@GenModel(documentation="If the Transport.focus is a request resource and the transport is seeking fulfillment (i.e. is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned.")
	@ExtendedMetaData(kind="element", name="restriction", namespace="##targetNamespace")
	!resolve val TransportRestriction restriction;

	@GenModel(documentation="Additional information that may be needed in the execution of the transport.")
	@ExtendedMetaData(kind="element", name="input", namespace="##targetNamespace")
	!resolve val TransportInput[*] input;

	@GenModel(documentation="Outputs produced by the Transport.")
	@ExtendedMetaData(kind="element", name="output", namespace="##targetNamespace")
	!resolve val TransportOutput[*] output;

	@GenModel(documentation="The desired or final location for the transport.")
	@ExtendedMetaData(kind="element", name="requestedLocation", namespace="##targetNamespace")
	!resolve val Reference[1] requestedLocation;

	@GenModel(documentation="The current location for the entity to be transported.")
	@ExtendedMetaData(kind="element", name="currentLocation", namespace="##targetNamespace")
	!resolve val Reference[1] currentLocation;

	@GenModel(documentation="A resource reference indicating why this transport needs to be performed.")
	@ExtendedMetaData(kind="element", name="reason", namespace="##targetNamespace")
	!resolve val CodeableReference reason;

	@GenModel(documentation="The transport event prior to this one.")
	@ExtendedMetaData(kind="element", name="history", namespace="##targetNamespace")
	!resolve val Reference history;
}

@GenModel(documentation="Record of transport of item.")
@ExtendedMetaData(name="Transport.Input", kind="elementOnly")
class TransportInput extends BackboneElement {

	@GenModel(documentation="A code or description indicating how the input is intended to be used as part of the transport execution.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@ExtendedMetaData(kind="element", name="valueBase64Binary", namespace="##targetNamespace")
	!resolve val Base64Binary valueBase64Binary;

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;

	@ExtendedMetaData(kind="element", name="valueCanonical", namespace="##targetNamespace")
	!resolve val Canonical valueCanonical;

	@ExtendedMetaData(kind="element", name="valueCode", namespace="##targetNamespace")
	!resolve val Code valueCode;

	@ExtendedMetaData(kind="element", name="valueDate", namespace="##targetNamespace")
	!resolve val Date valueDate;

	@ExtendedMetaData(kind="element", name="valueDateTime", namespace="##targetNamespace")
	!resolve val DateTime valueDateTime;

	@ExtendedMetaData(kind="element", name="valueDecimal", namespace="##targetNamespace")
	!resolve val Decimal valueDecimal;

	@ExtendedMetaData(kind="element", name="valueId", namespace="##targetNamespace")
	!resolve val Id valueId;

	@ExtendedMetaData(kind="element", name="valueInstant", namespace="##targetNamespace")
	!resolve val Instant valueInstant;

	@ExtendedMetaData(kind="element", name="valueInteger", namespace="##targetNamespace")
	!resolve val Integer valueInteger;

	@ExtendedMetaData(kind="element", name="valueInteger64", namespace="##targetNamespace")
	!resolve val Integer64 valueInteger64;

	@ExtendedMetaData(kind="element", name="valueMarkdown", namespace="##targetNamespace")
	!resolve val Markdown valueMarkdown;

	@ExtendedMetaData(kind="element", name="valueOid", namespace="##targetNamespace")
	!resolve val Oid valueOid;

	@ExtendedMetaData(kind="element", name="valuePositiveInt", namespace="##targetNamespace")
	!resolve val PositiveInt valuePositiveInt;

	@ExtendedMetaData(kind="element", name="valueString", namespace="##targetNamespace")
	!resolve val String valueString;

	@ExtendedMetaData(kind="element", name="valueTime", namespace="##targetNamespace")
	!resolve val Time valueTime;

	@ExtendedMetaData(kind="element", name="valueUnsignedInt", namespace="##targetNamespace")
	!resolve val UnsignedInt valueUnsignedInt;

	@ExtendedMetaData(kind="element", name="valueUri", namespace="##targetNamespace")
	!resolve val Uri valueUri;

	@ExtendedMetaData(kind="element", name="valueUrl", namespace="##targetNamespace")
	!resolve val Url valueUrl;

	@ExtendedMetaData(kind="element", name="valueUuid", namespace="##targetNamespace")
	!resolve val Uuid valueUuid;

	@ExtendedMetaData(kind="element", name="valueAddress", namespace="##targetNamespace")
	!resolve val Address valueAddress;

	@ExtendedMetaData(kind="element", name="valueAge", namespace="##targetNamespace")
	!resolve val Age valueAge;

	@ExtendedMetaData(kind="element", name="valueAnnotation", namespace="##targetNamespace")
	!resolve val Annotation valueAnnotation;

	@ExtendedMetaData(kind="element", name="valueAttachment", namespace="##targetNamespace")
	!resolve val Attachment valueAttachment;

	@ExtendedMetaData(kind="element", name="valueCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept valueCodeableConcept;

	@ExtendedMetaData(kind="element", name="valueCodeableReference", namespace="##targetNamespace")
	!resolve val CodeableReference valueCodeableReference;

	@ExtendedMetaData(kind="element", name="valueCoding", namespace="##targetNamespace")
	!resolve val Coding valueCoding;

	@ExtendedMetaData(kind="element", name="valueContactPoint", namespace="##targetNamespace")
	!resolve val ContactPoint valueContactPoint;

	@ExtendedMetaData(kind="element", name="valueCount", namespace="##targetNamespace")
	!resolve val Count valueCount;

	@ExtendedMetaData(kind="element", name="valueDistance", namespace="##targetNamespace")
	!resolve val Distance valueDistance;

	@ExtendedMetaData(kind="element", name="valueDuration", namespace="##targetNamespace")
	!resolve val Duration valueDuration;

	@ExtendedMetaData(kind="element", name="valueHumanName", namespace="##targetNamespace")
	!resolve val HumanName valueHumanName;

	@ExtendedMetaData(kind="element", name="valueIdentifier", namespace="##targetNamespace")
	!resolve val Identifier valueIdentifier;

	@ExtendedMetaData(kind="element", name="valueMoney", namespace="##targetNamespace")
	!resolve val Money valueMoney;

	@ExtendedMetaData(kind="element", name="valuePeriod", namespace="##targetNamespace")
	!resolve val Period valuePeriod;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueRange", namespace="##targetNamespace")
	!resolve val Range valueRange;

	@ExtendedMetaData(kind="element", name="valueRatio", namespace="##targetNamespace")
	!resolve val Ratio valueRatio;

	@ExtendedMetaData(kind="element", name="valueRatioRange", namespace="##targetNamespace")
	!resolve val RatioRange valueRatioRange;

	@ExtendedMetaData(kind="element", name="valueReference", namespace="##targetNamespace")
	!resolve val Reference valueReference;

	@ExtendedMetaData(kind="element", name="valueSampledData", namespace="##targetNamespace")
	!resolve val SampledData valueSampledData;

	@ExtendedMetaData(kind="element", name="valueSignature", namespace="##targetNamespace")
	!resolve val Signature valueSignature;

	@ExtendedMetaData(kind="element", name="valueTiming", namespace="##targetNamespace")
	!resolve val Timing valueTiming;

	@ExtendedMetaData(kind="element", name="valueContactDetail", namespace="##targetNamespace")
	!resolve val ContactDetail valueContactDetail;

	@ExtendedMetaData(kind="element", name="valueDataRequirement", namespace="##targetNamespace")
	!resolve val DataRequirement valueDataRequirement;

	@ExtendedMetaData(kind="element", name="valueExpression", namespace="##targetNamespace")
	!resolve val Expression valueExpression;

	@ExtendedMetaData(kind="element", name="valueParameterDefinition", namespace="##targetNamespace")
	!resolve val ParameterDefinition valueParameterDefinition;

	@ExtendedMetaData(kind="element", name="valueRelatedArtifact", namespace="##targetNamespace")
	!resolve val RelatedArtifact valueRelatedArtifact;

	@ExtendedMetaData(kind="element", name="valueTriggerDefinition", namespace="##targetNamespace")
	!resolve val TriggerDefinition valueTriggerDefinition;

	@ExtendedMetaData(kind="element", name="valueUsageContext", namespace="##targetNamespace")
	!resolve val UsageContext valueUsageContext;

	@ExtendedMetaData(kind="element", name="valueAvailability", namespace="##targetNamespace")
	!resolve val Availability valueAvailability;

	@ExtendedMetaData(kind="element", name="valueExtendedContactDetail", namespace="##targetNamespace")
	!resolve val ExtendedContactDetail valueExtendedContactDetail;

	@ExtendedMetaData(kind="element", name="valueDosage", namespace="##targetNamespace")
	!resolve val Dosage valueDosage;

	@ExtendedMetaData(kind="element", name="valueMeta", namespace="##targetNamespace")
	!resolve val Meta valueMeta;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="TransportIntent", kind="elementOnly")
class TransportIntent extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr TransportIntentEnum value;
}

@ExtendedMetaData(name="TransportIntentEnum")
enum TransportIntentEnum {

	@GenModel(documentation="Unknown")
	unknown = 0;

	@GenModel(documentation="Proposal")
	proposal = 1;

	@GenModel(documentation="Plan")
	plan = 2;

	@GenModel(documentation="Order")
	order = 3;

	@GenModel(documentation="Original Order")
	originalOrder = 4;

	@GenModel(documentation="Reflex Order")
	reflexOrder = 5;

	@GenModel(documentation="Filler Order")
	fillerOrder = 6;

	@GenModel(documentation="Instance Order")
	instanceOrder = 7;

	@GenModel(documentation="Option")
	option = 8;
}

@ExtendedMetaData(name="TransportIntentEnum:Object", baseType="TransportIntentEnum")
datatype TransportIntentEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="Record of transport of item.")
@ExtendedMetaData(name="Transport.Output", kind="elementOnly")
class TransportOutput extends BackboneElement {

	@GenModel(documentation="The name of the Output parameter.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] type;

	@ExtendedMetaData(kind="element", name="valueBase64Binary", namespace="##targetNamespace")
	!resolve val Base64Binary valueBase64Binary;

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;

	@ExtendedMetaData(kind="element", name="valueCanonical", namespace="##targetNamespace")
	!resolve val Canonical valueCanonical;

	@ExtendedMetaData(kind="element", name="valueCode", namespace="##targetNamespace")
	!resolve val Code valueCode;

	@ExtendedMetaData(kind="element", name="valueDate", namespace="##targetNamespace")
	!resolve val Date valueDate;

	@ExtendedMetaData(kind="element", name="valueDateTime", namespace="##targetNamespace")
	!resolve val DateTime valueDateTime;

	@ExtendedMetaData(kind="element", name="valueDecimal", namespace="##targetNamespace")
	!resolve val Decimal valueDecimal;

	@ExtendedMetaData(kind="element", name="valueId", namespace="##targetNamespace")
	!resolve val Id valueId;

	@ExtendedMetaData(kind="element", name="valueInstant", namespace="##targetNamespace")
	!resolve val Instant valueInstant;

	@ExtendedMetaData(kind="element", name="valueInteger", namespace="##targetNamespace")
	!resolve val Integer valueInteger;

	@ExtendedMetaData(kind="element", name="valueInteger64", namespace="##targetNamespace")
	!resolve val Integer64 valueInteger64;

	@ExtendedMetaData(kind="element", name="valueMarkdown", namespace="##targetNamespace")
	!resolve val Markdown valueMarkdown;

	@ExtendedMetaData(kind="element", name="valueOid", namespace="##targetNamespace")
	!resolve val Oid valueOid;

	@ExtendedMetaData(kind="element", name="valuePositiveInt", namespace="##targetNamespace")
	!resolve val PositiveInt valuePositiveInt;

	@ExtendedMetaData(kind="element", name="valueString", namespace="##targetNamespace")
	!resolve val String valueString;

	@ExtendedMetaData(kind="element", name="valueTime", namespace="##targetNamespace")
	!resolve val Time valueTime;

	@ExtendedMetaData(kind="element", name="valueUnsignedInt", namespace="##targetNamespace")
	!resolve val UnsignedInt valueUnsignedInt;

	@ExtendedMetaData(kind="element", name="valueUri", namespace="##targetNamespace")
	!resolve val Uri valueUri;

	@ExtendedMetaData(kind="element", name="valueUrl", namespace="##targetNamespace")
	!resolve val Url valueUrl;

	@ExtendedMetaData(kind="element", name="valueUuid", namespace="##targetNamespace")
	!resolve val Uuid valueUuid;

	@ExtendedMetaData(kind="element", name="valueAddress", namespace="##targetNamespace")
	!resolve val Address valueAddress;

	@ExtendedMetaData(kind="element", name="valueAge", namespace="##targetNamespace")
	!resolve val Age valueAge;

	@ExtendedMetaData(kind="element", name="valueAnnotation", namespace="##targetNamespace")
	!resolve val Annotation valueAnnotation;

	@ExtendedMetaData(kind="element", name="valueAttachment", namespace="##targetNamespace")
	!resolve val Attachment valueAttachment;

	@ExtendedMetaData(kind="element", name="valueCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept valueCodeableConcept;

	@ExtendedMetaData(kind="element", name="valueCodeableReference", namespace="##targetNamespace")
	!resolve val CodeableReference valueCodeableReference;

	@ExtendedMetaData(kind="element", name="valueCoding", namespace="##targetNamespace")
	!resolve val Coding valueCoding;

	@ExtendedMetaData(kind="element", name="valueContactPoint", namespace="##targetNamespace")
	!resolve val ContactPoint valueContactPoint;

	@ExtendedMetaData(kind="element", name="valueCount", namespace="##targetNamespace")
	!resolve val Count valueCount;

	@ExtendedMetaData(kind="element", name="valueDistance", namespace="##targetNamespace")
	!resolve val Distance valueDistance;

	@ExtendedMetaData(kind="element", name="valueDuration", namespace="##targetNamespace")
	!resolve val Duration valueDuration;

	@ExtendedMetaData(kind="element", name="valueHumanName", namespace="##targetNamespace")
	!resolve val HumanName valueHumanName;

	@ExtendedMetaData(kind="element", name="valueIdentifier", namespace="##targetNamespace")
	!resolve val Identifier valueIdentifier;

	@ExtendedMetaData(kind="element", name="valueMoney", namespace="##targetNamespace")
	!resolve val Money valueMoney;

	@ExtendedMetaData(kind="element", name="valuePeriod", namespace="##targetNamespace")
	!resolve val Period valuePeriod;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueRange", namespace="##targetNamespace")
	!resolve val Range valueRange;

	@ExtendedMetaData(kind="element", name="valueRatio", namespace="##targetNamespace")
	!resolve val Ratio valueRatio;

	@ExtendedMetaData(kind="element", name="valueRatioRange", namespace="##targetNamespace")
	!resolve val RatioRange valueRatioRange;

	@ExtendedMetaData(kind="element", name="valueReference", namespace="##targetNamespace")
	!resolve val Reference valueReference;

	@ExtendedMetaData(kind="element", name="valueSampledData", namespace="##targetNamespace")
	!resolve val SampledData valueSampledData;

	@ExtendedMetaData(kind="element", name="valueSignature", namespace="##targetNamespace")
	!resolve val Signature valueSignature;

	@ExtendedMetaData(kind="element", name="valueTiming", namespace="##targetNamespace")
	!resolve val Timing valueTiming;

	@ExtendedMetaData(kind="element", name="valueContactDetail", namespace="##targetNamespace")
	!resolve val ContactDetail valueContactDetail;

	@ExtendedMetaData(kind="element", name="valueDataRequirement", namespace="##targetNamespace")
	!resolve val DataRequirement valueDataRequirement;

	@ExtendedMetaData(kind="element", name="valueExpression", namespace="##targetNamespace")
	!resolve val Expression valueExpression;

	@ExtendedMetaData(kind="element", name="valueParameterDefinition", namespace="##targetNamespace")
	!resolve val ParameterDefinition valueParameterDefinition;

	@ExtendedMetaData(kind="element", name="valueRelatedArtifact", namespace="##targetNamespace")
	!resolve val RelatedArtifact valueRelatedArtifact;

	@ExtendedMetaData(kind="element", name="valueTriggerDefinition", namespace="##targetNamespace")
	!resolve val TriggerDefinition valueTriggerDefinition;

	@ExtendedMetaData(kind="element", name="valueUsageContext", namespace="##targetNamespace")
	!resolve val UsageContext valueUsageContext;

	@ExtendedMetaData(kind="element", name="valueAvailability", namespace="##targetNamespace")
	!resolve val Availability valueAvailability;

	@ExtendedMetaData(kind="element", name="valueExtendedContactDetail", namespace="##targetNamespace")
	!resolve val ExtendedContactDetail valueExtendedContactDetail;

	@ExtendedMetaData(kind="element", name="valueDosage", namespace="##targetNamespace")
	!resolve val Dosage valueDosage;

	@ExtendedMetaData(kind="element", name="valueMeta", namespace="##targetNamespace")
	!resolve val Meta valueMeta;
}

@GenModel(documentation="Record of transport of item.")
@ExtendedMetaData(name="Transport.Restriction", kind="elementOnly")
class TransportRestriction extends BackboneElement {

	@GenModel(documentation="Indicates the number of times the requested action should occur.")
	@ExtendedMetaData(kind="element", name="repetitions", namespace="##targetNamespace")
	!resolve val PositiveInt repetitions;

	@GenModel(documentation="Over what time-period is fulfillment sought.")
	@ExtendedMetaData(kind="element", name="period", namespace="##targetNamespace")
	!resolve val Period period;

	@GenModel(documentation="For requests that are targeted to more than one potential recipient/target, to identify who is fulfillment is sought for.")
	@ExtendedMetaData(kind="element", name="recipient", namespace="##targetNamespace")
	!resolve val Reference[*] recipient;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="TransportStatus", kind="elementOnly")
class TransportStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr TransportStatusEnum value;
}

@ExtendedMetaData(name="TransportStatusEnum")
enum TransportStatusEnum {

	@GenModel(documentation="In Progress")
	inProgress = 0;

	@GenModel(documentation="Completed")
	completed = 1;

	@GenModel(documentation="Abandoned")
	abandoned = 2;

	@GenModel(documentation="Cancelled")
	cancelled = 3;

	@GenModel(documentation="Planned")
	planned = 4;

	@GenModel(documentation="Entered In Error")
	enteredInError = 5;
}

@ExtendedMetaData(name="TransportStatusEnum:Object", baseType="TransportStatusEnum")
datatype TransportStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="TriggerDefinition", kind="elementOnly")
class TriggerDefinition extends DataType {

	@GenModel(documentation="The type of triggering event.")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val TriggerType[1] type;

	@GenModel(documentation="A formal name for the event. This may be an absolute URI that identifies the event formally (e.g. from a trigger registry), or a simple relative URI that identifies the event in a local context.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="A code that identifies the event.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val CodeableConcept code;

	@GenModel(documentation="A reference to a SubscriptionTopic resource that defines the event. If this element is provided, no other information about the trigger definition may be supplied.")
	@ExtendedMetaData(kind="element", name="subscriptionTopic", namespace="##targetNamespace")
	!resolve val Canonical subscriptionTopic;

	@ExtendedMetaData(kind="element", name="timingTiming", namespace="##targetNamespace")
	!resolve val Timing timingTiming;

	@ExtendedMetaData(kind="element", name="timingReference", namespace="##targetNamespace")
	!resolve val Reference timingReference;

	@ExtendedMetaData(kind="element", name="timingDate", namespace="##targetNamespace")
	!resolve val Date timingDate;

	@ExtendedMetaData(kind="element", name="timingDateTime", namespace="##targetNamespace")
	!resolve val DateTime timingDateTime;

	@GenModel(documentation="The triggering data of the event (if this is a data trigger). If more than one data is requirement is specified, then all the data requirements must be true.")
	@ExtendedMetaData(kind="element", name="data", namespace="##targetNamespace")
	!resolve val DataRequirement[*] data;

	@GenModel(documentation="A boolean-valued expression that is evaluated in the context of the container of the trigger definition and returns whether or not the trigger fires.")
	@ExtendedMetaData(kind="element", name="condition", namespace="##targetNamespace")
	!resolve val Expression condition;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="TriggeredBytype", kind="elementOnly")
class TriggeredBytype extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr TriggeredBytypeEnum value;
}

@ExtendedMetaData(name="TriggeredBytypeEnum")
enum TriggeredBytypeEnum {

	@GenModel(documentation="Reflex")
	reflex = 0;

	@GenModel(documentation="Repeat (per policy)")
	repeat = 1;

	@GenModel(documentation="Re-run (per policy)")
	reRun = 2;
}

@ExtendedMetaData(name="TriggeredBytypeEnum:Object", baseType="TriggeredBytypeEnum")
datatype TriggeredBytypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="The type of trigger.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="TriggerType", kind="elementOnly")
class TriggerType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr TriggerTypeEnum value;
}

@ExtendedMetaData(name="TriggerTypeEnum")
enum TriggerTypeEnum {

	@GenModel(documentation="Named Event")
	namedEvent = 0;

	@GenModel(documentation="Periodic")
	periodic = 1;

	@GenModel(documentation="Data Changed")
	dataChanged = 2;

	@GenModel(documentation="Data Added")
	dataAdded = 3;

	@GenModel(documentation="Data Updated")
	dataModified = 4;

	@GenModel(documentation="Data Removed")
	dataRemoved = 5;

	@GenModel(documentation="Data Accessed")
	dataAccessed = 6;

	@GenModel(documentation="Data Access Ended")
	dataAccessEnded = 7;
}

@ExtendedMetaData(name="TriggerTypeEnum:Object", baseType="TriggerTypeEnum")
datatype TriggerTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="TypeDerivationRule", kind="elementOnly")
class TypeDerivationRule extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr TypeDerivationRuleEnum value;
}

@ExtendedMetaData(name="TypeDerivationRuleEnum")
enum TypeDerivationRuleEnum {

	@GenModel(documentation="Specialization")
	specialization = 0;

	@GenModel(documentation="Constraint")
	constraint = 1;
}

@ExtendedMetaData(name="TypeDerivationRuleEnum:Object", baseType="TypeDerivationRuleEnum")
datatype TypeDerivationRuleEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="TypeRestfulInteraction", kind="elementOnly")
class TypeRestfulInteraction extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr TypeRestfulInteractionEnum value;
}

@ExtendedMetaData(name="TypeRestfulInteractionEnum")
enum TypeRestfulInteractionEnum {

	@GenModel(documentation="read")
	read = 0;

	@GenModel(documentation="vread")
	vread = 1;

	@GenModel(documentation="update")
	update = 2;

	@GenModel(documentation="patch")
	patch = 3;

	@GenModel(documentation="delete")
	delete = 4;

	@GenModel(documentation="history-instance")
	historyInstance = 5;

	@GenModel(documentation="history-type")
	historyType = 6;

	@GenModel(documentation="create")
	create = 7;

	@GenModel(documentation="search-type")
	searchType = 8;
}

@ExtendedMetaData(name="TypeRestfulInteractionEnum:Object", baseType="TypeRestfulInteractionEnum")
datatype TypeRestfulInteractionEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="UDIEntryType", kind="elementOnly")
class UDIEntryType extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr UDIEntryTypeEnum value;
}

@ExtendedMetaData(name="UDIEntryTypeEnum")
enum UDIEntryTypeEnum {

	@GenModel(documentation="Barcode")
	barcode = 0;

	@GenModel(documentation="RFID")
	rfid = 1;

	@GenModel(documentation="Manual")
	manual = 2;

	@GenModel(documentation="Card")
	card = 3;

	@GenModel(documentation="Self Reported")
	selfReported = 4;

	@GenModel(documentation="Electronic Transmission")
	electronicTransmission = 5;

	@GenModel(documentation="Unknown")
	unknown = 6;
}

@ExtendedMetaData(name="UDIEntryTypeEnum:Object", baseType="UDIEntryTypeEnum")
datatype UDIEntryTypeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A unit of time (units from UCUM).
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="UnitsOfTime", kind="elementOnly")
class UnitsOfTime extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr UnitsOfTimeEnum value;
}

@ExtendedMetaData(name="UnitsOfTimeEnum")
enum UnitsOfTimeEnum {

	@GenModel(documentation="?")
	s = 0;

	@GenModel(documentation="??")
	min = 1;

	@GenModel(documentation="??")
	h = 2;

	@GenModel(documentation="?")
	d = 3;

	@GenModel(documentation="??")
	wk = 4;

	@GenModel(documentation="?")
	mo = 5;

	@GenModel(documentation="?")
	a = 6;
}

@ExtendedMetaData(name="UnitsOfTimeEnum:Object", baseType="UnitsOfTimeEnum")
datatype UnitsOfTimeEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="An integer with a value that is not negative (e.g. >= 0)
If the element is present, it must have either a @value, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="unsignedInt", kind="elementOnly")
class UnsignedInt extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	attr UnsignedIntPrimitive value;
}

@ExtendedMetaData(name="unsignedInt-primitive", baseType="http://www.eclipse.org/emf/2003/XMLType#nonNegativeInteger", pattern="[0]|([1-9][0-9]*)")
datatype UnsignedIntPrimitive : java.math.BigInteger;

@GenModel(documentation="String of characters used to identify a name or a resource
see http://en.wikipedia.org/wiki/Uniform_resource_identifier
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="uri", kind="elementOnly")
class Uri extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	attr UriPrimitive value;
}

@ExtendedMetaData(name="uri-primitive", baseType="http://www.eclipse.org/emf/2003/XMLType#anyURI", pattern="\S*")
datatype UriPrimitive : java.lang.String;

@GenModel(documentation="A URI that is a literal reference
If the element is present, it must have either a @value, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="url", kind="elementOnly")
class Url extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	attr UrlPrimitive value;
}

@ExtendedMetaData(name="url-primitive", baseType="http://www.eclipse.org/emf/2003/XMLType#anyURI", minLength="1", pattern="\S*")
datatype UrlPrimitive : java.lang.String;

@GenModel(documentation="Specifies clinical/business/etc. metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care).
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="UsageContext", kind="elementOnly")
class UsageContext extends DataType {

	@GenModel(documentation="A code that identifies the type of context being specified by this usage context.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val Coding[1] code;

	@ExtendedMetaData(kind="element", name="valueCodeableConcept", namespace="##targetNamespace")
	!resolve val CodeableConcept valueCodeableConcept;

	@ExtendedMetaData(kind="element", name="valueQuantity", namespace="##targetNamespace")
	!resolve val Quantity valueQuantity;

	@ExtendedMetaData(kind="element", name="valueRange", namespace="##targetNamespace")
	!resolve val Range valueRange;

	@ExtendedMetaData(kind="element", name="valueReference", namespace="##targetNamespace")
	!resolve val Reference valueReference;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="Use", kind="elementOnly")
class Use extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr UseEnum value;
}

@ExtendedMetaData(name="UseEnum")
enum UseEnum {

	@GenModel(documentation="Claim")
	claim = 0;

	@GenModel(documentation="Preauthorization")
	preauthorization = 1;

	@GenModel(documentation="Predetermination")
	predetermination = 2;
}

@ExtendedMetaData(name="UseEnum:Object", baseType="UseEnum")
datatype UseEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="A UUID, represented as a URI
See The Open Group, CDE 1.1 Remote Procedure Call specification, Appendix A.
If the element is present, it must have either a @value, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="uuid", kind="elementOnly")
class Uuid extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	attr UuidPrimitive value;
}

@ExtendedMetaData(name="uuid-primitive", baseType="http://www.eclipse.org/emf/2003/XMLType#anyURI", minLength="1", pattern="urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}")
datatype UuidPrimitive : java.lang.String;

@GenModel(documentation="A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) definitions and their use in [coded elements](terminologies.html).
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="ValueSet", kind="elementOnly")
class ValueSet extends MetadataResource {

	@GenModel(documentation="An absolute URI that is used to identify this value set when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which an authoritative instance of this value set is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the value set is stored on different servers.")
	@ExtendedMetaData(kind="element", name="url", namespace="##targetNamespace")
	!resolve val Uri url;

	@GenModel(documentation="A formal identifier that is used to identify this value set when it is represented in other formats, or referenced in a specification, model, design or an instance.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The identifier that is used to identify this version of the value set when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the value set author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@ExtendedMetaData(kind="element", name="versionAlgorithmString", namespace="##targetNamespace")
	!resolve val String versionAlgorithmString;

	@ExtendedMetaData(kind="element", name="versionAlgorithmCoding", namespace="##targetNamespace")
	!resolve val Coding versionAlgorithmCoding;

	@GenModel(documentation="A natural language name identifying the value set. This name should be usable as an identifier for the module by machine processing applications such as code generation.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String name;

	@GenModel(documentation="A short, descriptive, user-friendly title for the value set.")
	@ExtendedMetaData(kind="element", name="title", namespace="##targetNamespace")
	!resolve val String title;

	@GenModel(documentation="The status of this value set. Enables tracking the life-cycle of the content. The status of the value set applies to the value set definition (ValueSet.compose) and the associated ValueSet metadata. Expansions do not have a state.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val PublicationStatus[1] status;

	@GenModel(documentation="A Boolean value to indicate that this value set is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.")
	@ExtendedMetaData(kind="element", name="experimental", namespace="##targetNamespace")
	!resolve val Boolean experimental;

	@GenModel(documentation="The date (and optionally time) when the value set metadata or content logical definition (.compose) was created or revised.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val DateTime date;

	@GenModel(documentation="The name of the organization or individual responsible for the release and ongoing maintenance of the value set.")
	@ExtendedMetaData(kind="element", name="publisher", namespace="##targetNamespace")
	!resolve val String publisher;

	@GenModel(documentation="Contact details to assist a user in finding and communicating with the publisher.")
	@ExtendedMetaData(kind="element", name="contact", namespace="##targetNamespace")
	!resolve val ContactDetail[*] contact;

	@GenModel(documentation="A free text natural language description of the value set from a consumer's perspective. The textual description specifies the span of meanings for concepts to be included within the Value Set Expansion, and also may specify the intended use and limitations of the Value Set.")
	@ExtendedMetaData(kind="element", name="description", namespace="##targetNamespace")
	!resolve val Markdown description;

	@GenModel(documentation="The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate value set instances.")
	@ExtendedMetaData(kind="element", name="useContext", namespace="##targetNamespace")
	!resolve val UsageContext[*] useContext;

	@GenModel(documentation="A legal or geographic region in which the value set is intended to be used.")
	@ExtendedMetaData(kind="element", name="jurisdiction", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] jurisdiction;

	@GenModel(documentation="If this is set to 'true', then no new versions of the content logical definition can be created.  Note: Other metadata might still change.")
	@ExtendedMetaData(kind="element", name="immutable", namespace="##targetNamespace")
	!resolve val Boolean immutable;

	@GenModel(documentation="Explanation of why this value set is needed and why it has been designed as it has.")
	@ExtendedMetaData(kind="element", name="purpose", namespace="##targetNamespace")
	!resolve val Markdown purpose;

	@GenModel(documentation="A copyright statement relating to the value set and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the value set.")
	@ExtendedMetaData(kind="element", name="copyright", namespace="##targetNamespace")
	!resolve val Markdown copyright;

	@GenModel(documentation="A short string (<50 characters), suitable for inclusion in a page footer that identifies the copyright holder, effective period, and optionally whether rights are resctricted. (e.g. 'All rights reserved', 'Some rights reserved').")
	@ExtendedMetaData(kind="element", name="copyrightLabel", namespace="##targetNamespace")
	!resolve val String copyrightLabel;

	@GenModel(documentation="The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.")
	@ExtendedMetaData(kind="element", name="approvalDate", namespace="##targetNamespace")
	!resolve val Date approvalDate;

	@GenModel(documentation="The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.")
	@ExtendedMetaData(kind="element", name="lastReviewDate", namespace="##targetNamespace")
	!resolve val Date lastReviewDate;

	@GenModel(documentation="The period during which the ValueSet content was or is planned to be in active use.")
	@ExtendedMetaData(kind="element", name="effectivePeriod", namespace="##targetNamespace")
	!resolve val Period effectivePeriod;

	@GenModel(documentation="Descriptions related to the content of the ValueSet. Topics provide a high-level categorization as well as keywords for the ValueSet that can be useful for filtering and searching.")
	@ExtendedMetaData(kind="element", name="topic", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] topic;

	@GenModel(documentation="An individiual or organization primarily involved in the creation and maintenance of the ValueSet.")
	@ExtendedMetaData(kind="element", name="author", namespace="##targetNamespace")
	!resolve val ContactDetail[*] author;

	@GenModel(documentation="An individual or organization primarily responsible for internal coherence of the ValueSet.")
	@ExtendedMetaData(kind="element", name="editor", namespace="##targetNamespace")
	!resolve val ContactDetail[*] editor;

	@GenModel(documentation="An individual or organization asserted by the publisher to be primarily responsible for review of some aspect of the ValueSet.")
	@ExtendedMetaData(kind="element", name="reviewer", namespace="##targetNamespace")
	!resolve val ContactDetail[*] reviewer;

	@GenModel(documentation="An individual or organization asserted by the publisher to be responsible for officially endorsing the ValueSet for use in some setting.")
	@ExtendedMetaData(kind="element", name="endorser", namespace="##targetNamespace")
	!resolve val ContactDetail[*] endorser;

	@GenModel(documentation="Related artifacts such as additional documentation, justification, dependencies, bibliographic references, and predecessor and successor artifacts.")
	@ExtendedMetaData(kind="element", name="relatedArtifact", namespace="##targetNamespace")
	!resolve val RelatedArtifact[*] relatedArtifact;

	@GenModel(documentation="A set of criteria that define the contents of the value set by including or excluding codes selected from the specified code system(s) that the value set draws from. This is also known as the Content Logical Definition (CLD).")
	@ExtendedMetaData(kind="element", name="compose", namespace="##targetNamespace")
	!resolve val ValueSetCompose compose;

	@GenModel(documentation="A value set can also be \"expanded\", where the value set is turned into a simple collection of enumerated codes. This element holds the expansion, if it has been performed.")
	@ExtendedMetaData(kind="element", name="expansion", namespace="##targetNamespace")
	!resolve val ValueSetExpansion expansion;

	@GenModel(documentation="Description of the semantic space the Value Set Expansion is intended to cover and should further clarify the text in ValueSet.description.")
	@ExtendedMetaData(kind="element", name="scope", namespace="##targetNamespace")
	!resolve val ValueSetScope scope;
}

@GenModel(documentation="A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) definitions and their use in [coded elements](terminologies.html).")
@ExtendedMetaData(name="ValueSet.Compose", kind="elementOnly")
class ValueSetCompose extends BackboneElement {

	@GenModel(documentation="The Locked Date is  the effective date that is used to determine the version of all referenced Code Systems and Value Set Definitions included in the compose that are not already tied to a specific version.")
	@ExtendedMetaData(kind="element", name="lockedDate", namespace="##targetNamespace")
	!resolve val Date lockedDate;

	@GenModel(documentation="Whether inactive codes - codes that are not approved for current use - are in the value set. If inactive = true, inactive codes are to be included in the expansion, if inactive = false, the inactive codes will not be included in the expansion. If absent, the behavior is determined by the implementation, or by the applicable $expand parameters (but generally, inactive codes would be expected to be included).")
	@ExtendedMetaData(kind="element", name="inactive", namespace="##targetNamespace")
	!resolve val Boolean inactive;

	@GenModel(documentation="Include one or more codes from a code system or other value set(s).")
	@ExtendedMetaData(kind="element", name="include", namespace="##targetNamespace")
	!resolve val ValueSetInclude[+] include;

	@GenModel(documentation="Exclude one or more codes from the value set based on code system filters and/or other value sets.")
	@ExtendedMetaData(kind="element", name="exclude", namespace="##targetNamespace")
	!resolve val ValueSetInclude[*] exclude;

	@GenModel(documentation="A property to return in the expansion, if the client doesn't ask for any particular properties. May be either a code from the code system definition (convenient) or a the formal URI that refers to the property. The special value '*' means all properties known to the server.")
	@ExtendedMetaData(kind="element", name="property", namespace="##targetNamespace")
	!resolve val String[*] property;
}

@GenModel(documentation="A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) definitions and their use in [coded elements](terminologies.html).")
@ExtendedMetaData(name="ValueSet.Concept", kind="elementOnly")
class ValueSetConcept extends BackboneElement {

	@GenModel(documentation="Specifies a code for the concept to be included or excluded.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val Code[1] code;

	@GenModel(documentation="The text to display to the user for this concept in the context of this valueset. If no display is provided, then applications using the value set use the display specified for the code by the system.")
	@ExtendedMetaData(kind="element", name="display", namespace="##targetNamespace")
	!resolve val String display;

	@GenModel(documentation="Additional representations for this concept when used in this value set - other languages, aliases, specialized purposes, used for particular purposes, etc.")
	@ExtendedMetaData(kind="element", name="designation", namespace="##targetNamespace")
	!resolve val ValueSetDesignation[*] designation;
}

@GenModel(documentation="A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) definitions and their use in [coded elements](terminologies.html).")
@ExtendedMetaData(name="ValueSet.Contains", kind="elementOnly")
class ValueSetContains extends BackboneElement {

	@GenModel(documentation="An absolute URI which is the code system in which the code for this item in the expansion is defined.")
	@ExtendedMetaData(kind="element", name="system", namespace="##targetNamespace")
	!resolve val Uri system;

	@GenModel(documentation="If true, this entry is included in the expansion for navigational purposes, and the user cannot select the code directly as a proper value.")
	@ExtendedMetaData(kind="element", name="abstract", namespace="##targetNamespace")
	!resolve val Boolean ~abstract;

	@GenModel(documentation="If the concept is inactive in the code system that defines it. Inactive codes are those that are no longer to be used, but are maintained by the code system for understanding legacy data. It might not be known or specified whether a concept is inactive (and it may depend on the context of use).")
	@ExtendedMetaData(kind="element", name="inactive", namespace="##targetNamespace")
	!resolve val Boolean inactive;

	@GenModel(documentation="The version of the code system from this code was taken. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@GenModel(documentation="The code for this item in the expansion hierarchy. If this code is missing the entry in the hierarchy is a place holder (abstract) and does not represent a valid code in the value set.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val Code code;

	@GenModel(documentation="The recommended display for this item in the expansion.")
	@ExtendedMetaData(kind="element", name="display", namespace="##targetNamespace")
	!resolve val String display;

	@GenModel(documentation="Additional representations for this item - other languages, aliases, specialized purposes, used for particular purposes, etc. These are relevant when the conditions of the expansion do not fix to a single correct representation.")
	@ExtendedMetaData(kind="element", name="designation", namespace="##targetNamespace")
	!resolve val ValueSetDesignation[*] designation;

	@GenModel(documentation="A property value for this concept.")
	@ExtendedMetaData(kind="element", name="property", namespace="##targetNamespace")
	!resolve val ValueSetProperty1[*] property;

	@GenModel(documentation="Other codes and entries contained under this entry in the hierarchy.")
	@ExtendedMetaData(kind="element", name="contains", namespace="##targetNamespace")
	!resolve val ValueSetContains[*] contains;
}

@GenModel(documentation="A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) definitions and their use in [coded elements](terminologies.html).")
@ExtendedMetaData(name="ValueSet.Designation", kind="elementOnly")
class ValueSetDesignation extends BackboneElement {

	@GenModel(documentation="The language this designation is defined for.")
	@ExtendedMetaData(kind="element", name="language", namespace="##targetNamespace")
	!resolve val Code language;

	@GenModel(documentation="A code that represents types of uses of designations.")
	@ExtendedMetaData(kind="element", name="use", namespace="##targetNamespace")
	!resolve val Coding use;

	@GenModel(documentation="Additional codes that detail how this designation would be used, if there is more than one use.")
	@ExtendedMetaData(kind="element", name="additionalUse", namespace="##targetNamespace")
	!resolve val Coding[*] additionalUse;

	@GenModel(documentation="The text value for this designation.")
	@ExtendedMetaData(kind="element", name="value", namespace="##targetNamespace")
	!resolve val String[1] value;
}

@GenModel(documentation="A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) definitions and their use in [coded elements](terminologies.html).")
@ExtendedMetaData(name="ValueSet.Expansion", kind="elementOnly")
class ValueSetExpansion extends BackboneElement {

	@GenModel(documentation="An identifier that uniquely identifies this expansion of the valueset, based on a unique combination of the provided parameters, the system default parameters, and the underlying system code system versions etc. Systems may re-use the same identifier as long as those factors remain the same, and the expansion is the same, but are not required to do so. This is a business identifier.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Uri identifier;

	@GenModel(documentation="As per paging Search results, the next URLs are opaque to the client, have no dictated structure, and only the server understands them.")
	@ExtendedMetaData(kind="element", name="next", namespace="##targetNamespace")
	!resolve val Uri next;

	@GenModel(documentation="The time at which the expansion was produced by the expanding system.")
	@ExtendedMetaData(kind="element", name="timestamp", namespace="##targetNamespace")
	!resolve val DateTime[1] timestamp;

	@GenModel(documentation="The total number of concepts in the expansion. If the number of concept nodes in this resource is less than the stated number, then the server can return more using the offset parameter.")
	@ExtendedMetaData(kind="element", name="total", namespace="##targetNamespace")
	!resolve val Integer total;

	@GenModel(documentation="If paging is being used, the offset at which this resource starts.  I.e. this resource is a partial view into the expansion. If paging is not being used, this element SHALL NOT be present.")
	@ExtendedMetaData(kind="element", name="offset", namespace="##targetNamespace")
	!resolve val Integer offset;

	@GenModel(documentation="A parameter that controlled the expansion process. These parameters may be used by users of expanded value sets to check whether the expansion is suitable for a particular purpose, or to pick the correct expansion.")
	@ExtendedMetaData(kind="element", name="parameter", namespace="##targetNamespace")
	!resolve val ValueSetParameter[*] parameter;

	@GenModel(documentation="A property defines an additional slot through which additional information can be provided about a concept.")
	@ExtendedMetaData(kind="element", name="property", namespace="##targetNamespace")
	!resolve val ValueSetProperty[*] property;

	@GenModel(documentation="The codes that are contained in the value set expansion.")
	@ExtendedMetaData(kind="element", name="contains", namespace="##targetNamespace")
	!resolve val ValueSetContains[*] contains;
}

@GenModel(documentation="A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) definitions and their use in [coded elements](terminologies.html).")
@ExtendedMetaData(name="ValueSet.Filter", kind="elementOnly")
class ValueSetFilter extends BackboneElement {

	@GenModel(documentation="A code that identifies a property or a filter defined in the code system.")
	@ExtendedMetaData(kind="element", name="property", namespace="##targetNamespace")
	!resolve val Code[1] property;

	@GenModel(documentation="The kind of operation to perform as a part of the filter criteria.")
	@ExtendedMetaData(kind="element", name="op", namespace="##targetNamespace")
	!resolve val FilterOperator[1] ~op;

	@GenModel(documentation="The match value may be either a code defined by the system, or a string value, which is a regex match on the literal string of the property value  (if the filter represents a property defined in CodeSystem) or of the system filter value (if the filter represents a filter defined in CodeSystem) when the operation is 'regex', or one of the values (true and false), when the operation is 'exists'.")
	@ExtendedMetaData(kind="element", name="value", namespace="##targetNamespace")
	!resolve val String[1] value;
}

@GenModel(documentation="A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) definitions and their use in [coded elements](terminologies.html).")
@ExtendedMetaData(name="ValueSet.Include", kind="elementOnly")
class ValueSetInclude extends BackboneElement {

	@GenModel(documentation="An absolute URI which is the code system from which the selected codes come from.")
	@ExtendedMetaData(kind="element", name="system", namespace="##targetNamespace")
	!resolve val Uri system;

	@GenModel(documentation="The version of the code system that the codes are selected from, or the special version '*' for all versions.")
	@ExtendedMetaData(kind="element", name="version", namespace="##targetNamespace")
	!resolve val String version;

	@GenModel(documentation="Specifies a concept to be included or excluded.")
	@ExtendedMetaData(kind="element", name="concept", namespace="##targetNamespace")
	!resolve val ValueSetConcept[*] concept;

	@GenModel(documentation="Select concepts by specifying a matching criterion based on the properties (including relationships) defined by the system, or on filters defined by the system. If multiple filters are specified within the include, they SHALL all be true.")
	@ExtendedMetaData(kind="element", name="filter", namespace="##targetNamespace")
	!resolve val ValueSetFilter[*] filter;

	@GenModel(documentation="Selects the concepts found in this value set (based on its value set definition). This is an absolute URI that is a reference to ValueSet.url.  If multiple value sets are specified this includes the intersection of the contents of all of the referenced value sets.")
	@ExtendedMetaData(kind="element", name="valueSet", namespace="##targetNamespace")
	!resolve val Canonical[*] valueSet;

	@GenModel(documentation="A copyright statement for the specific code system asserted by the containing ValueSet.compose.include element's system value (if the associated ValueSet.compose.include.version element is not present); or the code system and version combination (if the associated ValueSet.compose.include.version element is present).")
	@ExtendedMetaData(kind="element", name="copyright", namespace="##targetNamespace")
	!resolve val String copyright;
}

@GenModel(documentation="A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) definitions and their use in [coded elements](terminologies.html).")
@ExtendedMetaData(name="ValueSet.Parameter", kind="elementOnly")
class ValueSetParameter extends BackboneElement {

	@GenModel(documentation="Name of the input parameter to the $expand operation; may be a server-assigned name for additional default or other server-supplied parameters used to control the expansion process.")
	@ExtendedMetaData(kind="element", name="name", namespace="##targetNamespace")
	!resolve val String[1] name;

	@ExtendedMetaData(kind="element", name="valueString", namespace="##targetNamespace")
	!resolve val String valueString;

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;

	@ExtendedMetaData(kind="element", name="valueInteger", namespace="##targetNamespace")
	!resolve val Integer valueInteger;

	@ExtendedMetaData(kind="element", name="valueDecimal", namespace="##targetNamespace")
	!resolve val Decimal valueDecimal;

	@ExtendedMetaData(kind="element", name="valueUri", namespace="##targetNamespace")
	!resolve val Uri valueUri;

	@ExtendedMetaData(kind="element", name="valueCode", namespace="##targetNamespace")
	!resolve val Code valueCode;

	@ExtendedMetaData(kind="element", name="valueDateTime", namespace="##targetNamespace")
	!resolve val DateTime valueDateTime;
}

@GenModel(documentation="A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) definitions and their use in [coded elements](terminologies.html).")
@ExtendedMetaData(name="ValueSet.Property", kind="elementOnly")
class ValueSetProperty extends BackboneElement {

	@GenModel(documentation="A code that is used to identify the property. The code is used in ValueSet.expansion.contains.property.code.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val Code[1] code;

	@GenModel(documentation="Reference to the formal meaning of the property. One possible source of meaning is the [Concept Properties](codesystem-concept-properties.html) code system.")
	@ExtendedMetaData(kind="element", name="uri", namespace="##targetNamespace")
	!resolve val Uri uri;
}

@GenModel(documentation="A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) definitions and their use in [coded elements](terminologies.html).")
@ExtendedMetaData(name="ValueSet.Property1", kind="elementOnly")
class ValueSetProperty1 extends BackboneElement {

	@GenModel(documentation="A code that is a reference to ValueSet.expansion.property.code.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val Code[1] code;

	@ExtendedMetaData(kind="element", name="valueCode", namespace="##targetNamespace")
	!resolve val Code valueCode;

	@ExtendedMetaData(kind="element", name="valueCoding", namespace="##targetNamespace")
	!resolve val Coding valueCoding;

	@ExtendedMetaData(kind="element", name="valueString", namespace="##targetNamespace")
	!resolve val String valueString;

	@ExtendedMetaData(kind="element", name="valueInteger", namespace="##targetNamespace")
	!resolve val Integer valueInteger;

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;

	@ExtendedMetaData(kind="element", name="valueDateTime", namespace="##targetNamespace")
	!resolve val DateTime valueDateTime;

	@ExtendedMetaData(kind="element", name="valueDecimal", namespace="##targetNamespace")
	!resolve val Decimal valueDecimal;

	@GenModel(documentation="A subproperty value for this concept.")
	@ExtendedMetaData(kind="element", name="subProperty", namespace="##targetNamespace")
	!resolve val ValueSetSubProperty[*] subProperty;
}

@GenModel(documentation="A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) definitions and their use in [coded elements](terminologies.html).")
@ExtendedMetaData(name="ValueSet.Scope", kind="elementOnly")
class ValueSetScope extends BackboneElement {

	@GenModel(documentation="Criteria describing which concepts or codes should be included and why.")
	@ExtendedMetaData(kind="element", name="inclusionCriteria", namespace="##targetNamespace")
	!resolve val String inclusionCriteria;

	@GenModel(documentation="Criteria describing which concepts or codes should be excluded and why.")
	@ExtendedMetaData(kind="element", name="exclusionCriteria", namespace="##targetNamespace")
	!resolve val String exclusionCriteria;
}

@GenModel(documentation="A ValueSet resource instance specifies a set of codes drawn from one or more code systems, intended for use in a particular context. Value sets link between [CodeSystem](codesystem.html) definitions and their use in [coded elements](terminologies.html).")
@ExtendedMetaData(name="ValueSet.SubProperty", kind="elementOnly")
class ValueSetSubProperty extends BackboneElement {

	@GenModel(documentation="A code that is a reference to ValueSet.expansion.property.code.")
	@ExtendedMetaData(kind="element", name="code", namespace="##targetNamespace")
	!resolve val Code[1] code;

	@ExtendedMetaData(kind="element", name="valueCode", namespace="##targetNamespace")
	!resolve val Code valueCode;

	@ExtendedMetaData(kind="element", name="valueCoding", namespace="##targetNamespace")
	!resolve val Coding valueCoding;

	@ExtendedMetaData(kind="element", name="valueString", namespace="##targetNamespace")
	!resolve val String valueString;

	@ExtendedMetaData(kind="element", name="valueInteger", namespace="##targetNamespace")
	!resolve val Integer valueInteger;

	@ExtendedMetaData(kind="element", name="valueBoolean", namespace="##targetNamespace")
	!resolve val Boolean valueBoolean;

	@ExtendedMetaData(kind="element", name="valueDateTime", namespace="##targetNamespace")
	!resolve val DateTime valueDateTime;

	@ExtendedMetaData(kind="element", name="valueDecimal", namespace="##targetNamespace")
	!resolve val Decimal valueDecimal;
}

@GenModel(documentation="Describes validation requirements, source(s), status and dates for one or more elements.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="VerificationResult", kind="elementOnly")
class VerificationResult extends DomainResource {

	@GenModel(documentation="A resource that was validated.")
	@ExtendedMetaData(kind="element", name="target", namespace="##targetNamespace")
	!resolve val Reference[*] target;

	@GenModel(documentation="The fhirpath location(s) within the resource that was validated.")
	@ExtendedMetaData(kind="element", name="targetLocation", namespace="##targetNamespace")
	!resolve val String[*] targetLocation;

	@GenModel(documentation="The frequency with which the target must be validated (none; initial; periodic).")
	@ExtendedMetaData(kind="element", name="need", namespace="##targetNamespace")
	!resolve val CodeableConcept need;

	@GenModel(documentation="The validation status of the target (attested; validated; in process; requires revalidation; validation failed; revalidation failed).")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val VerificationResultStatus[1] status;

	@GenModel(documentation="When the validation status was updated.")
	@ExtendedMetaData(kind="element", name="statusDate", namespace="##targetNamespace")
	!resolve val DateTime statusDate;

	@GenModel(documentation="What the target is validated against (nothing; primary source; multiple sources).")
	@ExtendedMetaData(kind="element", name="validationType", namespace="##targetNamespace")
	!resolve val CodeableConcept validationType;

	@GenModel(documentation="The primary process by which the target is validated (edit check; value set; primary source; multiple sources; standalone; in context).")
	@ExtendedMetaData(kind="element", name="validationProcess", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] validationProcess;

	@GenModel(documentation="Frequency of revalidation.")
	@ExtendedMetaData(kind="element", name="frequency", namespace="##targetNamespace")
	!resolve val Timing frequency;

	@GenModel(documentation="The date/time validation was last completed (including failed validations).")
	@ExtendedMetaData(kind="element", name="lastPerformed", namespace="##targetNamespace")
	!resolve val DateTime lastPerformed;

	@GenModel(documentation="The date when target is next validated, if appropriate.")
	@ExtendedMetaData(kind="element", name="nextScheduled", namespace="##targetNamespace")
	!resolve val Date nextScheduled;

	@GenModel(documentation="The result if validation fails (fatal; warning; record only; none).")
	@ExtendedMetaData(kind="element", name="failureAction", namespace="##targetNamespace")
	!resolve val CodeableConcept failureAction;

	@GenModel(documentation="Information about the primary source(s) involved in validation.")
	@ExtendedMetaData(kind="element", name="primarySource", namespace="##targetNamespace")
	!resolve val VerificationResultPrimarySource[*] primarySource;

	@GenModel(documentation="Information about the entity attesting to information.")
	@ExtendedMetaData(kind="element", name="attestation", namespace="##targetNamespace")
	!resolve val VerificationResultAttestation attestation;

	@GenModel(documentation="Information about the entity validating information.")
	@ExtendedMetaData(kind="element", name="validator", namespace="##targetNamespace")
	!resolve val VerificationResultValidator[*] validator;
}

@GenModel(documentation="Describes validation requirements, source(s), status and dates for one or more elements.")
@ExtendedMetaData(name="VerificationResult.Attestation", kind="elementOnly")
class VerificationResultAttestation extends BackboneElement {

	@GenModel(documentation="The individual or organization attesting to information.")
	@ExtendedMetaData(kind="element", name="who", namespace="##targetNamespace")
	!resolve val Reference who;

	@GenModel(documentation="When the who is asserting on behalf of another (organization or individual).")
	@ExtendedMetaData(kind="element", name="onBehalfOf", namespace="##targetNamespace")
	!resolve val Reference onBehalfOf;

	@GenModel(documentation="The method by which attested information was submitted/retrieved (manual; API; Push).")
	@ExtendedMetaData(kind="element", name="communicationMethod", namespace="##targetNamespace")
	!resolve val CodeableConcept communicationMethod;

	@GenModel(documentation="The date the information was attested to.")
	@ExtendedMetaData(kind="element", name="date", namespace="##targetNamespace")
	!resolve val Date date;

	@GenModel(documentation="A digital identity certificate associated with the attestation source.")
	@ExtendedMetaData(kind="element", name="sourceIdentityCertificate", namespace="##targetNamespace")
	!resolve val String sourceIdentityCertificate;

	@GenModel(documentation="A digital identity certificate associated with the proxy entity submitting attested information on behalf of the attestation source.")
	@ExtendedMetaData(kind="element", name="proxyIdentityCertificate", namespace="##targetNamespace")
	!resolve val String proxyIdentityCertificate;

	@GenModel(documentation="Signed assertion by the proxy entity indicating that they have the right to submit attested information on behalf of the attestation source.")
	@ExtendedMetaData(kind="element", name="proxySignature", namespace="##targetNamespace")
	!resolve val Signature proxySignature;

	@GenModel(documentation="Signed assertion by the attestation source that they have attested to the information.")
	@ExtendedMetaData(kind="element", name="sourceSignature", namespace="##targetNamespace")
	!resolve val Signature sourceSignature;
}

@GenModel(documentation="Describes validation requirements, source(s), status and dates for one or more elements.")
@ExtendedMetaData(name="VerificationResult.PrimarySource", kind="elementOnly")
class VerificationResultPrimarySource extends BackboneElement {

	@GenModel(documentation="Reference to the primary source.")
	@ExtendedMetaData(kind="element", name="who", namespace="##targetNamespace")
	!resolve val Reference who;

	@GenModel(documentation="Type of primary source (License Board; Primary Education; Continuing Education; Postal Service; Relationship owner; Registration Authority; legal source; issuing source; authoritative source).")
	@ExtendedMetaData(kind="element", name="type", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] type;

	@GenModel(documentation="Method for communicating with the primary source (manual; API; Push).")
	@ExtendedMetaData(kind="element", name="communicationMethod", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] communicationMethod;

	@GenModel(documentation="Status of the validation of the target against the primary source (successful; failed; unknown).")
	@ExtendedMetaData(kind="element", name="validationStatus", namespace="##targetNamespace")
	!resolve val CodeableConcept validationStatus;

	@GenModel(documentation="When the target was validated against the primary source.")
	@ExtendedMetaData(kind="element", name="validationDate", namespace="##targetNamespace")
	!resolve val DateTime validationDate;

	@GenModel(documentation="Ability of the primary source to push updates/alerts (yes; no; undetermined).")
	@ExtendedMetaData(kind="element", name="canPushUpdates", namespace="##targetNamespace")
	!resolve val CodeableConcept canPushUpdates;

	@GenModel(documentation="Type of alerts/updates the primary source can send (specific requested changes; any changes; as defined by source).")
	@ExtendedMetaData(kind="element", name="pushTypeAvailable", namespace="##targetNamespace")
	!resolve val CodeableConcept[*] pushTypeAvailable;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="VerificationResultStatus", kind="elementOnly")
class VerificationResultStatus extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr VerificationResultStatusEnum value;
}

@ExtendedMetaData(name="VerificationResultStatusEnum")
enum VerificationResultStatusEnum {

	@GenModel(documentation="Attested")
	attested = 0;

	@GenModel(documentation="Validated")
	validated = 1;

	@GenModel(documentation="In process")
	inProcess = 2;

	@GenModel(documentation="Requires revalidation")
	reqRevalid = 3;

	@GenModel(documentation="Validation failed")
	valFail = 4;

	@GenModel(documentation="Re-Validation failed")
	revalFail = 5;

	@GenModel(documentation="Entered in Error")
	enteredInError = 6;
}

@ExtendedMetaData(name="VerificationResultStatusEnum:Object", baseType="VerificationResultStatusEnum")
datatype VerificationResultStatusEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="Describes validation requirements, source(s), status and dates for one or more elements.")
@ExtendedMetaData(name="VerificationResult.Validator", kind="elementOnly")
class VerificationResultValidator extends BackboneElement {

	@GenModel(documentation="Reference to the organization validating information.")
	@ExtendedMetaData(kind="element", name="organization", namespace="##targetNamespace")
	!resolve val Reference[1] organization;

	@GenModel(documentation="A digital identity certificate associated with the validator.")
	@ExtendedMetaData(kind="element", name="identityCertificate", namespace="##targetNamespace")
	!resolve val String identityCertificate;

	@GenModel(documentation="Signed assertion by the validator that they have validated the information.")
	@ExtendedMetaData(kind="element", name="attestationSignature", namespace="##targetNamespace")
	!resolve val Signature attestationSignature;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="VersionIndependentResourceTypesAll", kind="elementOnly")
class VersionIndependentResourceTypesAll extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr VersionIndependentResourceTypesAllEnum value;
}

@ExtendedMetaData(name="VersionIndependentResourceTypesAllEnum")
enum VersionIndependentResourceTypesAllEnum {

	@GenModel(documentation="Account")
	Account = 0;

	@GenModel(documentation="ActivityDefinition")
	ActivityDefinition = 1;

	@GenModel(documentation="ActorDefinition")
	ActorDefinition = 2;

	@GenModel(documentation="AdministrableProductDefinition")
	AdministrableProductDefinition = 3;

	@GenModel(documentation="AdverseEvent")
	AdverseEvent = 4;

	@GenModel(documentation="AllergyIntolerance")
	AllergyIntolerance = 5;

	@GenModel(documentation="Appointment")
	Appointment = 6;

	@GenModel(documentation="AppointmentResponse")
	AppointmentResponse = 7;

	@GenModel(documentation="ArtifactAssessment")
	ArtifactAssessment = 8;

	@GenModel(documentation="AuditEvent")
	AuditEvent = 9;

	@GenModel(documentation="Basic")
	Basic = 10;

	@GenModel(documentation="Binary")
	Binary = 11;

	@GenModel(documentation="BiologicallyDerivedProduct")
	BiologicallyDerivedProduct = 12;

	@GenModel(documentation="BiologicallyDerivedProductDispense")
	BiologicallyDerivedProductDispense = 13;

	@GenModel(documentation="BodyStructure")
	BodyStructure = 14;

	@GenModel(documentation="Bundle")
	Bundle = 15;

	@GenModel(documentation="CanonicalResource")
	CanonicalResource = 16;

	@GenModel(documentation="CapabilityStatement")
	CapabilityStatement = 17;

	@GenModel(documentation="CarePlan")
	CarePlan = 18;

	@GenModel(documentation="CareTeam")
	CareTeam = 19;

	@GenModel(documentation="ChargeItem")
	ChargeItem = 20;

	@GenModel(documentation="ChargeItemDefinition")
	ChargeItemDefinition = 21;

	@GenModel(documentation="Citation")
	Citation = 22;

	@GenModel(documentation="Claim")
	Claim = 23;

	@GenModel(documentation="ClaimResponse")
	ClaimResponse = 24;

	@GenModel(documentation="ClinicalImpression")
	ClinicalImpression = 25;

	@GenModel(documentation="ClinicalUseDefinition")
	ClinicalUseDefinition = 26;

	@GenModel(documentation="CodeSystem")
	CodeSystem = 27;

	@GenModel(documentation="Communication")
	Communication = 28;

	@GenModel(documentation="CommunicationRequest")
	CommunicationRequest = 29;

	@GenModel(documentation="CompartmentDefinition")
	CompartmentDefinition = 30;

	@GenModel(documentation="Composition")
	Composition = 31;

	@GenModel(documentation="ConceptMap")
	ConceptMap = 32;

	@GenModel(documentation="Condition")
	Condition = 33;

	@GenModel(documentation="ConditionDefinition")
	ConditionDefinition = 34;

	@GenModel(documentation="Consent")
	Consent = 35;

	@GenModel(documentation="Contract")
	Contract = 36;

	@GenModel(documentation="Coverage")
	Coverage = 37;

	@GenModel(documentation="CoverageEligibilityRequest")
	CoverageEligibilityRequest = 38;

	@GenModel(documentation="CoverageEligibilityResponse")
	CoverageEligibilityResponse = 39;

	@GenModel(documentation="DetectedIssue")
	DetectedIssue = 40;

	@GenModel(documentation="Device")
	Device = 41;

	@GenModel(documentation="DeviceAssociation")
	DeviceAssociation = 42;

	@GenModel(documentation="DeviceDefinition")
	DeviceDefinition = 43;

	@GenModel(documentation="DeviceDispense")
	DeviceDispense = 44;

	@GenModel(documentation="DeviceMetric")
	DeviceMetric = 45;

	@GenModel(documentation="DeviceRequest")
	DeviceRequest = 46;

	@GenModel(documentation="DeviceUsage")
	DeviceUsage = 47;

	@GenModel(documentation="DiagnosticReport")
	DiagnosticReport = 48;

	@GenModel(documentation="DocumentReference")
	DocumentReference = 49;

	@GenModel(documentation="DomainResource")
	DomainResource = 50;

	@GenModel(documentation="Encounter")
	Encounter = 51;

	@GenModel(documentation="EncounterHistory")
	EncounterHistory = 52;

	@GenModel(documentation="Endpoint")
	Endpoint = 53;

	@GenModel(documentation="EnrollmentRequest")
	EnrollmentRequest = 54;

	@GenModel(documentation="EnrollmentResponse")
	EnrollmentResponse = 55;

	@GenModel(documentation="EpisodeOfCare")
	EpisodeOfCare = 56;

	@GenModel(documentation="EventDefinition")
	EventDefinition = 57;

	@GenModel(documentation="Evidence")
	Evidence = 58;

	@GenModel(documentation="EvidenceReport")
	EvidenceReport = 59;

	@GenModel(documentation="EvidenceVariable")
	EvidenceVariable = 60;

	@GenModel(documentation="ExampleScenario")
	ExampleScenario = 61;

	@GenModel(documentation="ExplanationOfBenefit")
	ExplanationOfBenefit = 62;

	@GenModel(documentation="FamilyMemberHistory")
	FamilyMemberHistory = 63;

	@GenModel(documentation="Flag")
	Flag = 64;

	@GenModel(documentation="FormularyItem")
	FormularyItem = 65;

	@GenModel(documentation="GenomicStudy")
	GenomicStudy = 66;

	@GenModel(documentation="Goal")
	Goal = 67;

	@GenModel(documentation="GraphDefinition")
	GraphDefinition = 68;

	@GenModel(documentation="Group")
	Group = 69;

	@GenModel(documentation="GuidanceResponse")
	GuidanceResponse = 70;

	@GenModel(documentation="HealthcareService")
	HealthcareService = 71;

	@GenModel(documentation="ImagingSelection")
	ImagingSelection = 72;

	@GenModel(documentation="ImagingStudy")
	ImagingStudy = 73;

	@GenModel(documentation="Immunization")
	Immunization = 74;

	@GenModel(documentation="ImmunizationEvaluation")
	ImmunizationEvaluation = 75;

	@GenModel(documentation="ImmunizationRecommendation")
	ImmunizationRecommendation = 76;

	@GenModel(documentation="ImplementationGuide")
	ImplementationGuide = 77;

	@GenModel(documentation="Ingredient")
	Ingredient = 78;

	@GenModel(documentation="InsurancePlan")
	InsurancePlan = 79;

	@GenModel(documentation="InventoryItem")
	InventoryItem = 80;

	@GenModel(documentation="InventoryReport")
	InventoryReport = 81;

	@GenModel(documentation="Invoice")
	Invoice = 82;

	@GenModel(documentation="Library")
	Library = 83;

	@GenModel(documentation="Linkage")
	Linkage = 84;

	@GenModel(documentation="List")
	List = 85;

	@GenModel(documentation="Location")
	Location = 86;

	@GenModel(documentation="ManufacturedItemDefinition")
	ManufacturedItemDefinition = 87;

	@GenModel(documentation="Measure")
	Measure = 88;

	@GenModel(documentation="MeasureReport")
	MeasureReport = 89;

	@GenModel(documentation="Medication")
	Medication = 90;

	@GenModel(documentation="MedicationAdministration")
	MedicationAdministration = 91;

	@GenModel(documentation="MedicationDispense")
	MedicationDispense = 92;

	@GenModel(documentation="MedicationKnowledge")
	MedicationKnowledge = 93;

	@GenModel(documentation="MedicationRequest")
	MedicationRequest = 94;

	@GenModel(documentation="MedicationStatement")
	MedicationStatement = 95;

	@GenModel(documentation="MedicinalProductDefinition")
	MedicinalProductDefinition = 96;

	@GenModel(documentation="MessageDefinition")
	MessageDefinition = 97;

	@GenModel(documentation="MessageHeader")
	MessageHeader = 98;

	@GenModel(documentation="MetadataResource")
	MetadataResource = 99;

	@GenModel(documentation="MolecularSequence")
	MolecularSequence = 100;

	@GenModel(documentation="NamingSystem")
	NamingSystem = 101;

	@GenModel(documentation="NutritionIntake")
	NutritionIntake = 102;

	@GenModel(documentation="NutritionOrder")
	NutritionOrder = 103;

	@GenModel(documentation="NutritionProduct")
	NutritionProduct = 104;

	@GenModel(documentation="Observation")
	Observation = 105;

	@GenModel(documentation="ObservationDefinition")
	ObservationDefinition = 106;

	@GenModel(documentation="OperationDefinition")
	OperationDefinition = 107;

	@GenModel(documentation="OperationOutcome")
	OperationOutcome = 108;

	@GenModel(documentation="Organization")
	Organization = 109;

	@GenModel(documentation="OrganizationAffiliation")
	OrganizationAffiliation = 110;

	@GenModel(documentation="PackagedProductDefinition")
	PackagedProductDefinition = 111;

	@GenModel(documentation="Parameters")
	Parameters = 112;

	@GenModel(documentation="Patient")
	Patient = 113;

	@GenModel(documentation="PaymentNotice")
	PaymentNotice = 114;

	@GenModel(documentation="PaymentReconciliation")
	PaymentReconciliation = 115;

	@GenModel(documentation="Permission")
	Permission = 116;

	@GenModel(documentation="Person")
	Person = 117;

	@GenModel(documentation="PlanDefinition")
	PlanDefinition = 118;

	@GenModel(documentation="Practitioner")
	Practitioner = 119;

	@GenModel(documentation="PractitionerRole")
	PractitionerRole = 120;

	@GenModel(documentation="Procedure")
	Procedure = 121;

	@GenModel(documentation="Provenance")
	Provenance = 122;

	@GenModel(documentation="Questionnaire")
	Questionnaire = 123;

	@GenModel(documentation="QuestionnaireResponse")
	QuestionnaireResponse = 124;

	@GenModel(documentation="RegulatedAuthorization")
	RegulatedAuthorization = 125;

	@GenModel(documentation="RelatedPerson")
	RelatedPerson = 126;

	@GenModel(documentation="RequestOrchestration")
	RequestOrchestration = 127;

	@GenModel(documentation="Requirements")
	Requirements = 128;

	@GenModel(documentation="ResearchStudy")
	ResearchStudy = 129;

	@GenModel(documentation="ResearchSubject")
	ResearchSubject = 130;

	@GenModel(documentation="Resource")
	Resource = 131;

	@GenModel(documentation="RiskAssessment")
	RiskAssessment = 132;

	@GenModel(documentation="Schedule")
	Schedule = 133;

	@GenModel(documentation="SearchParameter")
	SearchParameter = 134;

	@GenModel(documentation="ServiceRequest")
	ServiceRequest = 135;

	@GenModel(documentation="Slot")
	Slot = 136;

	@GenModel(documentation="Specimen")
	Specimen = 137;

	@GenModel(documentation="SpecimenDefinition")
	SpecimenDefinition = 138;

	@GenModel(documentation="StructureDefinition")
	StructureDefinition = 139;

	@GenModel(documentation="StructureMap")
	StructureMap = 140;

	@GenModel(documentation="Subscription")
	Subscription = 141;

	@GenModel(documentation="SubscriptionStatus")
	SubscriptionStatus = 142;

	@GenModel(documentation="SubscriptionTopic")
	SubscriptionTopic = 143;

	@GenModel(documentation="Substance")
	Substance = 144;

	@GenModel(documentation="SubstanceDefinition")
	SubstanceDefinition = 145;

	@GenModel(documentation="SubstanceNucleicAcid")
	SubstanceNucleicAcid = 146;

	@GenModel(documentation="SubstancePolymer")
	SubstancePolymer = 147;

	@GenModel(documentation="SubstanceProtein")
	SubstanceProtein = 148;

	@GenModel(documentation="SubstanceReferenceInformation")
	SubstanceReferenceInformation = 149;

	@GenModel(documentation="SubstanceSourceMaterial")
	SubstanceSourceMaterial = 150;

	@GenModel(documentation="SupplyDelivery")
	SupplyDelivery = 151;

	@GenModel(documentation="SupplyRequest")
	SupplyRequest = 152;

	@GenModel(documentation="Task")
	Task = 153;

	@GenModel(documentation="TerminologyCapabilities")
	TerminologyCapabilities = 154;

	@GenModel(documentation="TestPlan")
	TestPlan = 155;

	@GenModel(documentation="TestReport")
	TestReport = 156;

	@GenModel(documentation="TestScript")
	TestScript = 157;

	@GenModel(documentation="Transport")
	Transport = 158;

	@GenModel(documentation="ValueSet")
	ValueSet = 159;

	@GenModel(documentation="VerificationResult")
	VerificationResult = 160;

	@GenModel(documentation="VisionPrescription")
	VisionPrescription = 161;

	@GenModel(documentation="BodySite")
	BodySite = 162;

	@GenModel(documentation="CatalogEntry")
	CatalogEntry = 163;

	@GenModel(documentation="Conformance")
	Conformance = 164;

	@GenModel(documentation="DataElement")
	DataElement = 165;

	@GenModel(documentation="DeviceComponent")
	DeviceComponent = 166;

	@GenModel(documentation="DeviceUseRequest")
	DeviceUseRequest = 167;

	@GenModel(documentation="DeviceUseStatement")
	DeviceUseStatement = 168;

	@GenModel(documentation="DiagnosticOrder")
	DiagnosticOrder = 169;

	@GenModel(documentation="DocumentManifest")
	DocumentManifest = 170;

	@GenModel(documentation="EffectEvidenceSynthesis")
	EffectEvidenceSynthesis = 171;

	@GenModel(documentation="EligibilityRequest")
	EligibilityRequest = 172;

	@GenModel(documentation="EligibilityResponse")
	EligibilityResponse = 173;

	@GenModel(documentation="ExpansionProfile")
	ExpansionProfile = 174;

	@GenModel(documentation="ImagingManifest")
	ImagingManifest = 175;

	@GenModel(documentation="ImagingObjectSelection")
	ImagingObjectSelection = 176;

	@GenModel(documentation="Media")
	Media = 177;

	@GenModel(documentation="MedicationOrder")
	MedicationOrder = 178;

	@GenModel(documentation="MedicationUsage")
	MedicationUsage = 179;

	@GenModel(documentation="MedicinalProduct")
	MedicinalProduct = 180;

	@GenModel(documentation="MedicinalProductAuthorization")
	MedicinalProductAuthorization = 181;

	@GenModel(documentation="MedicinalProductContraindication")
	MedicinalProductContraindication = 182;

	@GenModel(documentation="MedicinalProductIndication")
	MedicinalProductIndication = 183;

	@GenModel(documentation="MedicinalProductIngredient")
	MedicinalProductIngredient = 184;

	@GenModel(documentation="MedicinalProductInteraction")
	MedicinalProductInteraction = 185;

	@GenModel(documentation="MedicinalProductManufactured")
	MedicinalProductManufactured = 186;

	@GenModel(documentation="MedicinalProductPackaged")
	MedicinalProductPackaged = 187;

	@GenModel(documentation="MedicinalProductPharmaceutical")
	MedicinalProductPharmaceutical = 188;

	@GenModel(documentation="MedicinalProductUndesirableEffect")
	MedicinalProductUndesirableEffect = 189;

	@GenModel(documentation="Order")
	Order = 190;

	@GenModel(documentation="OrderResponse")
	OrderResponse = 191;

	@GenModel(documentation="ProcedureRequest")
	ProcedureRequest = 192;

	@GenModel(documentation="ProcessRequest")
	ProcessRequest = 193;

	@GenModel(documentation="ProcessResponse")
	ProcessResponse = 194;

	@GenModel(documentation="ReferralRequest")
	ReferralRequest = 195;

	@GenModel(documentation="RequestGroup")
	RequestGroup = 196;

	@GenModel(documentation="ResearchDefinition")
	ResearchDefinition = 197;

	@GenModel(documentation="ResearchElementDefinition")
	ResearchElementDefinition = 198;

	@GenModel(documentation="RiskEvidenceSynthesis")
	RiskEvidenceSynthesis = 199;

	@GenModel(documentation="Sequence")
	Sequence = 200;

	@GenModel(documentation="ServiceDefinition")
	ServiceDefinition = 201;

	@GenModel(documentation="SubstanceSpecification")
	SubstanceSpecification = 202;
}

@ExtendedMetaData(name="VersionIndependentResourceTypesAllEnum:Object", baseType="VersionIndependentResourceTypesAllEnum")
datatype VersionIndependentResourceTypesAllEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="Virtual Service Contact Details.
If the element is present, it must have a value for at least one of the defined elements, an @id referenced from the Narrative, or extensions")
@ExtendedMetaData(name="VirtualServiceDetail", kind="elementOnly")
class VirtualServiceDetail extends DataType {

	@GenModel(documentation="The type of virtual service to connect to (i.e. Teams, Zoom, Specific VMR technology, WhatsApp).")
	@ExtendedMetaData(kind="element", name="channelType", namespace="##targetNamespace")
	!resolve val Coding channelType;

	@ExtendedMetaData(kind="element", name="addressUrl", namespace="##targetNamespace")
	!resolve val Url addressUrl;

	@ExtendedMetaData(kind="element", name="addressString", namespace="##targetNamespace")
	!resolve val String addressString;

	@ExtendedMetaData(kind="element", name="addressContactPoint", namespace="##targetNamespace")
	!resolve val ContactPoint addressContactPoint;

	@ExtendedMetaData(kind="element", name="addressExtendedContactDetail", namespace="##targetNamespace")
	!resolve val ExtendedContactDetail addressExtendedContactDetail;

	@GenModel(documentation="Address to see alternative connection details.")
	@ExtendedMetaData(kind="element", name="additionalInfo", namespace="##targetNamespace")
	!resolve val Url[*] additionalInfo;

	@GenModel(documentation="Maximum number of participants supported by the virtual service.")
	@ExtendedMetaData(kind="element", name="maxParticipants", namespace="##targetNamespace")
	!resolve val PositiveInt maxParticipants;

	@GenModel(documentation="Session Key required by the virtual service.")
	@ExtendedMetaData(kind="element", name="sessionKey", namespace="##targetNamespace")
	!resolve val String sessionKey;
}

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="VisionBase", kind="elementOnly")
class VisionBase extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr VisionBaseEnum value;
}

@ExtendedMetaData(name="VisionBaseEnum")
enum VisionBaseEnum {

	@GenModel(documentation="Up")
	up = 0;

	@GenModel(documentation="Down")
	down = 1;

	@GenModel(documentation="In")
	in = 2;

	@GenModel(documentation="Out")
	out = 3;
}

@ExtendedMetaData(name="VisionBaseEnum:Object", baseType="VisionBaseEnum")
datatype VisionBaseEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="VisionEyes", kind="elementOnly")
class VisionEyes extends Element {

	@ExtendedMetaData(kind="attribute", name="value")
	unsettable attr VisionEyesEnum value;
}

@ExtendedMetaData(name="VisionEyesEnum")
enum VisionEyesEnum {

	@GenModel(documentation="Right Eye")
	right = 0;

	@GenModel(documentation="Left Eye")
	left = 1;
}

@ExtendedMetaData(name="VisionEyesEnum:Object", baseType="VisionEyesEnum")
datatype VisionEyesEnumObject : org.eclipse.emf.common.util.Enumerator;

@GenModel(documentation="An authorization for the provision of glasses and/or contact lenses to a patient.
If the element is present, it must have either a @value, an @id, or extensions")
@ExtendedMetaData(name="VisionPrescription", kind="elementOnly")
class VisionPrescription extends DomainResource {

	@GenModel(documentation="A unique identifier assigned to this vision prescription.")
	@ExtendedMetaData(kind="element", name="identifier", namespace="##targetNamespace")
	!resolve val Identifier[*] identifier;

	@GenModel(documentation="The status of the resource instance.")
	@ExtendedMetaData(kind="element", name="status", namespace="##targetNamespace")
	!resolve val FinancialResourceStatusCodes[1] status;

	@GenModel(documentation="The date this resource was created.")
	@ExtendedMetaData(kind="element", name="created", namespace="##targetNamespace")
	!resolve val DateTime[1] created;

	@GenModel(documentation="A resource reference to the person to whom the vision prescription applies.")
	@ExtendedMetaData(kind="element", name="patient", namespace="##targetNamespace")
	!resolve val Reference[1] patient;

	@GenModel(documentation="A reference to a resource that identifies the particular occurrence of contact between patient and health care provider during which the prescription was issued.")
	@ExtendedMetaData(kind="element", name="encounter", namespace="##targetNamespace")
	!resolve val Reference encounter;

	@GenModel(documentation="The date (and perhaps time) when the prescription was written.")
	@ExtendedMetaData(kind="element", name="dateWritten", namespace="##targetNamespace")
	!resolve val DateTime[1] dateWritten;

	@GenModel(documentation="The healthcare professional responsible for authorizing the prescription.")
	@ExtendedMetaData(kind="element", name="prescriber", namespace="##targetNamespace")
	!resolve val Reference[1] prescriber;

	@GenModel(documentation="Contain the details of  the individual lens specifications and serves as the authorization for the fullfillment by certified professionals.")
	@ExtendedMetaData(kind="element", name="lensSpecification", namespace="##targetNamespace")
	!resolve val VisionPrescriptionLensSpecification[+] lensSpecification;
}

@GenModel(documentation="An authorization for the provision of glasses and/or contact lenses to a patient.")
@ExtendedMetaData(name="VisionPrescription.LensSpecification", kind="elementOnly")
class VisionPrescriptionLensSpecification extends BackboneElement {

	@GenModel(documentation="Identifies the type of vision correction product which is required for the patient.")
	@ExtendedMetaData(kind="element", name="product", namespace="##targetNamespace")
	!resolve val CodeableConcept[1] product;

	@GenModel(documentation="The eye for which the lens specification applies.")
	@ExtendedMetaData(kind="element", name="eye", namespace="##targetNamespace")
	!resolve val VisionEyes[1] eye;

	@GenModel(documentation="Lens power measured in dioptres (0.25 units).")
	@ExtendedMetaData(kind="element", name="sphere", namespace="##targetNamespace")
	!resolve val Decimal sphere;

	@GenModel(documentation="Power adjustment for astigmatism measured in dioptres (0.25 units).")
	@ExtendedMetaData(kind="element", name="cylinder", namespace="##targetNamespace")
	!resolve val Decimal cylinder;

	@GenModel(documentation="Adjustment for astigmatism measured in integer degrees.")
	@ExtendedMetaData(kind="element", name="axis", namespace="##targetNamespace")
	!resolve val Integer axis;

	@GenModel(documentation="Allows for adjustment on two axis.")
	@ExtendedMetaData(kind="element", name="prism", namespace="##targetNamespace")
	!resolve val VisionPrescriptionPrism[*] prism;

	@GenModel(documentation="Power adjustment for multifocal lenses measured in dioptres (0.25 units).")
	@ExtendedMetaData(kind="element", name="add", namespace="##targetNamespace")
	!resolve val Decimal add;

	@GenModel(documentation="Contact lens power measured in dioptres (0.25 units).")
	@ExtendedMetaData(kind="element", name="power", namespace="##targetNamespace")
	!resolve val Decimal power;

	@GenModel(documentation="Back curvature measured in millimetres.")
	@ExtendedMetaData(kind="element", name="backCurve", namespace="##targetNamespace")
	!resolve val Decimal backCurve;

	@GenModel(documentation="Contact lens diameter measured in millimetres.")
	@ExtendedMetaData(kind="element", name="diameter", namespace="##targetNamespace")
	!resolve val Decimal diameter;

	@GenModel(documentation="The recommended maximum wear period for the lens.")
	@ExtendedMetaData(kind="element", name="duration", namespace="##targetNamespace")
	!resolve val Quantity duration;

	@GenModel(documentation="Special color or pattern.")
	@ExtendedMetaData(kind="element", name="color", namespace="##targetNamespace")
	!resolve val String color;

	@GenModel(documentation="Brand recommendations or restrictions.")
	@ExtendedMetaData(kind="element", name="brand", namespace="##targetNamespace")
	!resolve val String brand;

	@GenModel(documentation="Notes for special requirements such as coatings and lens materials.")
	@ExtendedMetaData(kind="element", name="note", namespace="##targetNamespace")
	!resolve val Annotation[*] note;
}

@GenModel(documentation="An authorization for the provision of glasses and/or contact lenses to a patient.")
@ExtendedMetaData(name="VisionPrescription.Prism", kind="elementOnly")
class VisionPrescriptionPrism extends BackboneElement {

	@GenModel(documentation="Amount of prism to compensate for eye alignment in fractional units.")
	@ExtendedMetaData(kind="element", name="amount", namespace="##targetNamespace")
	!resolve val Decimal[1] amount;

	@GenModel(documentation="The relative base, or reference lens edge, for the prism.")
	@ExtendedMetaData(kind="element", name="base", namespace="##targetNamespace")
	!resolve val VisionBase[1] base;
}

